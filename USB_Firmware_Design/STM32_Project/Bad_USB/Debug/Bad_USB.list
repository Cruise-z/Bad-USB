
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800e510  0800e510  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6d8  0800e6d8  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6d8  0800e6d8  0001e6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6e0  0800e6e0  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6e0  0800e6e0  0001e6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6e4  0800e6e4  0001e6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800e6e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e20  2000026c  0800e954  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  2000208c  0800e954  0002208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021034  00000000  00000000  000202df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005378  00000000  00000000  00041313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  00046690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014fc  00000000  00000000  00048220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002769b  00000000  00000000  0004971c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f8d  00000000  00000000  00070db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d43f1  00000000  00000000  00096d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077e4  00000000  00000000  0016b138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0017291c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000026c 	.word	0x2000026c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e4f8 	.word	0x0800e4f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000270 	.word	0x20000270
 80001cc:	0800e4f8 	.word	0x0800e4f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_GPIO_Init+0xa8>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4a23      	ldr	r2, [pc, #140]	; (8000624 <MX_GPIO_Init+0xa8>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_GPIO_Init+0xa8>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_GPIO_Init+0xa8>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a1d      	ldr	r2, [pc, #116]	; (8000624 <MX_GPIO_Init+0xa8>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_GPIO_Init+0xa8>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_GPIO_Init+0xa8>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <MX_GPIO_Init+0xa8>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_GPIO_Init+0xa8>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2109      	movs	r1, #9
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <MX_GPIO_Init+0xac>)
 80005e0:	f001 faf4 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <MX_GPIO_Init+0xac>)
 80005fc:	f001 f97c 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000600:	2308      	movs	r3, #8
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_GPIO_Init+0xac>)
 8000618:	f001 f96e 	bl	80018f8 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000400 	.word	0x48000400

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0e2      	sub	sp, #392	; 0x188
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 ffb6 	bl	80015a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f853 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f7ff ff9f 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 fc55 	bl	8000eec <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000642:	f000 fa49 	bl	8000ad8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  MX_USB_DEVICE_Init_MSC();
 800064c:	f00c fa30 	bl	800cab0 <MX_USB_DEVICE_Init_MSC>
  W25QXX_Init();
 8000650:	f000 fd54 	bl	80010fc <W25QXX_Init>

  uint8_t Map[MapLen] = Map_Init;
 8000654:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <main+0xa0>)
 8000656:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800065a:	4611      	mov	r1, r2
 800065c:	2282      	movs	r2, #130	; 0x82
 800065e:	4618      	mov	r0, r3
 8000660:	f00d f997 	bl	800d992 <memcpy>
  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000664:	220f      	movs	r2, #15
 8000666:	2100      	movs	r1, #0
 8000668:	4819      	ldr	r0, [pc, #100]	; (80006d0 <main+0xa4>)
 800066a:	f00d f916 	bl	800d89a <memset>
  Convert2CapsMap(Map);
 800066e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f994 	bl	80009a0 <Convert2CapsMap>

  flag = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <main+0xa8>)
 8000680:	f000 f9ba 	bl	80009f8 <InterruptTrap>

	  if(flag == 1){
 8000684:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000688:	2b01      	cmp	r3, #1
 800068a:	d1f8      	bne.n	800067e <main+0x52>
		  HAL_Delay(3000);
 800068c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000690:	f000 fffc 	bl	800168c <HAL_Delay>
		  SwitchToHID();
 8000694:	f000 f89c 	bl	80007d0 <SwitchToHID>
		  char AttackStr[256];
		  strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000698:	463b      	mov	r3, r7
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <main+0xac>)
 800069c:	4618      	mov	r0, r3
 800069e:	4611      	mov	r1, r2
 80006a0:	234e      	movs	r3, #78	; 0x4e
 80006a2:	461a      	mov	r2, r3
 80006a4:	f00d f975 	bl	800d992 <memcpy>
		  SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 80006a8:	463b      	mov	r3, r7
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fd90 	bl	80001d0 <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4619      	mov	r1, r3
 80006b4:	463b      	mov	r3, r7
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <main+0xb0>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f935 	bl	8000928 <SimulateKeyStrokes>
		  flag = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

		  SwitchToMSC();
 80006c4:	f000 f897 	bl	80007f6 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 80006c8:	e7d9      	b.n	800067e <main+0x52>
 80006ca:	bf00      	nop
 80006cc:	0800e560 	.word	0x0800e560
 80006d0:	20000288 	.word	0x20000288
 80006d4:	2000029c 	.word	0x2000029c
 80006d8:	0800e510 	.word	0x0800e510
 80006dc:	200002a4 	.word	0x200002a4

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b096      	sub	sp, #88	; 0x58
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2244      	movs	r2, #68	; 0x44
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00d f8d3 	bl	800d89a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000702:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000706:	f003 f85b 	bl	80037c0 <HAL_PWREx_ControlVoltageScaling>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000710:	f000 f9dc 	bl	8000acc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000714:	f003 f836 	bl	8003784 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <SystemClock_Config+0xc0>)
 800071a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemClock_Config+0xc0>)
 8000720:	f023 0318 	bic.w	r3, r3, #24
 8000724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000728:	2314      	movs	r3, #20
 800072a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000738:	2360      	movs	r3, #96	; 0x60
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000740:	2301      	movs	r3, #1
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000748:	2318      	movs	r3, #24
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800074c:	2307      	movs	r3, #7
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4618      	mov	r0, r3
 800075e:	f003 f895 	bl	800388c <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000768:	f000 f9b0 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2303      	movs	r3, #3
 8000772:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f003 fc95 	bl	80040b4 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000790:	f000 f99c 	bl	8000acc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000794:	f004 f8a8 	bl	80048e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000798:	bf00      	nop
 800079a:	3758      	adds	r7, #88	; 0x58
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000

080007a4 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f001 fa0b 	bl	8001bcc <HAL_GPIO_WritePin>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}

080007ba <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f001 fa00 	bl	8001bcc <HAL_GPIO_WritePin>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <SwitchToHID>:

void SwitchToHID(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80007d4:	f7ff ffe6 	bl	80007a4 <SimulateUSB_unplug>
	HAL_Delay(PlugSlot);
 80007d8:	2032      	movs	r0, #50	; 0x32
 80007da:	f000 ff57 	bl	800168c <HAL_Delay>
	SimulateUSB_plugin();
 80007de:	f7ff ffec 	bl	80007ba <SimulateUSB_plugin>
	MX_TIM2_Init();
 80007e2:	f000 fb11 	bl	8000e08 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80007e6:	f00c f933 	bl	800ca50 <MX_USB_DEVICE_Init>
	HAL_Delay(PlugSlot*10);
 80007ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ee:	f000 ff4d 	bl	800168c <HAL_Delay>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <SwitchToMSC>:

void SwitchToMSC(){
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80007fa:	f7ff ffd3 	bl	80007a4 <SimulateUSB_unplug>
	HAL_Delay(PlugSlot);
 80007fe:	2032      	movs	r0, #50	; 0x32
 8000800:	f000 ff44 	bl	800168c <HAL_Delay>
	SimulateUSB_plugin();
 8000804:	f7ff ffd9 	bl	80007ba <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 8000808:	f00c f952 	bl	800cab0 <MX_USB_DEVICE_Init_MSC>
	W25QXX_Init();
 800080c:	f000 fc76 	bl	80010fc <W25QXX_Init>
	HAL_Delay(PlugSlot*10);
 8000810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000814:	f000 ff3a 	bl	800168c <HAL_Delay>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <Get_Descriptor>:

void Get_Descriptor(uint8_t ascii){
 800081c:	b580      	push	{r7, lr}
 800081e:	b0a4      	sub	sp, #144	; 0x90
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000826:	220f      	movs	r2, #15
 8000828:	2100      	movs	r1, #0
 800082a:	481e      	ldr	r0, [pc, #120]	; (80008a4 <Get_Descriptor+0x88>)
 800082c:	f00d f835 	bl	800d89a <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <Get_Descriptor+0x8c>)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4611      	mov	r1, r2
 8000838:	2282      	movs	r2, #130	; 0x82
 800083a:	4618      	mov	r0, r3
 800083c:	f00d f8a9 	bl	800d992 <memcpy>
	uint8_t pos = Map[ascii];
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	3390      	adds	r3, #144	; 0x90
 8000844:	443b      	add	r3, r7
 8000846:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 800084a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 800084e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000852:	091b      	lsrs	r3, r3, #4
 8000854:	b2db      	uxtb	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <Get_Descriptor+0x88>)
 800085a:	5c9b      	ldrb	r3, [r3, r2]
 800085c:	b25a      	sxtb	r2, r3
 800085e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	2101      	movs	r1, #1
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	b25b      	sxtb	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b259      	sxtb	r1, r3
 8000872:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000876:	091b      	lsrs	r3, r3, #4
 8000878:	b2db      	uxtb	r3, r3
 800087a:	461a      	mov	r2, r3
 800087c:	b2c9      	uxtb	r1, r1
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <Get_Descriptor+0x88>)
 8000880:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 8000882:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	2b00      	cmp	r3, #0
 800088c:	d006      	beq.n	800089c <Get_Descriptor+0x80>
		sent_buffer[0] |= 0x02;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <Get_Descriptor+0x88>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <Get_Descriptor+0x88>)
 800089a:	701a      	strb	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3790      	adds	r7, #144	; 0x90
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000288 	.word	0x20000288
 80008a8:	0800e560 	.word	0x0800e560

080008ac <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    //get key:ascii Descriptor
    Get_Descriptor(ascii);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ffaf 	bl	800081c <Get_Descriptor>
    //Ensure that this instruction is executed in uppercase environment.
//    while((recv_buffer[0]&0x02) != 0x02)
//    	HAL_Delay(1);
    //Sent Descriptor report
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008be:	220f      	movs	r2, #15
 80008c0:	4903      	ldr	r1, [pc, #12]	; (80008d0 <SimulateKeyPress+0x24>)
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <SimulateKeyPress+0x28>)
 80008c4:	f008 fc02 	bl	80090cc <USBD_CUSTOM_HID_SendReport>
//    if((recv_buffer[0]&0x02) != 0x02)
//    	NeedRollBack = 1;
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000288 	.word	0x20000288
 80008d4:	200003f0 	.word	0x200003f0

080008d8 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    //set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008dc:	220f      	movs	r2, #15
 80008de:	2100      	movs	r1, #0
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <SimulateKeyRelease+0x1c>)
 80008e2:	f00c ffda 	bl	800d89a <memset>
    //Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008e6:	220f      	movs	r2, #15
 80008e8:	4902      	ldr	r1, [pc, #8]	; (80008f4 <SimulateKeyRelease+0x1c>)
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <SimulateKeyRelease+0x20>)
 80008ec:	f008 fbee 	bl	80090cc <USBD_CUSTOM_HID_SendReport>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000288 	.word	0x20000288
 80008f8:	200003f0 	.word	0x200003f0

080008fc <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ffcf 	bl	80008ac <SimulateKeyPress>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800090e:	2023      	movs	r0, #35	; 0x23
 8000910:	f000 febc 	bl	800168c <HAL_Delay>
    SimulateKeyRelease();
 8000914:	f7ff ffe0 	bl	80008d8 <SimulateKeyRelease>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000918:	2023      	movs	r0, #35	; 0x23
 800091a:	f000 feb7 	bl	800168c <HAL_Delay>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
    for(; *cntNow < len; (*cntNow)++){
 8000934:	e025      	b.n	8000982 <SimulateKeyStrokes+0x5a>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
    	if((recv_buffer[0]&0x02) != 0x02){
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <SimulateKeyStrokes+0x70>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <SimulateKeyStrokes+0x20>
    		SimulateKeyStroke(128);
 8000942:	2080      	movs	r0, #128	; 0x80
 8000944:	f7ff ffda 	bl	80008fc <SimulateKeyStroke>
    	}
    	SimulateKeyStroke(str[*cntNow]);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffd1 	bl	80008fc <SimulateKeyStroke>
    	//Determine if RollBack is necessary
    	if(NeedRollBack == 1){
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <SimulateKeyStrokes+0x74>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d10a      	bne.n	8000978 <SimulateKeyStrokes+0x50>
    		NeedRollBack = 0;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <SimulateKeyStrokes+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
    		(*cntNow)--;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	1e5a      	subs	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]
    		SimulateKeyStroke(129);
 8000972:	2081      	movs	r0, #129	; 0x81
 8000974:	f7ff ffc2 	bl	80008fc <SimulateKeyStroke>
    for(; *cntNow < len; (*cntNow)++){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	429a      	cmp	r2, r3
 800098a:	dcd4      	bgt.n	8000936 <SimulateKeyStrokes+0xe>
    	}
    }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000298 	.word	0x20000298
 800099c:	200002a8 	.word	0x200002a8

080009a0 <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80009a8:	2341      	movs	r3, #65	; 0x41
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e01a      	b.n	80009e4 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	4413      	add	r3, r2
 80009b4:	781a      	ldrb	r2, [r3, #0]
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	440b      	add	r3, r1
 80009bc:	f022 0208 	bic.w	r2, r2, #8
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3320      	adds	r3, #32
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	3320      	adds	r3, #32
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	440b      	add	r3, r1
 80009d6:	f042 0208 	orr.w	r2, r2, #8
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	3301      	adds	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b5a      	cmp	r3, #90	; 0x5a
 80009e8:	d9e1      	bls.n	80009ae <Convert2CapsMap+0xe>
	}
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d10f      	bne.n	8000a28 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000a1e:	f000 f9f3 	bl	8000e08 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000a22:	4803      	ldr	r0, [pc, #12]	; (8000a30 <InterruptTrap+0x38>)
 8000a24:	f004 fce4 	bl	80053f0 <HAL_TIM_Base_Start_IT>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000314 	.word	0x20000314

08000a34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d133      	bne.n	8000aac <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d108      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Descriptor(128);
 8000a4c:	2080      	movs	r0, #128	; 0x80
 8000a4e:	f7ff fee5 	bl	800081c <Get_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000a52:	220f      	movs	r2, #15
 8000a54:	4919      	ldr	r1, [pc, #100]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a56:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a58:	f008 fb38 	bl	80090cc <USBD_CUSTOM_HID_SendReport>
 8000a5c:	e018      	b.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10c      	bne.n	8000a80 <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000a66:	f7ff ff37 	bl	80008d8 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10c      	bne.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e007      	b.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1c59      	adds	r1, r3, #1
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a98:	fb83 3201 	smull	r3, r2, r3, r1
 8000a9c:	17cb      	asrs	r3, r1, #31
 8000a9e:	1ad2      	subs	r2, r2, r3
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	1aca      	subs	r2, r1, r3
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000aaa:	601a      	str	r2, [r3, #0]
	}
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000314 	.word	0x20000314
 8000ab8:	200002a0 	.word	0x200002a0
 8000abc:	20000288 	.word	0x20000288
 8000ac0:	200003f0 	.word	0x200003f0
 8000ac4:	20000298 	.word	0x20000298
 8000ac8:	55555556 	.word	0x55555556

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <MX_SPI1_Init+0x78>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000af2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000af6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b0e:	2228      	movs	r2, #40	; 0x28
 8000b10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b26:	2207      	movs	r2, #7
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b32:	2208      	movs	r2, #8
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b38:	f003 ffd8 	bl	8004aec <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f7ff ffc3 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200002ac 	.word	0x200002ac
 8000b50:	40013000 	.word	0x40013000

08000b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_SPI_MspInit+0x7c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d128      	bne.n	8000bc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b80:	6613      	str	r3, [r2, #96]	; 0x60
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000ba6:	23c2      	movs	r3, #194	; 0xc2
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f000 fe98 	bl	80018f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40013000 	.word	0x40013000
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_MspInit+0x44>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 fcee 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM2_IRQHandler+0x10>)
 8000c7a:	f004 fc0d 	bl	8005498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000314 	.word	0x20000314

08000c88 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <USB_IRQHandler+0x10>)
 8000c8e:	f001 f8dd 	bl	8001e4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000ba8 	.word	0x20000ba8

08000c9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e00a      	b.n	8000cc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cae:	f3af 8000 	nop.w
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf0      	blt.n	8000cae <_read+0x12>
  }

  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e009      	b.n	8000cfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf1      	blt.n	8000ce8 <_write+0x12>
  }
  return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_close>:

int _close(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d36:	605a      	str	r2, [r3, #4]
  return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_isatty>:

int _isatty(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f00c fdc6 	bl	800d938 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20010000 	.word	0x20010000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000310 	.word	0x20000310
 8000de0:	20002090 	.word	0x20002090

08000de4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e30:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e3e:	f240 128f 	movw	r2, #399	; 0x18f
 8000e42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e52:	f004 fa75 	bl	8005340 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e5c:	f7ff fe36 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e6e:	f004 fc15 	bl	800569c <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e78:	f7ff fe28 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e8a:	f004 fdf7 	bl	8005a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e94:	f7ff fe1a 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000314 	.word	0x20000314

08000ea4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb4:	d113      	bne.n	8000ede <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_TIM_Base_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_TIM_Base_MspInit+0x44>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_TIM_Base_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	201c      	movs	r0, #28
 8000ed4:	f000 fcd9 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed8:	201c      	movs	r0, #28
 8000eda:	f000 fcf2 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <MX_USART2_UART_Init+0x5c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f30:	f004 fe28 	bl	8005b84 <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f3a:	f7ff fdc7 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000360 	.word	0x20000360
 8000f48:	40004400 	.word	0x40004400

08000f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09e      	sub	sp, #120	; 0x78
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	2254      	movs	r2, #84	; 0x54
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f00c fc94 	bl	800d89a <memset>
  if(uartHandle->Instance==USART2)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a28      	ldr	r2, [pc, #160]	; (8001018 <HAL_UART_MspInit+0xcc>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d148      	bne.n	800100e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fab7 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f94:	f7ff fd9a 	bl	8000acc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_UART_MspInit+0xd0>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	; (800101c <HAL_UART_MspInit+0xd0>)
 8000f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_UART_MspInit+0xd0>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_UART_MspInit+0xd0>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_UART_MspInit+0xd0>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_UART_MspInit+0xd0>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f000 fc87 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f000 fc75 	bl	80018f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3778      	adds	r7, #120	; 0x78
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40004400 	.word	0x40004400
 800101c:	40021000 	.word	0x40021000

08001020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f7ff fede 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f00c fc79 	bl	800d944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001052:	f7ff faeb 	bl	800062c <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001058:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8001064:	0800e6e8 	.word	0x0800e6e8
  ldr r2, =_sbss
 8001068:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 800106c:	2000208c 	.word	0x2000208c

08001070 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_IRQHandler>
	...

08001074 <SPI2_ReadWriteByte>:

//SPI1 读写一个字节
//TxData:要写入的字节
//返回值:读取到的字节
u8 SPI2_ReadWriteByte(u8 TxData)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    HAL_SPI_TransmitReceive(&hspi1,&TxData,&Rxdata,1, 1000);
 800107e:	f107 020f 	add.w	r2, r7, #15
 8001082:	1df9      	adds	r1, r7, #7
 8001084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <SPI2_ReadWriteByte+0x28>)
 800108e:	f003 fdd0 	bl	8004c32 <HAL_SPI_TransmitReceive>
    return Rxdata;          		    //返回收到的数据
 8001092:	7bfb      	ldrb	r3, [r7, #15]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200002ac 	.word	0x200002ac

080010a0 <SPI2_SetSpeed>:

void SPI2_SetSpeed(u8 SPI_BaudRatePrescaler)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
    assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//判断有效性
    __HAL_SPI_DISABLE(&hspi1);            //关闭SPI
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <SPI2_SetSpeed+0x58>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <SPI2_SetSpeed+0x58>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010b8:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1&=0XFFC7;          //位3-5清零，用来设置波特率
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <SPI2_SetSpeed+0x58>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <SPI2_SetSpeed+0x58>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80010c8:	400b      	ands	r3, r1
 80010ca:	6013      	str	r3, [r2, #0]
    hspi1.Instance->CR1|=SPI_BaudRatePrescaler;//设置SPI速度
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SPI2_SetSpeed+0x58>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <SPI2_SetSpeed+0x58>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&hspi1);             //使能SPI
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SPI2_SetSpeed+0x58>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SPI2_SetSpeed+0x58>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010ea:	601a      	str	r2, [r3, #0]

}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	200002ac 	.word	0x200002ac

080010fc <W25QXX_Init>:

//初始化SPI FLASH的IO口
void W25QXX_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
    u8 temp;
    GPIO_InitTypeDef GPIO_Initure;

//    __HAL_RCC_GPIOB_CLK_ENABLE();           //使能GPIOB时钟
     __HAL_RCC_GPIOA_CLK_ENABLE();           //使能GPIOB时钟
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <W25QXX_Init+0x9c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a24      	ldr	r2, [pc, #144]	; (8001198 <W25QXX_Init+0x9c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <W25QXX_Init+0x9c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

    //SPI1_CS_Pin
    GPIO_Initure.Pin=SPI1_CS_Pin;          	//PA4
 800111a:	2301      	movs	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 800111e:	2301      	movs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8001122:	2301      	movs	r3, #1
 8001124:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);     //初始化
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f000 fbe0 	bl	80018f8 <HAL_GPIO_Init>

    W25QXX_CS_1;			                //SPI FLASH不选中
 8001138:	2201      	movs	r2, #1
 800113a:	2101      	movs	r1, #1
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <W25QXX_Init+0xa0>)
 800113e:	f000 fd45 	bl	8001bcc <HAL_GPIO_WritePin>
//    SPI2_Init();		   			        //初始化SPI
    SPI2_SetSpeed(SPI_BAUDRATEPRESCALER_2); //设置为42M时钟,高速模式
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff ffac 	bl	80010a0 <SPI2_SetSpeed>
    W25QXX_TYPE = W25QXX_ReadID();	        //读取FLASH ID.
 8001148:	f000 f87c 	bl	8001244 <W25QXX_ReadID>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <W25QXX_Init+0xa4>)
 8001152:	801a      	strh	r2, [r3, #0]
		printf("flash_ID:%d \r\n",W25QXX_TYPE);
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <W25QXX_Init+0xa4>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <W25QXX_Init+0xa8>)
 800115c:	f00c fb48 	bl	800d7f0 <iprintf>
//    if(W25QXX_TYPE==W25Q64)                //SPI FLASH为W25Q32
//    {
        temp=W25QXX_ReadSR(3);              //读取状态寄存器3，判断地址模式
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f821 	bl	80011a8 <W25QXX_ReadSR>
 8001166:	4603      	mov	r3, r0
 8001168:	77fb      	strb	r3, [r7, #31]
        if((temp&0X01)==0)			        //如果不是4字节地址模式,则进入4字节地址模式
 800116a:	7ffb      	ldrb	r3, [r7, #31]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10c      	bne.n	800118e <W25QXX_Init+0x92>
        {
            W25QXX_CS_0; 			        //选中
 8001174:	2200      	movs	r2, #0
 8001176:	2101      	movs	r1, #1
 8001178:	4808      	ldr	r0, [pc, #32]	; (800119c <W25QXX_Init+0xa0>)
 800117a:	f000 fd27 	bl	8001bcc <HAL_GPIO_WritePin>
            SPI2_ReadWriteByte(W25X_Enable4ByteAddr);//发送进入4字节地址模式指令
 800117e:	20b7      	movs	r0, #183	; 0xb7
 8001180:	f7ff ff78 	bl	8001074 <SPI2_ReadWriteByte>
            W25QXX_CS_1;       		        //取消片选
 8001184:	2201      	movs	r2, #1
 8001186:	2101      	movs	r1, #1
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <W25QXX_Init+0xa0>)
 800118a:	f000 fd1f 	bl	8001bcc <HAL_GPIO_WritePin>
        }
//    }
}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	48000400 	.word	0x48000400
 80011a0:	20000004 	.word	0x20000004
 80011a4:	0800e5e4 	.word	0x0800e5e4

080011a8 <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
u8 W25QXX_ReadSR(u8 regno)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    u8 byte=0,command=0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73bb      	strb	r3, [r7, #14]
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d00c      	beq.n	80011da <W25QXX_ReadSR+0x32>
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	dc0d      	bgt.n	80011e0 <W25QXX_ReadSR+0x38>
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d002      	beq.n	80011ce <W25QXX_ReadSR+0x26>
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d003      	beq.n	80011d4 <W25QXX_ReadSR+0x2c>
 80011cc:	e008      	b.n	80011e0 <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 80011ce:	2305      	movs	r3, #5
 80011d0:	73fb      	strb	r3, [r7, #15]
            break;
 80011d2:	e008      	b.n	80011e6 <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 80011d4:	2335      	movs	r3, #53	; 0x35
 80011d6:	73fb      	strb	r3, [r7, #15]
            break;
 80011d8:	e005      	b.n	80011e6 <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 80011da:	2315      	movs	r3, #21
 80011dc:	73fb      	strb	r3, [r7, #15]
            break;
 80011de:	e002      	b.n	80011e6 <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;
 80011e0:	2305      	movs	r3, #5
 80011e2:	73fb      	strb	r3, [r7, #15]
            break;
 80011e4:	bf00      	nop
    }
    W25QXX_CS_0;                            //使能器件
 80011e6:	2200      	movs	r2, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <W25QXX_ReadSR+0x70>)
 80011ec:	f000 fcee 	bl	8001bcc <HAL_GPIO_WritePin>
    SPI2_ReadWriteByte(command);            //发送读取状态寄存器命令
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff3e 	bl	8001074 <SPI2_ReadWriteByte>
    byte=SPI2_ReadWriteByte(0Xff);          //读取一个字节
 80011f8:	20ff      	movs	r0, #255	; 0xff
 80011fa:	f7ff ff3b 	bl	8001074 <SPI2_ReadWriteByte>
 80011fe:	4603      	mov	r3, r0
 8001200:	73bb      	strb	r3, [r7, #14]
    W25QXX_CS_1;                            //取消片选
 8001202:	2201      	movs	r2, #1
 8001204:	2101      	movs	r1, #1
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <W25QXX_ReadSR+0x70>)
 8001208:	f000 fce0 	bl	8001bcc <HAL_GPIO_WritePin>
    return byte;
 800120c:	7bbb      	ldrb	r3, [r7, #14]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	48000400 	.word	0x48000400

0800121c <W25QXX_Write_Enable>:
    W25QXX_CS_1;                            //取消片选
}
//W25QXX写使能
//将WEL置位
void W25QXX_Write_Enable(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    W25QXX_CS_0;                            //使能器件
 8001220:	2200      	movs	r2, #0
 8001222:	2101      	movs	r1, #1
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <W25QXX_Write_Enable+0x24>)
 8001226:	f000 fcd1 	bl	8001bcc <HAL_GPIO_WritePin>
    SPI2_ReadWriteByte(W25X_WriteEnable);   //发送写使能
 800122a:	2006      	movs	r0, #6
 800122c:	f7ff ff22 	bl	8001074 <SPI2_ReadWriteByte>
    W25QXX_CS_1;                            //取消片选
 8001230:	2201      	movs	r2, #1
 8001232:	2101      	movs	r1, #1
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <W25QXX_Write_Enable+0x24>)
 8001236:	f000 fcc9 	bl	8001bcc <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	48000400 	.word	0x48000400

08001244 <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
u16 W25QXX_ReadID(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
    u16 Temp = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	80fb      	strh	r3, [r7, #6]
    W25QXX_CS_0;
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	4816      	ldr	r0, [pc, #88]	; (80012ac <W25QXX_ReadID+0x68>)
 8001254:	f000 fcba 	bl	8001bcc <HAL_GPIO_WritePin>
    SPI2_ReadWriteByte(0x90);//发送读取ID命令
 8001258:	2090      	movs	r0, #144	; 0x90
 800125a:	f7ff ff0b 	bl	8001074 <SPI2_ReadWriteByte>
    SPI2_ReadWriteByte(0x00);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff08 	bl	8001074 <SPI2_ReadWriteByte>
    SPI2_ReadWriteByte(0x00);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff ff05 	bl	8001074 <SPI2_ReadWriteByte>
    SPI2_ReadWriteByte(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff ff02 	bl	8001074 <SPI2_ReadWriteByte>
    Temp|=SPI2_ReadWriteByte(0xFF)<<8;
 8001270:	20ff      	movs	r0, #255	; 0xff
 8001272:	f7ff feff 	bl	8001074 <SPI2_ReadWriteByte>
 8001276:	4603      	mov	r3, r0
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	80fb      	strh	r3, [r7, #6]
    Temp|=SPI2_ReadWriteByte(0xFF);
 8001286:	20ff      	movs	r0, #255	; 0xff
 8001288:	f7ff fef4 	bl	8001074 <SPI2_ReadWriteByte>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	4313      	orrs	r3, r2
 8001294:	80fb      	strh	r3, [r7, #6]
    W25QXX_CS_1;
 8001296:	2201      	movs	r2, #1
 8001298:	2101      	movs	r1, #1
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <W25QXX_ReadID+0x68>)
 800129c:	f000 fc96 	bl	8001bcc <HAL_GPIO_WritePin>
    return Temp;
 80012a0:	88fb      	ldrh	r3, [r7, #6]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	48000400 	.word	0x48000400

080012b0 <SPI_FLASH_BufferRead>:
* @param   ReadAddr，读取地址
* @param   NumByteToRead，读取数据长度
* @retval 无
*/
void SPI_FLASH_BufferRead(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	4613      	mov	r3, r2
 80012bc:	80fb      	strh	r3, [r7, #6]
    /* 选择FLASH: CS低电平 */
    W25QXX_CS_0;
 80012be:	2200      	movs	r2, #0
 80012c0:	2101      	movs	r1, #1
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <SPI_FLASH_BufferRead+0x74>)
 80012c4:	f000 fc82 	bl	8001bcc <HAL_GPIO_WritePin>

    /* 发送 读 指令 */
    SPI2_ReadWriteByte(W25X_ReadData);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f7ff fed3 	bl	8001074 <SPI2_ReadWriteByte>

    /* 发送 读 地址高位 */
    SPI2_ReadWriteByte((ReadAddr & 0xFF0000) >> 16);
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fecd 	bl	8001074 <SPI2_ReadWriteByte>
    /* 发送 读 地址中位 */
    SPI2_ReadWriteByte((ReadAddr& 0xFF00) >> 8);
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fec7 	bl	8001074 <SPI2_ReadWriteByte>
    /* 发送 读 地址低位 */
    SPI2_ReadWriteByte(ReadAddr & 0xFF);
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fec2 	bl	8001074 <SPI2_ReadWriteByte>

    /* 读取数据 */
    while (NumByteToRead--) /* while there is data to be read */
 80012f0:	e009      	b.n	8001306 <SPI_FLASH_BufferRead+0x56>
    {
        /* 读取一个字节*/
        *pBuffer = SPI2_ReadWriteByte(0xFF);
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	f7ff febe 	bl	8001074 <SPI2_ReadWriteByte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	701a      	strb	r2, [r3, #0]
        /* 指向下一个字节缓冲区 */
        pBuffer++;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3301      	adds	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
    while (NumByteToRead--) /* while there is data to be read */
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	80fa      	strh	r2, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f0      	bne.n	80012f2 <SPI_FLASH_BufferRead+0x42>
    }

    /* 停止信号 FLASH: CS 高电平 */
    W25QXX_CS_1;
 8001310:	2201      	movs	r2, #1
 8001312:	2101      	movs	r1, #1
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <SPI_FLASH_BufferRead+0x74>)
 8001316:	f000 fc59 	bl	8001bcc <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	48000400 	.word	0x48000400

08001328 <SPI_FLASH_WaitForWriteEnd>:
 * @brief  等待WIP(BUSY)标志被置0，即等待到FLASH内部数据写入完毕
 * @param  none
 * @retval none
 */
void SPI_FLASH_WaitForWriteEnd(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
    u8 FLASH_Status = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]

    /* 选择 FLASH: CS 低 */
    W25QXX_CS_0;
 8001332:	2200      	movs	r2, #0
 8001334:	2101      	movs	r1, #1
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <SPI_FLASH_WaitForWriteEnd+0x40>)
 8001338:	f000 fc48 	bl	8001bcc <HAL_GPIO_WritePin>

    /* 发送 读状态寄存器 命令 */
    SPI2_ReadWriteByte(W25X_ReadStatusReg1);
 800133c:	2005      	movs	r0, #5
 800133e:	f7ff fe99 	bl	8001074 <SPI2_ReadWriteByte>

    /* 若FLASH忙碌，则等待 */
    do
    {
        /* 读取FLASH芯片的状态寄存器 */
        FLASH_Status = SPI2_ReadWriteByte(0xFF);
 8001342:	20ff      	movs	r0, #255	; 0xff
 8001344:	f7ff fe96 	bl	8001074 <SPI2_ReadWriteByte>
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
    }
    while ((FLASH_Status & WIP_Flag) == SET);  /* 正在写入标志 */
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f5      	bne.n	8001342 <SPI_FLASH_WaitForWriteEnd+0x1a>

    /* 停止信号  FLASH: CS 高 */
    W25QXX_CS_1;
 8001356:	2201      	movs	r2, #1
 8001358:	2101      	movs	r1, #1
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <SPI_FLASH_WaitForWriteEnd+0x40>)
 800135c:	f000 fc36 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	48000400 	.word	0x48000400

0800136c <SPI_FLASH_SectorErase>:
 * @brief  擦除FLASH扇区
 * @param  SectorAddr：要擦除的扇区地址
 * @retval 无
 */
void SPI_FLASH_SectorErase(u32 SectorAddr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

    /* 发送FLASH写使能命令 */
    W25QXX_Write_Enable();
 8001374:	f7ff ff52 	bl	800121c <W25QXX_Write_Enable>
    SPI_FLASH_WaitForWriteEnd();
 8001378:	f7ff ffd6 	bl	8001328 <SPI_FLASH_WaitForWriteEnd>
    /* 擦除扇区 */
    /* 选择FLASH: CS低电平 */
    W25QXX_CS_0;
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	4810      	ldr	r0, [pc, #64]	; (80013c4 <SPI_FLASH_SectorErase+0x58>)
 8001382:	f000 fc23 	bl	8001bcc <HAL_GPIO_WritePin>
    /* 发送扇区擦除指令*/
    SPI2_ReadWriteByte(W25X_SectorErase);
 8001386:	2020      	movs	r0, #32
 8001388:	f7ff fe74 	bl	8001074 <SPI2_ReadWriteByte>
    /*发送擦除扇区地址的高位*/
    SPI2_ReadWriteByte((u8)((SectorAddr)>>16));   //发送24bit地址
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe6e 	bl	8001074 <SPI2_ReadWriteByte>
    SPI2_ReadWriteByte((u8)((SectorAddr)>>8));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe68 	bl	8001074 <SPI2_ReadWriteByte>
    /* 发送擦除扇区地址的低位 */
    SPI2_ReadWriteByte(SectorAddr & 0xFF);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe63 	bl	8001074 <SPI2_ReadWriteByte>
    /* 停止信号 FLASH: CS 高电平 */
    W25QXX_CS_1;
 80013ae:	2201      	movs	r2, #1
 80013b0:	2101      	movs	r1, #1
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <SPI_FLASH_SectorErase+0x58>)
 80013b4:	f000 fc0a 	bl	8001bcc <HAL_GPIO_WritePin>
    /* 等待擦除完毕*/
    SPI_FLASH_WaitForWriteEnd();
 80013b8:	f7ff ffb6 	bl	8001328 <SPI_FLASH_WaitForWriteEnd>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	48000400 	.word	0x48000400

080013c8 <SPI_FLASH_PageWrite>:
 * @param WriteAddr，写入地址
 * @param  NumByteToWrite，写入数据长度，必须小于等于SPI_FLASH_PerWritePageSize
 * @retval 无
 */
void SPI_FLASH_PageWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	4613      	mov	r3, r2
 80013d4:	80fb      	strh	r3, [r7, #6]
    /* 发送FLASH写使能命令 */
    W25QXX_Write_Enable();
 80013d6:	f7ff ff21 	bl	800121c <W25QXX_Write_Enable>

    /* 选择FLASH: CS低电平 */
    W25QXX_CS_0;
 80013da:	2200      	movs	r2, #0
 80013dc:	2101      	movs	r1, #1
 80013de:	481b      	ldr	r0, [pc, #108]	; (800144c <SPI_FLASH_PageWrite+0x84>)
 80013e0:	f000 fbf4 	bl	8001bcc <HAL_GPIO_WritePin>
    /* 写页写指令*/
    SPI2_ReadWriteByte(W25X_PageProgram);
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff fe45 	bl	8001074 <SPI2_ReadWriteByte>
    /*发送写地址的高位*/
    SPI2_ReadWriteByte((WriteAddr & 0xFF0000) >> 16);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	0c1b      	lsrs	r3, r3, #16
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe3f 	bl	8001074 <SPI2_ReadWriteByte>
    /*发送写地址的中位*/
    SPI2_ReadWriteByte((WriteAddr & 0xFF00) >> 8);
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fe39 	bl	8001074 <SPI2_ReadWriteByte>
    /*发送写地址的低位*/
    SPI2_ReadWriteByte(WriteAddr & 0xFF);
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe34 	bl	8001074 <SPI2_ReadWriteByte>

    if(NumByteToWrite > SPI_FLASH_PageSize)
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001412:	d90b      	bls.n	800142c <SPI_FLASH_PageWrite+0x64>
    {
        NumByteToWrite = SPI_FLASH_PerWritePageSize;
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001418:	80fb      	strh	r3, [r7, #6]
        //FLASH_ERROR("SPI_FLASH_PageWrite too large!");
    }

    /* 写入数据*/
    while (NumByteToWrite--)
 800141a:	e007      	b.n	800142c <SPI_FLASH_PageWrite+0x64>
    {
        /* 发送当前要写入的字节数据 */
        SPI2_ReadWriteByte(*pBuffer);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fe27 	bl	8001074 <SPI2_ReadWriteByte>
        /* 指向下一字节数据 */
        pBuffer++;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3301      	adds	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
    while (NumByteToWrite--)
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	80fa      	strh	r2, [r7, #6]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <SPI_FLASH_PageWrite+0x54>
    }

    /* 停止信号 FLASH: CS 高电平 */
    W25QXX_CS_1;
 8001436:	2201      	movs	r2, #1
 8001438:	2101      	movs	r1, #1
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <SPI_FLASH_PageWrite+0x84>)
 800143c:	f000 fbc6 	bl	8001bcc <HAL_GPIO_WritePin>

    /* 等待写入完毕*/
    SPI_FLASH_WaitForWriteEnd();
 8001440:	f7ff ff72 	bl	8001328 <SPI_FLASH_WaitForWriteEnd>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	48000400 	.word	0x48000400

08001450 <SPI_FLASH_BufferWrite>:
 * @param  WriteAddr，写入地址
 * @param  NumByteToWrite，写入数据长度
 * @retval 无
 */
void SPI_FLASH_BufferWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	80fb      	strh	r3, [r7, #6]
    u8 NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
 8001462:	2300      	movs	r3, #0
 8001464:	75bb      	strb	r3, [r7, #22]
 8001466:	2300      	movs	r3, #0
 8001468:	757b      	strb	r3, [r7, #21]
 800146a:	2300      	movs	r3, #0
 800146c:	753b      	strb	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	74fb      	strb	r3, [r7, #19]

    /*mod运算求余，若writeAddr是SPI_FLASH_PageSize整数倍，运算结果Addr值为0*/
    Addr = WriteAddr % SPI_FLASH_PageSize;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	757b      	strb	r3, [r7, #21]

    /*差count个数据值，刚好可以对齐到页地址*/
    count = SPI_FLASH_PageSize - Addr;
 8001476:	7d7b      	ldrb	r3, [r7, #21]
 8001478:	425b      	negs	r3, r3
 800147a:	753b      	strb	r3, [r7, #20]
    /*计算出要写多少整数页*/
    NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b29b      	uxth	r3, r3
 8001482:	75fb      	strb	r3, [r7, #23]
    /*mod运算求余，计算出剩余不满一页的字节数*/
    NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	75bb      	strb	r3, [r7, #22]

    /* Addr=0,则WriteAddr 刚好按页对齐 aligned  */
    if (Addr == 0)
 8001488:	7d7b      	ldrb	r3, [r7, #21]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d124      	bne.n	80014d8 <SPI_FLASH_BufferWrite+0x88>
    {
        /* NumByteToWrite < SPI_FLASH_PageSize */
        if (NumOfPage == 0)
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d114      	bne.n	80014be <SPI_FLASH_BufferWrite+0x6e>
        {
            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	461a      	mov	r2, r3
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff ff94 	bl	80013c8 <SPI_FLASH_PageWrite>
            {
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
            }
        }
    }
}
 80014a0:	e07b      	b.n	800159a <SPI_FLASH_BufferWrite+0x14a>
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
 80014a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff ff8d 	bl	80013c8 <SPI_FLASH_PageWrite>
                WriteAddr +=  SPI_FLASH_PageSize;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014b4:	60bb      	str	r3, [r7, #8]
                pBuffer += SPI_FLASH_PageSize;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014bc:	60fb      	str	r3, [r7, #12]
            while (NumOfPage--)
 80014be:	7dfb      	ldrb	r3, [r7, #23]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	75fa      	strb	r2, [r7, #23]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ec      	bne.n	80014a2 <SPI_FLASH_BufferWrite+0x52>
            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
 80014c8:	7dbb      	ldrb	r3, [r7, #22]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff ff79 	bl	80013c8 <SPI_FLASH_PageWrite>
}
 80014d6:	e060      	b.n	800159a <SPI_FLASH_BufferWrite+0x14a>
        if (NumOfPage == 0)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d125      	bne.n	800152a <SPI_FLASH_BufferWrite+0xda>
            if (NumOfSingle > count)
 80014de:	7dba      	ldrb	r2, [r7, #22]
 80014e0:	7d3b      	ldrb	r3, [r7, #20]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d91a      	bls.n	800151c <SPI_FLASH_BufferWrite+0xcc>
                temp = NumOfSingle - count;
 80014e6:	7dba      	ldrb	r2, [r7, #22]
 80014e8:	7d3b      	ldrb	r3, [r7, #20]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	74fb      	strb	r3, [r7, #19]
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
 80014ee:	7d3b      	ldrb	r3, [r7, #20]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff ff66 	bl	80013c8 <SPI_FLASH_PageWrite>
                WriteAddr +=  count;
 80014fc:	7d3b      	ldrb	r3, [r7, #20]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	4413      	add	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
                pBuffer += count;
 8001504:	7d3b      	ldrb	r3, [r7, #20]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, temp);
 800150c:	7cfb      	ldrb	r3, [r7, #19]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff ff57 	bl	80013c8 <SPI_FLASH_PageWrite>
}
 800151a:	e03e      	b.n	800159a <SPI_FLASH_BufferWrite+0x14a>
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	461a      	mov	r2, r3
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff ff50 	bl	80013c8 <SPI_FLASH_PageWrite>
}
 8001528:	e037      	b.n	800159a <SPI_FLASH_BufferWrite+0x14a>
            NumByteToWrite -= count;
 800152a:	7d3b      	ldrb	r3, [r7, #20]
 800152c:	b29b      	uxth	r3, r3
 800152e:	88fa      	ldrh	r2, [r7, #6]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	80fb      	strh	r3, [r7, #6]
            NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	75fb      	strb	r3, [r7, #23]
            NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	75bb      	strb	r3, [r7, #22]
            SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
 8001540:	7d3b      	ldrb	r3, [r7, #20]
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff3d 	bl	80013c8 <SPI_FLASH_PageWrite>
            WriteAddr +=  count;
 800154e:	7d3b      	ldrb	r3, [r7, #20]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	4413      	add	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
            pBuffer += count;
 8001556:	7d3b      	ldrb	r3, [r7, #20]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
            while (NumOfPage--)
 800155e:	e00d      	b.n	800157c <SPI_FLASH_BufferWrite+0x12c>
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff ff2e 	bl	80013c8 <SPI_FLASH_PageWrite>
                WriteAddr +=  SPI_FLASH_PageSize;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001572:	60bb      	str	r3, [r7, #8]
                pBuffer += SPI_FLASH_PageSize;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800157a:	60fb      	str	r3, [r7, #12]
            while (NumOfPage--)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	75fa      	strb	r2, [r7, #23]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ec      	bne.n	8001560 <SPI_FLASH_BufferWrite+0x110>
            if (NumOfSingle != 0)
 8001586:	7dbb      	ldrb	r3, [r7, #22]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <SPI_FLASH_BufferWrite+0x14a>
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
 800158c:	7dbb      	ldrb	r3, [r7, #22]
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f7ff ff17 	bl	80013c8 <SPI_FLASH_PageWrite>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f961 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f80e 	bl	80015d4 <HAL_InitTick>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	e001      	b.n	80015c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015c4:	f7ff fb08 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_InitTick+0x6c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_InitTick+0x70>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_InitTick+0x6c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f96d 	bl	80018de <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10f      	bne.n	800162a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d809      	bhi.n	8001624 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f937 	bl	800188a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_InitTick+0x74>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e007      	b.n	8001634 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e004      	b.n	8001634 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e001      	b.n	8001634 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000000c 	.word	0x2000000c
 8001644:	20000000 	.word	0x20000000
 8001648:	20000008 	.word	0x20000008

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000000c 	.word	0x2000000c
 8001670:	200003e8 	.word	0x200003e8

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200003e8 	.word	0x200003e8

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a4:	d005      	beq.n	80016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_Delay+0x44>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b2:	bf00      	nop
 80016b4:	f7ff ffde 	bl	8001674 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8f7      	bhi.n	80016b4 <HAL_Delay+0x28>
  {
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000000c 	.word	0x2000000c

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <__NVIC_EnableIRQ+0x38>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f7ff ff8e 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff29 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff3e 	bl	800171c <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff8e 	bl	80017c8 <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff31 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffa2 	bl	8001830 <SysTick_Config>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	e148      	b.n	8001b9a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 813a 	beq.w	8001b94 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <HAL_GPIO_Init+0x40>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 0201 	and.w	r2, r3, #1
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d017      	beq.n	80019d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d123      	bne.n	8001a2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	08da      	lsrs	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3208      	adds	r2, #8
 8001a24:	6939      	ldr	r1, [r7, #16]
 8001a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0203 	and.w	r2, r3, #3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8094 	beq.w	8001b94 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6c:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <HAL_GPIO_Init+0x2c0>)
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a70:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_GPIO_Init+0x2c0>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6613      	str	r3, [r2, #96]	; 0x60
 8001a78:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <HAL_GPIO_Init+0x2c0>)
 8001a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a84:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <HAL_GPIO_Init+0x2c4>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aae:	d00d      	beq.n	8001acc <HAL_GPIO_Init+0x1d4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a43      	ldr	r2, [pc, #268]	; (8001bc0 <HAL_GPIO_Init+0x2c8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d007      	beq.n	8001ac8 <HAL_GPIO_Init+0x1d0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a42      	ldr	r2, [pc, #264]	; (8001bc4 <HAL_GPIO_Init+0x2cc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_GPIO_Init+0x1cc>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e004      	b.n	8001ace <HAL_GPIO_Init+0x1d6>
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x1d6>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_GPIO_Init+0x1d6>
 8001acc:	2300      	movs	r3, #0
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ade:	4937      	ldr	r1, [pc, #220]	; (8001bbc <HAL_GPIO_Init+0x2c4>)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b10:	4a2d      	ldr	r2, [pc, #180]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b16:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b3a:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b64:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f47f aeaf 	bne.w	8001908 <HAL_GPIO_Init+0x10>
  }
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af06      	add	r7, sp, #24
 8001c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0f8      	b.n	8001e00 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f00b f942 	bl	800ceac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 fc5c 	bl	80064f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	687e      	ldr	r6, [r7, #4]
 8001c42:	466d      	mov	r5, sp
 8001c44:	f106 0410 	add.w	r4, r6, #16
 8001c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	602b      	str	r3, [r5, #0]
 8001c50:	1d33      	adds	r3, r6, #4
 8001c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c54:	6838      	ldr	r0, [r7, #0]
 8001c56:	f004 fc24 	bl	80064a2 <USB_CoreInit>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0c9      	b.n	8001e00 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fc58 	bl	8006528 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e040      	b.n	8001d00 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3301      	adds	r3, #1
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3303      	adds	r3, #3
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	3338      	adds	r3, #56	; 0x38
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	333c      	adds	r3, #60	; 0x3c
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3340      	adds	r3, #64	; 0x40
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3b9      	bcc.n	8001c7e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e044      	b.n	8001d9a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	3301      	adds	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3b5      	bcc.n	8001d10 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	687e      	ldr	r6, [r7, #4]
 8001dac:	466d      	mov	r5, sp
 8001dae:	f106 0410 	add.w	r4, r6, #16
 8001db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	602b      	str	r3, [r5, #0]
 8001dba:	1d33      	adds	r3, r6, #4
 8001dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbe:	6838      	ldr	r0, [r7, #0]
 8001dc0:	f004 fbbf 	bl	8006542 <USB_DevInit>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e014      	b.n	8001e00 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d102      	bne.n	8001df4 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f001 fc9e 	bl	8003730 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f006 fe67 	bl	8008acc <USB_DevDisconnect>

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_PCD_Start+0x16>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e012      	b.n	8001e44 <HAL_PCD_Start+0x3c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 fb4a 	bl	80064c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f006 fe32 	bl	8008a9e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f006 fe4c 	bl	8008af6 <USB_ReadInterrupts>
 8001e5e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fb59 	bl	8002522 <PCD_EP_ISR_Handler>

    return;
 8001e70:	e110      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f00b f8aa 	bl	800cfee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8fc 	bl	800209a <HAL_PCD_SetAddress>

    return;
 8001ea2:	e0f7      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ec6:	e0e5      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eea:	e0d3      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d034      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0204 	bic.w	r2, r2, #4
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0208 	bic.w	r2, r2, #8
 8001f20:	b292      	uxth	r2, r2
 8001f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f00b fb34 	bl	800d5a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f00b f88d 	bl	800d060 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f58:	b292      	uxth	r2, r2
 8001f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f5e:	e099      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d027      	beq.n	8001fba <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0208 	orr.w	r2, r2, #8
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f94:	b292      	uxth	r2, r2
 8001f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0204 	orr.w	r2, r2, #4
 8001fac:	b292      	uxth	r2, r2
 8001fae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f00b f83a 	bl	800d02c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fb8:	e06c      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d040      	beq.n	8002046 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd6:	b292      	uxth	r2, r2
 8001fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d12b      	bne.n	800203e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0204 	orr.w	r2, r2, #4
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002006:	b29a      	uxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0208 	orr.w	r2, r2, #8
 8002010:	b292      	uxth	r2, r2
 8002012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002026:	b29b      	uxth	r3, r3
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002034:	2101      	movs	r1, #1
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f00b fab6 	bl	800d5a8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800203c:	e02a      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f00a fff4 	bl	800d02c <HAL_PCD_SuspendCallback>
    return;
 8002044:	e026      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00f      	beq.n	8002070 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002062:	b292      	uxth	r2, r2
 8002064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f00a ffb2 	bl	800cfd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800206e:	e011      	b.n	8002094 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208c:	b292      	uxth	r2, r2
 800208e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002092:	bf00      	nop
  }
}
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_PCD_SetAddress+0x1a>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e013      	b.n	80020dc <HAL_PCD_SetAddress+0x42>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f006 fcd2 	bl	8008a76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	70fb      	strb	r3, [r7, #3]
 80020f6:	460b      	mov	r3, r1
 80020f8:	803b      	strh	r3, [r7, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002106:	2b00      	cmp	r3, #0
 8002108:	da0e      	bge.n	8002128 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	705a      	strb	r2, [r3, #1]
 8002126:	e00e      	b.n	8002146 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 0207 	and.w	r2, r3, #7
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002152:	883a      	ldrh	r2, [r7, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	78ba      	ldrb	r2, [r7, #2]
 800215c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800215e:	78bb      	ldrb	r3, [r7, #2]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d102      	bne.n	800216a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_PCD_EP_Open+0x94>
 8002174:	2302      	movs	r3, #2
 8002176:	e00e      	b.n	8002196 <HAL_PCD_EP_Open+0xb2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fa14 	bl	80065b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002194:	7afb      	ldrb	r3, [r7, #11]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da0e      	bge.n	80021d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	705a      	strb	r2, [r3, #1]
 80021ce:	e00e      	b.n	80021ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 0207 	and.w	r2, r3, #7
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_PCD_EP_Close+0x6a>
 8002204:	2302      	movs	r3, #2
 8002206:	e00e      	b.n	8002226 <HAL_PCD_EP_Close+0x88>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68f9      	ldr	r1, [r7, #12]
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fd90 	bl	8006d3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	460b      	mov	r3, r1
 800223c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223e:	7afb      	ldrb	r3, [r7, #11]
 8002240:	f003 0207 	and.w	r2, r3, #7
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2200      	movs	r2, #0
 8002266:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2200      	movs	r2, #0
 800226c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	b2da      	uxtb	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6979      	ldr	r1, [r7, #20]
 8002280:	4618      	mov	r0, r3
 8002282:	f004 ff48 	bl	8007116 <USB_EPStartXfer>

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f003 0207 	and.w	r2, r3, #7
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	460b      	mov	r3, r1
 80022ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2201      	movs	r2, #1
 800230a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800230c:	7afb      	ldrb	r3, [r7, #11]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	b2da      	uxtb	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_PCD_EP_Transmit+0x94>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_PCD_EP_Transmit+0x98>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	4618      	mov	r0, r3
 8002332:	f004 fef0 	bl	8007116 <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_PCD_EP_Transmit+0x94>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_PCD_EP_Transmit+0x9c>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000298 	.word	0x20000298
 8002358:	2000029c 	.word	0x2000029c
 800235c:	200002a8 	.word	0x200002a8

08002360 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	f003 0207 	and.w	r2, r3, #7
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d901      	bls.n	800237e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e04c      	b.n	8002418 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800237e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002382:	2b00      	cmp	r3, #0
 8002384:	da0e      	bge.n	80023a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	705a      	strb	r2, [r3, #1]
 80023a2:	e00c      	b.n	80023be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_PCD_EP_SetStall+0x7e>
 80023da:	2302      	movs	r3, #2
 80023dc:	e01c      	b.n	8002418 <HAL_PCD_EP_SetStall+0xb8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f006 fa43 	bl	8008878 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d108      	bne.n	800240e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f006 fb84 	bl	8008b16 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 020f 	and.w	r2, r3, #15
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d901      	bls.n	800243e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e040      	b.n	80024c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800243e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002442:	2b00      	cmp	r3, #0
 8002444:	da0e      	bge.n	8002464 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	705a      	strb	r2, [r3, #1]
 8002462:	e00e      	b.n	8002482 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0207 	and.w	r2, r3, #7
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	b2da      	uxtb	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_PCD_EP_ClrStall+0x82>
 800249e:	2302      	movs	r3, #2
 80024a0:	e00e      	b.n	80024c0 <HAL_PCD_EP_ClrStall+0xa0>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68f9      	ldr	r1, [r7, #12]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f006 fa32 	bl	800891a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_PCD_EP_Flush+0x1a>
 80024de:	2302      	movs	r3, #2
 80024e0:	e01b      	b.n	800251a <HAL_PCD_EP_Flush+0x52>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80024ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da09      	bge.n	8002506 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f004 f840 	bl	8006584 <USB_FlushTxFifo>
 8002504:	e004      	b.n	8002510 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f004 f846 	bl	800659c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b096      	sub	sp, #88	; 0x58
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800252a:	e3b1      	b.n	8002c90 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002534:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002546:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 8173 	bne.w	8002836 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d150      	bne.n	80025fe <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256c:	81fb      	strh	r3, [r7, #14]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	89fb      	ldrh	r3, [r7, #14]
 8002574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257c:	b29b      	uxth	r3, r3
 800257e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3328      	adds	r3, #40	; 0x28
 8002584:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	441a      	add	r2, r3
 80025b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025bc:	2100      	movs	r1, #0
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f00a fced 	bl	800cf9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 835f 	beq.w	8002c90 <PCD_EP_ISR_Handler+0x76e>
 80025d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 835a 	bne.w	8002c90 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	b292      	uxth	r2, r2
 80025f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025fc:	e348      	b.n	8002c90 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002604:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002610:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002618:	2b00      	cmp	r3, #0
 800261a:	d032      	beq.n	8002682 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	4413      	add	r3, r2
 8002636:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002642:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800264e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002650:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002654:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002656:	b29b      	uxth	r3, r3
 8002658:	f006 faab 	bl	8008bb2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29a      	uxth	r2, r3
 8002664:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002668:	4013      	ands	r3, r2
 800266a:	823b      	strh	r3, [r7, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	8a3a      	ldrh	r2, [r7, #16]
 8002672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002676:	b292      	uxth	r2, r2
 8002678:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f00a fc62 	bl	800cf44 <HAL_PCD_SetupStageCallback>
 8002680:	e306      	b.n	8002c90 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002682:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002686:	2b00      	cmp	r3, #0
 8002688:	f280 8302 	bge.w	8002c90 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29a      	uxth	r2, r3
 8002694:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002698:	4013      	ands	r3, r2
 800269a:	83fb      	strh	r3, [r7, #30]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	8bfa      	ldrh	r2, [r7, #30]
 80026a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026a6:	b292      	uxth	r2, r2
 80026a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d019      	beq.n	800270e <PCD_EP_ISR_Handler+0x1ec>
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d015      	beq.n	800270e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e8:	6959      	ldr	r1, [r3, #20]
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f006 fa5d 	bl	8008bb2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	441a      	add	r2, r3
 8002702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002704:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002706:	2100      	movs	r1, #0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f00a fc2d 	bl	800cf68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002718:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800271c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 82b5 	bne.w	8002c90 <PCD_EP_ISR_Handler+0x76e>
 8002726:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800272a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800272e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002732:	f000 82ad 	beq.w	8002c90 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002760:	b29a      	uxth	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b3e      	cmp	r3, #62	; 0x3e
 800276c:	d91d      	bls.n	80027aa <PCD_EP_ISR_Handler+0x288>
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	647b      	str	r3, [r7, #68]	; 0x44
 8002776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <PCD_EP_ISR_Handler+0x266>
 8002782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002784:	3b01      	subs	r3, #1
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29a      	uxth	r2, r3
 800278e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002790:	b29b      	uxth	r3, r3
 8002792:	029b      	lsls	r3, r3, #10
 8002794:	b29b      	uxth	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	b29b      	uxth	r3, r3
 800279a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e026      	b.n	80027f8 <PCD_EP_ISR_Handler+0x2d6>
 80027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <PCD_EP_ISR_Handler+0x2a6>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	e017      	b.n	80027f8 <PCD_EP_ISR_Handler+0x2d6>
 80027c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
 80027d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <PCD_EP_ISR_Handler+0x2c0>
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	3301      	adds	r3, #1
 80027e0:	647b      	str	r3, [r7, #68]	; 0x44
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	827b      	strh	r3, [r7, #18]
 800280a:	8a7b      	ldrh	r3, [r7, #18]
 800280c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002810:	827b      	strh	r3, [r7, #18]
 8002812:	8a7b      	ldrh	r3, [r7, #18]
 8002814:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002818:	827b      	strh	r3, [r7, #18]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	8a7b      	ldrh	r3, [r7, #18]
 8002820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	b29b      	uxth	r3, r3
 8002832:	8013      	strh	r3, [r2, #0]
 8002834:	e22c      	b.n	8002c90 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800284a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800284e:	2b00      	cmp	r3, #0
 8002850:	f280 80f6 	bge.w	8002a40 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29a      	uxth	r2, r3
 8002866:	f640 738f 	movw	r3, #3983	; 0xf8f
 800286a:	4013      	ands	r3, r2
 800286c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002882:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002886:	b292      	uxth	r2, r2
 8002888:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800288a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a2:	7b1b      	ldrb	r3, [r3, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d123      	bne.n	80028f0 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028cc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80028d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 808e 	beq.w	80029f6 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e0:	6959      	ldr	r1, [r3, #20]
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	88da      	ldrh	r2, [r3, #6]
 80028e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028ea:	f006 f962 	bl	8008bb2 <USB_ReadPMA>
 80028ee:	e082      	b.n	80029f6 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	78db      	ldrb	r3, [r3, #3]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d10a      	bne.n	800290e <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028fc:	461a      	mov	r2, r3
 80028fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f9d3 	bl	8002cac <HAL_PCD_EP_DB_Receive>
 8002906:	4603      	mov	r3, r0
 8002908:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800290c:	e073      	b.n	80029f6 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002928:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800293e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800294e:	b29b      	uxth	r3, r3
 8002950:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d022      	beq.n	80029b2 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002974:	b29b      	uxth	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	4413      	add	r3, r2
 8002986:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002990:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002994:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02c      	beq.n	80029f6 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a2:	6959      	ldr	r1, [r3, #20]
 80029a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a6:	891a      	ldrh	r2, [r3, #8]
 80029a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029ac:	f006 f901 	bl	8008bb2 <USB_ReadPMA>
 80029b0:	e021      	b.n	80029f6 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e8:	6959      	ldr	r1, [r3, #20]
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	895a      	ldrh	r2, [r3, #10]
 80029ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029f2:	f006 f8de 	bl	8008bb2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029fe:	441a      	add	r2, r3
 8002a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a0c:	441a      	add	r2, r3
 8002a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a10:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <PCD_EP_ISR_Handler+0x504>
 8002a1a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d206      	bcs.n	8002a34 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f00a fa9b 	bl	800cf68 <HAL_PCD_DataOutStageCallback>
 8002a32:	e005      	b.n	8002a40 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fb6b 	bl	8007116 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8121 	beq.w	8002c90 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa0:	78db      	ldrb	r3, [r3, #3]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	f040 80a2 	bne.w	8002bec <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	2200      	movs	r2, #0
 8002aac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab0:	7b1b      	ldrb	r3, [r3, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8093 	beq.w	8002bde <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ab8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d046      	beq.n	8002b52 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d126      	bne.n	8002b1a <PCD_EP_ISR_Handler+0x5f8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	4413      	add	r3, r2
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	00da      	lsls	r2, r3, #3
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	4413      	add	r3, r2
 8002aee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002af2:	623b      	str	r3, [r7, #32]
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e061      	b.n	8002bde <PCD_EP_ISR_Handler+0x6bc>
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d15d      	bne.n	8002bde <PCD_EP_ISR_Handler+0x6bc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	4413      	add	r3, r2
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	00da      	lsls	r2, r3, #3
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	4413      	add	r3, r2
 8002b44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	801a      	strh	r2, [r3, #0]
 8002b50:	e045      	b.n	8002bde <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d126      	bne.n	8002bae <PCD_EP_ISR_Handler+0x68c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	4413      	add	r3, r2
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	00da      	lsls	r2, r3, #3
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	4413      	add	r3, r2
 8002b82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	e017      	b.n	8002bde <PCD_EP_ISR_Handler+0x6bc>
 8002bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d113      	bne.n	8002bde <PCD_EP_ISR_Handler+0x6bc>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc4:	4413      	add	r3, r2
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	00da      	lsls	r2, r3, #3
 8002bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	2200      	movs	r2, #0
 8002bdc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f00a f9da 	bl	800cf9e <HAL_PCD_DataInStageCallback>
 8002bea:	e051      	b.n	8002c90 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002bec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d144      	bne.n	8002c82 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d907      	bls.n	8002c3c <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c34:	1ad2      	subs	r2, r2, r3
 8002c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c38:	619a      	str	r2, [r3, #24]
 8002c3a:	e002      	b.n	8002c42 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f00a f9a4 	bl	800cf9e <HAL_PCD_DataInStageCallback>
 8002c56:	e01b      	b.n	8002c90 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c60:	441a      	add	r2, r3
 8002c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c64:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c6e:	441a      	add	r2, r3
 8002c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c72:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fa4b 	bl	8007116 <USB_EPStartXfer>
 8002c80:	e006      	b.n	8002c90 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c86:	461a      	mov	r2, r3
 8002c88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f917 	bl	8002ebe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f6ff ac45 	blt.w	800252c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3758      	adds	r7, #88	; 0x58
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d07c      	beq.n	8002dbe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	8b7b      	ldrh	r3, [r7, #26]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d306      	bcc.n	8002d02 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	8b7b      	ldrh	r3, [r7, #26]
 8002cfa:	1ad2      	subs	r2, r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	619a      	str	r2, [r3, #24]
 8002d00:	e002      	b.n	8002d08 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d123      	bne.n	8002d58 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	833b      	strh	r3, [r7, #24]
 8002d2c:	8b3b      	ldrh	r3, [r7, #24]
 8002d2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d32:	833b      	strh	r3, [r7, #24]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	441a      	add	r2, r3
 8002d42:	8b3b      	ldrh	r3, [r7, #24]
 8002d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01f      	beq.n	8002da2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7c:	82fb      	strh	r3, [r7, #22]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	441a      	add	r2, r3
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002da2:	8b7b      	ldrh	r3, [r7, #26]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8085 	beq.w	8002eb4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	6959      	ldr	r1, [r3, #20]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	891a      	ldrh	r2, [r3, #8]
 8002db6:	8b7b      	ldrh	r3, [r7, #26]
 8002db8:	f005 fefb 	bl	8008bb2 <USB_ReadPMA>
 8002dbc:	e07a      	b.n	8002eb4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	8b7b      	ldrh	r3, [r7, #26]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d306      	bcc.n	8002dfc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	8b7b      	ldrh	r3, [r7, #26]
 8002df4:	1ad2      	subs	r2, r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	619a      	str	r2, [r3, #24]
 8002dfa:	e002      	b.n	8002e02 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d123      	bne.n	8002e52 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e24:	83fb      	strh	r3, [r7, #30]
 8002e26:	8bfb      	ldrh	r3, [r7, #30]
 8002e28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e2c:	83fb      	strh	r3, [r7, #30]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	441a      	add	r2, r3
 8002e3c:	8bfb      	ldrh	r3, [r7, #30]
 8002e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11f      	bne.n	8002e9c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	83bb      	strh	r3, [r7, #28]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	8bbb      	ldrh	r3, [r7, #28]
 8002e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e9c:	8b7b      	ldrh	r3, [r7, #26]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	6959      	ldr	r1, [r3, #20]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	895a      	ldrh	r2, [r3, #10]
 8002eae:	8b7b      	ldrh	r3, [r7, #26]
 8002eb0:	f005 fe7f 	bl	8008bb2 <USB_ReadPMA>
    }
  }

  return count;
 8002eb4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b0a4      	sub	sp, #144	; 0x90
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 81db 	beq.w	800328e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d907      	bls.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f14:	1ad2      	subs	r2, r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	619a      	str	r2, [r3, #24]
 8002f1a:	e002      	b.n	8002f22 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 80b9 	bne.w	800309e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d126      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	4413      	add	r3, r2
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	00da      	lsls	r2, r3, #3
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	4413      	add	r3, r2
 8002f56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	e01a      	b.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d116      	bne.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	4413      	add	r3, r2
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	00da      	lsls	r2, r3, #3
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002faa:	4413      	add	r3, r2
 8002fac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d126      	bne.n	8003014 <HAL_PCD_EP_DB_Transmit+0x156>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	00da      	lsls	r2, r3, #3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	801a      	strh	r2, [r3, #0]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800300c:	b29a      	uxth	r2, r3
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	e017      	b.n	8003044 <HAL_PCD_EP_DB_Transmit+0x186>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d113      	bne.n	8003044 <HAL_PCD_EP_DB_Transmit+0x186>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003024:	b29b      	uxth	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	4413      	add	r3, r2
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	00da      	lsls	r2, r3, #3
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	4413      	add	r3, r2
 8003038:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2200      	movs	r2, #0
 8003042:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f009 ffa7 	bl	800cf9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 82fa 	beq.w	8003650 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	82fb      	strh	r3, [r7, #22]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	441a      	add	r2, r3
 8003086:	8afb      	ldrh	r3, [r7, #22]
 8003088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800308c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003098:	b29b      	uxth	r3, r3
 800309a:	8013      	strh	r3, [r2, #0]
 800309c:	e2d8      	b.n	8003650 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d021      	beq.n	80030ec <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	f040 82ac 	bne.w	8003650 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003100:	441a      	add	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800310e:	441a      	add	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	429a      	cmp	r2, r3
 800311e:	d30b      	bcc.n	8003138 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6a1a      	ldr	r2, [r3, #32]
 800312c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003130:	1ad2      	subs	r2, r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	621a      	str	r2, [r3, #32]
 8003136:	e017      	b.n	8003168 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003140:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003150:	e00a      	b.n	8003168 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d165      	bne.n	800323c <HAL_PCD_EP_DB_Transmit+0x37e>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317e:	b29b      	uxth	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003184:	4413      	add	r3, r2
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	00da      	lsls	r2, r3, #3
 800318e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003190:	4413      	add	r3, r2
 8003192:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	801a      	strh	r2, [r3, #0]
 80031a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ac:	2b3e      	cmp	r3, #62	; 0x3e
 80031ae:	d91d      	bls.n	80031ec <HAL_PCD_EP_DB_Transmit+0x32e>
 80031b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <HAL_PCD_EP_DB_Transmit+0x30c>
 80031c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c6:	3b01      	subs	r3, #1
 80031c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4313      	orrs	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	801a      	strh	r2, [r3, #0]
 80031ea:	e044      	b.n	8003276 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_PCD_EP_DB_Transmit+0x34c>
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003202:	b29a      	uxth	r2, r3
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	e035      	b.n	8003276 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800320a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	64bb      	str	r3, [r7, #72]	; 0x48
 8003212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_PCD_EP_DB_Transmit+0x366>
 800321e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003220:	3301      	adds	r3, #1
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29a      	uxth	r2, r3
 800322a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322c:	b29b      	uxth	r3, r3
 800322e:	029b      	lsls	r3, r3, #10
 8003230:	b29b      	uxth	r3, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	b29a      	uxth	r2, r3
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	e01c      	b.n	8003276 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d118      	bne.n	8003276 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	647b      	str	r3, [r7, #68]	; 0x44
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003258:	4413      	add	r3, r2
 800325a:	647b      	str	r3, [r7, #68]	; 0x44
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	00da      	lsls	r2, r3, #3
 8003262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003264:	4413      	add	r3, r2
 8003266:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800326a:	643b      	str	r3, [r7, #64]	; 0x40
 800326c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003270:	b29a      	uxth	r2, r3
 8003272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003274:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6959      	ldr	r1, [r3, #20]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	891a      	ldrh	r2, [r3, #8]
 8003282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003286:	b29b      	uxth	r3, r3
 8003288:	f005 fc51 	bl	8008b2e <USB_WritePMA>
 800328c:	e1e0      	b.n	8003650 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032be:	429a      	cmp	r2, r3
 80032c0:	d307      	bcc.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	619a      	str	r2, [r3, #24]
 80032d0:	e002      	b.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 80c0 	bne.w	8003462 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d126      	bne.n	8003338 <HAL_PCD_EP_DB_Transmit+0x47a>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032fe:	4413      	add	r3, r2
 8003300:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	00da      	lsls	r2, r3, #3
 8003308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800330a:	4413      	add	r3, r2
 800330c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003310:	67bb      	str	r3, [r7, #120]	; 0x78
 8003312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331c:	b29a      	uxth	r2, r3
 800331e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003320:	801a      	strh	r2, [r3, #0]
 8003322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800332c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003330:	b29a      	uxth	r2, r3
 8003332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003334:	801a      	strh	r2, [r3, #0]
 8003336:	e01a      	b.n	800336e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d116      	bne.n	800336e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	667b      	str	r3, [r7, #100]	; 0x64
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800334e:	b29b      	uxth	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003354:	4413      	add	r3, r2
 8003356:	667b      	str	r3, [r7, #100]	; 0x64
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	00da      	lsls	r2, r3, #3
 800335e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003360:	4413      	add	r3, r2
 8003362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003366:	663b      	str	r3, [r7, #96]	; 0x60
 8003368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336a:	2200      	movs	r2, #0
 800336c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	677b      	str	r3, [r7, #116]	; 0x74
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	785b      	ldrb	r3, [r3, #1]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d12b      	bne.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x516>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338a:	b29b      	uxth	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003390:	4413      	add	r3, r2
 8003392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	00da      	lsls	r2, r3, #3
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	4413      	add	r3, r2
 800339e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d0:	801a      	strh	r2, [r3, #0]
 80033d2:	e017      	b.n	8003404 <HAL_PCD_EP_DB_Transmit+0x546>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d113      	bne.n	8003404 <HAL_PCD_EP_DB_Transmit+0x546>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ea:	4413      	add	r3, r2
 80033ec:	677b      	str	r3, [r7, #116]	; 0x74
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	00da      	lsls	r2, r3, #3
 80033f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f6:	4413      	add	r3, r2
 80033f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033fc:	673b      	str	r3, [r7, #112]	; 0x70
 80033fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003400:	2200      	movs	r2, #0
 8003402:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f009 fdc7 	bl	800cf9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 811a 	bne.w	8003650 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003436:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	441a      	add	r2, r3
 8003448:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800344c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345c:	b29b      	uxth	r3, r3
 800345e:	8013      	strh	r3, [r2, #0]
 8003460:	e0f6      	b.n	8003650 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d121      	bne.n	80034b0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003486:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	441a      	add	r2, r3
 8003498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800349c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	f040 80ca 	bne.w	8003650 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034c4:	441a      	add	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034d2:	441a      	add	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d30b      	bcc.n	80034fc <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f4:	1ad2      	subs	r2, r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	621a      	str	r2, [r3, #32]
 80034fa:	e017      	b.n	800352c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003504:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003514:	e00a      	b.n	800352c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	657b      	str	r3, [r7, #84]	; 0x54
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d165      	bne.n	8003606 <HAL_PCD_EP_DB_Transmit+0x748>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003548:	b29b      	uxth	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354e:	4413      	add	r3, r2
 8003550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	00da      	lsls	r2, r3, #3
 8003558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355a:	4413      	add	r3, r2
 800355c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003560:	65bb      	str	r3, [r7, #88]	; 0x58
 8003562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356c:	b29a      	uxth	r2, r3
 800356e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003570:	801a      	strh	r2, [r3, #0]
 8003572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003576:	2b3e      	cmp	r3, #62	; 0x3e
 8003578:	d91d      	bls.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800357a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	66bb      	str	r3, [r7, #104]	; 0x68
 8003582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800358e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003590:	3b01      	subs	r3, #1
 8003592:	66bb      	str	r3, [r7, #104]	; 0x68
 8003594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	b29a      	uxth	r2, r3
 800359a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800359c:	b29b      	uxth	r3, r3
 800359e:	029b      	lsls	r3, r3, #10
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4313      	orrs	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	e041      	b.n	800363a <HAL_PCD_EP_DB_Transmit+0x77c>
 80035b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x716>
 80035be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	e032      	b.n	800363a <HAL_PCD_EP_DB_Transmit+0x77c>
 80035d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	66bb      	str	r3, [r7, #104]	; 0x68
 80035dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_PCD_EP_DB_Transmit+0x730>
 80035e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ea:	3301      	adds	r3, #1
 80035ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80035ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	029b      	lsls	r3, r3, #10
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	4313      	orrs	r3, r2
 80035fe:	b29a      	uxth	r2, r3
 8003600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003602:	801a      	strh	r2, [r3, #0]
 8003604:	e019      	b.n	800363a <HAL_PCD_EP_DB_Transmit+0x77c>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d115      	bne.n	800363a <HAL_PCD_EP_DB_Transmit+0x77c>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003616:	b29b      	uxth	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361c:	4413      	add	r3, r2
 800361e:	657b      	str	r3, [r7, #84]	; 0x54
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	00da      	lsls	r2, r3, #3
 8003626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003628:	4413      	add	r3, r2
 800362a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800362e:	653b      	str	r3, [r7, #80]	; 0x50
 8003630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003634:	b29a      	uxth	r2, r3
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6959      	ldr	r1, [r3, #20]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	895a      	ldrh	r2, [r3, #10]
 8003646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800364a:	b29b      	uxth	r3, r3
 800364c:	f005 fa6f 	bl	8008b2e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366a:	82bb      	strh	r3, [r7, #20]
 800366c:	8abb      	ldrh	r3, [r7, #20]
 800366e:	f083 0310 	eor.w	r3, r3, #16
 8003672:	82bb      	strh	r3, [r7, #20]
 8003674:	8abb      	ldrh	r3, [r7, #20]
 8003676:	f083 0320 	eor.w	r3, r3, #32
 800367a:	82bb      	strh	r3, [r7, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	8abb      	ldrh	r3, [r7, #20]
 800368c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369c:	b29b      	uxth	r3, r3
 800369e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3790      	adds	r7, #144	; 0x90
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b087      	sub	sp, #28
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	817b      	strh	r3, [r7, #10]
 80036b8:	4613      	mov	r3, r2
 80036ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036bc:	897b      	ldrh	r3, [r7, #10]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c8:	897b      	ldrh	r3, [r7, #10]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e009      	b.n	80036f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036e0:	897a      	ldrh	r2, [r7, #10]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4413      	add	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036f4:	893b      	ldrh	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2200      	movs	r2, #0
 80036fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	b29a      	uxth	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	80da      	strh	r2, [r3, #6]
 8003708:	e00b      	b.n	8003722 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2201      	movs	r2, #1
 800370e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	b29a      	uxth	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0c1b      	lsrs	r3, r3, #16
 800371c:	b29a      	uxth	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003754:	b29b      	uxth	r3, r3
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003768:	b29b      	uxth	r3, r3
 800376a:	f043 0302 	orr.w	r3, r3, #2
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40007000 	.word	0x40007000

080037a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <HAL_PWREx_GetVoltageRange+0x18>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40007000 	.word	0x40007000

080037c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ce:	d130      	bne.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d038      	beq.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e6:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2232      	movs	r2, #50	; 0x32
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	0c9b      	lsrs	r3, r3, #18
 8003800:	3301      	adds	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003804:	e002      	b.n	800380c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3b01      	subs	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d102      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x60>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f2      	bne.n	8003806 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382c:	d110      	bne.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e00f      	b.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d007      	beq.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003848:	4a05      	ldr	r2, [pc, #20]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800384e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40007000 	.word	0x40007000
 8003864:	20000000 	.word	0x20000000
 8003868:	431bde83 	.word	0x431bde83

0800386c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387a:	6053      	str	r3, [r2, #4]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40007000 	.word	0x40007000

0800388c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f000 bc02 	b.w	80040a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a0:	4b96      	ldr	r3, [pc, #600]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038aa:	4b94      	ldr	r3, [pc, #592]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80e4 	beq.w	8003a8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_RCC_OscConfig+0x4c>
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	f040 808b 	bne.w	80039e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	f040 8087 	bne.w	80039e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d8:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_OscConfig+0x64>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e3d9      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	4b81      	ldr	r3, [pc, #516]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <HAL_RCC_OscConfig+0x7e>
 8003900:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003908:	e005      	b.n	8003916 <HAL_RCC_OscConfig+0x8a>
 800390a:	4b7c      	ldr	r3, [pc, #496]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 800390c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003916:	4293      	cmp	r3, r2
 8003918:	d223      	bcs.n	8003962 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fd8c 	bl	800443c <RCC_SetFlashLatencyFromMSIRange>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e3ba      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800392e:	4b73      	ldr	r3, [pc, #460]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a72      	ldr	r2, [pc, #456]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003934:	f043 0308 	orr.w	r3, r3, #8
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b70      	ldr	r3, [pc, #448]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	496d      	ldr	r1, [pc, #436]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800394c:	4b6b      	ldr	r3, [pc, #428]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	4968      	ldr	r1, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]
 8003960:	e025      	b.n	80039ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003962:	4b66      	ldr	r3, [pc, #408]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b63      	ldr	r3, [pc, #396]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4960      	ldr	r1, [pc, #384]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003980:	4b5e      	ldr	r3, [pc, #376]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	495b      	ldr	r1, [pc, #364]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fd4c 	bl	800443c <RCC_SetFlashLatencyFromMSIRange>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e37a      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ae:	f000 fc81 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b51      	ldr	r3, [pc, #324]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	4950      	ldr	r1, [pc, #320]	; (8003b00 <HAL_RCC_OscConfig+0x274>)
 80039c0:	5ccb      	ldrb	r3, [r1, r3]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	4a4e      	ldr	r2, [pc, #312]	; (8003b04 <HAL_RCC_OscConfig+0x278>)
 80039cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039ce:	4b4e      	ldr	r3, [pc, #312]	; (8003b08 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd fdfe 	bl	80015d4 <HAL_InitTick>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d052      	beq.n	8003a88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	e35e      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d032      	beq.n	8003a54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039ee:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a42      	ldr	r2, [pc, #264]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039fa:	f7fd fe3b 	bl	8001674 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a02:	f7fd fe37 	bl	8001674 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e347      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a14:	4b39      	ldr	r3, [pc, #228]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a20:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a35      	ldr	r2, [pc, #212]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a26:	f043 0308 	orr.w	r3, r3, #8
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b33      	ldr	r3, [pc, #204]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4930      	ldr	r1, [pc, #192]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a3e:	4b2f      	ldr	r3, [pc, #188]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	492b      	ldr	r1, [pc, #172]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
 8003a52:	e01a      	b.n	8003a8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a54:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a28      	ldr	r2, [pc, #160]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a60:	f7fd fe08 	bl	8001674 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a68:	f7fd fe04 	bl	8001674 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e314      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x1dc>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d073      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x21c>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d063      	beq.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d15f      	bne.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e2f1      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x24c>
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e025      	b.n	8003b24 <HAL_RCC_OscConfig+0x298>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae0:	d114      	bne.n	8003b0c <HAL_RCC_OscConfig+0x280>
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a02      	ldr	r2, [pc, #8]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e013      	b.n	8003b24 <HAL_RCC_OscConfig+0x298>
 8003afc:	40021000 	.word	0x40021000
 8003b00:	0800e638 	.word	0x0800e638
 8003b04:	20000000 	.word	0x20000000
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	4ba0      	ldr	r3, [pc, #640]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a9f      	ldr	r2, [pc, #636]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b9d      	ldr	r3, [pc, #628]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a9c      	ldr	r2, [pc, #624]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fda2 	bl	8001674 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fd fd9e 	bl	8001674 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e2ae      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b46:	4b92      	ldr	r3, [pc, #584]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x2a8>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fd fd8e 	bl	8001674 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fd fd8a 	bl	8001674 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e29a      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6e:	4b88      	ldr	r3, [pc, #544]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x2d0>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d060      	beq.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_OscConfig+0x310>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d119      	bne.n	8003bca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d116      	bne.n	8003bca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b9c:	4b7c      	ldr	r3, [pc, #496]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x328>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e277      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b76      	ldr	r3, [pc, #472]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	4973      	ldr	r1, [pc, #460]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc8:	e040      	b.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d023      	beq.n	8003c1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd2:	4b6f      	ldr	r3, [pc, #444]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6e      	ldr	r2, [pc, #440]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd fd49 	bl	8001674 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fd fd45 	bl	8001674 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e255      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf8:	4b65      	ldr	r3, [pc, #404]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b62      	ldr	r3, [pc, #392]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	495f      	ldr	r1, [pc, #380]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
 8003c18:	e018      	b.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1a:	4b5d      	ldr	r3, [pc, #372]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a5c      	ldr	r2, [pc, #368]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fd fd25 	bl	8001674 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fd fd21 	bl	8001674 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e231      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d03c      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01c      	beq.n	8003c9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c66:	4a4a      	ldr	r2, [pc, #296]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fd fd00 	bl	8001674 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c78:	f7fd fcfc 	bl	8001674 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e20c      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c8a:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ef      	beq.n	8003c78 <HAL_RCC_OscConfig+0x3ec>
 8003c98:	e01b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca0:	4a3b      	ldr	r2, [pc, #236]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003caa:	f7fd fce3 	bl	8001674 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb2:	f7fd fcdf 	bl	8001674 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e1ef      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1ef      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80a6 	beq.w	8003e2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10d      	bne.n	8003d0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <HAL_RCC_OscConfig+0x508>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d118      	bne.n	8003d4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_RCC_OscConfig+0x508>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <HAL_RCC_OscConfig+0x508>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d24:	f7fd fca6 	bl	8001674 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fd fca2 	bl	8001674 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1b2      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_RCC_OscConfig+0x508>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d108      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4d8>
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d62:	e029      	b.n	8003db8 <HAL_RCC_OscConfig+0x52c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b05      	cmp	r3, #5
 8003d6a:	d115      	bne.n	8003d98 <HAL_RCC_OscConfig+0x50c>
 8003d6c:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003d74:	f043 0304 	orr.w	r3, r3, #4
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <HAL_RCC_OscConfig+0x504>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d8c:	e014      	b.n	8003db8 <HAL_RCC_OscConfig+0x52c>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
 8003d98:	4b9a      	ldr	r3, [pc, #616]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a99      	ldr	r2, [pc, #612]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da8:	4b96      	ldr	r3, [pc, #600]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	4a95      	ldr	r2, [pc, #596]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d016      	beq.n	8003dee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fc58 	bl	8001674 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fc54 	bl	8001674 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e162      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dde:	4b89      	ldr	r3, [pc, #548]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ed      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x53c>
 8003dec:	e015      	b.n	8003e1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dee:	f7fd fc41 	bl	8001674 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df4:	e00a      	b.n	8003e0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fd fc3d 	bl	8001674 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e14b      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e0c:	4b7d      	ldr	r3, [pc, #500]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ed      	bne.n	8003df6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e20:	4b78      	ldr	r3, [pc, #480]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	4a77      	ldr	r2, [pc, #476]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d03c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01c      	beq.n	8003e7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e40:	4b70      	ldr	r3, [pc, #448]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e46:	4a6f      	ldr	r2, [pc, #444]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd fc10 	bl	8001674 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e58:	f7fd fc0c 	bl	8001674 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e11c      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e6a:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ef      	beq.n	8003e58 <HAL_RCC_OscConfig+0x5cc>
 8003e78:	e01b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e7a:	4b62      	ldr	r3, [pc, #392]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e80:	4a60      	ldr	r2, [pc, #384]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fd fbf3 	bl	8001674 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e92:	f7fd fbef 	bl	8001674 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0ff      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea4:	4b57      	ldr	r3, [pc, #348]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1ef      	bne.n	8003e92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80f3 	beq.w	80040a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	f040 80c9 	bne.w	8004058 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ec6:	4b4f      	ldr	r3, [pc, #316]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0203 	and.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d12c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d123      	bne.n	8003f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d11b      	bne.n	8003f34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d113      	bne.n	8003f34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d109      	bne.n	8003f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d06b      	beq.n	800400c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d062      	beq.n	8004000 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f3a:	4b32      	ldr	r3, [pc, #200]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0ac      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f56:	f7fd fb8d 	bl	8001674 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fd fb89 	bl	8001674 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e099      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f70:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	4b21      	ldr	r3, [pc, #132]	; (8004008 <HAL_RCC_OscConfig+0x77c>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f8c:	3a01      	subs	r2, #1
 8003f8e:	0112      	lsls	r2, r2, #4
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f96:	0212      	lsls	r2, r2, #8
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f9e:	0852      	lsrs	r2, r2, #1
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	0552      	lsls	r2, r2, #21
 8003fa4:	4311      	orrs	r1, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003faa:	0852      	lsrs	r2, r2, #1
 8003fac:	3a01      	subs	r2, #1
 8003fae:	0652      	lsls	r2, r2, #25
 8003fb0:	4311      	orrs	r1, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fb6:	06d2      	lsls	r2, r2, #27
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	4912      	ldr	r1, [pc, #72]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd8:	f7fd fb4c 	bl	8001674 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fd fb48 	bl	8001674 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e058      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <HAL_RCC_OscConfig+0x778>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ffe:	e050      	b.n	80040a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e04f      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
 8004004:	40021000 	.word	0x40021000
 8004008:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d144      	bne.n	80040a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a23      	ldr	r2, [pc, #140]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 800401e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a20      	ldr	r2, [pc, #128]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004030:	f7fd fb20 	bl	8001674 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd fb1c 	bl	8001674 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e02c      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404a:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x7ac>
 8004056:	e024      	b.n	80040a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d01f      	beq.n	800409e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 8004064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd fb03 	bl	8001674 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004072:	f7fd faff 	bl	8001674 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e00f      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	4905      	ldr	r1, [pc, #20]	; (80040ac <HAL_RCC_OscConfig+0x820>)
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_OscConfig+0x824>)
 8004098:	4013      	ands	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
 800409c:	e001      	b.n	80040a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	feeefffc 	.word	0xfeeefffc

080040b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0e7      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b75      	ldr	r3, [pc, #468]	; (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b72      	ldr	r3, [pc, #456]	; (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	4970      	ldr	r1, [pc, #448]	; (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b6e      	ldr	r3, [pc, #440]	; (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cf      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d010      	beq.n	8004126 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004110:	429a      	cmp	r2, r3
 8004112:	d908      	bls.n	8004126 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4960      	ldr	r1, [pc, #384]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d04c      	beq.n	80041cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	4b5a      	ldr	r3, [pc, #360]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d121      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0a6      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	4b54      	ldr	r3, [pc, #336]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d115      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e09a      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416a:	4b4e      	ldr	r3, [pc, #312]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e08e      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417a:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e086      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4943      	ldr	r1, [pc, #268]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fd fa6a 	bl	8001674 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fd fa66 	bl	8001674 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e06e      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d208      	bcs.n	80041fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b2e      	ldr	r3, [pc, #184]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	492b      	ldr	r1, [pc, #172]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fa:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d210      	bcs.n	800422a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 0207 	bic.w	r2, r3, #7
 8004210:	4923      	ldr	r1, [pc, #140]	; (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004218:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <HAL_RCC_ClockConfig+0x1ec>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e036      	b.n	8004298 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004236:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	4918      	ldr	r1, [pc, #96]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	4313      	orrs	r3, r2
 8004246:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4910      	ldr	r1, [pc, #64]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004268:	f000 f824 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	490b      	ldr	r1, [pc, #44]	; (80042a8 <HAL_RCC_ClockConfig+0x1f4>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1f8>)
 8004286:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1fc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fd f9a1 	bl	80015d4 <HAL_InitTick>
 8004292:	4603      	mov	r3, r0
 8004294:	72fb      	strb	r3, [r7, #11]

  return status;
 8004296:	7afb      	ldrb	r3, [r7, #11]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40022000 	.word	0x40022000
 80042a4:	40021000 	.word	0x40021000
 80042a8:	0800e638 	.word	0x0800e638
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000008 	.word	0x20000008

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c2:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042cc:	4b3b      	ldr	r3, [pc, #236]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x34>
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d121      	bne.n	8004326 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d11e      	bne.n	8004326 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042e8:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042f4:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 80042f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	e005      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004304:	4b2d      	ldr	r3, [pc, #180]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004310:	4a2b      	ldr	r2, [pc, #172]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10d      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004324:	e00a      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d102      	bne.n	8004332 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e004      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d101      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004338:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800433a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b0c      	cmp	r3, #12
 8004340:	d134      	bne.n	80043ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004342:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d003      	beq.n	800435a <HAL_RCC_GetSysClockFreq+0xa6>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d003      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0xac>
 8004358:	e005      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800435c:	617b      	str	r3, [r7, #20]
      break;
 800435e:	e005      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004362:	617b      	str	r3, [r7, #20]
      break;
 8004364:	e002      	b.n	800436c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	617b      	str	r3, [r7, #20]
      break;
 800436a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	3301      	adds	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	fb03 f202 	mul.w	r2, r3, r2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	0e5b      	lsrs	r3, r3, #25
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	3301      	adds	r3, #1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043ac:	69bb      	ldr	r3, [r7, #24]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3724      	adds	r7, #36	; 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	0800e650 	.word	0x0800e650
 80043c4:	00f42400 	.word	0x00f42400
 80043c8:	007a1200 	.word	0x007a1200

080043cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000000 	.word	0x20000000

080043e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043e8:	f7ff fff0 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	4904      	ldr	r1, [pc, #16]	; (800440c <HAL_RCC_GetPCLK1Freq+0x28>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	0800e648 	.word	0x0800e648

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004414:	f7ff ffda 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0adb      	lsrs	r3, r3, #11
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4904      	ldr	r1, [pc, #16]	; (8004438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	0800e648 	.word	0x0800e648

0800443c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004448:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004454:	f7ff f9a6 	bl	80037a4 <HAL_PWREx_GetVoltageRange>
 8004458:	6178      	str	r0, [r7, #20]
 800445a:	e014      	b.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	4a24      	ldr	r2, [pc, #144]	; (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004466:	6593      	str	r3, [r2, #88]	; 0x58
 8004468:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004474:	f7ff f996 	bl	80037a4 <HAL_PWREx_GetVoltageRange>
 8004478:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800447a:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004484:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448c:	d10b      	bne.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d919      	bls.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2ba0      	cmp	r3, #160	; 0xa0
 8004498:	d902      	bls.n	80044a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800449a:	2302      	movs	r3, #2
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	e013      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a0:	2301      	movs	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	e010      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d902      	bls.n	80044b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044ac:	2303      	movs	r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e00a      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	d102      	bne.n	80044be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044b8:	2302      	movs	r3, #2
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	e004      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b70      	cmp	r3, #112	; 0x70
 80044c2:	d101      	bne.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044c4:	2301      	movs	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 0207 	bic.w	r2, r3, #7
 80044d0:	4909      	ldr	r1, [pc, #36]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d001      	beq.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40022000 	.word	0x40022000

080044fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004504:	2300      	movs	r3, #0
 8004506:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004508:	2300      	movs	r3, #0
 800450a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004514:	2b00      	cmp	r3, #0
 8004516:	d031      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004520:	d01a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004522:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004526:	d814      	bhi.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800452c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004530:	d10f      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004532:	4b5d      	ldr	r3, [pc, #372]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a5c      	ldr	r2, [pc, #368]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800453e:	e00c      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f9de 	bl	8004908 <RCCEx_PLLSAI1_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004550:	e003      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	74fb      	strb	r3, [r7, #19]
      break;
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004560:	4b51      	ldr	r3, [pc, #324]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	494e      	ldr	r1, [pc, #312]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004576:	e001      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 809e 	beq.w	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458a:	2300      	movs	r3, #0
 800458c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800458e:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a4:	4b40      	ldr	r3, [pc, #256]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	4a3f      	ldr	r2, [pc, #252]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ae:	6593      	str	r3, [r2, #88]	; 0x58
 80045b0:	4b3d      	ldr	r3, [pc, #244]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045bc:	2301      	movs	r3, #1
 80045be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045c0:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a39      	ldr	r2, [pc, #228]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045cc:	f7fd f852 	bl	8001674 <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d2:	e009      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d4:	f7fd f84e 	bl	8001674 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d902      	bls.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	74fb      	strb	r3, [r7, #19]
        break;
 80045e6:	e005      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045e8:	4b30      	ldr	r3, [pc, #192]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ef      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d15a      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045fa:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004604:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01e      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	429a      	cmp	r2, r3
 8004614:	d019      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004616:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004620:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004622:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800463a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004642:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d016      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd f80e 	bl	8001674 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465a:	e00b      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd f80a 	bl	8001674 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d902      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	74fb      	strb	r3, [r7, #19]
            break;
 8004672:	e006      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ec      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004696:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800469e:	e009      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
 80046a4:	e006      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b4:	7c7b      	ldrb	r3, [r7, #17]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ba:	4b8a      	ldr	r3, [pc, #552]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	4a89      	ldr	r2, [pc, #548]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046d2:	4b84      	ldr	r3, [pc, #528]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f023 0203 	bic.w	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	4980      	ldr	r1, [pc, #512]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f4:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	f023 020c 	bic.w	r2, r3, #12
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	4978      	ldr	r1, [pc, #480]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004716:	4b73      	ldr	r3, [pc, #460]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	496f      	ldr	r1, [pc, #444]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004738:	4b6a      	ldr	r3, [pc, #424]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004746:	4967      	ldr	r1, [pc, #412]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800475a:	4b62      	ldr	r3, [pc, #392]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	495e      	ldr	r1, [pc, #376]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800477c:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	4956      	ldr	r1, [pc, #344]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800479e:	4b51      	ldr	r3, [pc, #324]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	494d      	ldr	r1, [pc, #308]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d028      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047c0:	4b48      	ldr	r3, [pc, #288]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	4945      	ldr	r1, [pc, #276]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047de:	d106      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e0:	4b40      	ldr	r3, [pc, #256]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a3f      	ldr	r2, [pc, #252]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ea:	60d3      	str	r3, [r2, #12]
 80047ec:	e011      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f6:	d10c      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3304      	adds	r3, #4
 80047fc:	2101      	movs	r1, #1
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f882 	bl	8004908 <RCCEx_PLLSAI1_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d028      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482c:	492d      	ldr	r1, [pc, #180]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800483c:	d106      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800483e:	4b29      	ldr	r3, [pc, #164]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	4a28      	ldr	r2, [pc, #160]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004848:	60d3      	str	r3, [r2, #12]
 800484a:	e011      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004854:	d10c      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	2101      	movs	r1, #1
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f853 	bl	8004908 <RCCEx_PLLSAI1_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800486c:	7cfb      	ldrb	r3, [r7, #19]
 800486e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01c      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	4916      	ldr	r1, [pc, #88]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800489a:	d10c      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f830 	bl	8004908 <RCCEx_PLLSAI1_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	4904      	ldr	r1, [pc, #16]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000

080048e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048f2:	f043 0304 	orr.w	r3, r3, #4
 80048f6:	6013      	str	r3, [r2, #0]
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000

08004908 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004916:	4b74      	ldr	r3, [pc, #464]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d018      	beq.n	8004954 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004922:	4b71      	ldr	r3, [pc, #452]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0203 	and.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d10d      	bne.n	800494e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
       ||
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800493a:	4b6b      	ldr	r3, [pc, #428]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
       ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d047      	beq.n	80049de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
 8004952:	e044      	b.n	80049de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b03      	cmp	r3, #3
 800495a:	d018      	beq.n	800498e <RCCEx_PLLSAI1_Config+0x86>
 800495c:	2b03      	cmp	r3, #3
 800495e:	d825      	bhi.n	80049ac <RCCEx_PLLSAI1_Config+0xa4>
 8004960:	2b01      	cmp	r3, #1
 8004962:	d002      	beq.n	800496a <RCCEx_PLLSAI1_Config+0x62>
 8004964:	2b02      	cmp	r3, #2
 8004966:	d009      	beq.n	800497c <RCCEx_PLLSAI1_Config+0x74>
 8004968:	e020      	b.n	80049ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800496a:	4b5f      	ldr	r3, [pc, #380]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11d      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497a:	e01a      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800497c:	4b5a      	ldr	r3, [pc, #360]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498c:	e013      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800498e:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800499a:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049aa:	e006      	b.n	80049ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      break;
 80049b0:	e004      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b2:	bf00      	nop
 80049b4:	e002      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049c2:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6819      	ldr	r1, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	430b      	orrs	r3, r1
 80049d8:	4943      	ldr	r1, [pc, #268]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d17c      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049e4:	4b40      	ldr	r3, [pc, #256]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3f      	ldr	r2, [pc, #252]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fc fe40 	bl	8001674 <HAL_GetTick>
 80049f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f6:	e009      	b.n	8004a0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f8:	f7fc fe3c 	bl	8001674 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d902      	bls.n	8004a0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	73fb      	strb	r3, [r7, #15]
        break;
 8004a0a:	e005      	b.n	8004a18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a0c:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ef      	bne.n	80049f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d15f      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d110      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a24:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6892      	ldr	r2, [r2, #8]
 8004a34:	0211      	lsls	r1, r2, #8
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68d2      	ldr	r2, [r2, #12]
 8004a3a:	06d2      	lsls	r2, r2, #27
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	492a      	ldr	r1, [pc, #168]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	610b      	str	r3, [r1, #16]
 8004a44:	e027      	b.n	8004a96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d112      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a4c:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6892      	ldr	r2, [r2, #8]
 8004a5c:	0211      	lsls	r1, r2, #8
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6912      	ldr	r2, [r2, #16]
 8004a62:	0852      	lsrs	r2, r2, #1
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0552      	lsls	r2, r2, #21
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	491f      	ldr	r1, [pc, #124]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]
 8004a70:	e011      	b.n	8004a96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6892      	ldr	r2, [r2, #8]
 8004a82:	0211      	lsls	r1, r2, #8
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6952      	ldr	r2, [r2, #20]
 8004a88:	0852      	lsrs	r2, r2, #1
 8004a8a:	3a01      	subs	r2, #1
 8004a8c:	0652      	lsls	r2, r2, #25
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	4915      	ldr	r1, [pc, #84]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fc fde7 	bl	8001674 <HAL_GetTick>
 8004aa6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa8:	e009      	b.n	8004abe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aaa:	f7fc fde3 	bl	8001674 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d902      	bls.n	8004abe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	73fb      	strb	r3, [r7, #15]
          break;
 8004abc:	e005      	b.n	8004aca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ef      	beq.n	8004aaa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	4903      	ldr	r1, [pc, #12]	; (8004ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000

08004aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e095      	b.n	8004c2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b0e:	d009      	beq.n	8004b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
 8004b16:	e005      	b.n	8004b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc f808 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b64:	d902      	bls.n	8004b6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e002      	b.n	8004b72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b7a:	d007      	beq.n	8004b8c <HAL_SPI_Init+0xa0>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	ea42 0103 	orr.w	r1, r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	f003 0204 	and.w	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c08:	ea42 0103 	orr.w	r1, r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b08a      	sub	sp, #40	; 0x28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c40:	2301      	movs	r3, #1
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x26>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e20a      	b.n	800506e <HAL_SPI_TransmitReceive+0x43c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c60:	f7fc fd08 	bl	8001674 <HAL_GetTick>
 8004c64:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c6c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c74:	887b      	ldrh	r3, [r7, #2]
 8004c76:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c78:	887b      	ldrh	r3, [r7, #2]
 8004c7a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c7c:	7efb      	ldrb	r3, [r7, #27]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d00e      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x6e>
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c88:	d106      	bne.n	8004c98 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <HAL_SPI_TransmitReceive+0x66>
 8004c92:	7efb      	ldrb	r3, [r7, #27]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d003      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c9e:	e1e0      	b.n	8005062 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x80>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x80>
 8004cac:	887b      	ldrh	r3, [r7, #2]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004cb8:	e1d3      	b.n	8005062 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d003      	beq.n	8004cce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2205      	movs	r2, #5
 8004cca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	887a      	ldrh	r2, [r7, #2]
 8004cde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	887a      	ldrh	r2, [r7, #2]
 8004cfa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d10:	d802      	bhi.n	8004d18 <HAL_SPI_TransmitReceive+0xe6>
 8004d12:	8a3b      	ldrh	r3, [r7, #16]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d908      	bls.n	8004d2a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d26:	605a      	str	r2, [r3, #4]
 8004d28:	e007      	b.n	8004d3a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d007      	beq.n	8004d58 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d60:	f240 8081 	bls.w	8004e66 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x140>
 8004d6c:	8a7b      	ldrh	r3, [r7, #18]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d16d      	bne.n	8004e4e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	881a      	ldrh	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d96:	e05a      	b.n	8004e4e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d11b      	bne.n	8004dde <HAL_SPI_TransmitReceive+0x1ac>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d016      	beq.n	8004dde <HAL_SPI_TransmitReceive+0x1ac>
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d113      	bne.n	8004dde <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	1c9a      	adds	r2, r3, #2
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d11c      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x1f4>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d016      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	b292      	uxth	r2, r2
 8004e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	1c9a      	adds	r2, r3, #2
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e22:	2301      	movs	r3, #1
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e26:	f7fc fc25 	bl	8001674 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d80b      	bhi.n	8004e4e <HAL_SPI_TransmitReceive+0x21c>
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d007      	beq.n	8004e4e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004e4c:	e109      	b.n	8005062 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d19f      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x166>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d199      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x166>
 8004e64:	e0e3      	b.n	800502e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x244>
 8004e6e:	8a7b      	ldrh	r3, [r7, #18]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 80cf 	bne.w	8005014 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d912      	bls.n	8004ea6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ea4:	e0b6      	b.n	8005014 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ecc:	e0a2      	b.n	8005014 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d134      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x314>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02f      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x314>
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d12c      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d912      	bls.n	8004f1c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	1c9a      	adds	r2, r3, #2
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b02      	subs	r3, #2
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f1a:	e012      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d148      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x3b4>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d042      	beq.n	8004fe6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d923      	bls.n	8004fb4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	b292      	uxth	r2, r2
 8004f78:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	1c9a      	adds	r2, r3, #2
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b02      	subs	r3, #2
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d81f      	bhi.n	8004fe2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	e016      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f103 020c 	add.w	r2, r3, #12
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	7812      	ldrb	r2, [r2, #0]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fe6:	f7fc fb45 	bl	8001674 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d803      	bhi.n	8004ffe <HAL_SPI_TransmitReceive+0x3cc>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d102      	bne.n	8005004 <HAL_SPI_TransmitReceive+0x3d2>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	2b00      	cmp	r3, #0
 8005002:	d107      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005012:	e026      	b.n	8005062 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	f47f af57 	bne.w	8004ece <HAL_SPI_TransmitReceive+0x29c>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	f47f af50 	bne.w	8004ece <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f93e 	bl	80052b4 <SPI_EndRxTxTransaction>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005058:	e003      	b.n	8005062 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800506a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800506e:	4618      	mov	r0, r3
 8005070:	3728      	adds	r7, #40	; 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005088:	f7fc faf4 	bl	8001674 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	4413      	add	r3, r2
 8005096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005098:	f7fc faec 	bl	8001674 <HAL_GetTick>
 800509c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509e:	4b39      	ldr	r3, [pc, #228]	; (8005184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	015b      	lsls	r3, r3, #5
 80050a4:	0d1b      	lsrs	r3, r3, #20
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ae:	e054      	b.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d050      	beq.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b8:	f7fc fadc 	bl	8001674 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d902      	bls.n	80050ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d13d      	bne.n	800514a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e6:	d111      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f0:	d004      	beq.n	80050fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d107      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800510a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005114:	d10f      	bne.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e017      	b.n	800517a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3b01      	subs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	429a      	cmp	r2, r3
 8005176:	d19b      	bne.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000000 	.word	0x20000000

08005188 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800519a:	f7fc fa6b 	bl	8001674 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	4413      	add	r3, r2
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80051aa:	f7fc fa63 	bl	8001674 <HAL_GetTick>
 80051ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051b8:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	00da      	lsls	r2, r3, #3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	0d1b      	lsrs	r3, r3, #20
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051d0:	e060      	b.n	8005294 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051d8:	d107      	bne.n	80051ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d050      	beq.n	8005294 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f2:	f7fc fa3f 	bl	8001674 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	429a      	cmp	r2, r3
 8005200:	d902      	bls.n	8005208 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d13d      	bne.n	8005284 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005216:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005220:	d111      	bne.n	8005246 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522a:	d004      	beq.n	8005236 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005234:	d107      	bne.n	8005246 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005244:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524e:	d10f      	bne.n	8005270 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800526e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e010      	b.n	80052a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	3b01      	subs	r3, #1
 8005292:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d196      	bne.n	80051d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3728      	adds	r7, #40	; 0x28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000000 	.word	0x20000000

080052b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff ff5b 	bl	8005188 <SPI_WaitFifoStateUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e027      	b.n	8005338 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2200      	movs	r2, #0
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fec0 	bl	8005078 <SPI_WaitFlagStateUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e014      	b.n	8005338 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2200      	movs	r2, #0
 8005316:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ff34 	bl	8005188 <SPI_WaitFifoStateUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e000      	b.n	8005338 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e049      	b.n	80053e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fb fd9c 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f000 fa7e 	bl	8005880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d001      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e03b      	b.n	8005480 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <HAL_TIM_Base_Start_IT+0x9c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIM_Base_Start_IT+0x4e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d004      	beq.n	800543e <HAL_TIM_Base_Start_IT+0x4e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a15      	ldr	r2, [pc, #84]	; (8005490 <HAL_TIM_Base_Start_IT+0xa0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d115      	bne.n	800546a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	4b13      	ldr	r3, [pc, #76]	; (8005494 <HAL_TIM_Base_Start_IT+0xa4>)
 8005446:	4013      	ands	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b06      	cmp	r3, #6
 800544e:	d015      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x8c>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005456:	d011      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005468:	e008      	b.n	800547c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e000      	b.n	800547e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40014000 	.word	0x40014000
 8005494:	00010007 	.word	0x00010007

08005498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d020      	beq.n	80054fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0202 	mvn.w	r2, #2
 80054cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9ad 	bl	8005842 <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f99f 	bl	800582e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f9b0 	bl	8005856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d020      	beq.n	8005548 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0204 	mvn.w	r2, #4
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f987 	bl	8005842 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f979 	bl	800582e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f98a 	bl	8005856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d020      	beq.n	8005594 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0208 	mvn.w	r2, #8
 8005564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2204      	movs	r2, #4
 800556a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f961 	bl	8005842 <HAL_TIM_IC_CaptureCallback>
 8005580:	e005      	b.n	800558e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f953 	bl	800582e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f964 	bl	8005856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b00      	cmp	r3, #0
 800559c:	d020      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01b      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0210 	mvn.w	r2, #16
 80055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2208      	movs	r2, #8
 80055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f93b 	bl	8005842 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f92d 	bl	800582e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f93e 	bl	8005856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0201 	mvn.w	r2, #1
 80055fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb fa18 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa9a 	bl	8005b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00c      	beq.n	800564c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa92 	bl	8005b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d007      	beq.n	8005670 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8fd 	bl	800586a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00c      	beq.n	8005694 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0220 	mvn.w	r2, #32
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa5a 	bl	8005b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e0b6      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x18a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f4:	d03e      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0xd8>
 80056f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fa:	f200 8087 	bhi.w	800580c <HAL_TIM_ConfigClockSource+0x170>
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005702:	f000 8086 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x176>
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570a:	d87f      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x170>
 800570c:	2b70      	cmp	r3, #112	; 0x70
 800570e:	d01a      	beq.n	8005746 <HAL_TIM_ConfigClockSource+0xaa>
 8005710:	2b70      	cmp	r3, #112	; 0x70
 8005712:	d87b      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x170>
 8005714:	2b60      	cmp	r3, #96	; 0x60
 8005716:	d050      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x11e>
 8005718:	2b60      	cmp	r3, #96	; 0x60
 800571a:	d877      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x170>
 800571c:	2b50      	cmp	r3, #80	; 0x50
 800571e:	d03c      	beq.n	800579a <HAL_TIM_ConfigClockSource+0xfe>
 8005720:	2b50      	cmp	r3, #80	; 0x50
 8005722:	d873      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x170>
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d058      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x13e>
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d86f      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x170>
 800572c:	2b30      	cmp	r3, #48	; 0x30
 800572e:	d064      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x15e>
 8005730:	2b30      	cmp	r3, #48	; 0x30
 8005732:	d86b      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x170>
 8005734:	2b20      	cmp	r3, #32
 8005736:	d060      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x15e>
 8005738:	2b20      	cmp	r3, #32
 800573a:	d867      	bhi.n	800580c <HAL_TIM_ConfigClockSource+0x170>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d05c      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x15e>
 8005740:	2b10      	cmp	r3, #16
 8005742:	d05a      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x15e>
 8005744:	e062      	b.n	800580c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	f000 f971 	bl	8005a3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	609a      	str	r2, [r3, #8]
      break;
 8005772:	e04f      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	f000 f95a 	bl	8005a3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005796:	609a      	str	r2, [r3, #8]
      break;
 8005798:	e03c      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 f8ce 	bl	8005948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2150      	movs	r1, #80	; 0x50
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f927 	bl	8005a06 <TIM_ITRx_SetConfig>
      break;
 80057b8:	e02c      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 f8ed 	bl	80059a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2160      	movs	r1, #96	; 0x60
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f917 	bl	8005a06 <TIM_ITRx_SetConfig>
      break;
 80057d8:	e01c      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e6:	461a      	mov	r2, r3
 80057e8:	f000 f8ae 	bl	8005948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2140      	movs	r1, #64	; 0x40
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f907 	bl	8005a06 <TIM_ITRx_SetConfig>
      break;
 80057f8:	e00c      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f000 f8fe 	bl	8005a06 <TIM_ITRx_SetConfig>
      break;
 800580a:	e003      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      break;
 8005810:	e000      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a2a      	ldr	r2, [pc, #168]	; (800593c <TIM_Base_SetConfig+0xbc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0x20>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589e:	d108      	bne.n	80058b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a21      	ldr	r2, [pc, #132]	; (800593c <TIM_Base_SetConfig+0xbc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0x52>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0x52>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <TIM_Base_SetConfig+0xc0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0x52>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <TIM_Base_SetConfig+0xc4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0c      	ldr	r2, [pc, #48]	; (800593c <TIM_Base_SetConfig+0xbc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_Base_SetConfig+0xa0>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <TIM_Base_SetConfig+0xc0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0xa0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <TIM_Base_SetConfig+0xc4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40014000 	.word	0x40014000
 8005944:	40014400 	.word	0x40014400

08005948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0201 	bic.w	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 030a 	bic.w	r3, r3, #10
 8005984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b087      	sub	sp, #28
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f023 0210 	bic.w	r2, r3, #16
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	031b      	lsls	r3, r3, #12
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f043 0307 	orr.w	r3, r3, #7
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	609a      	str	r2, [r3, #8]
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	021a      	lsls	r2, r3, #8
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e04f      	b.n	8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a21      	ldr	r2, [pc, #132]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d108      	bne.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ac4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afc:	d004      	beq.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a10      	ldr	r2, [pc, #64]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d10c      	bne.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40014000 	.word	0x40014000

08005b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e040      	b.n	8005c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fb f9d0 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	; 0x24
 8005bb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa54 	bl	8006078 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f825 	bl	8005c20 <UART_SetConfig>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e01b      	b.n	8005c18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fad3 	bl	80061bc <UART_CheckIdleState>
 8005c16:	4603      	mov	r3, r0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c24:	b08a      	sub	sp, #40	; 0x28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4bb4      	ldr	r3, [pc, #720]	; (8005f20 <UART_SetConfig+0x300>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4aa9      	ldr	r2, [pc, #676]	; (8005f24 <UART_SetConfig+0x304>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4aa0      	ldr	r2, [pc, #640]	; (8005f28 <UART_SetConfig+0x308>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d126      	bne.n	8005cf8 <UART_SetConfig+0xd8>
 8005caa:	4ba0      	ldr	r3, [pc, #640]	; (8005f2c <UART_SetConfig+0x30c>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d81b      	bhi.n	8005cf0 <UART_SetConfig+0xd0>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <UART_SetConfig+0xa0>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	08005cd9 	.word	0x08005cd9
 8005ccc:	08005ce9 	.word	0x08005ce9
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd6:	e080      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cde:	e07c      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce6:	e078      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cee:	e074      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf6:	e070      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a8c      	ldr	r2, [pc, #560]	; (8005f30 <UART_SetConfig+0x310>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d138      	bne.n	8005d74 <UART_SetConfig+0x154>
 8005d02:	4b8a      	ldr	r3, [pc, #552]	; (8005f2c <UART_SetConfig+0x30c>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	f003 030c 	and.w	r3, r3, #12
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	d82d      	bhi.n	8005d6c <UART_SetConfig+0x14c>
 8005d10:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <UART_SetConfig+0xf8>)
 8005d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d16:	bf00      	nop
 8005d18:	08005d4d 	.word	0x08005d4d
 8005d1c:	08005d6d 	.word	0x08005d6d
 8005d20:	08005d6d 	.word	0x08005d6d
 8005d24:	08005d6d 	.word	0x08005d6d
 8005d28:	08005d5d 	.word	0x08005d5d
 8005d2c:	08005d6d 	.word	0x08005d6d
 8005d30:	08005d6d 	.word	0x08005d6d
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d55 	.word	0x08005d55
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005d6d 	.word	0x08005d6d
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d65 	.word	0x08005d65
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d52:	e042      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005d54:	2302      	movs	r3, #2
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5a:	e03e      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d62:	e03a      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005d64:	2308      	movs	r3, #8
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6a:	e036      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d72:	e032      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a6a      	ldr	r2, [pc, #424]	; (8005f24 <UART_SetConfig+0x304>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d12a      	bne.n	8005dd4 <UART_SetConfig+0x1b4>
 8005d7e:	4b6b      	ldr	r3, [pc, #428]	; (8005f2c <UART_SetConfig+0x30c>)
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d8c:	d01a      	beq.n	8005dc4 <UART_SetConfig+0x1a4>
 8005d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d92:	d81b      	bhi.n	8005dcc <UART_SetConfig+0x1ac>
 8005d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d98:	d00c      	beq.n	8005db4 <UART_SetConfig+0x194>
 8005d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d9e:	d815      	bhi.n	8005dcc <UART_SetConfig+0x1ac>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <UART_SetConfig+0x18c>
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da8:	d008      	beq.n	8005dbc <UART_SetConfig+0x19c>
 8005daa:	e00f      	b.n	8005dcc <UART_SetConfig+0x1ac>
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db2:	e012      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005db4:	2302      	movs	r3, #2
 8005db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dba:	e00e      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e00a      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e006      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e002      	b.n	8005dda <UART_SetConfig+0x1ba>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a51      	ldr	r2, [pc, #324]	; (8005f24 <UART_SetConfig+0x304>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d17a      	bne.n	8005eda <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d824      	bhi.n	8005e36 <UART_SetConfig+0x216>
 8005dec:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <UART_SetConfig+0x1d4>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e37 	.word	0x08005e37
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e37 	.word	0x08005e37
 8005e04:	08005e27 	.word	0x08005e27
 8005e08:	08005e37 	.word	0x08005e37
 8005e0c:	08005e37 	.word	0x08005e37
 8005e10:	08005e37 	.word	0x08005e37
 8005e14:	08005e2f 	.word	0x08005e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e18:	f7fe fae4 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005e1c:	61f8      	str	r0, [r7, #28]
        break;
 8005e1e:	e010      	b.n	8005e42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b44      	ldr	r3, [pc, #272]	; (8005f34 <UART_SetConfig+0x314>)
 8005e22:	61fb      	str	r3, [r7, #28]
        break;
 8005e24:	e00d      	b.n	8005e42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fe fa45 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8005e2a:	61f8      	str	r0, [r7, #28]
        break;
 8005e2c:	e009      	b.n	8005e42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e32:	61fb      	str	r3, [r7, #28]
        break;
 8005e34:	e005      	b.n	8005e42 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8107 	beq.w	8006058 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	4413      	add	r3, r2
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d305      	bcc.n	8005e66 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d903      	bls.n	8005e6e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e6c:	e0f4      	b.n	8006058 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2200      	movs	r2, #0
 8005e72:	461c      	mov	r4, r3
 8005e74:	4615      	mov	r5, r2
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	022b      	lsls	r3, r5, #8
 8005e80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e84:	0222      	lsls	r2, r4, #8
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	6849      	ldr	r1, [r1, #4]
 8005e8a:	0849      	lsrs	r1, r1, #1
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	4688      	mov	r8, r1
 8005e90:	4681      	mov	r9, r0
 8005e92:	eb12 0a08 	adds.w	sl, r2, r8
 8005e96:	eb43 0b09 	adc.w	fp, r3, r9
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea8:	4650      	mov	r0, sl
 8005eaa:	4659      	mov	r1, fp
 8005eac:	f7fa f9e8 	bl	8000280 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebe:	d308      	bcc.n	8005ed2 <UART_SetConfig+0x2b2>
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec6:	d204      	bcs.n	8005ed2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	e0c2      	b.n	8006058 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ed8:	e0be      	b.n	8006058 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee2:	d16a      	bne.n	8005fba <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d834      	bhi.n	8005f56 <UART_SetConfig+0x336>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0x2d4>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f39 	.word	0x08005f39
 8005efc:	08005f41 	.word	0x08005f41
 8005f00:	08005f57 	.word	0x08005f57
 8005f04:	08005f47 	.word	0x08005f47
 8005f08:	08005f57 	.word	0x08005f57
 8005f0c:	08005f57 	.word	0x08005f57
 8005f10:	08005f57 	.word	0x08005f57
 8005f14:	08005f4f 	.word	0x08005f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fe fa64 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e020      	b.n	8005f62 <UART_SetConfig+0x342>
 8005f20:	efff69f3 	.word	0xefff69f3
 8005f24:	40008000 	.word	0x40008000
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f38:	f7fe fa6a 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8005f3c:	61f8      	str	r0, [r7, #28]
        break;
 8005f3e:	e010      	b.n	8005f62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f40:	4b4c      	ldr	r3, [pc, #304]	; (8006074 <UART_SetConfig+0x454>)
 8005f42:	61fb      	str	r3, [r7, #28]
        break;
 8005f44:	e00d      	b.n	8005f62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f46:	f7fe f9b5 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8005f4a:	61f8      	str	r0, [r7, #28]
        break;
 8005f4c:	e009      	b.n	8005f62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f52:	61fb      	str	r3, [r7, #28]
        break;
 8005f54:	e005      	b.n	8005f62 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d077      	beq.n	8006058 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	005a      	lsls	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	441a      	add	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b0f      	cmp	r3, #15
 8005f82:	d916      	bls.n	8005fb2 <UART_SetConfig+0x392>
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8a:	d212      	bcs.n	8005fb2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f023 030f 	bic.w	r3, r3, #15
 8005f94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	8afb      	ldrh	r3, [r7, #22]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	8afa      	ldrh	r2, [r7, #22]
 8005fae:	60da      	str	r2, [r3, #12]
 8005fb0:	e052      	b.n	8006058 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fb8:	e04e      	b.n	8006058 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d827      	bhi.n	8006012 <UART_SetConfig+0x3f2>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <UART_SetConfig+0x3a8>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	08006013 	.word	0x08006013
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	08006013 	.word	0x08006013
 8005fe0:	08006013 	.word	0x08006013
 8005fe4:	08006013 	.word	0x08006013
 8005fe8:	0800600b 	.word	0x0800600b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fec:	f7fe f9fa 	bl	80043e4 <HAL_RCC_GetPCLK1Freq>
 8005ff0:	61f8      	str	r0, [r7, #28]
        break;
 8005ff2:	e014      	b.n	800601e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff4:	f7fe fa0c 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8005ff8:	61f8      	str	r0, [r7, #28]
        break;
 8005ffa:	e010      	b.n	800601e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ffc:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <UART_SetConfig+0x454>)
 8005ffe:	61fb      	str	r3, [r7, #28]
        break;
 8006000:	e00d      	b.n	800601e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006002:	f7fe f957 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8006006:	61f8      	str	r0, [r7, #28]
        break;
 8006008:	e009      	b.n	800601e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	61fb      	str	r3, [r7, #28]
        break;
 8006010:	e005      	b.n	800601e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800601c:	bf00      	nop
    }

    if (pclk != 0U)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d019      	beq.n	8006058 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	085a      	lsrs	r2, r3, #1
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	441a      	add	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	fbb2 f3f3 	udiv	r3, r2, r3
 8006036:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b0f      	cmp	r3, #15
 800603c:	d909      	bls.n	8006052 <UART_SetConfig+0x432>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006044:	d205      	bcs.n	8006052 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60da      	str	r2, [r3, #12]
 8006050:	e002      	b.n	8006058 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006064:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006068:	4618      	mov	r0, r3
 800606a:	3728      	adds	r7, #40	; 0x28
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006072:	bf00      	nop
 8006074:	00f42400 	.word	0x00f42400

08006078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01a      	beq.n	800618e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006176:	d10a      	bne.n	800618e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b098      	sub	sp, #96	; 0x60
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061cc:	f7fb fa52 	bl	8001674 <HAL_GetTick>
 80061d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d12e      	bne.n	800623e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061e8:	2200      	movs	r2, #0
 80061ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f88c 	bl	800630c <UART_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d021      	beq.n	800623e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620e:	653b      	str	r3, [r7, #80]	; 0x50
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006218:	647b      	str	r3, [r7, #68]	; 0x44
 800621a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800621e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e062      	b.n	8006304 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b04      	cmp	r3, #4
 800624a:	d149      	bne.n	80062e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800624c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006254:	2200      	movs	r2, #0
 8006256:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f856 	bl	800630c <UART_WaitOnFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d03c      	beq.n	80062e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	623b      	str	r3, [r7, #32]
   return(result);
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800627a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006284:	633b      	str	r3, [r7, #48]	; 0x30
 8006286:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800628a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e6      	bne.n	8006266 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3308      	adds	r3, #8
 800629e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3308      	adds	r3, #8
 80062b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062b8:	61fa      	str	r2, [r7, #28]
 80062ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	617b      	str	r3, [r7, #20]
   return(result);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e5      	bne.n	8006298 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e011      	b.n	8006304 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3758      	adds	r7, #88	; 0x58
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631c:	e049      	b.n	80063b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006324:	d045      	beq.n	80063b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006326:	f7fb f9a5 	bl	8001674 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <UART_WaitOnFlagUntilTimeout+0x30>
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e048      	b.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d031      	beq.n	80063b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b08      	cmp	r3, #8
 800635a:	d110      	bne.n	800637e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2208      	movs	r2, #8
 8006362:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f838 	bl	80063da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2208      	movs	r2, #8
 800636e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e029      	b.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638c:	d111      	bne.n	80063b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f81e 	bl	80063da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e00f      	b.n	80063d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4013      	ands	r3, r2
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	bf0c      	ite	eq
 80063c2:	2301      	moveq	r3, #1
 80063c4:	2300      	movne	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d0a6      	beq.n	800631e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063da:	b480      	push	{r7}
 80063dc:	b095      	sub	sp, #84	; 0x54
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006400:	643b      	str	r3, [r7, #64]	; 0x40
 8006402:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e6      	bne.n	80063e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	61fb      	str	r3, [r7, #28]
   return(result);
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	64bb      	str	r3, [r7, #72]	; 0x48
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006434:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800643a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e5      	bne.n	8006414 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644c:	2b01      	cmp	r3, #1
 800644e:	d118      	bne.n	8006482 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	60bb      	str	r3, [r7, #8]
   return(result);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f023 0310 	bic.w	r3, r3, #16
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6979      	ldr	r1, [r7, #20]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	613b      	str	r3, [r7, #16]
   return(result);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e6      	bne.n	8006450 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006496:	bf00      	nop
 8006498:	3754      	adds	r7, #84	; 0x54
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064a2:	b084      	sub	sp, #16
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	f107 0014 	add.w	r0, r7, #20
 80064b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	b004      	add	sp, #16
 80064c2:	4770      	bx	lr

080064c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80064d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064fa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80064fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	b29b      	uxth	r3, r3
 800650c:	43db      	mvns	r3, r3
 800650e:	b29b      	uxth	r3, r3
 8006510:	4013      	ands	r3, r2
 8006512:	b29a      	uxth	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006542:	b084      	sub	sp, #16
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	f107 0014 	add.w	r0, r7, #20
 8006550:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	b004      	add	sp, #16
 8006582:	4770      	bx	lr

08006584 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b09d      	sub	sp, #116	; 0x74
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	78db      	ldrb	r3, [r3, #3]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d81f      	bhi.n	8006626 <USB_ActivateEndpoint+0x72>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <USB_ActivateEndpoint+0x38>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	08006619 	.word	0x08006619
 80065f4:	0800662f 	.word	0x0800662f
 80065f8:	0800660b 	.word	0x0800660b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80065fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006604:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006608:	e012      	b.n	8006630 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800660a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800660e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006612:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006616:	e00b      	b.n	8006630 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006618:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800661c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006620:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006624:	e004      	b.n	8006630 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800662c:	e000      	b.n	8006630 <USB_ActivateEndpoint+0x7c>
      break;
 800662e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800663e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664e:	b29b      	uxth	r3, r3
 8006650:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	b21b      	sxth	r3, r3
 8006662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	b21a      	sxth	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b21b      	sxth	r3, r3
 8006672:	4313      	orrs	r3, r2
 8006674:	b21b      	sxth	r3, r3
 8006676:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	441a      	add	r2, r3
 8006684:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006698:	b29b      	uxth	r3, r3
 800669a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	7b1b      	ldrb	r3, [r3, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 8178 	bne.w	8006996 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8084 	beq.w	80067b8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	4413      	add	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	00da      	lsls	r2, r3, #3
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	88db      	ldrh	r3, [r3, #6]
 80066d8:	085b      	lsrs	r3, r3, #1
 80066da:	b29b      	uxth	r3, r3
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	827b      	strh	r3, [r7, #18]
 80066f2:	8a7b      	ldrh	r3, [r7, #18]
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01b      	beq.n	8006734 <USB_ActivateEndpoint+0x180>
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006712:	823b      	strh	r3, [r7, #16]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	441a      	add	r2, r3
 800671e:	8a3b      	ldrh	r3, [r7, #16]
 8006720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006730:	b29b      	uxth	r3, r3
 8006732:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	78db      	ldrb	r3, [r3, #3]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d020      	beq.n	800677e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006752:	81bb      	strh	r3, [r7, #12]
 8006754:	89bb      	ldrh	r3, [r7, #12]
 8006756:	f083 0320 	eor.w	r3, r3, #32
 800675a:	81bb      	strh	r3, [r7, #12]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	441a      	add	r2, r3
 8006766:	89bb      	ldrh	r3, [r7, #12]
 8006768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006778:	b29b      	uxth	r3, r3
 800677a:	8013      	strh	r3, [r2, #0]
 800677c:	e2d5      	b.n	8006d2a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006794:	81fb      	strh	r3, [r7, #14]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	441a      	add	r2, r3
 80067a0:	89fb      	ldrh	r3, [r7, #14]
 80067a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	8013      	strh	r3, [r2, #0]
 80067b6:	e2b8      	b.n	8006d2a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	633b      	str	r3, [r7, #48]	; 0x30
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	4413      	add	r3, r2
 80067ca:	633b      	str	r3, [r7, #48]	; 0x30
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	00da      	lsls	r2, r3, #3
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	4413      	add	r3, r2
 80067d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	88db      	ldrh	r3, [r3, #6]
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	4413      	add	r3, r2
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	00da      	lsls	r2, r3, #3
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	4413      	add	r3, r2
 800680a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681a:	b29a      	uxth	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b3e      	cmp	r3, #62	; 0x3e
 8006826:	d91d      	bls.n	8006864 <USB_ActivateEndpoint+0x2b0>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f003 031f 	and.w	r3, r3, #31
 8006838:	2b00      	cmp	r3, #0
 800683a:	d102      	bne.n	8006842 <USB_ActivateEndpoint+0x28e>
 800683c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800683e:	3b01      	subs	r3, #1
 8006840:	66bb      	str	r3, [r7, #104]	; 0x68
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29a      	uxth	r2, r3
 8006848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800684a:	b29b      	uxth	r3, r3
 800684c:	029b      	lsls	r3, r3, #10
 800684e:	b29b      	uxth	r3, r3
 8006850:	4313      	orrs	r3, r2
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685c:	b29a      	uxth	r2, r3
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e026      	b.n	80068b2 <USB_ActivateEndpoint+0x2fe>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <USB_ActivateEndpoint+0x2ce>
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e017      	b.n	80068b2 <USB_ActivateEndpoint+0x2fe>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	66bb      	str	r3, [r7, #104]	; 0x68
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <USB_ActivateEndpoint+0x2e8>
 8006896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006898:	3301      	adds	r3, #1
 800689a:	66bb      	str	r3, [r7, #104]	; 0x68
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	4313      	orrs	r3, r2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	847b      	strh	r3, [r7, #34]	; 0x22
 80068c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01b      	beq.n	8006902 <USB_ActivateEndpoint+0x34e>
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e0:	843b      	strh	r3, [r7, #32]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	441a      	add	r2, r3
 80068ec:	8c3b      	ldrh	r3, [r7, #32]
 80068ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fe:	b29b      	uxth	r3, r3
 8006900:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d124      	bne.n	8006954 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	83bb      	strh	r3, [r7, #28]
 8006922:	8bbb      	ldrh	r3, [r7, #28]
 8006924:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006928:	83bb      	strh	r3, [r7, #28]
 800692a:	8bbb      	ldrh	r3, [r7, #28]
 800692c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006930:	83bb      	strh	r3, [r7, #28]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	8bbb      	ldrh	r3, [r7, #28]
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
 8006952:	e1ea      	b.n	8006d2a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	83fb      	strh	r3, [r7, #30]
 800696c:	8bfb      	ldrh	r3, [r7, #30]
 800696e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006972:	83fb      	strh	r3, [r7, #30]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	8bfb      	ldrh	r3, [r7, #30]
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]
 8006994:	e1c9      	b.n	8006d2a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	78db      	ldrb	r3, [r3, #3]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d11e      	bne.n	80069dc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80069c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80069d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8013      	strh	r3, [r2, #0]
 80069da:	e01d      	b.n	8006a18 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a28:	4413      	add	r3, r2
 8006a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	00da      	lsls	r2, r3, #3
 8006a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	891b      	ldrh	r3, [r3, #8]
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5c:	4413      	add	r3, r2
 8006a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	00da      	lsls	r2, r3, #3
 8006a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a68:	4413      	add	r3, r2
 8006a6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	895b      	ldrh	r3, [r3, #10]
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f040 8093 	bne.w	8006bb0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01b      	beq.n	8006ade <USB_ActivateEndpoint+0x52a>
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006aec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01b      	beq.n	8006b2e <USB_ActivateEndpoint+0x57a>
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	873b      	strh	r3, [r7, #56]	; 0x38
 8006b46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b4c:	873b      	strh	r3, [r7, #56]	; 0x38
 8006b4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b54:	873b      	strh	r3, [r7, #56]	; 0x38
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	441a      	add	r2, r3
 8006b60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
 8006bae:	e0bc      	b.n	8006d2a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006bc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01d      	beq.n	8006c08 <USB_ActivateEndpoint+0x654>
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	441a      	add	r2, r3
 8006bf0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006c18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01d      	beq.n	8006c60 <USB_ActivateEndpoint+0x6ac>
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	441a      	add	r2, r3
 8006c48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	78db      	ldrb	r3, [r3, #3]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d024      	beq.n	8006cb2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006c82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c86:	f083 0320 	eor.w	r3, r3, #32
 8006c8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	8013      	strh	r3, [r2, #0]
 8006cb0:	e01d      	b.n	8006cee <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	441a      	add	r2, r3
 8006cd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006d2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3774      	adds	r7, #116	; 0x74
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop

08006d3c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b08d      	sub	sp, #52	; 0x34
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	7b1b      	ldrb	r3, [r3, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f040 808e 	bne.w	8006e6c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	785b      	ldrb	r3, [r3, #1]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d044      	beq.n	8006de2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	81bb      	strh	r3, [r7, #12]
 8006d66:	89bb      	ldrh	r3, [r7, #12]
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01b      	beq.n	8006da8 <USB_DeactivateEndpoint+0x6c>
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d86:	817b      	strh	r3, [r7, #10]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	897b      	ldrh	r3, [r7, #10]
 8006d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dbe:	813b      	strh	r3, [r7, #8]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	893b      	ldrh	r3, [r7, #8]
 8006dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	8013      	strh	r3, [r2, #0]
 8006de0:	e192      	b.n	8007108 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	827b      	strh	r3, [r7, #18]
 8006df0:	8a7b      	ldrh	r3, [r7, #18]
 8006df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01b      	beq.n	8006e32 <USB_DeactivateEndpoint+0xf6>
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e10:	823b      	strh	r3, [r7, #16]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	8a3b      	ldrh	r3, [r7, #16]
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e48:	81fb      	strh	r3, [r7, #14]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	89fb      	ldrh	r3, [r7, #14]
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]
 8006e6a:	e14d      	b.n	8007108 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	785b      	ldrb	r3, [r3, #1]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f040 80a5 	bne.w	8006fc0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	843b      	strh	r3, [r7, #32]
 8006e84:	8c3b      	ldrh	r3, [r7, #32]
 8006e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01b      	beq.n	8006ec6 <USB_DeactivateEndpoint+0x18a>
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea4:	83fb      	strh	r3, [r7, #30]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	441a      	add	r2, r3
 8006eb0:	8bfb      	ldrh	r3, [r7, #30]
 8006eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	83bb      	strh	r3, [r7, #28]
 8006ed4:	8bbb      	ldrh	r3, [r7, #28]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d01b      	beq.n	8006f16 <USB_DeactivateEndpoint+0x1da>
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef4:	837b      	strh	r3, [r7, #26]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	441a      	add	r2, r3
 8006f00:	8b7b      	ldrh	r3, [r7, #26]
 8006f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2c:	833b      	strh	r3, [r7, #24]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	441a      	add	r2, r3
 8006f38:	8b3b      	ldrh	r3, [r7, #24]
 8006f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f64:	82fb      	strh	r3, [r7, #22]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	441a      	add	r2, r3
 8006f70:	8afb      	ldrh	r3, [r7, #22]
 8006f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9c:	82bb      	strh	r3, [r7, #20]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8abb      	ldrh	r3, [r7, #20]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]
 8006fbe:	e0a3      	b.n	8007108 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01b      	beq.n	8007010 <USB_DeactivateEndpoint+0x2d4>
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	441a      	add	r2, r3
 8006ffa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	b29b      	uxth	r3, r3
 800700e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800701e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01b      	beq.n	8007060 <USB_DeactivateEndpoint+0x324>
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	441a      	add	r2, r3
 800704a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800704c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800705c:	b29b      	uxth	r3, r3
 800705e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	441a      	add	r2, r3
 8007082:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800708c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007094:	b29b      	uxth	r3, r3
 8007096:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007104:	b29b      	uxth	r3, r3
 8007106:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3734      	adds	r7, #52	; 0x34
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b0c2      	sub	sp, #264	; 0x108
 800711a:	af00      	add	r7, sp, #0
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007124:	6018      	str	r0, [r3, #0]
 8007126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b01      	cmp	r3, #1
 800713e:	f040 86b7 	bne.w	8007eb0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d908      	bls.n	8007170 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800716e:	e007      	b.n	8007180 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	7b1b      	ldrb	r3, [r3, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d13a      	bne.n	8007206 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6959      	ldr	r1, [r3, #20]
 800719c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	88da      	ldrh	r2, [r3, #6]
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071b6:	6800      	ldr	r0, [r0, #0]
 80071b8:	f001 fcb9 	bl	8008b2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	4413      	add	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	00da      	lsls	r2, r3, #3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4413      	add	r3, r2
 80071f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	f000 be1f 	b.w	8007e44 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	78db      	ldrb	r3, [r3, #3]
 8007212:	2b02      	cmp	r3, #2
 8007214:	f040 8462 	bne.w	8007adc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6a1a      	ldr	r2, [r3, #32]
 8007224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	429a      	cmp	r2, r3
 8007232:	f240 83df 	bls.w	80079f4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800727e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007286:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800728a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728e:	b29b      	uxth	r3, r3
 8007290:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6a1a      	ldr	r2, [r3, #32]
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a2:	1ad2      	subs	r2, r2, r3
 80072a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 81c7 	beq.w	8007666 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d177      	bne.n	80073e4 <USB_EPStartXfer+0x2ce>
 80072f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730e:	b29b      	uxth	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	4413      	add	r3, r2
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	00da      	lsls	r2, r3, #3
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	4413      	add	r3, r2
 800732a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800733a:	b29a      	uxth	r2, r3
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	801a      	strh	r2, [r3, #0]
 8007340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007344:	2b3e      	cmp	r3, #62	; 0x3e
 8007346:	d921      	bls.n	800738c <USB_EPStartXfer+0x276>
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2b00      	cmp	r3, #0
 800735c:	d104      	bne.n	8007368 <USB_EPStartXfer+0x252>
 800735e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007362:	3b01      	subs	r3, #1
 8007364:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29a      	uxth	r2, r3
 800736e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007372:	b29b      	uxth	r3, r3
 8007374:	029b      	lsls	r3, r3, #10
 8007376:	b29b      	uxth	r3, r3
 8007378:	4313      	orrs	r3, r2
 800737a:	b29b      	uxth	r3, r3
 800737c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007384:	b29a      	uxth	r2, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e050      	b.n	800742e <USB_EPStartXfer+0x318>
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <USB_EPStartXfer+0x294>
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	e041      	b.n	800742e <USB_EPStartXfer+0x318>
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	085b      	lsrs	r3, r3, #1
 80073b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80073b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d004      	beq.n	80073ca <USB_EPStartXfer+0x2b4>
 80073c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80073c4:	3301      	adds	r3, #1
 80073c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	029b      	lsls	r3, r3, #10
 80073d8:	b29b      	uxth	r3, r3
 80073da:	4313      	orrs	r3, r2
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	e024      	b.n	800742e <USB_EPStartXfer+0x318>
 80073e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d11c      	bne.n	800742e <USB_EPStartXfer+0x318>
 80073f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007402:	b29b      	uxth	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	4413      	add	r3, r2
 800740a:	633b      	str	r3, [r7, #48]	; 0x30
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	00da      	lsls	r2, r3, #3
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	4413      	add	r3, r2
 800741e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007428:	b29a      	uxth	r2, r3
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800742e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	895b      	ldrh	r3, [r3, #10]
 800743a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6959      	ldr	r1, [r3, #20]
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	b29b      	uxth	r3, r3
 8007450:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007454:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007458:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800745c:	6800      	ldr	r0, [r0, #0]
 800745e:	f001 fb66 	bl	8008b2e <USB_WritePMA>
            ep->xfer_buff += len;
 8007462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695a      	ldr	r2, [r3, #20]
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007472:	441a      	add	r2, r3
 8007474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6a1a      	ldr	r2, [r3, #32]
 800748c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	429a      	cmp	r2, r3
 800749a:	d90f      	bls.n	80074bc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800749c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6a1a      	ldr	r2, [r3, #32]
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ac:	1ad2      	subs	r2, r2, r3
 80074ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	621a      	str	r2, [r3, #32]
 80074ba:	e00e      	b.n	80074da <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80074bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80074cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2200      	movs	r2, #0
 80074d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d177      	bne.n	80075da <USB_EPStartXfer+0x4c4>
 80074ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007504:	b29b      	uxth	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	4413      	add	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
 800750e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	00da      	lsls	r2, r3, #3
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	4413      	add	r3, r2
 8007520:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007530:	b29a      	uxth	r2, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753a:	2b3e      	cmp	r3, #62	; 0x3e
 800753c:	d921      	bls.n	8007582 <USB_EPStartXfer+0x46c>
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754c:	f003 031f 	and.w	r3, r3, #31
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <USB_EPStartXfer+0x448>
 8007554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007558:	3b01      	subs	r3, #1
 800755a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	b29a      	uxth	r2, r3
 8007564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007568:	b29b      	uxth	r3, r3
 800756a:	029b      	lsls	r3, r3, #10
 800756c:	b29b      	uxth	r3, r3
 800756e:	4313      	orrs	r3, r2
 8007570:	b29b      	uxth	r3, r3
 8007572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757a:	b29a      	uxth	r2, r3
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	801a      	strh	r2, [r3, #0]
 8007580:	e056      	b.n	8007630 <USB_EPStartXfer+0x51a>
 8007582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <USB_EPStartXfer+0x48a>
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007598:	b29a      	uxth	r2, r3
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	801a      	strh	r2, [r3, #0]
 800759e:	e047      	b.n	8007630 <USB_EPStartXfer+0x51a>
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <USB_EPStartXfer+0x4aa>
 80075b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ba:	3301      	adds	r3, #1
 80075bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	029b      	lsls	r3, r3, #10
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4313      	orrs	r3, r2
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	e02a      	b.n	8007630 <USB_EPStartXfer+0x51a>
 80075da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d122      	bne.n	8007630 <USB_EPStartXfer+0x51a>
 80075ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	623b      	str	r3, [r7, #32]
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	4413      	add	r3, r2
 800760c:	623b      	str	r3, [r7, #32]
 800760e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	00da      	lsls	r2, r3, #3
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	4413      	add	r3, r2
 8007620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762a:	b29a      	uxth	r2, r3
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	891b      	ldrh	r3, [r3, #8]
 800763c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6959      	ldr	r1, [r3, #20]
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007650:	b29b      	uxth	r3, r3
 8007652:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007656:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800765a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800765e:	6800      	ldr	r0, [r0, #0]
 8007660:	f001 fa65 	bl	8008b2e <USB_WritePMA>
 8007664:	e3ee      	b.n	8007e44 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d177      	bne.n	8007766 <USB_EPStartXfer+0x650>
 8007676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	64bb      	str	r3, [r7, #72]	; 0x48
 8007682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007690:	b29b      	uxth	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007696:	4413      	add	r3, r2
 8007698:	64bb      	str	r3, [r7, #72]	; 0x48
 800769a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	00da      	lsls	r2, r3, #3
 80076a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076aa:	4413      	add	r3, r2
 80076ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076b0:	647b      	str	r3, [r7, #68]	; 0x44
 80076b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076bc:	b29a      	uxth	r2, r3
 80076be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c6:	2b3e      	cmp	r3, #62	; 0x3e
 80076c8:	d921      	bls.n	800770e <USB_EPStartXfer+0x5f8>
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <USB_EPStartXfer+0x5d4>
 80076e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076e4:	3b01      	subs	r3, #1
 80076e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	029b      	lsls	r3, r3, #10
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007706:	b29a      	uxth	r2, r3
 8007708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	e056      	b.n	80077bc <USB_EPStartXfer+0x6a6>
 800770e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <USB_EPStartXfer+0x616>
 8007716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007724:	b29a      	uxth	r2, r3
 8007726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007728:	801a      	strh	r2, [r3, #0]
 800772a:	e047      	b.n	80077bc <USB_EPStartXfer+0x6a6>
 800772c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d004      	beq.n	800774c <USB_EPStartXfer+0x636>
 8007742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007746:	3301      	adds	r3, #1
 8007748:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800774c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007756:	b29b      	uxth	r3, r3
 8007758:	029b      	lsls	r3, r3, #10
 800775a:	b29b      	uxth	r3, r3
 800775c:	4313      	orrs	r3, r2
 800775e:	b29a      	uxth	r2, r3
 8007760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	e02a      	b.n	80077bc <USB_EPStartXfer+0x6a6>
 8007766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	785b      	ldrb	r3, [r3, #1]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d122      	bne.n	80077bc <USB_EPStartXfer+0x6a6>
 8007776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	653b      	str	r3, [r7, #80]	; 0x50
 8007782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007790:	b29b      	uxth	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007796:	4413      	add	r3, r2
 8007798:	653b      	str	r3, [r7, #80]	; 0x50
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	00da      	lsls	r2, r3, #3
 80077a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077aa:	4413      	add	r3, r2
 80077ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	891b      	ldrh	r3, [r3, #8]
 80077c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6959      	ldr	r1, [r3, #20]
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077ea:	6800      	ldr	r0, [r0, #0]
 80077ec:	f001 f99f 	bl	8008b2e <USB_WritePMA>
            ep->xfer_buff += len;
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	695a      	ldr	r2, [r3, #20]
 80077fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007800:	441a      	add	r2, r3
 8007802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800780e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6a1a      	ldr	r2, [r3, #32]
 800781a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	429a      	cmp	r2, r3
 8007828:	d90f      	bls.n	800784a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800782a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6a1a      	ldr	r2, [r3, #32]
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	1ad2      	subs	r2, r2, r3
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	621a      	str	r2, [r3, #32]
 8007848:	e00e      	b.n	8007868 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800785a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2200      	movs	r2, #0
 8007866:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	643b      	str	r3, [r7, #64]	; 0x40
 8007874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d177      	bne.n	8007974 <USB_EPStartXfer+0x85e>
 8007884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789e:	b29b      	uxth	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	4413      	add	r3, r2
 80078a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	00da      	lsls	r2, r3, #3
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	4413      	add	r3, r2
 80078ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
 80078c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d4:	2b3e      	cmp	r3, #62	; 0x3e
 80078d6:	d921      	bls.n	800791c <USB_EPStartXfer+0x806>
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <USB_EPStartXfer+0x7e2>
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f2:	3b01      	subs	r3, #1
 80078f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007902:	b29b      	uxth	r3, r3
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	b29b      	uxth	r3, r3
 8007908:	4313      	orrs	r3, r2
 800790a:	b29b      	uxth	r3, r3
 800790c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007914:	b29a      	uxth	r2, r3
 8007916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	e050      	b.n	80079be <USB_EPStartXfer+0x8a8>
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <USB_EPStartXfer+0x824>
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800792e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007932:	b29a      	uxth	r2, r3
 8007934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007936:	801a      	strh	r2, [r3, #0]
 8007938:	e041      	b.n	80079be <USB_EPStartXfer+0x8a8>
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800793e:	085b      	lsrs	r3, r3, #1
 8007940:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <USB_EPStartXfer+0x844>
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	3301      	adds	r3, #1
 8007956:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29a      	uxth	r2, r3
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007964:	b29b      	uxth	r3, r3
 8007966:	029b      	lsls	r3, r3, #10
 8007968:	b29b      	uxth	r3, r3
 800796a:	4313      	orrs	r3, r2
 800796c:	b29a      	uxth	r2, r3
 800796e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	e024      	b.n	80079be <USB_EPStartXfer+0x8a8>
 8007974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d11c      	bne.n	80079be <USB_EPStartXfer+0x8a8>
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007992:	b29b      	uxth	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007998:	4413      	add	r3, r2
 800799a:	643b      	str	r3, [r7, #64]	; 0x40
 800799c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	00da      	lsls	r2, r3, #3
 80079aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ac:	4413      	add	r3, r2
 80079ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	895b      	ldrh	r3, [r3, #10]
 80079ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6959      	ldr	r1, [r3, #20]
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80079e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f001 f89e 	bl	8008b2e <USB_WritePMA>
 80079f2:	e227      	b.n	8007e44 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80079f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	441a      	add	r2, r3
 8007a48:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a80:	4413      	add	r3, r2
 8007a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	00da      	lsls	r2, r3, #3
 8007a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a94:	4413      	add	r3, r2
 8007a96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aa4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	891b      	ldrh	r3, [r3, #8]
 8007ab2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6959      	ldr	r1, [r3, #20]
 8007ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007acc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ad0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ad4:	6800      	ldr	r0, [r0, #0]
 8007ad6:	f001 f82a 	bl	8008b2e <USB_WritePMA>
 8007ada:	e1b3      	b.n	8007e44 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6a1a      	ldr	r2, [r3, #32]
 8007ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80c6 	beq.w	8007cae <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	673b      	str	r3, [r7, #112]	; 0x70
 8007b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d177      	bne.n	8007c2e <USB_EPStartXfer+0xb18>
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b5e:	4413      	add	r3, r2
 8007b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	00da      	lsls	r2, r3, #3
 8007b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b72:	4413      	add	r3, r2
 8007b74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b78:	667b      	str	r3, [r7, #100]	; 0x64
 8007b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b90:	d921      	bls.n	8007bd6 <USB_EPStartXfer+0xac0>
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <USB_EPStartXfer+0xa9c>
 8007ba8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007bac:	3b01      	subs	r3, #1
 8007bae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	029b      	lsls	r3, r3, #10
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	e050      	b.n	8007c78 <USB_EPStartXfer+0xb62>
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <USB_EPStartXfer+0xade>
 8007bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e041      	b.n	8007c78 <USB_EPStartXfer+0xb62>
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <USB_EPStartXfer+0xafe>
 8007c0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	029b      	lsls	r3, r3, #10
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	4313      	orrs	r3, r2
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	e024      	b.n	8007c78 <USB_EPStartXfer+0xb62>
 8007c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d11c      	bne.n	8007c78 <USB_EPStartXfer+0xb62>
 8007c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c52:	4413      	add	r3, r2
 8007c54:	673b      	str	r3, [r7, #112]	; 0x70
 8007c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	00da      	lsls	r2, r3, #3
 8007c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	895b      	ldrh	r3, [r3, #10]
 8007c84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6959      	ldr	r1, [r3, #20]
 8007c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ca2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ca6:	6800      	ldr	r0, [r0, #0]
 8007ca8:	f000 ff41 	bl	8008b2e <USB_WritePMA>
 8007cac:	e0ca      	b.n	8007e44 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	785b      	ldrb	r3, [r3, #1]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d177      	bne.n	8007dae <USB_EPStartXfer+0xc98>
 8007cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cde:	4413      	add	r3, r2
 8007ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	00da      	lsls	r2, r3, #3
 8007cf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d10:	d921      	bls.n	8007d56 <USB_EPStartXfer+0xc40>
 8007d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d16:	095b      	lsrs	r3, r3, #5
 8007d18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d104      	bne.n	8007d32 <USB_EPStartXfer+0xc1c>
 8007d28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	029b      	lsls	r3, r3, #10
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	e05c      	b.n	8007e10 <USB_EPStartXfer+0xcfa>
 8007d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <USB_EPStartXfer+0xc5e>
 8007d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d70:	801a      	strh	r2, [r3, #0]
 8007d72:	e04d      	b.n	8007e10 <USB_EPStartXfer+0xcfa>
 8007d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d78:	085b      	lsrs	r3, r3, #1
 8007d7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <USB_EPStartXfer+0xc7e>
 8007d8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007daa:	801a      	strh	r2, [r3, #0]
 8007dac:	e030      	b.n	8007e10 <USB_EPStartXfer+0xcfa>
 8007dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	785b      	ldrb	r3, [r3, #1]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d128      	bne.n	8007e10 <USB_EPStartXfer+0xcfa>
 8007dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	461a      	mov	r2, r3
 8007dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007de2:	4413      	add	r3, r2
 8007de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	00da      	lsls	r2, r3, #3
 8007df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	891b      	ldrh	r3, [r3, #8]
 8007e1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6959      	ldr	r1, [r3, #20]
 8007e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e3e:	6800      	ldr	r0, [r0, #0]
 8007e40:	f000 fe75 	bl	8008b2e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6a:	817b      	strh	r3, [r7, #10]
 8007e6c:	897b      	ldrh	r3, [r7, #10]
 8007e6e:	f083 0310 	eor.w	r3, r3, #16
 8007e72:	817b      	strh	r3, [r7, #10]
 8007e74:	897b      	ldrh	r3, [r7, #10]
 8007e76:	f083 0320 	eor.w	r3, r3, #32
 8007e7a:	817b      	strh	r3, [r7, #10]
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	441a      	add	r2, r3
 8007e96:	897b      	ldrh	r3, [r7, #10]
 8007e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	8013      	strh	r3, [r2, #0]
 8007eac:	f000 bcde 	b.w	800886c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	7b1b      	ldrb	r3, [r3, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f040 80bb 	bne.w	8008038 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d917      	bls.n	8007f0e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	619a      	str	r2, [r3, #24]
 8007f0c:	e00e      	b.n	8007f2c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f50:	4413      	add	r3, r2
 8007f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	00da      	lsls	r2, r3, #3
 8007f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f68:	4413      	add	r3, r2
 8007f6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f8c:	d924      	bls.n	8007fd8 <USB_EPStartXfer+0xec2>
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <USB_EPStartXfer+0xe98>
 8007fa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	029b      	lsls	r3, r3, #10
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fd2:	801a      	strh	r2, [r3, #0]
 8007fd4:	f000 bc10 	b.w	80087f8 <USB_EPStartXfer+0x16e2>
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10c      	bne.n	8007ffa <USB_EPStartXfer+0xee4>
 8007fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e3fe      	b.n	80087f8 <USB_EPStartXfer+0x16e2>
 8007ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ffe:	085b      	lsrs	r3, r3, #1
 8008000:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d004      	beq.n	800801a <USB_EPStartXfer+0xf04>
 8008010:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008014:	3301      	adds	r3, #1
 8008016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800801a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29a      	uxth	r2, r3
 8008022:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008026:	b29b      	uxth	r3, r3
 8008028:	029b      	lsls	r3, r3, #10
 800802a:	b29b      	uxth	r3, r3
 800802c:	4313      	orrs	r3, r2
 800802e:	b29a      	uxth	r2, r3
 8008030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008034:	801a      	strh	r2, [r3, #0]
 8008036:	e3df      	b.n	80087f8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	78db      	ldrb	r3, [r3, #3]
 8008044:	2b02      	cmp	r3, #2
 8008046:	f040 8218 	bne.w	800847a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800804a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800804e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f040 809d 	bne.w	8008196 <USB_EPStartXfer+0x1080>
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008078:	b29b      	uxth	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008080:	4413      	add	r3, r2
 8008082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	00da      	lsls	r2, r3, #3
 8008094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008098:	4413      	add	r3, r2
 800809a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800809e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	2b3e      	cmp	r3, #62	; 0x3e
 80080c4:	d92b      	bls.n	800811e <USB_EPStartXfer+0x1008>
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d104      	bne.n	80080f6 <USB_EPStartXfer+0xfe0>
 80080ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f0:	3b01      	subs	r3, #1
 80080f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	b29b      	uxth	r3, r3
 8008104:	029b      	lsls	r3, r3, #10
 8008106:	b29b      	uxth	r3, r3
 8008108:	4313      	orrs	r3, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008114:	b29a      	uxth	r2, r3
 8008116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e070      	b.n	8008200 <USB_EPStartXfer+0x10ea>
 800811e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10c      	bne.n	8008148 <USB_EPStartXfer+0x1032>
 800812e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813e:	b29a      	uxth	r2, r3
 8008140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	e05b      	b.n	8008200 <USB_EPStartXfer+0x10ea>
 8008148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800815a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d004      	beq.n	8008178 <USB_EPStartXfer+0x1062>
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	3301      	adds	r3, #1
 8008174:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29a      	uxth	r2, r3
 8008180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008184:	b29b      	uxth	r3, r3
 8008186:	029b      	lsls	r3, r3, #10
 8008188:	b29b      	uxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	e034      	b.n	8008200 <USB_EPStartXfer+0x10ea>
 8008196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	785b      	ldrb	r3, [r3, #1]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d12c      	bne.n	8008200 <USB_EPStartXfer+0x10ea>
 80081a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081ca:	4413      	add	r3, r2
 80081cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	00da      	lsls	r2, r3, #3
 80081de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081e2:	4413      	add	r3, r2
 80081e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800820e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f040 809d 	bne.w	800835a <USB_EPStartXfer+0x1244>
 8008220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800822e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800823c:	b29b      	uxth	r3, r3
 800823e:	461a      	mov	r2, r3
 8008240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008244:	4413      	add	r3, r2
 8008246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800824a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	00da      	lsls	r2, r3, #3
 8008258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800825c:	4413      	add	r3, r2
 800825e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008266:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008272:	b29a      	uxth	r2, r3
 8008274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008278:	801a      	strh	r2, [r3, #0]
 800827a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b3e      	cmp	r3, #62	; 0x3e
 8008288:	d92b      	bls.n	80082e2 <USB_EPStartXfer+0x11cc>
 800828a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	095b      	lsrs	r3, r3, #5
 8008298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800829c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <USB_EPStartXfer+0x11a4>
 80082b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b4:	3b01      	subs	r3, #1
 80082b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e069      	b.n	80083b6 <USB_EPStartXfer+0x12a0>
 80082e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10c      	bne.n	800830c <USB_EPStartXfer+0x11f6>
 80082f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008302:	b29a      	uxth	r2, r3
 8008304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	e054      	b.n	80083b6 <USB_EPStartXfer+0x12a0>
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800831e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <USB_EPStartXfer+0x1226>
 8008332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008336:	3301      	adds	r3, #1
 8008338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800833c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29a      	uxth	r2, r3
 8008344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008348:	b29b      	uxth	r3, r3
 800834a:	029b      	lsls	r3, r3, #10
 800834c:	b29b      	uxth	r3, r3
 800834e:	4313      	orrs	r3, r2
 8008350:	b29a      	uxth	r2, r3
 8008352:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008356:	801a      	strh	r2, [r3, #0]
 8008358:	e02d      	b.n	80083b6 <USB_EPStartXfer+0x12a0>
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d125      	bne.n	80083b6 <USB_EPStartXfer+0x12a0>
 800836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008378:	b29b      	uxth	r3, r3
 800837a:	461a      	mov	r2, r3
 800837c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008380:	4413      	add	r3, r2
 8008382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	00da      	lsls	r2, r3, #3
 8008394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008398:	4413      	add	r3, r2
 800839a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800839e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083b4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80083b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 8218 	beq.w	80087f8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80083c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80083ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <USB_EPStartXfer+0x12ea>
 80083f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10d      	bne.n	800841c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008400:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008408:	2b00      	cmp	r3, #0
 800840a:	f040 81f5 	bne.w	80087f8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800840e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	f040 81ee 	bne.w	80087f8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800841c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008442:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	441a      	add	r2, r3
 8008460:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008470:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008474:	b29b      	uxth	r3, r3
 8008476:	8013      	strh	r3, [r2, #0]
 8008478:	e1be      	b.n	80087f8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800847a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	78db      	ldrb	r3, [r3, #3]
 8008486:	2b01      	cmp	r3, #1
 8008488:	f040 81b4 	bne.w	80087f4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800848c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	699a      	ldr	r2, [r3, #24]
 8008498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d917      	bls.n	80084d8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80084a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80084b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c8:	1ad2      	subs	r2, r2, r3
 80084ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	619a      	str	r2, [r3, #24]
 80084d6:	e00e      	b.n	80084f6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80084d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80084e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2200      	movs	r2, #0
 80084f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80084f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 8085 	bne.w	8008612 <USB_EPStartXfer+0x14fc>
 8008508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008524:	b29b      	uxth	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800852c:	4413      	add	r3, r2
 800852e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	00da      	lsls	r2, r3, #3
 8008540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008544:	4413      	add	r3, r2
 8008546:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800854a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800854e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800855a:	b29a      	uxth	r2, r3
 800855c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008566:	2b3e      	cmp	r3, #62	; 0x3e
 8008568:	d923      	bls.n	80085b2 <USB_EPStartXfer+0x149c>
 800856a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <USB_EPStartXfer+0x1474>
 8008580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008584:	3b01      	subs	r3, #1
 8008586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800858a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008596:	b29b      	uxth	r3, r3
 8008598:	029b      	lsls	r3, r3, #10
 800859a:	b29b      	uxth	r3, r3
 800859c:	4313      	orrs	r3, r2
 800859e:	b29b      	uxth	r3, r3
 80085a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ae:	801a      	strh	r2, [r3, #0]
 80085b0:	e060      	b.n	8008674 <USB_EPStartXfer+0x155e>
 80085b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10c      	bne.n	80085d4 <USB_EPStartXfer+0x14be>
 80085ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e04f      	b.n	8008674 <USB_EPStartXfer+0x155e>
 80085d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <USB_EPStartXfer+0x14de>
 80085ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ee:	3301      	adds	r3, #1
 80085f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008600:	b29b      	uxth	r3, r3
 8008602:	029b      	lsls	r3, r3, #10
 8008604:	b29b      	uxth	r3, r3
 8008606:	4313      	orrs	r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	e030      	b.n	8008674 <USB_EPStartXfer+0x155e>
 8008612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	785b      	ldrb	r3, [r3, #1]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d128      	bne.n	8008674 <USB_EPStartXfer+0x155e>
 8008622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008646:	4413      	add	r3, r2
 8008648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800864c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	00da      	lsls	r2, r3, #3
 800865a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800865e:	4413      	add	r3, r2
 8008660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866c:	b29a      	uxth	r2, r3
 800866e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f040 8085 	bne.w	800879e <USB_EPStartXfer+0x1688>
 8008694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086b8:	4413      	add	r3, r2
 80086ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	00da      	lsls	r2, r3, #3
 80086cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086d0:	4413      	add	r3, r2
 80086d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ec:	801a      	strh	r2, [r3, #0]
 80086ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f2:	2b3e      	cmp	r3, #62	; 0x3e
 80086f4:	d923      	bls.n	800873e <USB_EPStartXfer+0x1628>
 80086f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <USB_EPStartXfer+0x1600>
 800870c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008710:	3b01      	subs	r3, #1
 8008712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	b29a      	uxth	r2, r3
 800871e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008722:	b29b      	uxth	r3, r3
 8008724:	029b      	lsls	r3, r3, #10
 8008726:	b29b      	uxth	r3, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008734:	b29a      	uxth	r2, r3
 8008736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800873a:	801a      	strh	r2, [r3, #0]
 800873c:	e05c      	b.n	80087f8 <USB_EPStartXfer+0x16e2>
 800873e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10c      	bne.n	8008760 <USB_EPStartXfer+0x164a>
 8008746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	b29b      	uxth	r3, r3
 800874e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008756:	b29a      	uxth	r2, r3
 8008758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800875c:	801a      	strh	r2, [r3, #0]
 800875e:	e04b      	b.n	80087f8 <USB_EPStartXfer+0x16e2>
 8008760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008764:	085b      	lsrs	r3, r3, #1
 8008766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800876a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <USB_EPStartXfer+0x166a>
 8008776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800877a:	3301      	adds	r3, #1
 800877c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29a      	uxth	r2, r3
 8008788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800878c:	b29b      	uxth	r3, r3
 800878e:	029b      	lsls	r3, r3, #10
 8008790:	b29b      	uxth	r3, r3
 8008792:	4313      	orrs	r3, r2
 8008794:	b29a      	uxth	r2, r3
 8008796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800879a:	801a      	strh	r2, [r3, #0]
 800879c:	e02c      	b.n	80087f8 <USB_EPStartXfer+0x16e2>
 800879e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d124      	bne.n	80087f8 <USB_EPStartXfer+0x16e2>
 80087ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087bc:	b29b      	uxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087c4:	4413      	add	r3, r2
 80087c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	00da      	lsls	r2, r3, #3
 80087d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087dc:	4413      	add	r3, r2
 80087de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	e001      	b.n	80087f8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e03a      	b.n	800886e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	b29b      	uxth	r3, r3
 8008816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800881a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008822:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008826:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800882a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800882e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008832:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008836:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800883a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	441a      	add	r2, r3
 8008854:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800885c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008868:	b29b      	uxth	r3, r3
 800886a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d020      	beq.n	80088cc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a0:	81bb      	strh	r3, [r7, #12]
 80088a2:	89bb      	ldrh	r3, [r7, #12]
 80088a4:	f083 0310 	eor.w	r3, r3, #16
 80088a8:	81bb      	strh	r3, [r7, #12]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	441a      	add	r2, r3
 80088b4:	89bb      	ldrh	r3, [r7, #12]
 80088b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	8013      	strh	r3, [r2, #0]
 80088ca:	e01f      	b.n	800890c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e2:	81fb      	strh	r3, [r7, #14]
 80088e4:	89fb      	ldrh	r3, [r7, #14]
 80088e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088ea:	81fb      	strh	r3, [r7, #14]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	441a      	add	r2, r3
 80088f6:	89fb      	ldrh	r3, [r7, #14]
 80088f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008908:	b29b      	uxth	r3, r3
 800890a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800891a:	b480      	push	{r7}
 800891c:	b087      	sub	sp, #28
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	7b1b      	ldrb	r3, [r3, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f040 809d 	bne.w	8008a68 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d04c      	beq.n	80089d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	823b      	strh	r3, [r7, #16]
 8008944:	8a3b      	ldrh	r3, [r7, #16]
 8008946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01b      	beq.n	8008986 <USB_EPClearStall+0x6c>
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008964:	81fb      	strh	r3, [r7, #14]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	441a      	add	r2, r3
 8008970:	89fb      	ldrh	r3, [r7, #14]
 8008972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800897e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008982:	b29b      	uxth	r3, r3
 8008984:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	78db      	ldrb	r3, [r3, #3]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d06c      	beq.n	8008a68 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a4:	81bb      	strh	r3, [r7, #12]
 80089a6:	89bb      	ldrh	r3, [r7, #12]
 80089a8:	f083 0320 	eor.w	r3, r3, #32
 80089ac:	81bb      	strh	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	441a      	add	r2, r3
 80089b8:	89bb      	ldrh	r3, [r7, #12]
 80089ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	8013      	strh	r3, [r2, #0]
 80089ce:	e04b      	b.n	8008a68 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	82fb      	strh	r3, [r7, #22]
 80089de:	8afb      	ldrh	r3, [r7, #22]
 80089e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01b      	beq.n	8008a20 <USB_EPClearStall+0x106>
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fe:	82bb      	strh	r3, [r7, #20]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	441a      	add	r2, r3
 8008a0a:	8abb      	ldrh	r3, [r7, #20]
 8008a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a36:	827b      	strh	r3, [r7, #18]
 8008a38:	8a7b      	ldrh	r3, [r7, #18]
 8008a3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a3e:	827b      	strh	r3, [r7, #18]
 8008a40:	8a7b      	ldrh	r3, [r7, #18]
 8008a42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a46:	827b      	strh	r3, [r7, #18]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	441a      	add	r2, r3
 8008a52:	8a7b      	ldrh	r3, [r7, #18]
 8008a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a82:	78fb      	ldrb	r3, [r7, #3]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d103      	bne.n	8008a90 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2280      	movs	r2, #128	; 0x80
 8008a8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b08:	68fb      	ldr	r3, [r7, #12]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b08b      	sub	sp, #44	; 0x2c
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	80fb      	strh	r3, [r7, #6]
 8008b40:	4613      	mov	r3, r2
 8008b42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b44:	88bb      	ldrh	r3, [r7, #4]
 8008b46:	3301      	adds	r3, #1
 8008b48:	085b      	lsrs	r3, r3, #1
 8008b4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b5e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
 8008b64:	e01b      	b.n	8008b9e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	b21a      	sxth	r2, r3
 8008b76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	8a7a      	ldrh	r2, [r7, #18]
 8008b84:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	3302      	adds	r3, #2
 8008b8a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	3301      	adds	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e0      	bne.n	8008b66 <USB_WritePMA+0x38>
  }
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	372c      	adds	r7, #44	; 0x2c
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b08b      	sub	sp, #44	; 0x2c
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	80fb      	strh	r3, [r7, #6]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008bc8:	88bb      	ldrh	r3, [r7, #4]
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bd8:	88fa      	ldrh	r2, [r7, #6]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008be2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
 8008be8:	e018      	b.n	8008c1c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	3302      	adds	r3, #2
 8008bf6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	3301      	adds	r3, #1
 8008c04:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	3301      	adds	r3, #1
 8008c14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e3      	bne.n	8008bea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c22:	88bb      	ldrh	r3, [r7, #4]
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	701a      	strb	r2, [r3, #0]
  }
}
 8008c3e:	bf00      	nop
 8008c40:	372c      	adds	r7, #44	; 0x2c
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
	...

08008c4c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008c58:	2024      	movs	r0, #36	; 0x24
 8008c5a:	f004 fcdb 	bl	800d614 <USBD_static_malloc>
 8008c5e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d109      	bne.n	8008c7a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	32b0      	adds	r2, #176	; 0xb0
 8008c70:	2100      	movs	r1, #0
 8008c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008c76:	2302      	movs	r3, #2
 8008c78:	e08b      	b.n	8008d92 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	32b0      	adds	r2, #176	; 0xb0
 8008c84:	68f9      	ldr	r1, [r7, #12]
 8008c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	32b0      	adds	r2, #176	; 0xb0
 8008c94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7c1b      	ldrb	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d11b      	bne.n	8008cde <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008ca6:	4b3d      	ldr	r3, [pc, #244]	; (8008d9c <USBD_CUSTOM_HID_Init+0x150>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	f003 020f 	and.w	r2, r3, #15
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	440b      	add	r3, r1
 8008cba:	3326      	adds	r3, #38	; 0x26
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008cc0:	4b37      	ldr	r3, [pc, #220]	; (8008da0 <USBD_CUSTOM_HID_Init+0x154>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	f003 020f 	and.w	r2, r3, #15
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	440b      	add	r3, r1
 8008cd4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008cd8:	2205      	movs	r2, #5
 8008cda:	801a      	strh	r2, [r3, #0]
 8008cdc:	e01a      	b.n	8008d14 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008cde:	4b2f      	ldr	r3, [pc, #188]	; (8008d9c <USBD_CUSTOM_HID_Init+0x150>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	f003 020f 	and.w	r2, r3, #15
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	3326      	adds	r3, #38	; 0x26
 8008cf4:	2205      	movs	r2, #5
 8008cf6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008cf8:	4b29      	ldr	r3, [pc, #164]	; (8008da0 <USBD_CUSTOM_HID_Init+0x154>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f003 020f 	and.w	r2, r3, #15
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008d10:	2205      	movs	r2, #5
 8008d12:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008d14:	4b21      	ldr	r3, [pc, #132]	; (8008d9c <USBD_CUSTOM_HID_Init+0x150>)
 8008d16:	7819      	ldrb	r1, [r3, #0]
 8008d18:	2302      	movs	r3, #2
 8008d1a:	2203      	movs	r2, #3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f004 fa45 	bl	800d1ac <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008d22:	4b1e      	ldr	r3, [pc, #120]	; (8008d9c <USBD_CUSTOM_HID_Init+0x150>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	f003 020f 	and.w	r2, r3, #15
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	3324      	adds	r3, #36	; 0x24
 8008d38:	2201      	movs	r2, #1
 8008d3a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008d3c:	4b18      	ldr	r3, [pc, #96]	; (8008da0 <USBD_CUSTOM_HID_Init+0x154>)
 8008d3e:	7819      	ldrb	r1, [r3, #0]
 8008d40:	2302      	movs	r3, #2
 8008d42:	2203      	movs	r2, #3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f004 fa31 	bl	800d1ac <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <USBD_CUSTOM_HID_Init+0x154>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	f003 020f 	and.w	r2, r3, #15
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d62:	2201      	movs	r2, #1
 8008d64:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	33b0      	adds	r3, #176	; 0xb0
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008d82:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <USBD_CUSTOM_HID_Init+0x154>)
 8008d84:	7819      	ldrb	r1, [r3, #0]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	230f      	movs	r3, #15
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f004 fbc0 	bl	800d510 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	2000008a 	.word	0x2000008a
 8008da0:	2000008b 	.word	0x2000008b

08008da4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008db0:	4b37      	ldr	r3, [pc, #220]	; (8008e90 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f004 fa36 	bl	800d228 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008dbc:	4b34      	ldr	r3, [pc, #208]	; (8008e90 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	f003 020f 	and.w	r2, r3, #15
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	3324      	adds	r3, #36	; 0x24
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8008dd6:	4b2e      	ldr	r3, [pc, #184]	; (8008e90 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	f003 020f 	and.w	r2, r3, #15
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	3326      	adds	r3, #38	; 0x26
 8008dec:	2200      	movs	r2, #0
 8008dee:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008df0:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f004 fa16 	bl	800d228 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8008dfc:	4b25      	ldr	r3, [pc, #148]	; (8008e94 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	f003 020f 	and.w	r2, r3, #15
 8008e04:	6879      	ldr	r1, [r7, #4]
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e14:	2200      	movs	r2, #0
 8008e16:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008e18:	4b1e      	ldr	r3, [pc, #120]	; (8008e94 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 020f 	and.w	r2, r3, #15
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008e30:	2200      	movs	r2, #0
 8008e32:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	32b0      	adds	r2, #176	; 0xb0
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01f      	beq.n	8008e86 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	33b0      	adds	r3, #176	; 0xb0
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	32b0      	adds	r2, #176	; 0xb0
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f004 fbef 	bl	800d64c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	32b0      	adds	r2, #176	; 0xb0
 8008e78:	2100      	movs	r1, #0
 8008e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	2000008a 	.word	0x2000008a
 8008e94:	2000008b 	.word	0x2000008b

08008e98 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	32b0      	adds	r2, #176	; 0xb0
 8008eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e0f8      	b.n	80090be <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d056      	beq.n	8008f86 <USBD_CUSTOM_HID_Setup+0xee>
 8008ed8:	2b20      	cmp	r3, #32
 8008eda:	f040 80e8 	bne.w	80090ae <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	3b02      	subs	r3, #2
 8008ee4:	2b09      	cmp	r3, #9
 8008ee6:	d846      	bhi.n	8008f76 <USBD_CUSTOM_HID_Setup+0xde>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <USBD_CUSTOM_HID_Setup+0x58>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f49 	.word	0x08008f49
 8008ef4:	08008f27 	.word	0x08008f27
 8008ef8:	08008f77 	.word	0x08008f77
 8008efc:	08008f77 	.word	0x08008f77
 8008f00:	08008f77 	.word	0x08008f77
 8008f04:	08008f77 	.word	0x08008f77
 8008f08:	08008f77 	.word	0x08008f77
 8008f0c:	08008f59 	.word	0x08008f59
 8008f10:	08008f37 	.word	0x08008f37
 8008f14:	08008f19 	.word	0x08008f19
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	885b      	ldrh	r3, [r3, #2]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	611a      	str	r2, [r3, #16]
          break;
 8008f24:	e02e      	b.n	8008f84 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3310      	adds	r3, #16
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f003 fd0e 	bl	800c950 <USBD_CtlSendData>
          break;
 8008f34:	e026      	b.n	8008f84 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	885b      	ldrh	r3, [r3, #2]
 8008f3a:	0a1b      	lsrs	r3, r3, #8
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	615a      	str	r2, [r3, #20]
          break;
 8008f46:	e01d      	b.n	8008f84 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	3314      	adds	r3, #20
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f003 fcfd 	bl	800c950 <USBD_CtlSendData>
          break;
 8008f56:	e015      	b.n	8008f84 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008f5e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	2b0f      	cmp	r3, #15
 8008f66:	bf28      	it	cs
 8008f68:	230f      	movcs	r3, #15
 8008f6a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f003 fd1a 	bl	800c9a8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008f74:	e006      	b.n	8008f84 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f003 fc78 	bl	800c86e <USBD_CtlError>
          ret = USBD_FAIL;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	75fb      	strb	r3, [r7, #23]
          break;
 8008f82:	bf00      	nop
      }
      break;
 8008f84:	e09a      	b.n	80090bc <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	785b      	ldrb	r3, [r3, #1]
 8008f8a:	2b0b      	cmp	r3, #11
 8008f8c:	f200 8086 	bhi.w	800909c <USBD_CUSTOM_HID_Setup+0x204>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <USBD_CUSTOM_HID_Setup+0x100>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	080090ab 	.word	0x080090ab
 8008fa0:	0800909d 	.word	0x0800909d
 8008fa4:	0800909d 	.word	0x0800909d
 8008fa8:	0800909d 	.word	0x0800909d
 8008fac:	0800909d 	.word	0x0800909d
 8008fb0:	08008ff3 	.word	0x08008ff3
 8008fb4:	0800909d 	.word	0x0800909d
 8008fb8:	0800909d 	.word	0x0800909d
 8008fbc:	0800909d 	.word	0x0800909d
 8008fc0:	0800904b 	.word	0x0800904b
 8008fc4:	08009075 	.word	0x08009075
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d107      	bne.n	8008fe4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008fd4:	f107 030e 	add.w	r3, r7, #14
 8008fd8:	2202      	movs	r2, #2
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f003 fcb7 	bl	800c950 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fe2:	e063      	b.n	80090ac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f003 fc41 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 8008fec:	2303      	movs	r3, #3
 8008fee:	75fb      	strb	r3, [r7, #23]
          break;
 8008ff0:	e05c      	b.n	80090ac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	885b      	ldrh	r3, [r3, #2]
 8008ff6:	0a1b      	lsrs	r3, r3, #8
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	2b22      	cmp	r3, #34	; 0x22
 8008ffc:	d110      	bne.n	8009020 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	88db      	ldrh	r3, [r3, #6]
 8009002:	2b49      	cmp	r3, #73	; 0x49
 8009004:	bf28      	it	cs
 8009006:	2349      	movcs	r3, #73	; 0x49
 8009008:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	33b0      	adds	r3, #176	; 0xb0
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	e00d      	b.n	800903c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	885b      	ldrh	r3, [r3, #2]
 8009024:	0a1b      	lsrs	r3, r3, #8
 8009026:	b29b      	uxth	r3, r3
 8009028:	2b21      	cmp	r3, #33	; 0x21
 800902a:	d107      	bne.n	800903c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800902c:	4b26      	ldr	r3, [pc, #152]	; (80090c8 <USBD_CUSTOM_HID_Setup+0x230>)
 800902e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	88db      	ldrh	r3, [r3, #6]
 8009034:	2b09      	cmp	r3, #9
 8009036:	bf28      	it	cs
 8009038:	2309      	movcs	r3, #9
 800903a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800903c:	8bfb      	ldrh	r3, [r7, #30]
 800903e:	461a      	mov	r2, r3
 8009040:	69b9      	ldr	r1, [r7, #24]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f003 fc84 	bl	800c950 <USBD_CtlSendData>
          break;
 8009048:	e030      	b.n	80090ac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b03      	cmp	r3, #3
 8009054:	d107      	bne.n	8009066 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3318      	adds	r3, #24
 800905a:	2201      	movs	r2, #1
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f003 fc76 	bl	800c950 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009064:	e022      	b.n	80090ac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f003 fc00 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 800906e:	2303      	movs	r3, #3
 8009070:	75fb      	strb	r3, [r7, #23]
          break;
 8009072:	e01b      	b.n	80090ac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b03      	cmp	r3, #3
 800907e:	d106      	bne.n	800908e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	885b      	ldrh	r3, [r3, #2]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	461a      	mov	r2, r3
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800908c:	e00e      	b.n	80090ac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f003 fbec 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 8009096:	2303      	movs	r3, #3
 8009098:	75fb      	strb	r3, [r7, #23]
          break;
 800909a:	e007      	b.n	80090ac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f003 fbe5 	bl	800c86e <USBD_CtlError>
          ret = USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	75fb      	strb	r3, [r7, #23]
          break;
 80090a8:	e000      	b.n	80090ac <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80090aa:	bf00      	nop
      }
      break;
 80090ac:	e006      	b.n	80090bc <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f003 fbdc 	bl	800c86e <USBD_CtlError>
      ret = USBD_FAIL;
 80090b6:	2303      	movs	r3, #3
 80090b8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ba:	bf00      	nop
  }
  return (uint8_t)ret;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3720      	adds	r7, #32
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000074 	.word	0x20000074

080090cc <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	32b0      	adds	r2, #176	; 0xb0
 80090e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e019      	b.n	8009128 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d112      	bne.n	8009126 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10b      	bne.n	8009122 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <USBD_CUSTOM_HID_SendReport+0x64>)
 8009114:	7819      	ldrb	r1, [r3, #0]
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f004 f9c0 	bl	800d4a0 <USBD_LL_Transmit>
 8009120:	e001      	b.n	8009126 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	2000008a 	.word	0x2000008a

08009134 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800913c:	2181      	movs	r1, #129	; 0x81
 800913e:	4815      	ldr	r0, [pc, #84]	; (8009194 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8009140:	f002 fd32 	bl	800bba8 <USBD_GetEpDesc>
 8009144:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009146:	2101      	movs	r1, #1
 8009148:	4812      	ldr	r0, [pc, #72]	; (8009194 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800914a:	f002 fd2d 	bl	800bba8 <USBD_GetEpDesc>
 800914e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f042 0202 	orr.w	r2, r2, #2
 800915e:	711a      	strb	r2, [r3, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2205      	movs	r2, #5
 8009168:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2200      	movs	r2, #0
 8009174:	f042 0202 	orr.w	r2, r2, #2
 8009178:	711a      	strb	r2, [r3, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2205      	movs	r2, #5
 8009182:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2229      	movs	r2, #41	; 0x29
 8009188:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800918a:	4b02      	ldr	r3, [pc, #8]	; (8009194 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000048 	.word	0x20000048

08009198 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80091a0:	2181      	movs	r1, #129	; 0x81
 80091a2:	4815      	ldr	r0, [pc, #84]	; (80091f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80091a4:	f002 fd00 	bl	800bba8 <USBD_GetEpDesc>
 80091a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80091aa:	2101      	movs	r1, #1
 80091ac:	4812      	ldr	r0, [pc, #72]	; (80091f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80091ae:	f002 fcfb 	bl	800bba8 <USBD_GetEpDesc>
 80091b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f042 0202 	orr.w	r2, r2, #2
 80091c2:	711a      	strb	r2, [r3, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2205      	movs	r2, #5
 80091cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d009      	beq.n	80091e8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f042 0202 	orr.w	r2, r2, #2
 80091dc:	711a      	strb	r2, [r3, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2205      	movs	r2, #5
 80091e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2229      	movs	r2, #41	; 0x29
 80091ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80091ee:	4b02      	ldr	r3, [pc, #8]	; (80091f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	20000048 	.word	0x20000048

080091fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009204:	2181      	movs	r1, #129	; 0x81
 8009206:	4815      	ldr	r0, [pc, #84]	; (800925c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009208:	f002 fcce 	bl	800bba8 <USBD_GetEpDesc>
 800920c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800920e:	2101      	movs	r1, #1
 8009210:	4812      	ldr	r0, [pc, #72]	; (800925c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009212:	f002 fcc9 	bl	800bba8 <USBD_GetEpDesc>
 8009216:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d009      	beq.n	8009232 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f042 0202 	orr.w	r2, r2, #2
 8009226:	711a      	strb	r2, [r3, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2205      	movs	r2, #5
 8009230:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d009      	beq.n	800924c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2200      	movs	r2, #0
 800923c:	f042 0202 	orr.w	r2, r2, #2
 8009240:	711a      	strb	r2, [r3, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2205      	movs	r2, #5
 800924a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2229      	movs	r2, #41	; 0x29
 8009250:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009252:	4b02      	ldr	r3, [pc, #8]	; (800925c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	20000048 	.word	0x20000048

08009260 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	32b0      	adds	r2, #176	; 0xb0
 8009276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	460b      	mov	r3, r1
 8009298:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	32b0      	adds	r2, #176	; 0xb0
 80092a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e017      	b.n	80092e0 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	32b0      	adds	r2, #176	; 0xb0
 80092ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092be:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	33b0      	adds	r3, #176	; 0xb0
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	7810      	ldrb	r0, [r2, #0]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	7852      	ldrb	r2, [r2, #1]
 80092da:	4611      	mov	r1, r2
 80092dc:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	32b0      	adds	r2, #176	; 0xb0
 80092fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	e01c      	b.n	8009340 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	32b0      	adds	r2, #176	; 0xb0
 8009310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009314:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8009316:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8009318:	7819      	ldrb	r1, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	230f      	movs	r3, #15
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f004 f8f6 	bl	800d510 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	4b08      	ldr	r3, [pc, #32]	; (800934c <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	4b07      	ldr	r3, [pc, #28]	; (800934c <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b02      	cmp	r3, #2
 8009336:	d002      	beq.n	800933e <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8009338:	4b05      	ldr	r3, [pc, #20]	; (8009350 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	2000008b 	.word	0x2000008b
 800934c:	20000298 	.word	0x20000298
 8009350:	2000029c 	.word	0x2000029c

08009354 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	32b0      	adds	r2, #176	; 0xb0
 8009366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009372:	2303      	movs	r3, #3
 8009374:	e016      	b.n	80093a4 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d111      	bne.n	80093a2 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	33b0      	adds	r3, #176	; 0xb0
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	7810      	ldrb	r0, [r2, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	7852      	ldrb	r2, [r2, #1]
 8009398:	4611      	mov	r1, r2
 800939a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	220a      	movs	r2, #10
 80093b8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80093ba:	4b03      	ldr	r3, [pc, #12]	; (80093c8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	20000080 	.word	0x20000080

080093cc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	e009      	b.n	80093f4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	33b0      	adds	r3, #176	; 0xb0
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800940c:	f241 0074 	movw	r0, #4212	; 0x1074
 8009410:	f004 f90e 	bl	800d630 <USBD_static_malloc_MSC>
 8009414:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	32b0      	adds	r2, #176	; 0xb0
 8009426:	2100      	movs	r1, #0
 8009428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800942c:	2302      	movs	r3, #2
 800942e:	e06e      	b.n	800950e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	32b0      	adds	r2, #176	; 0xb0
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	32b0      	adds	r2, #176	; 0xb0
 800944a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	7c1b      	ldrb	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d12b      	bne.n	80094b4 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800945c:	4b2e      	ldr	r3, [pc, #184]	; (8009518 <USBD_MSC_Init+0x118>)
 800945e:	7819      	ldrb	r1, [r3, #0]
 8009460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009464:	2202      	movs	r2, #2
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f003 fea0 	bl	800d1ac <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800946c:	4b2a      	ldr	r3, [pc, #168]	; (8009518 <USBD_MSC_Init+0x118>)
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	f003 020f 	and.w	r2, r3, #15
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009484:	2201      	movs	r2, #1
 8009486:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009488:	4b24      	ldr	r3, [pc, #144]	; (800951c <USBD_MSC_Init+0x11c>)
 800948a:	7819      	ldrb	r1, [r3, #0]
 800948c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009490:	2202      	movs	r2, #2
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f003 fe8a 	bl	800d1ac <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009498:	4b20      	ldr	r3, [pc, #128]	; (800951c <USBD_MSC_Init+0x11c>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 020f 	and.w	r2, r3, #15
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	3324      	adds	r3, #36	; 0x24
 80094ae:	2201      	movs	r2, #1
 80094b0:	801a      	strh	r2, [r3, #0]
 80094b2:	e028      	b.n	8009506 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80094b4:	4b18      	ldr	r3, [pc, #96]	; (8009518 <USBD_MSC_Init+0x118>)
 80094b6:	7819      	ldrb	r1, [r3, #0]
 80094b8:	2340      	movs	r3, #64	; 0x40
 80094ba:	2202      	movs	r2, #2
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f003 fe75 	bl	800d1ac <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <USBD_MSC_Init+0x118>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f003 020f 	and.w	r2, r3, #15
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	440b      	add	r3, r1
 80094d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094da:	2201      	movs	r2, #1
 80094dc:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80094de:	4b0f      	ldr	r3, [pc, #60]	; (800951c <USBD_MSC_Init+0x11c>)
 80094e0:	7819      	ldrb	r1, [r3, #0]
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	2202      	movs	r2, #2
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f003 fe60 	bl	800d1ac <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80094ec:	4b0b      	ldr	r3, [pc, #44]	; (800951c <USBD_MSC_Init+0x11c>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	f003 020f 	and.w	r2, r3, #15
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	440b      	add	r3, r1
 8009500:	3324      	adds	r3, #36	; 0x24
 8009502:	2201      	movs	r2, #1
 8009504:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa2c 	bl	8009964 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200000ef 	.word	0x200000ef
 800951c:	200000ee 	.word	0x200000ee

08009520 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800952c:	4b26      	ldr	r3, [pc, #152]	; (80095c8 <USBD_MSC_DeInit+0xa8>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f003 fe78 	bl	800d228 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8009538:	4b23      	ldr	r3, [pc, #140]	; (80095c8 <USBD_MSC_DeInit+0xa8>)
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	f003 020f 	and.w	r2, r3, #15
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	4613      	mov	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	440b      	add	r3, r1
 800954c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009550:	2200      	movs	r2, #0
 8009552:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8009554:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <USBD_MSC_DeInit+0xac>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f003 fe64 	bl	800d228 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8009560:	4b1a      	ldr	r3, [pc, #104]	; (80095cc <USBD_MSC_DeInit+0xac>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	f003 020f 	and.w	r2, r3, #15
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	440b      	add	r3, r1
 8009574:	3324      	adds	r3, #36	; 0x24
 8009576:	2200      	movs	r2, #0
 8009578:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	32b0      	adds	r2, #176	; 0xb0
 8009584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d018      	beq.n	80095be <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa6f 	bl	8009a70 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	32b0      	adds	r2, #176	; 0xb0
 800959c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f004 f853 	bl	800d64c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	32b0      	adds	r2, #176	; 0xb0
 80095b0:	2100      	movs	r1, #0
 80095b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	200000ef 	.word	0x200000ef
 80095cc:	200000ee 	.word	0x200000ee

080095d0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	32b0      	adds	r2, #176	; 0xb0
 80095e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e0e1      	b.n	80097c0 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009604:	2b00      	cmp	r3, #0
 8009606:	d053      	beq.n	80096b0 <USBD_MSC_Setup+0xe0>
 8009608:	2b20      	cmp	r3, #32
 800960a:	f040 80d1 	bne.w	80097b0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	785b      	ldrb	r3, [r3, #1]
 8009612:	2bfe      	cmp	r3, #254	; 0xfe
 8009614:	d002      	beq.n	800961c <USBD_MSC_Setup+0x4c>
 8009616:	2bff      	cmp	r3, #255	; 0xff
 8009618:	d02a      	beq.n	8009670 <USBD_MSC_Setup+0xa0>
 800961a:	e041      	b.n	80096a0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	885b      	ldrh	r3, [r3, #2]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d11e      	bne.n	8009662 <USBD_MSC_Setup+0x92>
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	88db      	ldrh	r3, [r3, #6]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d11a      	bne.n	8009662 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009632:	2b00      	cmp	r3, #0
 8009634:	da15      	bge.n	8009662 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	33b0      	adds	r3, #176	; 0xb0
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	4798      	blx	r3
 800964a:	4603      	mov	r3, r0
 800964c:	461a      	mov	r2, r3
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2201      	movs	r2, #1
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f003 f979 	bl	800c950 <USBD_CtlSendData>
 800965e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009660:	e025      	b.n	80096ae <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f003 f902 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	75fb      	strb	r3, [r7, #23]
          break;
 800966e:	e01e      	b.n	80096ae <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	885b      	ldrh	r3, [r3, #2]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10c      	bne.n	8009692 <USBD_MSC_Setup+0xc2>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	88db      	ldrh	r3, [r3, #6]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d108      	bne.n	8009692 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009686:	2b00      	cmp	r3, #0
 8009688:	db03      	blt.n	8009692 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f9bc 	bl	8009a08 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009690:	e00d      	b.n	80096ae <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f003 f8ea 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 800969a:	2303      	movs	r3, #3
 800969c:	75fb      	strb	r3, [r7, #23]
          break;
 800969e:	e006      	b.n	80096ae <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f003 f8e3 	bl	800c86e <USBD_CtlError>
          ret = USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	75fb      	strb	r3, [r7, #23]
          break;
 80096ac:	bf00      	nop
      }
      break;
 80096ae:	e086      	b.n	80097be <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	2b0b      	cmp	r3, #11
 80096b6:	d872      	bhi.n	800979e <USBD_MSC_Setup+0x1ce>
 80096b8:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <USBD_MSC_Setup+0xf0>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	080096f1 	.word	0x080096f1
 80096c4:	0800976d 	.word	0x0800976d
 80096c8:	0800979f 	.word	0x0800979f
 80096cc:	0800979f 	.word	0x0800979f
 80096d0:	0800979f 	.word	0x0800979f
 80096d4:	0800979f 	.word	0x0800979f
 80096d8:	0800979f 	.word	0x0800979f
 80096dc:	0800979f 	.word	0x0800979f
 80096e0:	0800979f 	.word	0x0800979f
 80096e4:	0800979f 	.word	0x0800979f
 80096e8:	0800971b 	.word	0x0800971b
 80096ec:	08009745 	.word	0x08009745
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d107      	bne.n	800970c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80096fc:	f107 030e 	add.w	r3, r7, #14
 8009700:	2202      	movs	r2, #2
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f003 f923 	bl	800c950 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800970a:	e050      	b.n	80097ae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f003 f8ad 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	75fb      	strb	r3, [r7, #23]
          break;
 8009718:	e049      	b.n	80097ae <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d107      	bne.n	8009736 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	3304      	adds	r3, #4
 800972a:	2201      	movs	r2, #1
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f003 f90e 	bl	800c950 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009734:	e03b      	b.n	80097ae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f003 f898 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 800973e:	2303      	movs	r3, #3
 8009740:	75fb      	strb	r3, [r7, #23]
          break;
 8009742:	e034      	b.n	80097ae <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b03      	cmp	r3, #3
 800974e:	d106      	bne.n	800975e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	885b      	ldrh	r3, [r3, #2]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	461a      	mov	r2, r3
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800975c:	e027      	b.n	80097ae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f003 f884 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 8009766:	2303      	movs	r3, #3
 8009768:	75fb      	strb	r3, [r7, #23]
          break;
 800976a:	e020      	b.n	80097ae <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b03      	cmp	r3, #3
 8009776:	d119      	bne.n	80097ac <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	885b      	ldrh	r3, [r3, #2]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d115      	bne.n	80097ac <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	889b      	ldrh	r3, [r3, #4]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f003 fd83 	bl	800d294 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	889b      	ldrh	r3, [r3, #4]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fb54 	bl	8009e44 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800979c:	e006      	b.n	80097ac <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f003 f864 	bl	800c86e <USBD_CtlError>
          ret = USBD_FAIL;
 80097a6:	2303      	movs	r3, #3
 80097a8:	75fb      	strb	r3, [r7, #23]
          break;
 80097aa:	e000      	b.n	80097ae <USBD_MSC_Setup+0x1de>
          break;
 80097ac:	bf00      	nop
      }
      break;
 80097ae:	e006      	b.n	80097be <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f003 f85b 	bl	800c86e <USBD_CtlError>
      ret = USBD_FAIL;
 80097b8:	2303      	movs	r3, #3
 80097ba:	75fb      	strb	r3, [r7, #23]
      break;
 80097bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80097be:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f961 	bl	8009aa0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f98d 	bl	8009b18 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009810:	2181      	movs	r1, #129	; 0x81
 8009812:	4812      	ldr	r0, [pc, #72]	; (800985c <USBD_MSC_GetHSCfgDesc+0x54>)
 8009814:	f002 f9c8 	bl	800bba8 <USBD_GetEpDesc>
 8009818:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800981a:	2101      	movs	r1, #1
 800981c:	480f      	ldr	r0, [pc, #60]	; (800985c <USBD_MSC_GetHSCfgDesc+0x54>)
 800981e:	f002 f9c3 	bl	800bba8 <USBD_GetEpDesc>
 8009822:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d006      	beq.n	8009838 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	711a      	strb	r2, [r3, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f042 0202 	orr.w	r2, r2, #2
 8009836:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d006      	beq.n	800984c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2200      	movs	r2, #0
 8009842:	711a      	strb	r2, [r3, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f042 0202 	orr.w	r2, r2, #2
 800984a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009852:	4b02      	ldr	r3, [pc, #8]	; (800985c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	200000c4 	.word	0x200000c4

08009860 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009868:	2181      	movs	r1, #129	; 0x81
 800986a:	4812      	ldr	r0, [pc, #72]	; (80098b4 <USBD_MSC_GetFSCfgDesc+0x54>)
 800986c:	f002 f99c 	bl	800bba8 <USBD_GetEpDesc>
 8009870:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009872:	2101      	movs	r1, #1
 8009874:	480f      	ldr	r0, [pc, #60]	; (80098b4 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009876:	f002 f997 	bl	800bba8 <USBD_GetEpDesc>
 800987a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d006      	beq.n	8009890 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800988a:	711a      	strb	r2, [r3, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d006      	beq.n	80098a4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2200      	movs	r2, #0
 800989a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800989e:	711a      	strb	r2, [r3, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80098aa:	4b02      	ldr	r3, [pc, #8]	; (80098b4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	200000c4 	.word	0x200000c4

080098b8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80098c0:	2181      	movs	r1, #129	; 0x81
 80098c2:	4812      	ldr	r0, [pc, #72]	; (800990c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80098c4:	f002 f970 	bl	800bba8 <USBD_GetEpDesc>
 80098c8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80098ca:	2101      	movs	r1, #1
 80098cc:	480f      	ldr	r0, [pc, #60]	; (800990c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80098ce:	f002 f96b 	bl	800bba8 <USBD_GetEpDesc>
 80098d2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098e2:	711a      	strb	r2, [r3, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d006      	beq.n	80098fc <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098f6:	711a      	strb	r2, [r3, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2220      	movs	r2, #32
 8009900:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009902:	4b02      	ldr	r3, [pc, #8]	; (800990c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200000c4 	.word	0x200000c4

08009910 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	220a      	movs	r2, #10
 800991c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800991e:	4b03      	ldr	r3, [pc, #12]	; (800992c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	200000e4 	.word	0x200000e4

08009930 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009940:	2303      	movs	r3, #3
 8009942:	e009      	b.n	8009958 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	33b0      	adds	r3, #176	; 0xb0
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	32b0      	adds	r2, #176	; 0xb0
 8009976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d039      	beq.n	80099f6 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	33b0      	adds	r3, #176	; 0xb0
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2000      	movs	r0, #0
 80099c6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80099c8:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <MSC_BOT_Init+0x9c>)
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f003 fc60 	bl	800d294 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80099d4:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <MSC_BOT_Init+0xa0>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f003 fc5a 	bl	800d294 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <MSC_BOT_Init+0x9c>)
 80099e2:	7819      	ldrb	r1, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80099ea:	3210      	adds	r2, #16
 80099ec:	231f      	movs	r3, #31
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f003 fd8e 	bl	800d510 <USBD_LL_PrepareReceive>
 80099f4:	e000      	b.n	80099f8 <MSC_BOT_Init+0x94>
    return;
 80099f6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	200000ef 	.word	0x200000ef
 8009a04:	200000ee 	.word	0x200000ee

08009a08 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	32b0      	adds	r2, #176	; 0xb0
 8009a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d01c      	beq.n	8009a60 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009a32:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <MSC_BOT_Reset+0x60>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f003 fc97 	bl	800d36c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009a3e:	4b0b      	ldr	r3, [pc, #44]	; (8009a6c <MSC_BOT_Reset+0x64>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f003 fc91 	bl	800d36c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009a4a:	4b08      	ldr	r3, [pc, #32]	; (8009a6c <MSC_BOT_Reset+0x64>)
 8009a4c:	7819      	ldrb	r1, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009a54:	3210      	adds	r2, #16
 8009a56:	231f      	movs	r3, #31
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f003 fd59 	bl	800d510 <USBD_LL_PrepareReceive>
 8009a5e:	e000      	b.n	8009a62 <MSC_BOT_Reset+0x5a>
    return;
 8009a60:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	200000ee 	.word	0x200000ee
 8009a6c:	200000ef 	.word	0x200000ef

08009a70 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	32b0      	adds	r2, #176	; 0xb0
 8009a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a86:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	721a      	strb	r2, [r3, #8]
  }
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	32b0      	adds	r2, #176	; 0xb0
 8009ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d022      	beq.n	8009b08 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	7a1b      	ldrb	r3, [r3, #8]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d005      	beq.n	8009ad6 <MSC_BOT_DataIn+0x36>
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	db1e      	blt.n	8009b0c <MSC_BOT_DataIn+0x6c>
 8009ace:	3b03      	subs	r3, #3
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d81b      	bhi.n	8009b0c <MSC_BOT_DataIn+0x6c>
 8009ad4:	e013      	b.n	8009afe <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009adc:	7f59      	ldrb	r1, [r3, #29]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae4:	331f      	adds	r3, #31
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f9e5 	bl	8009eb8 <SCSI_ProcessCmd>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da0d      	bge.n	8009b10 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009af4:	2101      	movs	r1, #1
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f920 	bl	8009d3c <MSC_BOT_SendCSW>
      }
      break;
 8009afc:	e008      	b.n	8009b10 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009afe:	2100      	movs	r1, #0
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f91b 	bl	8009d3c <MSC_BOT_SendCSW>
      break;
 8009b06:	e004      	b.n	8009b12 <MSC_BOT_DataIn+0x72>
    return;
 8009b08:	bf00      	nop
 8009b0a:	e002      	b.n	8009b12 <MSC_BOT_DataIn+0x72>

    default:
      break;
 8009b0c:	bf00      	nop
 8009b0e:	e000      	b.n	8009b12 <MSC_BOT_DataIn+0x72>
      break;
 8009b10:	bf00      	nop
  }
}
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	32b0      	adds	r2, #176	; 0xb0
 8009b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b32:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d01e      	beq.n	8009b78 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	7a1b      	ldrb	r3, [r3, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <MSC_BOT_DataOut+0x30>
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d004      	beq.n	8009b50 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009b46:	e01a      	b.n	8009b7e <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f81b 	bl	8009b84 <MSC_BOT_CBW_Decode>
      break;
 8009b4e:	e016      	b.n	8009b7e <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b56:	7f59      	ldrb	r1, [r3, #29]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5e:	331f      	adds	r3, #31
 8009b60:	461a      	mov	r2, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f9a8 	bl	8009eb8 <SCSI_ProcessCmd>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	da06      	bge.n	8009b7c <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009b6e:	2101      	movs	r1, #1
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f8e3 	bl	8009d3c <MSC_BOT_SendCSW>
      break;
 8009b76:	e001      	b.n	8009b7c <MSC_BOT_DataOut+0x64>
    return;
 8009b78:	bf00      	nop
 8009b7a:	e000      	b.n	8009b7e <MSC_BOT_DataOut+0x66>
      break;
 8009b7c:	bf00      	nop
  }
}
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	32b0      	adds	r2, #176	; 0xb0
 8009b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 8085 	beq.w	8009cae <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bb2:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bc2:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009bc4:	4b3d      	ldr	r3, [pc, #244]	; (8009cbc <MSC_BOT_CBW_Decode+0x138>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f003 fcd8 	bl	800d580 <USBD_LL_GetRxDataSize>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b1f      	cmp	r3, #31
 8009bd4:	d118      	bne.n	8009c08 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bdc:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009bde:	4a38      	ldr	r2, [pc, #224]	; (8009cc0 <MSC_BOT_CBW_Decode+0x13c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d111      	bne.n	8009c08 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bea:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d80b      	bhi.n	8009c08 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf6:	7f9b      	ldrb	r3, [r3, #30]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c02:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009c04:	2b10      	cmp	r3, #16
 8009c06:	d90f      	bls.n	8009c28 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c0e:	7f59      	ldrb	r1, [r3, #29]
 8009c10:	2320      	movs	r3, #32
 8009c12:	2205      	movs	r2, #5
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fe7b 	bl	800a910 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f8cb 	bl	8009dbc <MSC_BOT_Abort>
 8009c26:	e045      	b.n	8009cb4 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c2e:	7f59      	ldrb	r1, [r3, #29]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c36:	331f      	adds	r3, #31
 8009c38:	461a      	mov	r2, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f93c 	bl	8009eb8 <SCSI_ProcessCmd>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da0c      	bge.n	8009c60 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	7a1b      	ldrb	r3, [r3, #8]
 8009c4a:	2b05      	cmp	r3, #5
 8009c4c:	d104      	bne.n	8009c58 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009c4e:	2101      	movs	r1, #1
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f873 	bl	8009d3c <MSC_BOT_SendCSW>
 8009c56:	e02d      	b.n	8009cb4 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f8af 	bl	8009dbc <MSC_BOT_Abort>
 8009c5e:	e029      	b.n	8009cb4 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	7a1b      	ldrb	r3, [r3, #8]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d024      	beq.n	8009cb2 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d020      	beq.n	8009cb2 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d01c      	beq.n	8009cb2 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d009      	beq.n	8009c94 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f103 0110 	add.w	r1, r3, #16
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f819 	bl	8009cc4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009c92:	e00f      	b.n	8009cb4 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f84c 	bl	8009d3c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009ca4:	e006      	b.n	8009cb4 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f888 	bl	8009dbc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009cac:	e002      	b.n	8009cb4 <MSC_BOT_CBW_Decode+0x130>
    return;
 8009cae:	bf00      	nop
 8009cb0:	e000      	b.n	8009cb4 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8009cb2:	bf00      	nop
    }
  }
}
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	200000ef 	.word	0x200000ef
 8009cc0:	43425355 	.word	0x43425355

08009cc4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	32b0      	adds	r2, #176	; 0xb0
 8009cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cde:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d023      	beq.n	8009d2e <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	bf28      	it	cs
 8009cf4:	4613      	movcs	r3, r2
 8009cf6:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d0a:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2204      	movs	r2, #4
 8009d1c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009d1e:	4b06      	ldr	r3, [pc, #24]	; (8009d38 <MSC_BOT_SendData+0x74>)
 8009d20:	7819      	ldrb	r1, [r3, #0]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f003 fbba 	bl	800d4a0 <USBD_LL_Transmit>
 8009d2c:	e000      	b.n	8009d30 <MSC_BOT_SendData+0x6c>
    return;
 8009d2e:	bf00      	nop
}
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	200000ee 	.word	0x200000ee

08009d3c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	32b0      	adds	r2, #176	; 0xb0
 8009d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d56:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d024      	beq.n	8009da8 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d64:	461a      	mov	r2, r3
 8009d66:	4b12      	ldr	r3, [pc, #72]	; (8009db0 <MSC_BOT_SendCSW+0x74>)
 8009d68:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d70:	461a      	mov	r2, r3
 8009d72:	78fb      	ldrb	r3, [r7, #3]
 8009d74:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <MSC_BOT_SendCSW+0x78>)
 8009d80:	7819      	ldrb	r1, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009d88:	3210      	adds	r2, #16
 8009d8a:	230d      	movs	r3, #13
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f003 fb87 	bl	800d4a0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <MSC_BOT_SendCSW+0x7c>)
 8009d94:	7819      	ldrb	r1, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009d9c:	3210      	adds	r2, #16
 8009d9e:	231f      	movs	r3, #31
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f003 fbb5 	bl	800d510 <USBD_LL_PrepareReceive>
 8009da6:	e000      	b.n	8009daa <MSC_BOT_SendCSW+0x6e>
    return;
 8009da8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	53425355 	.word	0x53425355
 8009db4:	200000ee 	.word	0x200000ee
 8009db8:	200000ef 	.word	0x200000ef

08009dbc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	32b0      	adds	r2, #176	; 0xb0
 8009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d02c      	beq.n	8009e34 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de0:	7f1b      	ldrb	r3, [r3, #28]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10f      	bne.n	8009e06 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dec:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d009      	beq.n	8009e06 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d105      	bne.n	8009e06 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009dfa:	4b10      	ldr	r3, [pc, #64]	; (8009e3c <MSC_BOT_Abort+0x80>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f003 fa7d 	bl	800d300 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009e06:	4b0e      	ldr	r3, [pc, #56]	; (8009e40 <MSC_BOT_Abort+0x84>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f003 fa77 	bl	800d300 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	7a5b      	ldrb	r3, [r3, #9]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d10d      	bne.n	8009e36 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009e1a:	4b09      	ldr	r3, [pc, #36]	; (8009e40 <MSC_BOT_Abort+0x84>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f003 fa6d 	bl	800d300 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009e26:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <MSC_BOT_Abort+0x80>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f003 fa67 	bl	800d300 <USBD_LL_StallEP>
 8009e32:	e000      	b.n	8009e36 <MSC_BOT_Abort+0x7a>
    return;
 8009e34:	bf00      	nop
  }
}
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	200000ef 	.word	0x200000ef
 8009e40:	200000ee 	.word	0x200000ee

08009e44 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	32b0      	adds	r2, #176	; 0xb0
 8009e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d01d      	beq.n	8009ea2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	7a5b      	ldrb	r3, [r3, #9]
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d10c      	bne.n	8009e88 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009e6e:	4b10      	ldr	r3, [pc, #64]	; (8009eb0 <MSC_BOT_CplClrFeature+0x6c>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f003 fa43 	bl	800d300 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009e7a:	4b0e      	ldr	r3, [pc, #56]	; (8009eb4 <MSC_BOT_CplClrFeature+0x70>)
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f003 fa3d 	bl	800d300 <USBD_LL_StallEP>
 8009e86:	e00f      	b.n	8009ea8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	da0a      	bge.n	8009ea6 <MSC_BOT_CplClrFeature+0x62>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7a5b      	ldrb	r3, [r3, #9]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d006      	beq.n	8009ea6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009e98:	2101      	movs	r1, #1
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff ff4e 	bl	8009d3c <MSC_BOT_SendCSW>
 8009ea0:	e002      	b.n	8009ea8 <MSC_BOT_CplClrFeature+0x64>
    return;
 8009ea2:	bf00      	nop
 8009ea4:	e000      	b.n	8009ea8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009ea6:	bf00      	nop
  }
}
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	200000ee 	.word	0x200000ee
 8009eb4:	200000ef 	.word	0x200000ef

08009eb8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	32b0      	adds	r2, #176	; 0xb0
 8009ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8009edc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee0:	e168      	b.n	800a1b4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2baa      	cmp	r3, #170	; 0xaa
 8009ee8:	f000 8144 	beq.w	800a174 <SCSI_ProcessCmd+0x2bc>
 8009eec:	2baa      	cmp	r3, #170	; 0xaa
 8009eee:	f300 8153 	bgt.w	800a198 <SCSI_ProcessCmd+0x2e0>
 8009ef2:	2ba8      	cmp	r3, #168	; 0xa8
 8009ef4:	f000 812c 	beq.w	800a150 <SCSI_ProcessCmd+0x298>
 8009ef8:	2ba8      	cmp	r3, #168	; 0xa8
 8009efa:	f300 814d 	bgt.w	800a198 <SCSI_ProcessCmd+0x2e0>
 8009efe:	2b5a      	cmp	r3, #90	; 0x5a
 8009f00:	f300 80c0 	bgt.w	800a084 <SCSI_ProcessCmd+0x1cc>
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f2c0 8147 	blt.w	800a198 <SCSI_ProcessCmd+0x2e0>
 8009f0a:	2b5a      	cmp	r3, #90	; 0x5a
 8009f0c:	f200 8144 	bhi.w	800a198 <SCSI_ProcessCmd+0x2e0>
 8009f10:	a201      	add	r2, pc, #4	; (adr r2, 8009f18 <SCSI_ProcessCmd+0x60>)
 8009f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f16:	bf00      	nop
 8009f18:	0800a08b 	.word	0x0800a08b
 8009f1c:	0800a199 	.word	0x0800a199
 8009f20:	0800a199 	.word	0x0800a199
 8009f24:	0800a09d 	.word	0x0800a09d
 8009f28:	0800a199 	.word	0x0800a199
 8009f2c:	0800a199 	.word	0x0800a199
 8009f30:	0800a199 	.word	0x0800a199
 8009f34:	0800a199 	.word	0x0800a199
 8009f38:	0800a199 	.word	0x0800a199
 8009f3c:	0800a199 	.word	0x0800a199
 8009f40:	0800a199 	.word	0x0800a199
 8009f44:	0800a199 	.word	0x0800a199
 8009f48:	0800a199 	.word	0x0800a199
 8009f4c:	0800a199 	.word	0x0800a199
 8009f50:	0800a199 	.word	0x0800a199
 8009f54:	0800a199 	.word	0x0800a199
 8009f58:	0800a199 	.word	0x0800a199
 8009f5c:	0800a199 	.word	0x0800a199
 8009f60:	0800a0af 	.word	0x0800a0af
 8009f64:	0800a199 	.word	0x0800a199
 8009f68:	0800a199 	.word	0x0800a199
 8009f6c:	0800a199 	.word	0x0800a199
 8009f70:	0800a199 	.word	0x0800a199
 8009f74:	0800a199 	.word	0x0800a199
 8009f78:	0800a199 	.word	0x0800a199
 8009f7c:	0800a199 	.word	0x0800a199
 8009f80:	0800a0e5 	.word	0x0800a0e5
 8009f84:	0800a0c1 	.word	0x0800a0c1
 8009f88:	0800a199 	.word	0x0800a199
 8009f8c:	0800a199 	.word	0x0800a199
 8009f90:	0800a0d3 	.word	0x0800a0d3
 8009f94:	0800a199 	.word	0x0800a199
 8009f98:	0800a199 	.word	0x0800a199
 8009f9c:	0800a199 	.word	0x0800a199
 8009fa0:	0800a199 	.word	0x0800a199
 8009fa4:	0800a109 	.word	0x0800a109
 8009fa8:	0800a199 	.word	0x0800a199
 8009fac:	0800a11b 	.word	0x0800a11b
 8009fb0:	0800a199 	.word	0x0800a199
 8009fb4:	0800a199 	.word	0x0800a199
 8009fb8:	0800a13f 	.word	0x0800a13f
 8009fbc:	0800a199 	.word	0x0800a199
 8009fc0:	0800a163 	.word	0x0800a163
 8009fc4:	0800a199 	.word	0x0800a199
 8009fc8:	0800a199 	.word	0x0800a199
 8009fcc:	0800a199 	.word	0x0800a199
 8009fd0:	0800a199 	.word	0x0800a199
 8009fd4:	0800a187 	.word	0x0800a187
 8009fd8:	0800a199 	.word	0x0800a199
 8009fdc:	0800a199 	.word	0x0800a199
 8009fe0:	0800a199 	.word	0x0800a199
 8009fe4:	0800a199 	.word	0x0800a199
 8009fe8:	0800a199 	.word	0x0800a199
 8009fec:	0800a199 	.word	0x0800a199
 8009ff0:	0800a199 	.word	0x0800a199
 8009ff4:	0800a199 	.word	0x0800a199
 8009ff8:	0800a199 	.word	0x0800a199
 8009ffc:	0800a199 	.word	0x0800a199
 800a000:	0800a199 	.word	0x0800a199
 800a004:	0800a199 	.word	0x0800a199
 800a008:	0800a199 	.word	0x0800a199
 800a00c:	0800a199 	.word	0x0800a199
 800a010:	0800a199 	.word	0x0800a199
 800a014:	0800a199 	.word	0x0800a199
 800a018:	0800a199 	.word	0x0800a199
 800a01c:	0800a199 	.word	0x0800a199
 800a020:	0800a199 	.word	0x0800a199
 800a024:	0800a199 	.word	0x0800a199
 800a028:	0800a199 	.word	0x0800a199
 800a02c:	0800a199 	.word	0x0800a199
 800a030:	0800a199 	.word	0x0800a199
 800a034:	0800a199 	.word	0x0800a199
 800a038:	0800a199 	.word	0x0800a199
 800a03c:	0800a199 	.word	0x0800a199
 800a040:	0800a199 	.word	0x0800a199
 800a044:	0800a199 	.word	0x0800a199
 800a048:	0800a199 	.word	0x0800a199
 800a04c:	0800a199 	.word	0x0800a199
 800a050:	0800a199 	.word	0x0800a199
 800a054:	0800a199 	.word	0x0800a199
 800a058:	0800a199 	.word	0x0800a199
 800a05c:	0800a199 	.word	0x0800a199
 800a060:	0800a199 	.word	0x0800a199
 800a064:	0800a199 	.word	0x0800a199
 800a068:	0800a199 	.word	0x0800a199
 800a06c:	0800a199 	.word	0x0800a199
 800a070:	0800a199 	.word	0x0800a199
 800a074:	0800a199 	.word	0x0800a199
 800a078:	0800a199 	.word	0x0800a199
 800a07c:	0800a199 	.word	0x0800a199
 800a080:	0800a0f7 	.word	0x0800a0f7
 800a084:	2b9e      	cmp	r3, #158	; 0x9e
 800a086:	d051      	beq.n	800a12c <SCSI_ProcessCmd+0x274>
 800a088:	e086      	b.n	800a198 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	4619      	mov	r1, r3
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f893 	bl	800a1bc <SCSI_TestUnitReady>
 800a096:	4603      	mov	r3, r0
 800a098:	75fb      	strb	r3, [r7, #23]
      break;
 800a09a:	e089      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800a09c:	7afb      	ldrb	r3, [r7, #11]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 fb9a 	bl	800a7dc <SCSI_RequestSense>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ac:	e080      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f000 f8df 	bl	800a278 <SCSI_Inquiry>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a0be:	e077      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800a0c0:	7afb      	ldrb	r3, [r7, #11]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 fc7e 	bl	800a9c8 <SCSI_StartStopUnit>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a0d0:	e06e      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800a0d2:	7afb      	ldrb	r3, [r7, #11]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 fcd2 	bl	800aa82 <SCSI_AllowPreventRemovable>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e2:	e065      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800a0e4:	7afb      	ldrb	r3, [r7, #11]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 fb16 	bl	800a71c <SCSI_ModeSense6>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0f4:	e05c      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800a0f6:	7afb      	ldrb	r3, [r7, #11]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 fb3d 	bl	800a77c <SCSI_ModeSense10>
 800a102:	4603      	mov	r3, r0
 800a104:	75fb      	strb	r3, [r7, #23]
      break;
 800a106:	e053      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800a108:	7afb      	ldrb	r3, [r7, #11]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	4619      	mov	r1, r3
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f000 fa86 	bl	800a620 <SCSI_ReadFormatCapacity>
 800a114:	4603      	mov	r3, r0
 800a116:	75fb      	strb	r3, [r7, #23]
      break;
 800a118:	e04a      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	4619      	mov	r1, r3
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 f929 	bl	800a378 <SCSI_ReadCapacity10>
 800a126:	4603      	mov	r3, r0
 800a128:	75fb      	strb	r3, [r7, #23]
      break;
 800a12a:	e041      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	4619      	mov	r1, r3
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 f9af 	bl	800a496 <SCSI_ReadCapacity16>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]
      break;
 800a13c:	e038      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800a13e:	7afb      	ldrb	r3, [r7, #11]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	4619      	mov	r1, r3
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 fccd 	bl	800aae4 <SCSI_Read10>
 800a14a:	4603      	mov	r3, r0
 800a14c:	75fb      	strb	r3, [r7, #23]
      break;
 800a14e:	e02f      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800a150:	7afb      	ldrb	r3, [r7, #11]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	4619      	mov	r1, r3
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 fd7b 	bl	800ac52 <SCSI_Read12>
 800a15c:	4603      	mov	r3, r0
 800a15e:	75fb      	strb	r3, [r7, #23]
      break;
 800a160:	e026      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	4619      	mov	r1, r3
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 fe33 	bl	800add4 <SCSI_Write10>
 800a16e:	4603      	mov	r3, r0
 800a170:	75fb      	strb	r3, [r7, #23]
      break;
 800a172:	e01d      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800a174:	7afb      	ldrb	r3, [r7, #11]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	4619      	mov	r1, r3
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 ff0e 	bl	800af9c <SCSI_Write12>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]
      break;
 800a184:	e014      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800a186:	7afb      	ldrb	r3, [r7, #11]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	4619      	mov	r1, r3
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 fff9 	bl	800b184 <SCSI_Verify10>
 800a192:	4603      	mov	r3, r0
 800a194:	75fb      	strb	r3, [r7, #23]
      break;
 800a196:	e00b      	b.n	800a1b0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a198:	7af9      	ldrb	r1, [r7, #11]
 800a19a:	2320      	movs	r3, #32
 800a19c:	2205      	movs	r2, #5
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 fbb6 	bl	800a910 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800a1aa:	23ff      	movs	r3, #255	; 0xff
 800a1ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ae:	bf00      	nop
  }

  return ret;
 800a1b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3718      	adds	r7, #24
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	32b0      	adds	r2, #176	; 0xb0
 800a1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800a1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e4:	e043      	b.n	800a26e <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00b      	beq.n	800a20a <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f8:	7f59      	ldrb	r1, [r3, #29]
 800a1fa:	2320      	movs	r3, #32
 800a1fc:	2205      	movs	r2, #5
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 fb86 	bl	800a910 <SCSI_SenseCode>

    return -1;
 800a204:	f04f 33ff 	mov.w	r3, #4294967295
 800a208:	e031      	b.n	800a26e <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a210:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a214:	2b02      	cmp	r3, #2
 800a216:	d10b      	bne.n	800a230 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a218:	7af9      	ldrb	r1, [r7, #11]
 800a21a:	233a      	movs	r3, #58	; 0x3a
 800a21c:	2202      	movs	r2, #2
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f000 fb76 	bl	800a910 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	2205      	movs	r2, #5
 800a228:	721a      	strb	r2, [r3, #8]
    return -1;
 800a22a:	f04f 33ff 	mov.w	r3, #4294967295
 800a22e:	e01e      	b.n	800a26e <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	33b0      	adds	r3, #176	; 0xb0
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	7afa      	ldrb	r2, [r7, #11]
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00b      	beq.n	800a266 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a24e:	7af9      	ldrb	r1, [r7, #11]
 800a250:	233a      	movs	r3, #58	; 0x3a
 800a252:	2202      	movs	r2, #2
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 fb5b 	bl	800a910 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2205      	movs	r2, #5
 800a25e:	721a      	strb	r2, [r3, #8]

    return -1;
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	e003      	b.n	800a26e <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2200      	movs	r2, #0
 800a26a:	60da      	str	r2, [r3, #12]

  return 0;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	460b      	mov	r3, r1
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	32b0      	adds	r2, #176	; 0xb0
 800a290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a294:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800a29c:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a0:	e062      	b.n	800a368 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10b      	bne.n	800a2c6 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b4:	7f59      	ldrb	r1, [r3, #29]
 800a2b6:	2320      	movs	r3, #32
 800a2b8:	2205      	movs	r2, #5
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 fb28 	bl	800a910 <SCSI_SenseCode>
    return -1;
 800a2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c4:	e050      	b.n	800a368 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d021      	beq.n	800a318 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3302      	adds	r3, #2
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d105      	bne.n	800a2ea <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800a2de:	2206      	movs	r2, #6
 800a2e0:	4923      	ldr	r1, [pc, #140]	; (800a370 <SCSI_Inquiry+0xf8>)
 800a2e2:	69b8      	ldr	r0, [r7, #24]
 800a2e4:	f001 f8fa 	bl	800b4dc <SCSI_UpdateBotData>
 800a2e8:	e03d      	b.n	800a366 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b80      	cmp	r3, #128	; 0x80
 800a2f2:	d105      	bne.n	800a300 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800a2f4:	2208      	movs	r2, #8
 800a2f6:	491f      	ldr	r1, [pc, #124]	; (800a374 <SCSI_Inquiry+0xfc>)
 800a2f8:	69b8      	ldr	r0, [r7, #24]
 800a2fa:	f001 f8ef 	bl	800b4dc <SCSI_UpdateBotData>
 800a2fe:	e032      	b.n	800a366 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a306:	7f59      	ldrb	r1, [r3, #29]
 800a308:	2324      	movs	r3, #36	; 0x24
 800a30a:	2205      	movs	r2, #5
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 faff 	bl	800a910 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800a312:	f04f 33ff 	mov.w	r3, #4294967295
 800a316:	e027      	b.n	800a368 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	33b0      	adds	r3, #176	; 0xb0
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800a328:	69d9      	ldr	r1, [r3, #28]
 800a32a:	7afa      	ldrb	r2, [r7, #11]
 800a32c:	4613      	mov	r3, r2
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a334:	440b      	add	r3, r1
 800a336:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	3304      	adds	r3, #4
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	3305      	adds	r3, #5
 800a342:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3304      	adds	r3, #4
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	8bfa      	ldrh	r2, [r7, #30]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d303      	bcc.n	800a35a <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3304      	adds	r3, #4
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800a35a:	8bfb      	ldrh	r3, [r7, #30]
 800a35c:	461a      	mov	r2, r3
 800a35e:	6979      	ldr	r1, [r7, #20]
 800a360:	69b8      	ldr	r0, [r7, #24]
 800a362:	f001 f8bb 	bl	800b4dc <SCSI_UpdateBotData>
  }

  return 0;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3720      	adds	r7, #32
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	200000f0 	.word	0x200000f0
 800a374:	200000f8 	.word	0x200000f8

0800a378 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	460b      	mov	r3, r1
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	32b0      	adds	r2, #176	; 0xb0
 800a390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a394:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800a39c:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a0:	e075      	b.n	800a48e <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	33b0      	adds	r3, #176	; 0xb0
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	685c      	ldr	r4, [r3, #4]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800a3c2:	3204      	adds	r2, #4
 800a3c4:	7af8      	ldrb	r0, [r7, #11]
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	47a0      	blx	r4
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a3ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d106      	bne.n	800a3e4 <SCSI_ReadCapacity10+0x6c>
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3dc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d108      	bne.n	800a3f6 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a3e4:	7af9      	ldrb	r1, [r7, #11]
 800a3e6:	233a      	movs	r3, #58	; 0x3a
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 fa90 	bl	800a910 <SCSI_SenseCode>
    return -1;
 800a3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f4:	e04b      	b.n	800a48e <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3fe:	3b01      	subs	r3, #1
 800a400:	0e1b      	lsrs	r3, r3, #24
 800a402:	b2da      	uxtb	r2, r3
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a40e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a410:	3b01      	subs	r3, #1
 800a412:	0c1b      	lsrs	r3, r3, #16
 800a414:	b2da      	uxtb	r2, r3
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a422:	3b01      	subs	r3, #1
 800a424:	0a1b      	lsrs	r3, r3, #8
 800a426:	b2da      	uxtb	r2, r3
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a434:	b2db      	uxtb	r3, r3
 800a436:	3b01      	subs	r3, #1
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a444:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a448:	161b      	asrs	r3, r3, #24
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a456:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a45a:	141b      	asrs	r3, r3, #16
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a468:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a46c:	0a1b      	lsrs	r3, r3, #8
 800a46e:	b29b      	uxth	r3, r3
 800a470:	b2da      	uxtb	r2, r3
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a480:	b2da      	uxtb	r2, r3
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2208      	movs	r2, #8
 800a48a:	60da      	str	r2, [r3, #12]

  return 0;
 800a48c:	2300      	movs	r3, #0

}
 800a48e:	4618      	mov	r0, r3
 800a490:	371c      	adds	r7, #28
 800a492:	46bd      	mov	sp, r7
 800a494:	bd90      	pop	{r4, r7, pc}

0800a496 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a496:	b590      	push	{r4, r7, lr}
 800a498:	b089      	sub	sp, #36	; 0x24
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	607a      	str	r2, [r7, #4]
 800a4a2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	32b0      	adds	r2, #176	; 0xb0
 800a4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d102      	bne.n	800a4c0 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800a4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a4be:	e0ab      	b.n	800a618 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	33b0      	adds	r3, #176	; 0xb0
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	685c      	ldr	r4, [r3, #4]
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a4d8:	3308      	adds	r3, #8
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800a4e0:	3204      	adds	r2, #4
 800a4e2:	7af8      	ldrb	r0, [r7, #11]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	47a0      	blx	r4
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <SCSI_ReadCapacity16+0x6c>
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4fa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d108      	bne.n	800a514 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a502:	7af9      	ldrb	r1, [r7, #11]
 800a504:	233a      	movs	r3, #58	; 0x3a
 800a506:	2202      	movs	r2, #2
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fa01 	bl	800a910 <SCSI_SenseCode>
    return -1;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	e081      	b.n	800a618 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	330a      	adds	r3, #10
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	330b      	adds	r3, #11
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a524:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	330c      	adds	r3, #12
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a52e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	320d      	adds	r2, #13
 800a534:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a536:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a53c:	2300      	movs	r3, #0
 800a53e:	61fb      	str	r3, [r7, #28]
 800a540:	e008      	b.n	800a554 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	4413      	add	r3, r2
 800a548:	3310      	adds	r3, #16
 800a54a:	2200      	movs	r2, #0
 800a54c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	3301      	adds	r3, #1
 800a552:	61fb      	str	r3, [r7, #28]
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	69fa      	ldr	r2, [r7, #28]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d3f1      	bcc.n	800a542 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a566:	3b01      	subs	r3, #1
 800a568:	0e1b      	lsrs	r3, r3, #24
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a578:	3b01      	subs	r3, #1
 800a57a:	0c1b      	lsrs	r3, r3, #16
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a58a:	3b01      	subs	r3, #1
 800a58c:	0a1b      	lsrs	r3, r3, #8
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5b0:	161b      	asrs	r3, r3, #24
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5c2:	141b      	asrs	r3, r3, #16
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5d4:	0a1b      	lsrs	r3, r3, #8
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	330a      	adds	r3, #10
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	330b      	adds	r3, #11
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a5fe:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	330c      	adds	r3, #12
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a608:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	320d      	adds	r2, #13
 800a60e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a610:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	60da      	str	r2, [r3, #12]

  return 0;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3724      	adds	r7, #36	; 0x24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd90      	pop	{r4, r7, pc}

0800a620 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	460b      	mov	r3, r1
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	32b0      	adds	r2, #176	; 0xb0
 800a638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800a644:	f04f 33ff 	mov.w	r3, #4294967295
 800a648:	e063      	b.n	800a712 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	33b0      	adds	r3, #176	; 0xb0
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f107 0214 	add.w	r2, r7, #20
 800a660:	f107 0110 	add.w	r1, r7, #16
 800a664:	7af8      	ldrb	r0, [r7, #11]
 800a666:	4798      	blx	r3
 800a668:	4603      	mov	r3, r0
 800a66a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a66c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d106      	bne.n	800a682 <SCSI_ReadFormatCapacity+0x62>
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d108      	bne.n	800a694 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a682:	7af9      	ldrb	r1, [r7, #11]
 800a684:	233a      	movs	r3, #58	; 0x3a
 800a686:	2202      	movs	r2, #2
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f941 	bl	800a910 <SCSI_SenseCode>
    return -1;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	e03e      	b.n	800a712 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800a694:	2300      	movs	r3, #0
 800a696:	83fb      	strh	r3, [r7, #30]
 800a698:	e007      	b.n	800a6aa <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800a69a:	8bfb      	ldrh	r3, [r7, #30]
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	4413      	add	r3, r2
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a6a4:	8bfb      	ldrh	r3, [r7, #30]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	83fb      	strh	r3, [r7, #30]
 800a6aa:	8bfb      	ldrh	r3, [r7, #30]
 800a6ac:	2b0b      	cmp	r3, #11
 800a6ae:	d9f4      	bls.n	800a69a <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	2208      	movs	r2, #8
 800a6b4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	0e1b      	lsrs	r3, r3, #24
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	0c1b      	lsrs	r3, r3, #16
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	0a1b      	lsrs	r3, r3, #8
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a6ec:	8abb      	ldrh	r3, [r7, #20]
 800a6ee:	141b      	asrs	r3, r3, #16
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a6f6:	8abb      	ldrh	r3, [r7, #20]
 800a6f8:	0a1b      	lsrs	r3, r3, #8
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a702:	8abb      	ldrh	r3, [r7, #20]
 800a704:	b2da      	uxtb	r2, r3
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	220c      	movs	r2, #12
 800a70e:	60da      	str	r2, [r3, #12]

  return 0;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	460b      	mov	r3, r1
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	32b0      	adds	r2, #176	; 0xb0
 800a734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a738:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a73a:	2317      	movs	r3, #23
 800a73c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d102      	bne.n	800a74a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a744:	f04f 33ff 	mov.w	r3, #4294967295
 800a748:	e011      	b.n	800a76e <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	3304      	adds	r3, #4
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	8afa      	ldrh	r2, [r7, #22]
 800a754:	429a      	cmp	r2, r3
 800a756:	d303      	bcc.n	800a760 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3304      	adds	r3, #4
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a760:	8afb      	ldrh	r3, [r7, #22]
 800a762:	461a      	mov	r2, r3
 800a764:	4904      	ldr	r1, [pc, #16]	; (800a778 <SCSI_ModeSense6+0x5c>)
 800a766:	6938      	ldr	r0, [r7, #16]
 800a768:	f000 feb8 	bl	800b4dc <SCSI_UpdateBotData>

  return 0;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000100 	.word	0x20000100

0800a77c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	460b      	mov	r3, r1
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	32b0      	adds	r2, #176	; 0xb0
 800a794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a798:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a79a:	231b      	movs	r3, #27
 800a79c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d102      	bne.n	800a7aa <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a8:	e011      	b.n	800a7ce <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	8afa      	ldrh	r2, [r7, #22]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d303      	bcc.n	800a7c0 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3308      	adds	r3, #8
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a7c0:	8afb      	ldrh	r3, [r7, #22]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	4904      	ldr	r1, [pc, #16]	; (800a7d8 <SCSI_ModeSense10+0x5c>)
 800a7c6:	6938      	ldr	r0, [r7, #16]
 800a7c8:	f000 fe88 	bl	800b4dc <SCSI_UpdateBotData>

  return 0;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000118 	.word	0x20000118

0800a7dc <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	32b0      	adds	r2, #176	; 0xb0
 800a7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d102      	bne.n	800a806 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a800:	f04f 33ff 	mov.w	r3, #4294967295
 800a804:	e080      	b.n	800a908 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10b      	bne.n	800a82a <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a818:	7f59      	ldrb	r1, [r3, #29]
 800a81a:	2320      	movs	r3, #32
 800a81c:	2205      	movs	r2, #5
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 f876 	bl	800a910 <SCSI_SenseCode>
    return -1;
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	e06e      	b.n	800a908 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a82a:	2300      	movs	r3, #0
 800a82c:	75fb      	strb	r3, [r7, #23]
 800a82e:	e007      	b.n	800a840 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	4413      	add	r3, r2
 800a836:	2200      	movs	r2, #0
 800a838:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	3301      	adds	r3, #1
 800a83e:	75fb      	strb	r3, [r7, #23]
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	2b11      	cmp	r3, #17
 800a844:	d9f4      	bls.n	800a830 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	2270      	movs	r2, #112	; 0x70
 800a84a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	220c      	movs	r2, #12
 800a850:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a858:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a862:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a866:	429a      	cmp	r2, r3
 800a868:	d03f      	beq.n	800a8ea <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a870:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a874:	461a      	mov	r2, r3
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a87c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a88a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	4413      	add	r3, r2
 800a898:	791a      	ldrb	r2, [r3, #4]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a8ae:	00db      	lsls	r3, r3, #3
 800a8b0:	4413      	add	r3, r2
 800a8b2:	795a      	ldrb	r2, [r3, #5]
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8be:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8d6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a8da:	2b04      	cmp	r3, #4
 800a8dc:	d105      	bne.n	800a8ea <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2212      	movs	r2, #18
 800a8ee:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	2b12      	cmp	r3, #18
 800a8f8:	d805      	bhi.n	800a906 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	461a      	mov	r2, r3
 800a91e:	4603      	mov	r3, r0
 800a920:	70fb      	strb	r3, [r7, #3]
 800a922:	460b      	mov	r3, r1
 800a924:	70bb      	strb	r3, [r7, #2]
 800a926:	4613      	mov	r3, r2
 800a928:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	32b0      	adds	r2, #176	; 0xb0
 800a934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a938:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d03d      	beq.n	800a9bc <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a946:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a94a:	461a      	mov	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a952:	78b9      	ldrb	r1, [r7, #2]
 800a954:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a95e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	4413      	add	r3, r2
 800a96c:	787a      	ldrb	r2, [r7, #1]
 800a96e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a976:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	4413      	add	r3, r2
 800a984:	2200      	movs	r2, #0
 800a986:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a98e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a992:	3301      	adds	r3, #1
 800a994:	b2da      	uxtb	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a99c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	d107      	bne.n	800a9be <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a9ba:	e000      	b.n	800a9be <SCSI_SenseCode+0xae>
    return;
 800a9bc:	bf00      	nop
  }
}
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	32b0      	adds	r2, #176	; 0xb0
 800a9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d102      	bne.n	800a9f2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f0:	e043      	b.n	800aa7a <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d10f      	bne.n	800aa20 <SCSI_StartStopUnit+0x58>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3304      	adds	r3, #4
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	f003 0303 	and.w	r3, r3, #3
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d108      	bne.n	800aa20 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800aa0e:	7af9      	ldrb	r1, [r7, #11]
 800aa10:	2324      	movs	r3, #36	; 0x24
 800aa12:	2205      	movs	r2, #5
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7ff ff7b 	bl	800a910 <SCSI_SenseCode>

    return -1;
 800aa1a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1e:	e02c      	b.n	800aa7a <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3304      	adds	r3, #4
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	f003 0303 	and.w	r3, r3, #3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d106      	bne.n	800aa3c <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800aa3a:	e01a      	b.n	800aa72 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	f003 0303 	and.w	r3, r3, #3
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d106      	bne.n	800aa58 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa50:	2202      	movs	r2, #2
 800aa52:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800aa56:	e00c      	b.n	800aa72 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d105      	bne.n	800aa72 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2200      	movs	r2, #0
 800aa76:	60da      	str	r2, [r3, #12]

  return 0;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b087      	sub	sp, #28
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	60f8      	str	r0, [r7, #12]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	607a      	str	r2, [r7, #4]
 800aa8e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	32b0      	adds	r2, #176	; 0xb0
 800aa9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d102      	bne.n	800aaac <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800aaa6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaaa:	e015      	b.n	800aad8 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3304      	adds	r3, #4
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800aac2:	e005      	b.n	800aad0 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	2200      	movs	r2, #0
 800aad4:	60da      	str	r2, [r3, #12]

  return 0;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	371c      	adds	r7, #28
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	460b      	mov	r3, r1
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	32b0      	adds	r2, #176	; 0xb0
 800aafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d102      	bne.n	800ab0e <SCSI_Read10+0x2a>
  {
    return -1;
 800ab08:	f04f 33ff 	mov.w	r3, #4294967295
 800ab0c:	e09d      	b.n	800ac4a <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	7a1b      	ldrb	r3, [r3, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f040 808f 	bne.w	800ac36 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab1e:	7f1b      	ldrb	r3, [r3, #28]
 800ab20:	b25b      	sxtb	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	db0b      	blt.n	800ab3e <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2c:	7f59      	ldrb	r1, [r3, #29]
 800ab2e:	2320      	movs	r3, #32
 800ab30:	2205      	movs	r2, #5
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f7ff feec 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3c:	e085      	b.n	800ac4a <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab44:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d108      	bne.n	800ab5e <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab4c:	7af9      	ldrb	r1, [r7, #11]
 800ab4e:	233a      	movs	r3, #58	; 0x3a
 800ab50:	2202      	movs	r2, #2
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff fedc 	bl	800a910 <SCSI_SenseCode>

      return -1;
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5c:	e075      	b.n	800ac4a <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	33b0      	adds	r3, #176	; 0xb0
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	7afa      	ldrb	r2, [r7, #11]
 800ab72:	4610      	mov	r0, r2
 800ab74:	4798      	blx	r3
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d008      	beq.n	800ab8e <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab7c:	7af9      	ldrb	r1, [r7, #11]
 800ab7e:	233a      	movs	r3, #58	; 0x3a
 800ab80:	2202      	movs	r2, #2
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fec4 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800ab88:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8c:	e05d      	b.n	800ac4a <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3302      	adds	r3, #2
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3303      	adds	r3, #3
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab9e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3304      	adds	r3, #4
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aba8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	3205      	adds	r2, #5
 800abae:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800abb0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abb8:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3307      	adds	r3, #7
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	021b      	lsls	r3, r3, #8
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	3208      	adds	r2, #8
 800abc6:	7812      	ldrb	r2, [r2, #0]
 800abc8:	4313      	orrs	r3, r2
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abd0:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	7af9      	ldrb	r1, [r7, #11]
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f000 fb0c 	bl	800b202 <SCSI_CheckAddressRange>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	da02      	bge.n	800abf6 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800abf0:	f04f 33ff 	mov.w	r3, #4294967295
 800abf4:	e029      	b.n	800ac4a <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac06:	6979      	ldr	r1, [r7, #20]
 800ac08:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800ac0c:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800ac10:	fb01 f303 	mul.w	r3, r1, r3
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d00b      	beq.n	800ac30 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac1e:	7f59      	ldrb	r1, [r3, #29]
 800ac20:	2320      	movs	r3, #32
 800ac22:	2205      	movs	r2, #5
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f7ff fe73 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800ac2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2e:	e00c      	b.n	800ac4a <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	2202      	movs	r2, #2
 800ac34:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac3c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	4619      	mov	r1, r3
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 fb0a 	bl	800b25c <SCSI_ProcessRead>
 800ac48:	4603      	mov	r3, r0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b086      	sub	sp, #24
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	32b0      	adds	r2, #176	; 0xb0
 800ac6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac6e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d102      	bne.n	800ac7c <SCSI_Read12+0x2a>
  {
    return -1;
 800ac76:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7a:	e0a7      	b.n	800adcc <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	7a1b      	ldrb	r3, [r3, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f040 8099 	bne.w	800adb8 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8c:	7f1b      	ldrb	r3, [r3, #28]
 800ac8e:	b25b      	sxtb	r3, r3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	db0b      	blt.n	800acac <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9a:	7f59      	ldrb	r1, [r3, #29]
 800ac9c:	2320      	movs	r3, #32
 800ac9e:	2205      	movs	r2, #5
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7ff fe35 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800aca6:	f04f 33ff 	mov.w	r3, #4294967295
 800acaa:	e08f      	b.n	800adcc <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d108      	bne.n	800accc <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800acba:	7af9      	ldrb	r1, [r7, #11]
 800acbc:	233a      	movs	r3, #58	; 0x3a
 800acbe:	2202      	movs	r2, #2
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff fe25 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800acc6:	f04f 33ff 	mov.w	r3, #4294967295
 800acca:	e07f      	b.n	800adcc <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	33b0      	adds	r3, #176	; 0xb0
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	7afa      	ldrb	r2, [r7, #11]
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d008      	beq.n	800acfc <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800acea:	7af9      	ldrb	r1, [r7, #11]
 800acec:	233a      	movs	r3, #58	; 0x3a
 800acee:	2202      	movs	r2, #2
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff fe0d 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295
 800acfa:	e067      	b.n	800adcc <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3302      	adds	r3, #2
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3303      	adds	r3, #3
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad0c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3304      	adds	r3, #4
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ad16:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	3205      	adds	r2, #5
 800ad1c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ad1e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad26:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	3306      	adds	r3, #6
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3307      	adds	r3, #7
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ad38:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ad42:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	3209      	adds	r2, #9
 800ad48:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ad4a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad52:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad64:	7af9      	ldrb	r1, [r7, #11]
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 fa4b 	bl	800b202 <SCSI_CheckAddressRange>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	da02      	bge.n	800ad78 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ad72:	f04f 33ff 	mov.w	r3, #4294967295
 800ad76:	e029      	b.n	800adcc <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad7e:	699a      	ldr	r2, [r3, #24]
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad88:	6979      	ldr	r1, [r7, #20]
 800ad8a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800ad8e:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800ad92:	fb01 f303 	mul.w	r3, r1, r3
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d00b      	beq.n	800adb2 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada0:	7f59      	ldrb	r1, [r3, #29]
 800ada2:	2320      	movs	r3, #32
 800ada4:	2205      	movs	r2, #5
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7ff fdb2 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800adac:	f04f 33ff 	mov.w	r3, #4294967295
 800adb0:	e00c      	b.n	800adcc <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2202      	movs	r2, #2
 800adb6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800adbe:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800adc0:	7afb      	ldrb	r3, [r7, #11]
 800adc2:	4619      	mov	r1, r3
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 fa49 	bl	800b25c <SCSI_ProcessRead>
 800adca:	4603      	mov	r3, r0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	460b      	mov	r3, r1
 800adde:	607a      	str	r2, [r7, #4]
 800ade0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	32b0      	adds	r2, #176	; 0xb0
 800adec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d102      	bne.n	800adfe <SCSI_Write10+0x2a>
  {
    return -1;
 800adf8:	f04f 33ff 	mov.w	r3, #4294967295
 800adfc:	e0c7      	b.n	800af8e <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	7a1b      	ldrb	r3, [r3, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 80bd 	bne.w	800af82 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10b      	bne.n	800ae2c <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae1a:	7f59      	ldrb	r1, [r3, #29]
 800ae1c:	2320      	movs	r3, #32
 800ae1e:	2205      	movs	r2, #5
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f7ff fd75 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800ae26:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2a:	e0b0      	b.n	800af8e <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae32:	7f1b      	ldrb	r3, [r3, #28]
 800ae34:	b25b      	sxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	da0b      	bge.n	800ae52 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae40:	7f59      	ldrb	r1, [r3, #29]
 800ae42:	2320      	movs	r3, #32
 800ae44:	2205      	movs	r2, #5
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff fd62 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800ae4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae50:	e09d      	b.n	800af8e <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	33b0      	adds	r3, #176	; 0xb0
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	7afa      	ldrb	r2, [r7, #11]
 800ae66:	4610      	mov	r0, r2
 800ae68:	4798      	blx	r3
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d008      	beq.n	800ae82 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ae70:	7af9      	ldrb	r1, [r7, #11]
 800ae72:	233a      	movs	r3, #58	; 0x3a
 800ae74:	2202      	movs	r2, #2
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7ff fd4a 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800ae7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae80:	e085      	b.n	800af8e <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	33b0      	adds	r3, #176	; 0xb0
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	7afa      	ldrb	r2, [r7, #11]
 800ae96:	4610      	mov	r0, r2
 800ae98:	4798      	blx	r3
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d008      	beq.n	800aeb2 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800aea0:	7af9      	ldrb	r1, [r7, #11]
 800aea2:	2327      	movs	r3, #39	; 0x27
 800aea4:	2202      	movs	r2, #2
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff fd32 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800aeac:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb0:	e06d      	b.n	800af8e <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3302      	adds	r3, #2
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3303      	adds	r3, #3
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aec2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	3304      	adds	r3, #4
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aecc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	3205      	adds	r2, #5
 800aed2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aed4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aedc:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3307      	adds	r3, #7
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	3208      	adds	r2, #8
 800aeea:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aeec:	4313      	orrs	r3, r2
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aef4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aefc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af06:	7af9      	ldrb	r1, [r7, #11]
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f000 f97a 	bl	800b202 <SCSI_CheckAddressRange>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	da02      	bge.n	800af1a <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800af14:	f04f 33ff 	mov.w	r3, #4294967295
 800af18:	e039      	b.n	800af8e <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af28:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800af2c:	fb02 f303 	mul.w	r3, r2, r3
 800af30:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d00b      	beq.n	800af58 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af46:	7f59      	ldrb	r1, [r3, #29]
 800af48:	2320      	movs	r3, #32
 800af4a:	2205      	movs	r2, #5
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f7ff fcdf 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800af52:	f04f 33ff 	mov.w	r3, #4294967295
 800af56:	e01a      	b.n	800af8e <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af5e:	bf28      	it	cs
 800af60:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800af64:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2201      	movs	r2, #1
 800af6a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <SCSI_Write10+0x1c4>)
 800af6e:	7819      	ldrb	r1, [r3, #0]
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f103 0210 	add.w	r2, r3, #16
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f002 fac9 	bl	800d510 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	e005      	b.n	800af8e <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800af82:	7afb      	ldrb	r3, [r7, #11]
 800af84:	4619      	mov	r1, r3
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 f9fe 	bl	800b388 <SCSI_ProcessWrite>
 800af8c:	4603      	mov	r3, r0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	200000ef 	.word	0x200000ef

0800af9c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	460b      	mov	r3, r1
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	32b0      	adds	r2, #176	; 0xb0
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <SCSI_Write12+0x2a>
  {
    return -1;
 800afc0:	f04f 33ff 	mov.w	r3, #4294967295
 800afc4:	e0d7      	b.n	800b176 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	7a1b      	ldrb	r3, [r3, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f040 80cd 	bne.w	800b16a <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10b      	bne.n	800aff4 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe2:	7f59      	ldrb	r1, [r3, #29]
 800afe4:	2320      	movs	r3, #32
 800afe6:	2205      	movs	r2, #5
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fc91 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800afee:	f04f 33ff 	mov.w	r3, #4294967295
 800aff2:	e0c0      	b.n	800b176 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affa:	7f1b      	ldrb	r3, [r3, #28]
 800affc:	b25b      	sxtb	r3, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	da0b      	bge.n	800b01a <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b008:	7f59      	ldrb	r1, [r3, #29]
 800b00a:	2320      	movs	r3, #32
 800b00c:	2205      	movs	r2, #5
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7ff fc7e 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800b014:	f04f 33ff 	mov.w	r3, #4294967295
 800b018:	e0ad      	b.n	800b176 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	33b0      	adds	r3, #176	; 0xb0
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	7afa      	ldrb	r2, [r7, #11]
 800b02e:	4610      	mov	r0, r2
 800b030:	4798      	blx	r3
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00b      	beq.n	800b050 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b038:	7af9      	ldrb	r1, [r7, #11]
 800b03a:	233a      	movs	r3, #58	; 0x3a
 800b03c:	2202      	movs	r2, #2
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff fc66 	bl	800a910 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2205      	movs	r2, #5
 800b048:	721a      	strb	r2, [r3, #8]
      return -1;
 800b04a:	f04f 33ff 	mov.w	r3, #4294967295
 800b04e:	e092      	b.n	800b176 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	33b0      	adds	r3, #176	; 0xb0
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	7afa      	ldrb	r2, [r7, #11]
 800b064:	4610      	mov	r0, r2
 800b066:	4798      	blx	r3
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b06e:	7af9      	ldrb	r1, [r7, #11]
 800b070:	2327      	movs	r3, #39	; 0x27
 800b072:	2202      	movs	r2, #2
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f7ff fc4b 	bl	800a910 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2205      	movs	r2, #5
 800b07e:	721a      	strb	r2, [r3, #8]
      return -1;
 800b080:	f04f 33ff 	mov.w	r3, #4294967295
 800b084:	e077      	b.n	800b176 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3302      	adds	r3, #2
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3303      	adds	r3, #3
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b096:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3304      	adds	r3, #4
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b0a0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	3205      	adds	r2, #5
 800b0a6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b0a8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b0b0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3306      	adds	r3, #6
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3307      	adds	r3, #7
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b0c2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b0cc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	3209      	adds	r2, #9
 800b0d2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b0d4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b0dc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ee:	7af9      	ldrb	r1, [r7, #11]
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 f886 	bl	800b202 <SCSI_CheckAddressRange>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	da02      	bge.n	800b102 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b100:	e039      	b.n	800b176 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b110:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800b114:	fb02 f303 	mul.w	r3, r2, r3
 800b118:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	429a      	cmp	r2, r3
 800b126:	d00b      	beq.n	800b140 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b12e:	7f59      	ldrb	r1, [r3, #29]
 800b130:	2320      	movs	r3, #32
 800b132:	2205      	movs	r2, #5
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7ff fbeb 	bl	800a910 <SCSI_SenseCode>
      return -1;
 800b13a:	f04f 33ff 	mov.w	r3, #4294967295
 800b13e:	e01a      	b.n	800b176 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b146:	bf28      	it	cs
 800b148:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800b14c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2201      	movs	r2, #1
 800b152:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b154:	4b0a      	ldr	r3, [pc, #40]	; (800b180 <SCSI_Write12+0x1e4>)
 800b156:	7819      	ldrb	r1, [r3, #0]
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f103 0210 	add.w	r2, r3, #16
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f002 f9d5 	bl	800d510 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800b166:	2300      	movs	r3, #0
 800b168:	e005      	b.n	800b176 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800b16a:	7afb      	ldrb	r3, [r7, #11]
 800b16c:	4619      	mov	r1, r3
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 f90a 	bl	800b388 <SCSI_ProcessWrite>
 800b174:	4603      	mov	r3, r0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	200000ef 	.word	0x200000ef

0800b184 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	460b      	mov	r3, r1
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	32b0      	adds	r2, #176	; 0xb0
 800b19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <SCSI_Verify10+0x2a>
  {
    return -1;
 800b1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ac:	e025      	b.n	800b1fa <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	f003 0302 	and.w	r3, r3, #2
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d008      	beq.n	800b1ce <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b1bc:	7af9      	ldrb	r1, [r7, #11]
 800b1be:	2324      	movs	r3, #36	; 0x24
 800b1c0:	2205      	movs	r2, #5
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff fba4 	bl	800a910 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800b1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1cc:	e015      	b.n	800b1fa <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1de:	7af9      	ldrb	r1, [r7, #11]
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f000 f80e 	bl	800b202 <SCSI_CheckAddressRange>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da02      	bge.n	800b1f2 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800b1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f0:	e003      	b.n	800b1fa <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	60da      	str	r2, [r3, #12]

  return 0;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b086      	sub	sp, #24
 800b206:	af00      	add	r7, sp, #0
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	603b      	str	r3, [r7, #0]
 800b20e:	460b      	mov	r3, r1
 800b210:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	32b0      	adds	r2, #176	; 0xb0
 800b21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b220:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d102      	bne.n	800b22e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800b228:	f04f 33ff 	mov.w	r3, #4294967295
 800b22c:	e012      	b.n	800b254 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	441a      	add	r2, r3
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d908      	bls.n	800b252 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800b240:	7af9      	ldrb	r1, [r7, #11]
 800b242:	2321      	movs	r3, #33	; 0x21
 800b244:	2205      	movs	r2, #5
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f7ff fb62 	bl	800a910 <SCSI_SenseCode>
    return -1;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295
 800b250:	e000      	b.n	800b254 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3718      	adds	r7, #24
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b25c:	b590      	push	{r4, r7, lr}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	32b0      	adds	r2, #176	; 0xb0
 800b272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b276:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d102      	bne.n	800b284 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800b27e:	f04f 33ff 	mov.w	r3, #4294967295
 800b282:	e07b      	b.n	800b37c <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b292:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800b296:	fb02 f303 	mul.w	r3, r2, r3
 800b29a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a2:	bf28      	it	cs
 800b2a4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800b2a8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	33b0      	adds	r3, #176	; 0xb0
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	691c      	ldr	r4, [r3, #16]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f103 0110 	add.w	r1, r3, #16
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	78f8      	ldrb	r0, [r7, #3]
 800b2e0:	47a0      	blx	r4
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	da08      	bge.n	800b2fa <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800b2e8:	78f9      	ldrb	r1, [r7, #3]
 800b2ea:	2311      	movs	r3, #17
 800b2ec:	2204      	movs	r2, #4
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7ff fb0e 	bl	800a910 <SCSI_SenseCode>
    return -1;
 800b2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f8:	e040      	b.n	800b37c <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800b2fa:	4b22      	ldr	r3, [pc, #136]	; (800b384 <SCSI_ProcessRead+0x128>)
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f103 0210 	add.w	r2, r3, #16
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f002 f8ca 	bl	800d4a0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b312:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b31a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b31e:	4619      	mov	r1, r3
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	fbb3 f3f1 	udiv	r3, r3, r1
 800b326:	4413      	add	r3, r2
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b32e:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b33e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b342:	4619      	mov	r1, r3
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	fbb3 f3f1 	udiv	r3, r3, r1
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b352:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b35a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b366:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b370:	2b00      	cmp	r3, #0
 800b372:	d102      	bne.n	800b37a <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2203      	movs	r2, #3
 800b378:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	bd90      	pop	{r4, r7, pc}
 800b384:	200000ee 	.word	0x200000ee

0800b388 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b388:	b590      	push	{r4, r7, lr}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	32b0      	adds	r2, #176	; 0xb0
 800b39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d102      	bne.n	800b3b0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800b3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ae:	e08e      	b.n	800b4ce <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b3be:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800b3c2:	fb02 f303 	mul.w	r3, r2, r3
 800b3c6:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ce:	bf28      	it	cs
 800b3d0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800b3d4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	33b0      	adds	r3, #176	; 0xb0
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4413      	add	r3, r2
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	695c      	ldr	r4, [r3, #20]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f103 0110 	add.w	r1, r3, #16
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b400:	4618      	mov	r0, r3
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b408:	b29b      	uxth	r3, r3
 800b40a:	78f8      	ldrb	r0, [r7, #3]
 800b40c:	47a0      	blx	r4
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	da08      	bge.n	800b426 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800b414:	78f9      	ldrb	r1, [r7, #3]
 800b416:	2303      	movs	r3, #3
 800b418:	2204      	movs	r2, #4
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff fa78 	bl	800a910 <SCSI_SenseCode>
    return -1;
 800b420:	f04f 33ff 	mov.w	r3, #4294967295
 800b424:	e053      	b.n	800b4ce <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b42c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b434:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b438:	4619      	mov	r1, r3
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b440:	4413      	add	r3, r2
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b448:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b450:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b458:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b45c:	4619      	mov	r1, r3
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	fbb3 f3f1 	udiv	r3, r3, r1
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b46c:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b480:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d104      	bne.n	800b498 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b48e:	2100      	movs	r1, #0
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7fe fc53 	bl	8009d3c <MSC_BOT_SendCSW>
 800b496:	e019      	b.n	800b4cc <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b4a6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800b4aa:	fb02 f303 	mul.w	r3, r2, r3
 800b4ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b2:	bf28      	it	cs
 800b4b4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800b4b8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b4ba:	4b07      	ldr	r3, [pc, #28]	; (800b4d8 <SCSI_ProcessWrite+0x150>)
 800b4bc:	7819      	ldrb	r1, [r3, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f103 0210 	add.w	r2, r3, #16
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f002 f822 	bl	800d510 <USBD_LL_PrepareReceive>
  }

  return 0;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd90      	pop	{r4, r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	200000ef 	.word	0x200000ef

0800b4dc <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b4ea:	88fb      	ldrh	r3, [r7, #6]
 800b4ec:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d102      	bne.n	800b4fa <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f8:	e013      	b.n	800b522 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b4fa:	8afa      	ldrh	r2, [r7, #22]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b500:	e00b      	b.n	800b51a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b502:	8afb      	ldrh	r3, [r7, #22]
 800b504:	3b01      	subs	r3, #1
 800b506:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b508:	8afb      	ldrh	r3, [r7, #22]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	441a      	add	r2, r3
 800b50e:	8afb      	ldrh	r3, [r7, #22]
 800b510:	7811      	ldrb	r1, [r2, #0]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	460a      	mov	r2, r1
 800b518:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b51a:	8afb      	ldrh	r3, [r7, #22]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1f0      	bne.n	800b502 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	371c      	adds	r7, #28
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b086      	sub	sp, #24
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	4613      	mov	r3, r2
 800b53a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b542:	2303      	movs	r3, #3
 800b544:	e01f      	b.n	800b586 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	79fa      	ldrb	r2, [r7, #7]
 800b578:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f001 fd8c 	bl	800d098 <USBD_LL_Init>
 800b580:	4603      	mov	r3, r0
 800b582:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b584:	7dfb      	ldrb	r3, [r7, #23]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b598:	2300      	movs	r3, #0
 800b59a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e025      	b.n	800b5f2 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	32ae      	adds	r2, #174	; 0xae
 800b5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00f      	beq.n	800b5e2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	32ae      	adds	r2, #174	; 0xae
 800b5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d2:	f107 020e 	add.w	r2, r7, #14
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4798      	blx	r3
 800b5da:	4602      	mov	r2, r0
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 fda0 	bl	800d148 <USBD_LL_Start>
 800b608:	4603      	mov	r3, r0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3708      	adds	r7, #8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b612:	b480      	push	{r7}
 800b614:	b083      	sub	sp, #12
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b61a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	460b      	mov	r3, r1
 800b632:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b634:	2300      	movs	r3, #0
 800b636:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d009      	beq.n	800b656 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	78fa      	ldrb	r2, [r7, #3]
 800b64c:	4611      	mov	r1, r2
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	4798      	blx	r3
 800b652:	4603      	mov	r3, r0
 800b654:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b656:	7bfb      	ldrb	r3, [r7, #15]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	78fa      	ldrb	r2, [r7, #3]
 800b67a:	4611      	mov	r1, r2
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	4798      	blx	r3
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b686:	2303      	movs	r3, #3
 800b688:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f001 f8a7 	bl	800c7fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6c8:	f003 031f 	and.w	r3, r3, #31
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d01a      	beq.n	800b706 <USBD_LL_SetupStage+0x72>
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d822      	bhi.n	800b71a <USBD_LL_SetupStage+0x86>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d002      	beq.n	800b6de <USBD_LL_SetupStage+0x4a>
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d00a      	beq.n	800b6f2 <USBD_LL_SetupStage+0x5e>
 800b6dc:	e01d      	b.n	800b71a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fad4 	bl	800bc94 <USBD_StdDevReq>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f0:	e020      	b.n	800b734 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fb3c 	bl	800bd78 <USBD_StdItfReq>
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
      break;
 800b704:	e016      	b.n	800b734 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fb9e 	bl	800be50 <USBD_StdEPReq>
 800b714:	4603      	mov	r3, r0
 800b716:	73fb      	strb	r3, [r7, #15]
      break;
 800b718:	e00c      	b.n	800b734 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b724:	b2db      	uxtb	r3, r3
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f001 fde9 	bl	800d300 <USBD_LL_StallEP>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
      break;
 800b732:	bf00      	nop
  }

  return ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b086      	sub	sp, #24
 800b742:	af00      	add	r7, sp, #0
 800b744:	60f8      	str	r0, [r7, #12]
 800b746:	460b      	mov	r3, r1
 800b748:	607a      	str	r2, [r7, #4]
 800b74a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b750:	7afb      	ldrb	r3, [r7, #11]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d16e      	bne.n	800b834 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b75c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b764:	2b03      	cmp	r3, #3
 800b766:	f040 8098 	bne.w	800b89a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	689a      	ldr	r2, [r3, #8]
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	429a      	cmp	r2, r3
 800b774:	d913      	bls.n	800b79e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	689a      	ldr	r2, [r3, #8]
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	1ad2      	subs	r2, r2, r3
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	4293      	cmp	r3, r2
 800b78e:	bf28      	it	cs
 800b790:	4613      	movcs	r3, r2
 800b792:	461a      	mov	r2, r3
 800b794:	6879      	ldr	r1, [r7, #4]
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f001 f923 	bl	800c9e2 <USBD_CtlContinueRx>
 800b79c:	e07d      	b.n	800b89a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7a4:	f003 031f 	and.w	r3, r3, #31
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d014      	beq.n	800b7d6 <USBD_LL_DataOutStage+0x98>
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d81d      	bhi.n	800b7ec <USBD_LL_DataOutStage+0xae>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <USBD_LL_DataOutStage+0x7c>
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d003      	beq.n	800b7c0 <USBD_LL_DataOutStage+0x82>
 800b7b8:	e018      	b.n	800b7ec <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	75bb      	strb	r3, [r7, #22]
            break;
 800b7be:	e018      	b.n	800b7f2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f000 f9d2 	bl	800bb74 <USBD_CoreFindIF>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	75bb      	strb	r3, [r7, #22]
            break;
 800b7d4:	e00d      	b.n	800b7f2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	4619      	mov	r1, r3
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 f9d4 	bl	800bb8e <USBD_CoreFindEP>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	75bb      	strb	r3, [r7, #22]
            break;
 800b7ea:	e002      	b.n	800b7f2 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	75bb      	strb	r3, [r7, #22]
            break;
 800b7f0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7f2:	7dbb      	ldrb	r3, [r7, #22]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d119      	bne.n	800b82c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b03      	cmp	r3, #3
 800b802:	d113      	bne.n	800b82c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b804:	7dba      	ldrb	r2, [r7, #22]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	32ae      	adds	r2, #174	; 0xae
 800b80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b814:	7dba      	ldrb	r2, [r7, #22]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b81c:	7dba      	ldrb	r2, [r7, #22]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	32ae      	adds	r2, #174	; 0xae
 800b822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f001 f8e9 	bl	800ca04 <USBD_CtlSendStatus>
 800b832:	e032      	b.n	800b89a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	4619      	mov	r1, r3
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 f9a5 	bl	800bb8e <USBD_CoreFindEP>
 800b844:	4603      	mov	r3, r0
 800b846:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b848:	7dbb      	ldrb	r3, [r7, #22]
 800b84a:	2bff      	cmp	r3, #255	; 0xff
 800b84c:	d025      	beq.n	800b89a <USBD_LL_DataOutStage+0x15c>
 800b84e:	7dbb      	ldrb	r3, [r7, #22]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d122      	bne.n	800b89a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d117      	bne.n	800b890 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b860:	7dba      	ldrb	r2, [r7, #22]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	32ae      	adds	r2, #174	; 0xae
 800b866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00f      	beq.n	800b890 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b870:	7dba      	ldrb	r2, [r7, #22]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b878:	7dba      	ldrb	r2, [r7, #22]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	32ae      	adds	r2, #174	; 0xae
 800b87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	7afa      	ldrb	r2, [r7, #11]
 800b886:	4611      	mov	r1, r2
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	4798      	blx	r3
 800b88c:	4603      	mov	r3, r0
 800b88e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b896:	7dfb      	ldrb	r3, [r7, #23]
 800b898:	e000      	b.n	800b89c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8b2:	7afb      	ldrb	r3, [r7, #11]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d16f      	bne.n	800b998 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3314      	adds	r3, #20
 800b8bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d15a      	bne.n	800b97e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d914      	bls.n	800b8fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	1ad2      	subs	r2, r2, r3
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	6879      	ldr	r1, [r7, #4]
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f001 f84b 	bl	800c986 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f001 fe0a 	bl	800d510 <USBD_LL_PrepareReceive>
 800b8fc:	e03f      	b.n	800b97e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	68da      	ldr	r2, [r3, #12]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	429a      	cmp	r2, r3
 800b908:	d11c      	bne.n	800b944 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b912:	429a      	cmp	r2, r3
 800b914:	d316      	bcc.n	800b944 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b920:	429a      	cmp	r2, r3
 800b922:	d20f      	bcs.n	800b944 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b924:	2200      	movs	r2, #0
 800b926:	2100      	movs	r1, #0
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f001 f82c 	bl	800c986 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b936:	2300      	movs	r3, #0
 800b938:	2200      	movs	r2, #0
 800b93a:	2100      	movs	r1, #0
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f001 fde7 	bl	800d510 <USBD_LL_PrepareReceive>
 800b942:	e01c      	b.n	800b97e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d10f      	bne.n	800b970 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d009      	beq.n	800b970 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b970:	2180      	movs	r1, #128	; 0x80
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f001 fcc4 	bl	800d300 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f001 f856 	bl	800ca2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d03a      	beq.n	800b9fe <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f7ff fe42 	bl	800b612 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b996:	e032      	b.n	800b9fe <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b998:	7afb      	ldrb	r3, [r7, #11]
 800b99a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 f8f3 	bl	800bb8e <USBD_CoreFindEP>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
 800b9ae:	2bff      	cmp	r3, #255	; 0xff
 800b9b0:	d025      	beq.n	800b9fe <USBD_LL_DataInStage+0x15a>
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d122      	bne.n	800b9fe <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d11c      	bne.n	800b9fe <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9c4:	7dfa      	ldrb	r2, [r7, #23]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	32ae      	adds	r2, #174	; 0xae
 800b9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d014      	beq.n	800b9fe <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9d4:	7dfa      	ldrb	r2, [r7, #23]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9dc:	7dfa      	ldrb	r2, [r7, #23]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	32ae      	adds	r2, #174	; 0xae
 800b9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	7afa      	ldrb	r2, [r7, #11]
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	4798      	blx	r3
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9f4:	7dbb      	ldrb	r3, [r7, #22]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b9fa:	7dbb      	ldrb	r3, [r7, #22]
 800b9fc:	e000      	b.n	800ba00 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d014      	beq.n	800ba6e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00e      	beq.n	800ba6e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	6852      	ldr	r2, [r2, #4]
 800ba5c:	b2d2      	uxtb	r2, r2
 800ba5e:	4611      	mov	r1, r2
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	4798      	blx	r3
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba6e:	2340      	movs	r3, #64	; 0x40
 800ba70:	2200      	movs	r2, #0
 800ba72:	2100      	movs	r1, #0
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f001 fb99 	bl	800d1ac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2240      	movs	r2, #64	; 0x40
 800ba86:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba8a:	2340      	movs	r3, #64	; 0x40
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2180      	movs	r1, #128	; 0x80
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f001 fb8b 	bl	800d1ac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2240      	movs	r2, #64	; 0x40
 800baa0:	621a      	str	r2, [r3, #32]

  return ret;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	78fa      	ldrb	r2, [r7, #3]
 800babc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b04      	cmp	r3, #4
 800bade:	d006      	beq.n	800baee <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2204      	movs	r2, #4
 800baf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b04      	cmp	r3, #4
 800bb16:	d106      	bne.n	800bb26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	2b03      	cmp	r3, #3
 800bb46:	d110      	bne.n	800bb6a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00b      	beq.n	800bb6a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d005      	beq.n	800bb6a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb8e:	b480      	push	{r7}
 800bb90:	b083      	sub	sp, #12
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	460b      	mov	r3, r1
 800bb98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	885b      	ldrh	r3, [r3, #2]
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d920      	bls.n	800bc12 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bbd8:	e013      	b.n	800bc02 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bbda:	f107 030a 	add.w	r3, r7, #10
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6978      	ldr	r0, [r7, #20]
 800bbe2:	f000 f81b 	bl	800bc1c <USBD_GetNextDesc>
 800bbe6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	785b      	ldrb	r3, [r3, #1]
 800bbec:	2b05      	cmp	r3, #5
 800bbee:	d108      	bne.n	800bc02 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	789b      	ldrb	r3, [r3, #2]
 800bbf8:	78fa      	ldrb	r2, [r7, #3]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d008      	beq.n	800bc10 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	885b      	ldrh	r3, [r3, #2]
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	897b      	ldrh	r3, [r7, #10]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d8e5      	bhi.n	800bbda <USBD_GetEpDesc+0x32>
 800bc0e:	e000      	b.n	800bc12 <USBD_GetEpDesc+0x6a>
          break;
 800bc10:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bc12:	693b      	ldr	r3, [r7, #16]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	881a      	ldrh	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	4413      	add	r3, r2
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	461a      	mov	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4413      	add	r3, r2
 800bc46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc48:	68fb      	ldr	r3, [r7, #12]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b087      	sub	sp, #28
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc74:	8a3b      	ldrh	r3, [r7, #16]
 800bc76:	021b      	lsls	r3, r3, #8
 800bc78:	b21a      	sxth	r2, r3
 800bc7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	b21b      	sxth	r3, r3
 800bc82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc84:	89fb      	ldrh	r3, [r7, #14]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	371c      	adds	r7, #28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
	...

0800bc94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcaa:	2b40      	cmp	r3, #64	; 0x40
 800bcac:	d005      	beq.n	800bcba <USBD_StdDevReq+0x26>
 800bcae:	2b40      	cmp	r3, #64	; 0x40
 800bcb0:	d857      	bhi.n	800bd62 <USBD_StdDevReq+0xce>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00f      	beq.n	800bcd6 <USBD_StdDevReq+0x42>
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	d153      	bne.n	800bd62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	32ae      	adds	r2, #174	; 0xae
 800bcc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	4798      	blx	r3
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd4:	e04a      	b.n	800bd6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	785b      	ldrb	r3, [r3, #1]
 800bcda:	2b09      	cmp	r3, #9
 800bcdc:	d83b      	bhi.n	800bd56 <USBD_StdDevReq+0xc2>
 800bcde:	a201      	add	r2, pc, #4	; (adr r2, 800bce4 <USBD_StdDevReq+0x50>)
 800bce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce4:	0800bd39 	.word	0x0800bd39
 800bce8:	0800bd4d 	.word	0x0800bd4d
 800bcec:	0800bd57 	.word	0x0800bd57
 800bcf0:	0800bd43 	.word	0x0800bd43
 800bcf4:	0800bd57 	.word	0x0800bd57
 800bcf8:	0800bd17 	.word	0x0800bd17
 800bcfc:	0800bd0d 	.word	0x0800bd0d
 800bd00:	0800bd57 	.word	0x0800bd57
 800bd04:	0800bd2f 	.word	0x0800bd2f
 800bd08:	0800bd21 	.word	0x0800bd21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fa3c 	bl	800c18c <USBD_GetDescriptor>
          break;
 800bd14:	e024      	b.n	800bd60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fbcb 	bl	800c4b4 <USBD_SetAddress>
          break;
 800bd1e:	e01f      	b.n	800bd60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fc0a 	bl	800c53c <USBD_SetConfig>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	73fb      	strb	r3, [r7, #15]
          break;
 800bd2c:	e018      	b.n	800bd60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fcad 	bl	800c690 <USBD_GetConfig>
          break;
 800bd36:	e013      	b.n	800bd60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fcde 	bl	800c6fc <USBD_GetStatus>
          break;
 800bd40:	e00e      	b.n	800bd60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fd0d 	bl	800c764 <USBD_SetFeature>
          break;
 800bd4a:	e009      	b.n	800bd60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fd31 	bl	800c7b6 <USBD_ClrFeature>
          break;
 800bd54:	e004      	b.n	800bd60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fd88 	bl	800c86e <USBD_CtlError>
          break;
 800bd5e:	bf00      	nop
      }
      break;
 800bd60:	e004      	b.n	800bd6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bd62:	6839      	ldr	r1, [r7, #0]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fd82 	bl	800c86e <USBD_CtlError>
      break;
 800bd6a:	bf00      	nop
  }

  return ret;
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop

0800bd78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd8e:	2b40      	cmp	r3, #64	; 0x40
 800bd90:	d005      	beq.n	800bd9e <USBD_StdItfReq+0x26>
 800bd92:	2b40      	cmp	r3, #64	; 0x40
 800bd94:	d852      	bhi.n	800be3c <USBD_StdItfReq+0xc4>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <USBD_StdItfReq+0x26>
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	d14e      	bne.n	800be3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	3b01      	subs	r3, #1
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d840      	bhi.n	800be2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	889b      	ldrh	r3, [r3, #4]
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d836      	bhi.n	800be24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	889b      	ldrh	r3, [r3, #4]
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff fed8 	bl	800bb74 <USBD_CoreFindIF>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	2bff      	cmp	r3, #255	; 0xff
 800bdcc:	d01d      	beq.n	800be0a <USBD_StdItfReq+0x92>
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d11a      	bne.n	800be0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bdd4:	7bba      	ldrb	r2, [r7, #14]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	32ae      	adds	r2, #174	; 0xae
 800bdda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00f      	beq.n	800be04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bde4:	7bba      	ldrb	r2, [r7, #14]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bdec:	7bba      	ldrb	r2, [r7, #14]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	32ae      	adds	r2, #174	; 0xae
 800bdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	4798      	blx	r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be02:	e004      	b.n	800be0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800be04:	2303      	movs	r3, #3
 800be06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be08:	e001      	b.n	800be0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800be0a:	2303      	movs	r3, #3
 800be0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	88db      	ldrh	r3, [r3, #6]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d110      	bne.n	800be38 <USBD_StdItfReq+0xc0>
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10d      	bne.n	800be38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fdf1 	bl	800ca04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be22:	e009      	b.n	800be38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fd21 	bl	800c86e <USBD_CtlError>
          break;
 800be2c:	e004      	b.n	800be38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fd1c 	bl	800c86e <USBD_CtlError>
          break;
 800be36:	e000      	b.n	800be3a <USBD_StdItfReq+0xc2>
          break;
 800be38:	bf00      	nop
      }
      break;
 800be3a:	e004      	b.n	800be46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fd15 	bl	800c86e <USBD_CtlError>
      break;
 800be44:	bf00      	nop
  }

  return ret;
 800be46:	7bfb      	ldrb	r3, [r7, #15]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	889b      	ldrh	r3, [r3, #4]
 800be62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be6c:	2b40      	cmp	r3, #64	; 0x40
 800be6e:	d007      	beq.n	800be80 <USBD_StdEPReq+0x30>
 800be70:	2b40      	cmp	r3, #64	; 0x40
 800be72:	f200 817f 	bhi.w	800c174 <USBD_StdEPReq+0x324>
 800be76:	2b00      	cmp	r3, #0
 800be78:	d02a      	beq.n	800bed0 <USBD_StdEPReq+0x80>
 800be7a:	2b20      	cmp	r3, #32
 800be7c:	f040 817a 	bne.w	800c174 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800be80:	7bbb      	ldrb	r3, [r7, #14]
 800be82:	4619      	mov	r1, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7ff fe82 	bl	800bb8e <USBD_CoreFindEP>
 800be8a:	4603      	mov	r3, r0
 800be8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be8e:	7b7b      	ldrb	r3, [r7, #13]
 800be90:	2bff      	cmp	r3, #255	; 0xff
 800be92:	f000 8174 	beq.w	800c17e <USBD_StdEPReq+0x32e>
 800be96:	7b7b      	ldrb	r3, [r7, #13]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f040 8170 	bne.w	800c17e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800be9e:	7b7a      	ldrb	r2, [r7, #13]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bea6:	7b7a      	ldrb	r2, [r7, #13]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	32ae      	adds	r2, #174	; 0xae
 800beac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f000 8163 	beq.w	800c17e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800beb8:	7b7a      	ldrb	r2, [r7, #13]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	32ae      	adds	r2, #174	; 0xae
 800bebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	4798      	blx	r3
 800beca:	4603      	mov	r3, r0
 800becc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bece:	e156      	b.n	800c17e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	785b      	ldrb	r3, [r3, #1]
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d008      	beq.n	800beea <USBD_StdEPReq+0x9a>
 800bed8:	2b03      	cmp	r3, #3
 800beda:	f300 8145 	bgt.w	800c168 <USBD_StdEPReq+0x318>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 809b 	beq.w	800c01a <USBD_StdEPReq+0x1ca>
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d03c      	beq.n	800bf62 <USBD_StdEPReq+0x112>
 800bee8:	e13e      	b.n	800c168 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d002      	beq.n	800befc <USBD_StdEPReq+0xac>
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	d016      	beq.n	800bf28 <USBD_StdEPReq+0xd8>
 800befa:	e02c      	b.n	800bf56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800befc:	7bbb      	ldrb	r3, [r7, #14]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00d      	beq.n	800bf1e <USBD_StdEPReq+0xce>
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	2b80      	cmp	r3, #128	; 0x80
 800bf06:	d00a      	beq.n	800bf1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf08:	7bbb      	ldrb	r3, [r7, #14]
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f001 f9f7 	bl	800d300 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf12:	2180      	movs	r1, #128	; 0x80
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f001 f9f3 	bl	800d300 <USBD_LL_StallEP>
 800bf1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf1c:	e020      	b.n	800bf60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fca4 	bl	800c86e <USBD_CtlError>
              break;
 800bf26:	e01b      	b.n	800bf60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	885b      	ldrh	r3, [r3, #2]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10e      	bne.n	800bf4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf30:	7bbb      	ldrb	r3, [r7, #14]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00b      	beq.n	800bf4e <USBD_StdEPReq+0xfe>
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
 800bf38:	2b80      	cmp	r3, #128	; 0x80
 800bf3a:	d008      	beq.n	800bf4e <USBD_StdEPReq+0xfe>
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	88db      	ldrh	r3, [r3, #6]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d104      	bne.n	800bf4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	4619      	mov	r1, r3
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 f9d9 	bl	800d300 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fd58 	bl	800ca04 <USBD_CtlSendStatus>

              break;
 800bf54:	e004      	b.n	800bf60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fc88 	bl	800c86e <USBD_CtlError>
              break;
 800bf5e:	bf00      	nop
          }
          break;
 800bf60:	e107      	b.n	800c172 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d002      	beq.n	800bf74 <USBD_StdEPReq+0x124>
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d016      	beq.n	800bfa0 <USBD_StdEPReq+0x150>
 800bf72:	e04b      	b.n	800c00c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00d      	beq.n	800bf96 <USBD_StdEPReq+0x146>
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
 800bf7c:	2b80      	cmp	r3, #128	; 0x80
 800bf7e:	d00a      	beq.n	800bf96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f001 f9bb 	bl	800d300 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf8a:	2180      	movs	r1, #128	; 0x80
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f001 f9b7 	bl	800d300 <USBD_LL_StallEP>
 800bf92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf94:	e040      	b.n	800c018 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 fc68 	bl	800c86e <USBD_CtlError>
              break;
 800bf9e:	e03b      	b.n	800c018 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	885b      	ldrh	r3, [r3, #2]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d136      	bne.n	800c016 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bfa8:	7bbb      	ldrb	r3, [r7, #14]
 800bfaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d004      	beq.n	800bfbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bfb2:	7bbb      	ldrb	r3, [r7, #14]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f001 f9d8 	bl	800d36c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fd21 	bl	800ca04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7ff fde1 	bl	800bb8e <USBD_CoreFindEP>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfd0:	7b7b      	ldrb	r3, [r7, #13]
 800bfd2:	2bff      	cmp	r3, #255	; 0xff
 800bfd4:	d01f      	beq.n	800c016 <USBD_StdEPReq+0x1c6>
 800bfd6:	7b7b      	ldrb	r3, [r7, #13]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d11c      	bne.n	800c016 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bfdc:	7b7a      	ldrb	r2, [r7, #13]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bfe4:	7b7a      	ldrb	r2, [r7, #13]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	32ae      	adds	r2, #174	; 0xae
 800bfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d010      	beq.n	800c016 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bff4:	7b7a      	ldrb	r2, [r7, #13]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	32ae      	adds	r2, #174	; 0xae
 800bffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	4798      	blx	r3
 800c006:	4603      	mov	r3, r0
 800c008:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c00a:	e004      	b.n	800c016 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fc2d 	bl	800c86e <USBD_CtlError>
              break;
 800c014:	e000      	b.n	800c018 <USBD_StdEPReq+0x1c8>
              break;
 800c016:	bf00      	nop
          }
          break;
 800c018:	e0ab      	b.n	800c172 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b02      	cmp	r3, #2
 800c024:	d002      	beq.n	800c02c <USBD_StdEPReq+0x1dc>
 800c026:	2b03      	cmp	r3, #3
 800c028:	d032      	beq.n	800c090 <USBD_StdEPReq+0x240>
 800c02a:	e097      	b.n	800c15c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d007      	beq.n	800c042 <USBD_StdEPReq+0x1f2>
 800c032:	7bbb      	ldrb	r3, [r7, #14]
 800c034:	2b80      	cmp	r3, #128	; 0x80
 800c036:	d004      	beq.n	800c042 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fc17 	bl	800c86e <USBD_CtlError>
                break;
 800c040:	e091      	b.n	800c166 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c046:	2b00      	cmp	r3, #0
 800c048:	da0b      	bge.n	800c062 <USBD_StdEPReq+0x212>
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	3310      	adds	r3, #16
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	4413      	add	r3, r2
 800c05e:	3304      	adds	r3, #4
 800c060:	e00b      	b.n	800c07a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c068:	4613      	mov	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4413      	add	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	4413      	add	r3, r2
 800c078:	3304      	adds	r3, #4
 800c07a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	2200      	movs	r2, #0
 800c080:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	2202      	movs	r2, #2
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fc61 	bl	800c950 <USBD_CtlSendData>
              break;
 800c08e:	e06a      	b.n	800c166 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c094:	2b00      	cmp	r3, #0
 800c096:	da11      	bge.n	800c0bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	f003 020f 	and.w	r2, r3, #15
 800c09e:	6879      	ldr	r1, [r7, #4]
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	440b      	add	r3, r1
 800c0aa:	3324      	adds	r3, #36	; 0x24
 800c0ac:	881b      	ldrh	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d117      	bne.n	800c0e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fbda 	bl	800c86e <USBD_CtlError>
                  break;
 800c0ba:	e054      	b.n	800c166 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	f003 020f 	and.w	r2, r3, #15
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	440b      	add	r3, r1
 800c0ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d104      	bne.n	800c0e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fbc7 	bl	800c86e <USBD_CtlError>
                  break;
 800c0e0:	e041      	b.n	800c166 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	da0b      	bge.n	800c102 <USBD_StdEPReq+0x2b2>
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	3310      	adds	r3, #16
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	3304      	adds	r3, #4
 800c100:	e00b      	b.n	800c11a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c102:	7bbb      	ldrb	r3, [r7, #14]
 800c104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c108:	4613      	mov	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	4413      	add	r3, r2
 800c118:	3304      	adds	r3, #4
 800c11a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c11c:	7bbb      	ldrb	r3, [r7, #14]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <USBD_StdEPReq+0x2d8>
 800c122:	7bbb      	ldrb	r3, [r7, #14]
 800c124:	2b80      	cmp	r3, #128	; 0x80
 800c126:	d103      	bne.n	800c130 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2200      	movs	r2, #0
 800c12c:	601a      	str	r2, [r3, #0]
 800c12e:	e00e      	b.n	800c14e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f001 f94f 	bl	800d3d8 <USBD_LL_IsStallEP>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d003      	beq.n	800c148 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2201      	movs	r2, #1
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	e002      	b.n	800c14e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	2202      	movs	r2, #2
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fbfb 	bl	800c950 <USBD_CtlSendData>
              break;
 800c15a:	e004      	b.n	800c166 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fb85 	bl	800c86e <USBD_CtlError>
              break;
 800c164:	bf00      	nop
          }
          break;
 800c166:	e004      	b.n	800c172 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fb7f 	bl	800c86e <USBD_CtlError>
          break;
 800c170:	bf00      	nop
      }
      break;
 800c172:	e005      	b.n	800c180 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fb79 	bl	800c86e <USBD_CtlError>
      break;
 800c17c:	e000      	b.n	800c180 <USBD_StdEPReq+0x330>
      break;
 800c17e:	bf00      	nop
  }

  return ret;
 800c180:	7bfb      	ldrb	r3, [r7, #15]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	885b      	ldrh	r3, [r3, #2]
 800c1a6:	0a1b      	lsrs	r3, r3, #8
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	2b0e      	cmp	r3, #14
 800c1ae:	f200 8152 	bhi.w	800c456 <USBD_GetDescriptor+0x2ca>
 800c1b2:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <USBD_GetDescriptor+0x2c>)
 800c1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b8:	0800c229 	.word	0x0800c229
 800c1bc:	0800c241 	.word	0x0800c241
 800c1c0:	0800c281 	.word	0x0800c281
 800c1c4:	0800c457 	.word	0x0800c457
 800c1c8:	0800c457 	.word	0x0800c457
 800c1cc:	0800c3f7 	.word	0x0800c3f7
 800c1d0:	0800c423 	.word	0x0800c423
 800c1d4:	0800c457 	.word	0x0800c457
 800c1d8:	0800c457 	.word	0x0800c457
 800c1dc:	0800c457 	.word	0x0800c457
 800c1e0:	0800c457 	.word	0x0800c457
 800c1e4:	0800c457 	.word	0x0800c457
 800c1e8:	0800c457 	.word	0x0800c457
 800c1ec:	0800c457 	.word	0x0800c457
 800c1f0:	0800c1f5 	.word	0x0800c1f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00b      	beq.n	800c218 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c206:	69db      	ldr	r3, [r3, #28]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	7c12      	ldrb	r2, [r2, #16]
 800c20c:	f107 0108 	add.w	r1, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c216:	e126      	b.n	800c466 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fb27 	bl	800c86e <USBD_CtlError>
        err++;
 800c220:	7afb      	ldrb	r3, [r7, #11]
 800c222:	3301      	adds	r3, #1
 800c224:	72fb      	strb	r3, [r7, #11]
      break;
 800c226:	e11e      	b.n	800c466 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	7c12      	ldrb	r2, [r2, #16]
 800c234:	f107 0108 	add.w	r1, r7, #8
 800c238:	4610      	mov	r0, r2
 800c23a:	4798      	blx	r3
 800c23c:	60f8      	str	r0, [r7, #12]
      break;
 800c23e:	e112      	b.n	800c466 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	7c1b      	ldrb	r3, [r3, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10d      	bne.n	800c264 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c250:	f107 0208 	add.w	r2, r7, #8
 800c254:	4610      	mov	r0, r2
 800c256:	4798      	blx	r3
 800c258:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	3301      	adds	r3, #1
 800c25e:	2202      	movs	r2, #2
 800c260:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c262:	e100      	b.n	800c466 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26c:	f107 0208 	add.w	r2, r7, #8
 800c270:	4610      	mov	r0, r2
 800c272:	4798      	blx	r3
 800c274:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3301      	adds	r3, #1
 800c27a:	2202      	movs	r2, #2
 800c27c:	701a      	strb	r2, [r3, #0]
      break;
 800c27e:	e0f2      	b.n	800c466 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	885b      	ldrh	r3, [r3, #2]
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b05      	cmp	r3, #5
 800c288:	f200 80ac 	bhi.w	800c3e4 <USBD_GetDescriptor+0x258>
 800c28c:	a201      	add	r2, pc, #4	; (adr r2, 800c294 <USBD_GetDescriptor+0x108>)
 800c28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c292:	bf00      	nop
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2e1 	.word	0x0800c2e1
 800c29c:	0800c315 	.word	0x0800c315
 800c2a0:	0800c349 	.word	0x0800c349
 800c2a4:	0800c37d 	.word	0x0800c37d
 800c2a8:	0800c3b1 	.word	0x0800c3b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	7c12      	ldrb	r2, [r2, #16]
 800c2c4:	f107 0108 	add.w	r1, r7, #8
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	4798      	blx	r3
 800c2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ce:	e091      	b.n	800c3f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 facb 	bl	800c86e <USBD_CtlError>
            err++;
 800c2d8:	7afb      	ldrb	r3, [r7, #11]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c2de:	e089      	b.n	800c3f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	7c12      	ldrb	r2, [r2, #16]
 800c2f8:	f107 0108 	add.w	r1, r7, #8
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	4798      	blx	r3
 800c300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c302:	e077      	b.n	800c3f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fab1 	bl	800c86e <USBD_CtlError>
            err++;
 800c30c:	7afb      	ldrb	r3, [r7, #11]
 800c30e:	3301      	adds	r3, #1
 800c310:	72fb      	strb	r3, [r7, #11]
          break;
 800c312:	e06f      	b.n	800c3f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00b      	beq.n	800c338 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7c12      	ldrb	r2, [r2, #16]
 800c32c:	f107 0108 	add.w	r1, r7, #8
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c336:	e05d      	b.n	800c3f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fa97 	bl	800c86e <USBD_CtlError>
            err++;
 800c340:	7afb      	ldrb	r3, [r7, #11]
 800c342:	3301      	adds	r3, #1
 800c344:	72fb      	strb	r3, [r7, #11]
          break;
 800c346:	e055      	b.n	800c3f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	7c12      	ldrb	r2, [r2, #16]
 800c360:	f107 0108 	add.w	r1, r7, #8
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c36a:	e043      	b.n	800c3f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fa7d 	bl	800c86e <USBD_CtlError>
            err++;
 800c374:	7afb      	ldrb	r3, [r7, #11]
 800c376:	3301      	adds	r3, #1
 800c378:	72fb      	strb	r3, [r7, #11]
          break;
 800c37a:	e03b      	b.n	800c3f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c382:	695b      	ldr	r3, [r3, #20]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	7c12      	ldrb	r2, [r2, #16]
 800c394:	f107 0108 	add.w	r1, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c39e:	e029      	b.n	800c3f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fa63 	bl	800c86e <USBD_CtlError>
            err++;
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ae:	e021      	b.n	800c3f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d2:	e00f      	b.n	800c3f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa49 	bl	800c86e <USBD_CtlError>
            err++;
 800c3dc:	7afb      	ldrb	r3, [r7, #11]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3e2:	e007      	b.n	800c3f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fa41 	bl	800c86e <USBD_CtlError>
          err++;
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c3f2:	bf00      	nop
      }
      break;
 800c3f4:	e037      	b.n	800c466 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	7c1b      	ldrb	r3, [r3, #16]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d109      	bne.n	800c412 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c406:	f107 0208 	add.w	r2, r7, #8
 800c40a:	4610      	mov	r0, r2
 800c40c:	4798      	blx	r3
 800c40e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c410:	e029      	b.n	800c466 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fa2a 	bl	800c86e <USBD_CtlError>
        err++;
 800c41a:	7afb      	ldrb	r3, [r7, #11]
 800c41c:	3301      	adds	r3, #1
 800c41e:	72fb      	strb	r3, [r7, #11]
      break;
 800c420:	e021      	b.n	800c466 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	7c1b      	ldrb	r3, [r3, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10d      	bne.n	800c446 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c432:	f107 0208 	add.w	r2, r7, #8
 800c436:	4610      	mov	r0, r2
 800c438:	4798      	blx	r3
 800c43a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3301      	adds	r3, #1
 800c440:	2207      	movs	r2, #7
 800c442:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c444:	e00f      	b.n	800c466 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 fa10 	bl	800c86e <USBD_CtlError>
        err++;
 800c44e:	7afb      	ldrb	r3, [r7, #11]
 800c450:	3301      	adds	r3, #1
 800c452:	72fb      	strb	r3, [r7, #11]
      break;
 800c454:	e007      	b.n	800c466 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fa08 	bl	800c86e <USBD_CtlError>
      err++;
 800c45e:	7afb      	ldrb	r3, [r7, #11]
 800c460:	3301      	adds	r3, #1
 800c462:	72fb      	strb	r3, [r7, #11]
      break;
 800c464:	bf00      	nop
  }

  if (err != 0U)
 800c466:	7afb      	ldrb	r3, [r7, #11]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d11e      	bne.n	800c4aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	88db      	ldrh	r3, [r3, #6]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d016      	beq.n	800c4a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c474:	893b      	ldrh	r3, [r7, #8]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00e      	beq.n	800c498 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	88da      	ldrh	r2, [r3, #6]
 800c47e:	893b      	ldrh	r3, [r7, #8]
 800c480:	4293      	cmp	r3, r2
 800c482:	bf28      	it	cs
 800c484:	4613      	movcs	r3, r2
 800c486:	b29b      	uxth	r3, r3
 800c488:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c48a:	893b      	ldrh	r3, [r7, #8]
 800c48c:	461a      	mov	r2, r3
 800c48e:	68f9      	ldr	r1, [r7, #12]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fa5d 	bl	800c950 <USBD_CtlSendData>
 800c496:	e009      	b.n	800c4ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f9e7 	bl	800c86e <USBD_CtlError>
 800c4a0:	e004      	b.n	800c4ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 faae 	bl	800ca04 <USBD_CtlSendStatus>
 800c4a8:	e000      	b.n	800c4ac <USBD_GetDescriptor+0x320>
    return;
 800c4aa:	bf00      	nop
  }
}
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop

0800c4b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	889b      	ldrh	r3, [r3, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d131      	bne.n	800c52a <USBD_SetAddress+0x76>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	88db      	ldrh	r3, [r3, #6]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d12d      	bne.n	800c52a <USBD_SetAddress+0x76>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	885b      	ldrh	r3, [r3, #2]
 800c4d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c4d4:	d829      	bhi.n	800c52a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	885b      	ldrh	r3, [r3, #2]
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	d104      	bne.n	800c4f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f9bc 	bl	800c86e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f6:	e01d      	b.n	800c534 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	7bfa      	ldrb	r2, [r7, #15]
 800c4fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 ff95 	bl	800d434 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa7a 	bl	800ca04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c510:	7bfb      	ldrb	r3, [r7, #15]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d004      	beq.n	800c520 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2202      	movs	r2, #2
 800c51a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c51e:	e009      	b.n	800c534 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c528:	e004      	b.n	800c534 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f99e 	bl	800c86e <USBD_CtlError>
  }
}
 800c532:	bf00      	nop
 800c534:	bf00      	nop
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	885b      	ldrh	r3, [r3, #2]
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	4b4e      	ldr	r3, [pc, #312]	; (800c68c <USBD_SetConfig+0x150>)
 800c552:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c554:	4b4d      	ldr	r3, [pc, #308]	; (800c68c <USBD_SetConfig+0x150>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d905      	bls.n	800c568 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f985 	bl	800c86e <USBD_CtlError>
    return USBD_FAIL;
 800c564:	2303      	movs	r3, #3
 800c566:	e08c      	b.n	800c682 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b02      	cmp	r3, #2
 800c572:	d002      	beq.n	800c57a <USBD_SetConfig+0x3e>
 800c574:	2b03      	cmp	r3, #3
 800c576:	d029      	beq.n	800c5cc <USBD_SetConfig+0x90>
 800c578:	e075      	b.n	800c666 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c57a:	4b44      	ldr	r3, [pc, #272]	; (800c68c <USBD_SetConfig+0x150>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d020      	beq.n	800c5c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c582:	4b42      	ldr	r3, [pc, #264]	; (800c68c <USBD_SetConfig+0x150>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c58c:	4b3f      	ldr	r3, [pc, #252]	; (800c68c <USBD_SetConfig+0x150>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff f848 	bl	800b628 <USBD_SetClassConfig>
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d008      	beq.n	800c5b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c5a2:	6839      	ldr	r1, [r7, #0]
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 f962 	bl	800c86e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2202      	movs	r2, #2
 800c5ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5b2:	e065      	b.n	800c680 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fa25 	bl	800ca04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2203      	movs	r2, #3
 800c5be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5c2:	e05d      	b.n	800c680 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa1d 	bl	800ca04 <USBD_CtlSendStatus>
      break;
 800c5ca:	e059      	b.n	800c680 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5cc:	4b2f      	ldr	r3, [pc, #188]	; (800c68c <USBD_SetConfig+0x150>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d112      	bne.n	800c5fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c5dc:	4b2b      	ldr	r3, [pc, #172]	; (800c68c <USBD_SetConfig+0x150>)
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5e6:	4b29      	ldr	r3, [pc, #164]	; (800c68c <USBD_SetConfig+0x150>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff f837 	bl	800b660 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa06 	bl	800ca04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5f8:	e042      	b.n	800c680 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c5fa:	4b24      	ldr	r3, [pc, #144]	; (800c68c <USBD_SetConfig+0x150>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	461a      	mov	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	429a      	cmp	r2, r3
 800c606:	d02a      	beq.n	800c65e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff f825 	bl	800b660 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c616:	4b1d      	ldr	r3, [pc, #116]	; (800c68c <USBD_SetConfig+0x150>)
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	461a      	mov	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c620:	4b1a      	ldr	r3, [pc, #104]	; (800c68c <USBD_SetConfig+0x150>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	4619      	mov	r1, r3
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7fe fffe 	bl	800b628 <USBD_SetClassConfig>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00f      	beq.n	800c656 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f918 	bl	800c86e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	b2db      	uxtb	r3, r3
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff f80a 	bl	800b660 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c654:	e014      	b.n	800c680 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f9d4 	bl	800ca04 <USBD_CtlSendStatus>
      break;
 800c65c:	e010      	b.n	800c680 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f9d0 	bl	800ca04 <USBD_CtlSendStatus>
      break;
 800c664:	e00c      	b.n	800c680 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f900 	bl	800c86e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c66e:	4b07      	ldr	r3, [pc, #28]	; (800c68c <USBD_SetConfig+0x150>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	4619      	mov	r1, r3
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7fe fff3 	bl	800b660 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c67a:	2303      	movs	r3, #3
 800c67c:	73fb      	strb	r3, [r7, #15]
      break;
 800c67e:	bf00      	nop
  }

  return ret;
 800c680:	7bfb      	ldrb	r3, [r7, #15]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	200003ec 	.word	0x200003ec

0800c690 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	88db      	ldrh	r3, [r3, #6]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d004      	beq.n	800c6ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 f8e2 	bl	800c86e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6aa:	e023      	b.n	800c6f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	dc02      	bgt.n	800c6be <USBD_GetConfig+0x2e>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	dc03      	bgt.n	800c6c4 <USBD_GetConfig+0x34>
 800c6bc:	e015      	b.n	800c6ea <USBD_GetConfig+0x5a>
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	d00b      	beq.n	800c6da <USBD_GetConfig+0x4a>
 800c6c2:	e012      	b.n	800c6ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f93c 	bl	800c950 <USBD_CtlSendData>
        break;
 800c6d8:	e00c      	b.n	800c6f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	2201      	movs	r2, #1
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f934 	bl	800c950 <USBD_CtlSendData>
        break;
 800c6e8:	e004      	b.n	800c6f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f8be 	bl	800c86e <USBD_CtlError>
        break;
 800c6f2:	bf00      	nop
}
 800c6f4:	bf00      	nop
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	3b01      	subs	r3, #1
 800c710:	2b02      	cmp	r3, #2
 800c712:	d81e      	bhi.n	800c752 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	88db      	ldrh	r3, [r3, #6]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d004      	beq.n	800c726 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f8a5 	bl	800c86e <USBD_CtlError>
        break;
 800c724:	e01a      	b.n	800c75c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c732:	2b00      	cmp	r3, #0
 800c734:	d005      	beq.n	800c742 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f043 0202 	orr.w	r2, r3, #2
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	330c      	adds	r3, #12
 800c746:	2202      	movs	r2, #2
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f900 	bl	800c950 <USBD_CtlSendData>
      break;
 800c750:	e004      	b.n	800c75c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f88a 	bl	800c86e <USBD_CtlError>
      break;
 800c75a:	bf00      	nop
  }
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	885b      	ldrh	r3, [r3, #2]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d107      	bne.n	800c786 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f940 	bl	800ca04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c784:	e013      	b.n	800c7ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	885b      	ldrh	r3, [r3, #2]
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d10b      	bne.n	800c7a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	889b      	ldrh	r3, [r3, #4]
 800c792:	0a1b      	lsrs	r3, r3, #8
 800c794:	b29b      	uxth	r3, r3
 800c796:	b2da      	uxtb	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f930 	bl	800ca04 <USBD_CtlSendStatus>
}
 800c7a4:	e003      	b.n	800c7ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f860 	bl	800c86e <USBD_CtlError>
}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d80b      	bhi.n	800c7e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	885b      	ldrh	r3, [r3, #2]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d10c      	bne.n	800c7f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f910 	bl	800ca04 <USBD_CtlSendStatus>
      }
      break;
 800c7e4:	e004      	b.n	800c7f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f840 	bl	800c86e <USBD_CtlError>
      break;
 800c7ee:	e000      	b.n	800c7f2 <USBD_ClrFeature+0x3c>
      break;
 800c7f0:	bf00      	nop
  }
}
 800c7f2:	bf00      	nop
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3301      	adds	r3, #1
 800c814:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	781a      	ldrb	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3301      	adds	r3, #1
 800c822:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f7ff fa16 	bl	800bc56 <SWAPBYTE>
 800c82a:	4603      	mov	r3, r0
 800c82c:	461a      	mov	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3301      	adds	r3, #1
 800c836:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3301      	adds	r3, #1
 800c83c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	f7ff fa09 	bl	800bc56 <SWAPBYTE>
 800c844:	4603      	mov	r3, r0
 800c846:	461a      	mov	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3301      	adds	r3, #1
 800c850:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3301      	adds	r3, #1
 800c856:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f7ff f9fc 	bl	800bc56 <SWAPBYTE>
 800c85e:	4603      	mov	r3, r0
 800c860:	461a      	mov	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	80da      	strh	r2, [r3, #6]
}
 800c866:	bf00      	nop
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c878:	2180      	movs	r1, #128	; 0x80
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fd40 	bl	800d300 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c880:	2100      	movs	r1, #0
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fd3c 	bl	800d300 <USBD_LL_StallEP>
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c89c:	2300      	movs	r3, #0
 800c89e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d036      	beq.n	800c914 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c8aa:	6938      	ldr	r0, [r7, #16]
 800c8ac:	f000 f836 	bl	800c91c <USBD_GetLen>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	7812      	ldrb	r2, [r2, #0]
 800c8c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	2203      	movs	r2, #3
 800c8d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8e0:	e013      	b.n	800c90a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	693a      	ldr	r2, [r7, #16]
 800c8ea:	7812      	ldrb	r2, [r2, #0]
 800c8ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	613b      	str	r3, [r7, #16]
    idx++;
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	4413      	add	r3, r2
 800c900:	2200      	movs	r2, #0
 800c902:	701a      	strb	r2, [r3, #0]
    idx++;
 800c904:	7dfb      	ldrb	r3, [r7, #23]
 800c906:	3301      	adds	r3, #1
 800c908:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1e7      	bne.n	800c8e2 <USBD_GetString+0x52>
 800c912:	e000      	b.n	800c916 <USBD_GetString+0x86>
    return;
 800c914:	bf00      	nop
  }
}
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c924:	2300      	movs	r3, #0
 800c926:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c92c:	e005      	b.n	800c93a <USBD_GetLen+0x1e>
  {
    len++;
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	3301      	adds	r3, #1
 800c932:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	3301      	adds	r3, #1
 800c938:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1f5      	bne.n	800c92e <USBD_GetLen+0x12>
  }

  return len;
 800c942:	7bfb      	ldrb	r3, [r7, #15]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2202      	movs	r2, #2
 800c960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	2100      	movs	r1, #0
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f000 fd92 	bl	800d4a0 <USBD_LL_Transmit>

  return USBD_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	2100      	movs	r1, #0
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f000 fd81 	bl	800d4a0 <USBD_LL_Transmit>

  return USBD_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2203      	movs	r2, #3
 800c9b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f000 fd9c 	bl	800d510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	60f8      	str	r0, [r7, #12]
 800c9ea:	60b9      	str	r1, [r7, #8]
 800c9ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f000 fd8b 	bl	800d510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2204      	movs	r2, #4
 800ca10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca14:	2300      	movs	r3, #0
 800ca16:	2200      	movs	r2, #0
 800ca18:	2100      	movs	r1, #0
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 fd40 	bl	800d4a0 <USBD_LL_Transmit>

  return USBD_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b082      	sub	sp, #8
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2205      	movs	r2, #5
 800ca36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	2100      	movs	r1, #0
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fd65 	bl	800d510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca54:	2200      	movs	r2, #0
 800ca56:	4912      	ldr	r1, [pc, #72]	; (800caa0 <MX_USB_DEVICE_Init+0x50>)
 800ca58:	4812      	ldr	r0, [pc, #72]	; (800caa4 <MX_USB_DEVICE_Init+0x54>)
 800ca5a:	f7fe fd68 	bl	800b52e <USBD_Init>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca64:	f7f4 f832 	bl	8000acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800ca68:	490f      	ldr	r1, [pc, #60]	; (800caa8 <MX_USB_DEVICE_Init+0x58>)
 800ca6a:	480e      	ldr	r0, [pc, #56]	; (800caa4 <MX_USB_DEVICE_Init+0x54>)
 800ca6c:	f7fe fd8f 	bl	800b58e <USBD_RegisterClass>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca76:	f7f4 f829 	bl	8000acc <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800ca7a:	490c      	ldr	r1, [pc, #48]	; (800caac <MX_USB_DEVICE_Init+0x5c>)
 800ca7c:	4809      	ldr	r0, [pc, #36]	; (800caa4 <MX_USB_DEVICE_Init+0x54>)
 800ca7e:	f7fc fca5 	bl	80093cc <USBD_CUSTOM_HID_RegisterInterface>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca88:	f7f4 f820 	bl	8000acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca8c:	4805      	ldr	r0, [pc, #20]	; (800caa4 <MX_USB_DEVICE_Init+0x54>)
 800ca8e:	f7fe fdb4 	bl	800b5fa <USBD_Start>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca98:	f7f4 f818 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca9c:	bf00      	nop
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	20000190 	.word	0x20000190
 800caa4:	200003f0 	.word	0x200003f0
 800caa8:	20000010 	.word	0x20000010
 800caac:	20000180 	.word	0x20000180

0800cab0 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cab4:	2200      	movs	r2, #0
 800cab6:	4912      	ldr	r1, [pc, #72]	; (800cb00 <MX_USB_DEVICE_Init_MSC+0x50>)
 800cab8:	4812      	ldr	r0, [pc, #72]	; (800cb04 <MX_USB_DEVICE_Init_MSC+0x54>)
 800caba:	f7fe fd38 	bl	800b52e <USBD_Init>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d001      	beq.n	800cac8 <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800cac4:	f7f4 f802 	bl	8000acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800cac8:	490f      	ldr	r1, [pc, #60]	; (800cb08 <MX_USB_DEVICE_Init_MSC+0x58>)
 800caca:	480e      	ldr	r0, [pc, #56]	; (800cb04 <MX_USB_DEVICE_Init_MSC+0x54>)
 800cacc:	f7fe fd5f 	bl	800b58e <USBD_RegisterClass>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800cad6:	f7f3 fff9 	bl	8000acc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800cada:	490c      	ldr	r1, [pc, #48]	; (800cb0c <MX_USB_DEVICE_Init_MSC+0x5c>)
 800cadc:	4809      	ldr	r0, [pc, #36]	; (800cb04 <MX_USB_DEVICE_Init_MSC+0x54>)
 800cade:	f7fc ff27 	bl	8009930 <USBD_MSC_RegisterStorage>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800cae8:	f7f3 fff0 	bl	8000acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800caec:	4805      	ldr	r0, [pc, #20]	; (800cb04 <MX_USB_DEVICE_Init_MSC+0x54>)
 800caee:	f7fe fd84 	bl	800b5fa <USBD_Start>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800caf8:	f7f3 ffe8 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cafc:	bf00      	nop
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	20000190 	.word	0x20000190
 800cb04:	200006cc 	.word	0x200006cc
 800cb08:	2000008c 	.word	0x2000008c
 800cb0c:	200001f0 	.word	0x200001f0

0800cb10 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cb20:	b480      	push	{r7}
 800cb22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cb24:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	460a      	mov	r2, r1
 800cb3a:	71fb      	strb	r3, [r7, #7]
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800cb40:	4803      	ldr	r0, [pc, #12]	; (800cb50 <CUSTOM_HID_OutEvent_FS+0x20>)
 800cb42:	f7fc fbd1 	bl	80092e8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800cb46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	200003f0 	.word	0x200003f0

0800cb54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	6039      	str	r1, [r7, #0]
 800cb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2212      	movs	r2, #18
 800cb64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb66:	4b03      	ldr	r3, [pc, #12]	; (800cb74 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	200001b0 	.word	0x200001b0

0800cb78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2204      	movs	r2, #4
 800cb88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb8a:	4b03      	ldr	r3, [pc, #12]	; (800cb98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr
 800cb98:	200001d0 	.word	0x200001d0

0800cb9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d105      	bne.n	800cbba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	4907      	ldr	r1, [pc, #28]	; (800cbd0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbb2:	4808      	ldr	r0, [pc, #32]	; (800cbd4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbb4:	f7ff fe6c 	bl	800c890 <USBD_GetString>
 800cbb8:	e004      	b.n	800cbc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	4904      	ldr	r1, [pc, #16]	; (800cbd0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbbe:	4805      	ldr	r0, [pc, #20]	; (800cbd4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbc0:	f7ff fe66 	bl	800c890 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbc4:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200009a8 	.word	0x200009a8
 800cbd4:	0800e5f4 	.word	0x0800e5f4

0800cbd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	6039      	str	r1, [r7, #0]
 800cbe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	4904      	ldr	r1, [pc, #16]	; (800cbf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cbe8:	4804      	ldr	r0, [pc, #16]	; (800cbfc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cbea:	f7ff fe51 	bl	800c890 <USBD_GetString>
  return USBD_StrDesc;
 800cbee:	4b02      	ldr	r3, [pc, #8]	; (800cbf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	200009a8 	.word	0x200009a8
 800cbfc:	0800e608 	.word	0x0800e608

0800cc00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	6039      	str	r1, [r7, #0]
 800cc0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	221a      	movs	r2, #26
 800cc10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc12:	f000 f855 	bl	800ccc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc16:	4b02      	ldr	r3, [pc, #8]	; (800cc20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	200001d4 	.word	0x200001d4

0800cc24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	6039      	str	r1, [r7, #0]
 800cc2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d105      	bne.n	800cc42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	4907      	ldr	r1, [pc, #28]	; (800cc58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc3a:	4808      	ldr	r0, [pc, #32]	; (800cc5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc3c:	f7ff fe28 	bl	800c890 <USBD_GetString>
 800cc40:	e004      	b.n	800cc4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	4904      	ldr	r1, [pc, #16]	; (800cc58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc46:	4805      	ldr	r0, [pc, #20]	; (800cc5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc48:	f7ff fe22 	bl	800c890 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc4c:	4b02      	ldr	r3, [pc, #8]	; (800cc58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	200009a8 	.word	0x200009a8
 800cc5c:	0800e60c 	.word	0x0800e60c

0800cc60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	6039      	str	r1, [r7, #0]
 800cc6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc6c:	79fb      	ldrb	r3, [r7, #7]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	4907      	ldr	r1, [pc, #28]	; (800cc94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc76:	4808      	ldr	r0, [pc, #32]	; (800cc98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc78:	f7ff fe0a 	bl	800c890 <USBD_GetString>
 800cc7c:	e004      	b.n	800cc88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc7e:	683a      	ldr	r2, [r7, #0]
 800cc80:	4904      	ldr	r1, [pc, #16]	; (800cc94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc82:	4805      	ldr	r0, [pc, #20]	; (800cc98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc84:	f7ff fe04 	bl	800c890 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc88:	4b02      	ldr	r3, [pc, #8]	; (800cc94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	200009a8 	.word	0x200009a8
 800cc98:	0800e618 	.word	0x0800e618

0800cc9c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	4603      	mov	r3, r0
 800cca4:	6039      	str	r1, [r7, #0]
 800cca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	220c      	movs	r2, #12
 800ccac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ccae:	4b03      	ldr	r3, [pc, #12]	; (800ccbc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	200001c4 	.word	0x200001c4

0800ccc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccc6:	4b0f      	ldr	r3, [pc, #60]	; (800cd04 <Get_SerialNum+0x44>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cccc:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <Get_SerialNum+0x48>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccd2:	4b0e      	ldr	r3, [pc, #56]	; (800cd0c <Get_SerialNum+0x4c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4413      	add	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cce6:	2208      	movs	r2, #8
 800cce8:	4909      	ldr	r1, [pc, #36]	; (800cd10 <Get_SerialNum+0x50>)
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f000 f814 	bl	800cd18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ccf0:	2204      	movs	r2, #4
 800ccf2:	4908      	ldr	r1, [pc, #32]	; (800cd14 <Get_SerialNum+0x54>)
 800ccf4:	68b8      	ldr	r0, [r7, #8]
 800ccf6:	f000 f80f 	bl	800cd18 <IntToUnicode>
  }
}
 800ccfa:	bf00      	nop
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	1fff7590 	.word	0x1fff7590
 800cd08:	1fff7594 	.word	0x1fff7594
 800cd0c:	1fff7598 	.word	0x1fff7598
 800cd10:	200001d6 	.word	0x200001d6
 800cd14:	200001e6 	.word	0x200001e6

0800cd18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	75fb      	strb	r3, [r7, #23]
 800cd2e:	e027      	b.n	800cd80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	0f1b      	lsrs	r3, r3, #28
 800cd34:	2b09      	cmp	r3, #9
 800cd36:	d80b      	bhi.n	800cd50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	0f1b      	lsrs	r3, r3, #28
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	4619      	mov	r1, r3
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	440b      	add	r3, r1
 800cd48:	3230      	adds	r2, #48	; 0x30
 800cd4a:	b2d2      	uxtb	r2, r2
 800cd4c:	701a      	strb	r2, [r3, #0]
 800cd4e:	e00a      	b.n	800cd66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	0f1b      	lsrs	r3, r3, #28
 800cd54:	b2da      	uxtb	r2, r3
 800cd56:	7dfb      	ldrb	r3, [r7, #23]
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	440b      	add	r3, r1
 800cd60:	3237      	adds	r2, #55	; 0x37
 800cd62:	b2d2      	uxtb	r2, r2
 800cd64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	3301      	adds	r3, #1
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	4413      	add	r3, r2
 800cd76:	2200      	movs	r2, #0
 800cd78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	75fb      	strb	r3, [r7, #23]
 800cd80:	7dfa      	ldrb	r2, [r7, #23]
 800cd82:	79fb      	ldrb	r3, [r7, #7]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d3d3      	bcc.n	800cd30 <IntToUnicode+0x18>
  }
}
 800cd88:	bf00      	nop
 800cd8a:	bf00      	nop
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	W25QXX_Init();
 800cda0:	f7f4 f9ac 	bl	80010fc <W25QXX_Init>
  return (USBD_OK);
 800cda4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	60b9      	str	r1, [r7, #8]
 800cdb8:	607a      	str	r2, [r7, #4]
 800cdba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdc2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cdca:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800cdcc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
	...

0800cddc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	4603      	mov	r3, r0
 800cde4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	u16 flash_ID;
	flash_ID =W25QXX_ReadID();
 800cde6:	f7f4 fa2d 	bl	8001244 <W25QXX_ReadID>
 800cdea:	4603      	mov	r3, r0
 800cdec:	81fb      	strh	r3, [r7, #14]
	printf("flash_ID:%d \r\n",flash_ID);//非必须，如需要调试，包含stdio.h头文件，启用串口
 800cdee:	89fb      	ldrh	r3, [r7, #14]
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4804      	ldr	r0, [pc, #16]	; (800ce04 <STORAGE_IsReady_FS+0x28>)
 800cdf4:	f000 fcfc 	bl	800d7f0 <iprintf>
  return (USBD_OK);
 800cdf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	0800e628 	.word	0x0800e628

0800ce08 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800ce12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60b9      	str	r1, [r7, #8]
 800ce28:	607a      	str	r2, [r7, #4]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73fb      	strb	r3, [r7, #15]
 800ce30:	4613      	mov	r3, r2
 800ce32:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	blk_addr += SPI_FLASH_START_SECTOR;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce3a:	607b      	str	r3, [r7, #4]
	SPI_FLASH_BufferRead(buf, blk_addr * SPI_FLASH_SECTOR_SIZE, blk_len * SPI_FLASH_SECTOR_SIZE);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	0319      	lsls	r1, r3, #12
 800ce40:	89bb      	ldrh	r3, [r7, #12]
 800ce42:	031b      	lsls	r3, r3, #12
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	461a      	mov	r2, r3
 800ce48:	68b8      	ldr	r0, [r7, #8]
 800ce4a:	f7f4 fa31 	bl	80012b0 <SPI_FLASH_BufferRead>
//	memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * STORAGE_BLK_SIZ), blk_len * STORAGE_BLK_SIZ);
  return (USBD_OK);
 800ce4e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b086      	sub	sp, #24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60b9      	str	r1, [r7, #8]
 800ce60:	607a      	str	r2, [r7, #4]
 800ce62:	461a      	mov	r2, r3
 800ce64:	4603      	mov	r3, r0
 800ce66:	73fb      	strb	r3, [r7, #15]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	uint32_t write_addr;
	blk_addr +=SPI_FLASH_START_SECTOR;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce72:	607b      	str	r3, [r7, #4]
	write_addr = blk_addr * SPI_FLASH_SECTOR_SIZE;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	031b      	lsls	r3, r3, #12
 800ce78:	617b      	str	r3, [r7, #20]
	SPI_FLASH_SectorErase(write_addr);
 800ce7a:	6978      	ldr	r0, [r7, #20]
 800ce7c:	f7f4 fa76 	bl	800136c <SPI_FLASH_SectorErase>
	SPI_FLASH_BufferWrite((uint8_t*)buf, write_addr, blk_len * SPI_FLASH_SECTOR_SIZE);
 800ce80:	89bb      	ldrh	r3, [r7, #12]
 800ce82:	031b      	lsls	r3, r3, #12
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	461a      	mov	r2, r3
 800ce88:	6979      	ldr	r1, [r7, #20]
 800ce8a:	68b8      	ldr	r0, [r7, #8]
 800ce8c:	f7f4 fae0 	bl	8001450 <SPI_FLASH_BufferWrite>
//	UNUSED(buf);
//	UNUSED(blk_addr);
//	UNUSED(blk_len);
//
//	memcpy((uint8_t*)(FLASH_START_ADDR + blk_addr * STORAGE_BLK_SIZ), buf,  blk_len * STORAGE_BLK_SIZ);
  return (USBD_OK);
 800ce90:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3718      	adds	r7, #24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800ce9e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
	...

0800ceac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b098      	sub	sp, #96	; 0x60
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ceb4:	f107 030c 	add.w	r3, r7, #12
 800ceb8:	2254      	movs	r2, #84	; 0x54
 800ceba:	2100      	movs	r1, #0
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 fcec 	bl	800d89a <memset>
  if(pcdHandle->Instance==USB)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a1d      	ldr	r2, [pc, #116]	; (800cf3c <HAL_PCD_MspInit+0x90>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d132      	bne.n	800cf32 <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ced0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ced2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ced6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ced8:	2301      	movs	r3, #1
 800ceda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800cedc:	2301      	movs	r3, #1
 800cede:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800cee0:	2318      	movs	r3, #24
 800cee2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800cee4:	2307      	movs	r3, #7
 800cee6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800cee8:	2302      	movs	r3, #2
 800ceea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ceec:	2302      	movs	r3, #2
 800ceee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800cef0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cef4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cef6:	f107 030c 	add.w	r3, r7, #12
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7f7 fafe 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800cf06:	f7f3 fde1 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cf0a:	4b0d      	ldr	r3, [pc, #52]	; (800cf40 <HAL_PCD_MspInit+0x94>)
 800cf0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf0e:	4a0c      	ldr	r2, [pc, #48]	; (800cf40 <HAL_PCD_MspInit+0x94>)
 800cf10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf14:	6593      	str	r3, [r2, #88]	; 0x58
 800cf16:	4b0a      	ldr	r3, [pc, #40]	; (800cf40 <HAL_PCD_MspInit+0x94>)
 800cf18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf1e:	60bb      	str	r3, [r7, #8]
 800cf20:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800cf22:	2200      	movs	r2, #0
 800cf24:	2100      	movs	r1, #0
 800cf26:	2043      	movs	r0, #67	; 0x43
 800cf28:	f7f4 fcaf 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800cf2c:	2043      	movs	r0, #67	; 0x43
 800cf2e:	f7f4 fcc8 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cf32:	bf00      	nop
 800cf34:	3760      	adds	r7, #96	; 0x60
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	40006800 	.word	0x40006800
 800cf40:	40021000 	.word	0x40021000

0800cf44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	f7fe fb9a 	bl	800b694 <USBD_LL_SetupStage>
}
 800cf60:	bf00      	nop
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cf7a:	78fa      	ldrb	r2, [r7, #3]
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	00db      	lsls	r3, r3, #3
 800cf86:	440b      	add	r3, r1
 800cf88:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	78fb      	ldrb	r3, [r7, #3]
 800cf90:	4619      	mov	r1, r3
 800cf92:	f7fe fbd4 	bl	800b73e <USBD_LL_DataOutStage>
}
 800cf96:	bf00      	nop
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b082      	sub	sp, #8
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cfb0:	78fa      	ldrb	r2, [r7, #3]
 800cfb2:	6879      	ldr	r1, [r7, #4]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	440b      	add	r3, r1
 800cfbe:	333c      	adds	r3, #60	; 0x3c
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	78fb      	ldrb	r3, [r7, #3]
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	f7fe fc6d 	bl	800b8a4 <USBD_LL_DataInStage>
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fe fda7 	bl	800bb34 <USBD_LL_SOF>
}
 800cfe6:	bf00      	nop
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cff6:	2301      	movs	r3, #1
 800cff8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d001      	beq.n	800d006 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d002:	f7f3 fd63 	bl	8000acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d00c:	7bfa      	ldrb	r2, [r7, #15]
 800d00e:	4611      	mov	r1, r2
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe fd4b 	bl	800baac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fe fcf3 	bl	800ba08 <USBD_LL_Reset>
}
 800d022:	bf00      	nop
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fd46 	bl	800bacc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d005      	beq.n	800d054 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d048:	4b04      	ldr	r3, [pc, #16]	; (800d05c <HAL_PCD_SuspendCallback+0x30>)
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	4a03      	ldr	r2, [pc, #12]	; (800d05c <HAL_PCD_SuspendCallback+0x30>)
 800d04e:	f043 0306 	orr.w	r3, r3, #6
 800d052:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d054:	bf00      	nop
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	e000ed00 	.word	0xe000ed00

0800d060 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d007      	beq.n	800d080 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d070:	4b08      	ldr	r3, [pc, #32]	; (800d094 <HAL_PCD_ResumeCallback+0x34>)
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	4a07      	ldr	r2, [pc, #28]	; (800d094 <HAL_PCD_ResumeCallback+0x34>)
 800d076:	f023 0306 	bic.w	r3, r3, #6
 800d07a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d07c:	f000 faf0 	bl	800d660 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe fd3c 	bl	800bb04 <USBD_LL_Resume>
}
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	e000ed00 	.word	0xe000ed00

0800d098 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d0a0:	f7f6 fbe4 	bl	800386c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d0a4:	4a26      	ldr	r2, [pc, #152]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a24      	ldr	r2, [pc, #144]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800d0b4:	4b22      	ldr	r3, [pc, #136]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0b6:	4a23      	ldr	r2, [pc, #140]	; (800d144 <USBD_LL_Init+0xac>)
 800d0b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d0ba:	4b21      	ldr	r3, [pc, #132]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0bc:	2208      	movs	r2, #8
 800d0be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d0c0:	4b1f      	ldr	r3, [pc, #124]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0c6:	4b1e      	ldr	r3, [pc, #120]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d0cc:	4b1c      	ldr	r3, [pc, #112]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d0d2:	4b1b      	ldr	r3, [pc, #108]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d0d8:	4b19      	ldr	r3, [pc, #100]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d0de:	4b18      	ldr	r3, [pc, #96]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d0e4:	4816      	ldr	r0, [pc, #88]	; (800d140 <USBD_LL_Init+0xa8>)
 800d0e6:	f7f4 fd89 	bl	8001bfc <HAL_PCD_Init>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d0f0:	f7f3 fcec 	bl	8000acc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d0fa:	2318      	movs	r3, #24
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2100      	movs	r1, #0
 800d100:	f7f6 fad3 	bl	80036aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d10a:	2358      	movs	r3, #88	; 0x58
 800d10c:	2200      	movs	r2, #0
 800d10e:	2180      	movs	r1, #128	; 0x80
 800d110:	f7f6 facb 	bl	80036aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d11a:	2398      	movs	r3, #152	; 0x98
 800d11c:	2200      	movs	r2, #0
 800d11e:	2181      	movs	r1, #129	; 0x81
 800d120:	f7f6 fac3 	bl	80036aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d12a:	23d8      	movs	r3, #216	; 0xd8
 800d12c:	2200      	movs	r2, #0
 800d12e:	2101      	movs	r1, #1
 800d130:	f7f6 fabb 	bl	80036aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20000ba8 	.word	0x20000ba8
 800d144:	40006800 	.word	0x40006800

0800d148 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d15e:	4618      	mov	r0, r3
 800d160:	f7f4 fe52 	bl	8001e08 <HAL_PCD_Start>
 800d164:	4603      	mov	r3, r0
 800d166:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d168:	7bbb      	ldrb	r3, [r7, #14]
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d816      	bhi.n	800d19c <USBD_LL_Start+0x54>
 800d16e:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <USBD_LL_Start+0x2c>)
 800d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d174:	0800d185 	.word	0x0800d185
 800d178:	0800d18b 	.word	0x0800d18b
 800d17c:	0800d191 	.word	0x0800d191
 800d180:	0800d197 	.word	0x0800d197
    case HAL_OK :
      usb_status = USBD_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	73fb      	strb	r3, [r7, #15]
    break;
 800d188:	e00b      	b.n	800d1a2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d18a:	2303      	movs	r3, #3
 800d18c:	73fb      	strb	r3, [r7, #15]
    break;
 800d18e:	e008      	b.n	800d1a2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d190:	2301      	movs	r3, #1
 800d192:	73fb      	strb	r3, [r7, #15]
    break;
 800d194:	e005      	b.n	800d1a2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d196:	2303      	movs	r3, #3
 800d198:	73fb      	strb	r3, [r7, #15]
    break;
 800d19a:	e002      	b.n	800d1a2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d19c:	2303      	movs	r3, #3
 800d19e:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a0:	bf00      	nop
  }
  return usb_status;
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	4608      	mov	r0, r1
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	70fb      	strb	r3, [r7, #3]
 800d1be:	460b      	mov	r3, r1
 800d1c0:	70bb      	strb	r3, [r7, #2]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d1d4:	78bb      	ldrb	r3, [r7, #2]
 800d1d6:	883a      	ldrh	r2, [r7, #0]
 800d1d8:	78f9      	ldrb	r1, [r7, #3]
 800d1da:	f7f4 ff83 	bl	80020e4 <HAL_PCD_EP_Open>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
 800d1e4:	2b03      	cmp	r3, #3
 800d1e6:	d817      	bhi.n	800d218 <USBD_LL_OpenEP+0x6c>
 800d1e8:	a201      	add	r2, pc, #4	; (adr r2, 800d1f0 <USBD_LL_OpenEP+0x44>)
 800d1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ee:	bf00      	nop
 800d1f0:	0800d201 	.word	0x0800d201
 800d1f4:	0800d207 	.word	0x0800d207
 800d1f8:	0800d20d 	.word	0x0800d20d
 800d1fc:	0800d213 	.word	0x0800d213
    case HAL_OK :
      usb_status = USBD_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	73fb      	strb	r3, [r7, #15]
    break;
 800d204:	e00b      	b.n	800d21e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d206:	2303      	movs	r3, #3
 800d208:	73fb      	strb	r3, [r7, #15]
    break;
 800d20a:	e008      	b.n	800d21e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d20c:	2301      	movs	r3, #1
 800d20e:	73fb      	strb	r3, [r7, #15]
    break;
 800d210:	e005      	b.n	800d21e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d212:	2303      	movs	r3, #3
 800d214:	73fb      	strb	r3, [r7, #15]
    break;
 800d216:	e002      	b.n	800d21e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d218:	2303      	movs	r3, #3
 800d21a:	73fb      	strb	r3, [r7, #15]
    break;
 800d21c:	bf00      	nop
  }
  return usb_status;
 800d21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d234:	2300      	movs	r3, #0
 800d236:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d238:	2300      	movs	r3, #0
 800d23a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d242:	78fa      	ldrb	r2, [r7, #3]
 800d244:	4611      	mov	r1, r2
 800d246:	4618      	mov	r0, r3
 800d248:	f7f4 ffa9 	bl	800219e <HAL_PCD_EP_Close>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	2b03      	cmp	r3, #3
 800d254:	d816      	bhi.n	800d284 <USBD_LL_CloseEP+0x5c>
 800d256:	a201      	add	r2, pc, #4	; (adr r2, 800d25c <USBD_LL_CloseEP+0x34>)
 800d258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25c:	0800d26d 	.word	0x0800d26d
 800d260:	0800d273 	.word	0x0800d273
 800d264:	0800d279 	.word	0x0800d279
 800d268:	0800d27f 	.word	0x0800d27f
    case HAL_OK :
      usb_status = USBD_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	73fb      	strb	r3, [r7, #15]
    break;
 800d270:	e00b      	b.n	800d28a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d272:	2303      	movs	r3, #3
 800d274:	73fb      	strb	r3, [r7, #15]
    break;
 800d276:	e008      	b.n	800d28a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d278:	2301      	movs	r3, #1
 800d27a:	73fb      	strb	r3, [r7, #15]
    break;
 800d27c:	e005      	b.n	800d28a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d27e:	2303      	movs	r3, #3
 800d280:	73fb      	strb	r3, [r7, #15]
    break;
 800d282:	e002      	b.n	800d28a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d284:	2303      	movs	r3, #3
 800d286:	73fb      	strb	r3, [r7, #15]
    break;
 800d288:	bf00      	nop
  }
  return usb_status;
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	460b      	mov	r3, r1
 800d29e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2ae:	78fa      	ldrb	r2, [r7, #3]
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7f5 f908 	bl	80024c8 <HAL_PCD_EP_Flush>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d2bc:	7bbb      	ldrb	r3, [r7, #14]
 800d2be:	2b03      	cmp	r3, #3
 800d2c0:	d816      	bhi.n	800d2f0 <USBD_LL_FlushEP+0x5c>
 800d2c2:	a201      	add	r2, pc, #4	; (adr r2, 800d2c8 <USBD_LL_FlushEP+0x34>)
 800d2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c8:	0800d2d9 	.word	0x0800d2d9
 800d2cc:	0800d2df 	.word	0x0800d2df
 800d2d0:	0800d2e5 	.word	0x0800d2e5
 800d2d4:	0800d2eb 	.word	0x0800d2eb
    case HAL_OK :
      usb_status = USBD_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73fb      	strb	r3, [r7, #15]
    break;
 800d2dc:	e00b      	b.n	800d2f6 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d2e2:	e008      	b.n	800d2f6 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2e8:	e005      	b.n	800d2f6 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ee:	e002      	b.n	800d2f6 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2f4:	bf00      	nop
  }
  return usb_status;
 800d2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d31a:	78fa      	ldrb	r2, [r7, #3]
 800d31c:	4611      	mov	r1, r2
 800d31e:	4618      	mov	r0, r3
 800d320:	f7f5 f81e 	bl	8002360 <HAL_PCD_EP_SetStall>
 800d324:	4603      	mov	r3, r0
 800d326:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d328:	7bbb      	ldrb	r3, [r7, #14]
 800d32a:	2b03      	cmp	r3, #3
 800d32c:	d816      	bhi.n	800d35c <USBD_LL_StallEP+0x5c>
 800d32e:	a201      	add	r2, pc, #4	; (adr r2, 800d334 <USBD_LL_StallEP+0x34>)
 800d330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d334:	0800d345 	.word	0x0800d345
 800d338:	0800d34b 	.word	0x0800d34b
 800d33c:	0800d351 	.word	0x0800d351
 800d340:	0800d357 	.word	0x0800d357
    case HAL_OK :
      usb_status = USBD_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	73fb      	strb	r3, [r7, #15]
    break;
 800d348:	e00b      	b.n	800d362 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d34a:	2303      	movs	r3, #3
 800d34c:	73fb      	strb	r3, [r7, #15]
    break;
 800d34e:	e008      	b.n	800d362 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d350:	2301      	movs	r3, #1
 800d352:	73fb      	strb	r3, [r7, #15]
    break;
 800d354:	e005      	b.n	800d362 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d356:	2303      	movs	r3, #3
 800d358:	73fb      	strb	r3, [r7, #15]
    break;
 800d35a:	e002      	b.n	800d362 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d35c:	2303      	movs	r3, #3
 800d35e:	73fb      	strb	r3, [r7, #15]
    break;
 800d360:	bf00      	nop
  }
  return usb_status;
 800d362:	7bfb      	ldrb	r3, [r7, #15]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d386:	78fa      	ldrb	r2, [r7, #3]
 800d388:	4611      	mov	r1, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f5 f848 	bl	8002420 <HAL_PCD_EP_ClrStall>
 800d390:	4603      	mov	r3, r0
 800d392:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d394:	7bbb      	ldrb	r3, [r7, #14]
 800d396:	2b03      	cmp	r3, #3
 800d398:	d816      	bhi.n	800d3c8 <USBD_LL_ClearStallEP+0x5c>
 800d39a:	a201      	add	r2, pc, #4	; (adr r2, 800d3a0 <USBD_LL_ClearStallEP+0x34>)
 800d39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a0:	0800d3b1 	.word	0x0800d3b1
 800d3a4:	0800d3b7 	.word	0x0800d3b7
 800d3a8:	0800d3bd 	.word	0x0800d3bd
 800d3ac:	0800d3c3 	.word	0x0800d3c3
    case HAL_OK :
      usb_status = USBD_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b4:	e00b      	b.n	800d3ce <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3b6:	2303      	movs	r3, #3
 800d3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ba:	e008      	b.n	800d3ce <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c0:	e005      	b.n	800d3ce <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c6:	e002      	b.n	800d3ce <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d3cc:	bf00      	nop
  }
  return usb_status;
 800d3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	da0c      	bge.n	800d40e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3f4:	78fb      	ldrb	r3, [r7, #3]
 800d3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3fa:	68f9      	ldr	r1, [r7, #12]
 800d3fc:	1c5a      	adds	r2, r3, #1
 800d3fe:	4613      	mov	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	00db      	lsls	r3, r3, #3
 800d406:	440b      	add	r3, r1
 800d408:	3302      	adds	r3, #2
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	e00b      	b.n	800d426 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d40e:	78fb      	ldrb	r3, [r7, #3]
 800d410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d414:	68f9      	ldr	r1, [r7, #12]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	440b      	add	r3, r1
 800d420:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d424:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d426:	4618      	mov	r0, r3
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
	...

0800d434 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d440:	2300      	movs	r3, #0
 800d442:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d44e:	78fa      	ldrb	r2, [r7, #3]
 800d450:	4611      	mov	r1, r2
 800d452:	4618      	mov	r0, r3
 800d454:	f7f4 fe21 	bl	800209a <HAL_PCD_SetAddress>
 800d458:	4603      	mov	r3, r0
 800d45a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
 800d45e:	2b03      	cmp	r3, #3
 800d460:	d816      	bhi.n	800d490 <USBD_LL_SetUSBAddress+0x5c>
 800d462:	a201      	add	r2, pc, #4	; (adr r2, 800d468 <USBD_LL_SetUSBAddress+0x34>)
 800d464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d468:	0800d479 	.word	0x0800d479
 800d46c:	0800d47f 	.word	0x0800d47f
 800d470:	0800d485 	.word	0x0800d485
 800d474:	0800d48b 	.word	0x0800d48b
    case HAL_OK :
      usb_status = USBD_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	73fb      	strb	r3, [r7, #15]
    break;
 800d47c:	e00b      	b.n	800d496 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d47e:	2303      	movs	r3, #3
 800d480:	73fb      	strb	r3, [r7, #15]
    break;
 800d482:	e008      	b.n	800d496 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d484:	2301      	movs	r3, #1
 800d486:	73fb      	strb	r3, [r7, #15]
    break;
 800d488:	e005      	b.n	800d496 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d48a:	2303      	movs	r3, #3
 800d48c:	73fb      	strb	r3, [r7, #15]
    break;
 800d48e:	e002      	b.n	800d496 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d490:	2303      	movs	r3, #3
 800d492:	73fb      	strb	r3, [r7, #15]
    break;
 800d494:	bf00      	nop
  }
  return usb_status;
 800d496:	7bfb      	ldrb	r3, [r7, #15]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	607a      	str	r2, [r7, #4]
 800d4aa:	603b      	str	r3, [r7, #0]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d4be:	7af9      	ldrb	r1, [r7, #11]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	f7f4 fefc 	bl	80022c0 <HAL_PCD_EP_Transmit>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d4cc:	7dbb      	ldrb	r3, [r7, #22]
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d816      	bhi.n	800d500 <USBD_LL_Transmit+0x60>
 800d4d2:	a201      	add	r2, pc, #4	; (adr r2, 800d4d8 <USBD_LL_Transmit+0x38>)
 800d4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d8:	0800d4e9 	.word	0x0800d4e9
 800d4dc:	0800d4ef 	.word	0x0800d4ef
 800d4e0:	0800d4f5 	.word	0x0800d4f5
 800d4e4:	0800d4fb 	.word	0x0800d4fb
    case HAL_OK :
      usb_status = USBD_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	75fb      	strb	r3, [r7, #23]
    break;
 800d4ec:	e00b      	b.n	800d506 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	75fb      	strb	r3, [r7, #23]
    break;
 800d4f2:	e008      	b.n	800d506 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	75fb      	strb	r3, [r7, #23]
    break;
 800d4f8:	e005      	b.n	800d506 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	75fb      	strb	r3, [r7, #23]
    break;
 800d4fe:	e002      	b.n	800d506 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d500:	2303      	movs	r3, #3
 800d502:	75fb      	strb	r3, [r7, #23]
    break;
 800d504:	bf00      	nop
  }
  return usb_status;
 800d506:	7dfb      	ldrb	r3, [r7, #23]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	607a      	str	r2, [r7, #4]
 800d51a:	603b      	str	r3, [r7, #0]
 800d51c:	460b      	mov	r3, r1
 800d51e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d520:	2300      	movs	r3, #0
 800d522:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d524:	2300      	movs	r3, #0
 800d526:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d52e:	7af9      	ldrb	r1, [r7, #11]
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	f7f4 fe7b 	bl	800222e <HAL_PCD_EP_Receive>
 800d538:	4603      	mov	r3, r0
 800d53a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d53c:	7dbb      	ldrb	r3, [r7, #22]
 800d53e:	2b03      	cmp	r3, #3
 800d540:	d816      	bhi.n	800d570 <USBD_LL_PrepareReceive+0x60>
 800d542:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <USBD_LL_PrepareReceive+0x38>)
 800d544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d548:	0800d559 	.word	0x0800d559
 800d54c:	0800d55f 	.word	0x0800d55f
 800d550:	0800d565 	.word	0x0800d565
 800d554:	0800d56b 	.word	0x0800d56b
    case HAL_OK :
      usb_status = USBD_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	75fb      	strb	r3, [r7, #23]
    break;
 800d55c:	e00b      	b.n	800d576 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d55e:	2303      	movs	r3, #3
 800d560:	75fb      	strb	r3, [r7, #23]
    break;
 800d562:	e008      	b.n	800d576 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d564:	2301      	movs	r3, #1
 800d566:	75fb      	strb	r3, [r7, #23]
    break;
 800d568:	e005      	b.n	800d576 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d56a:	2303      	movs	r3, #3
 800d56c:	75fb      	strb	r3, [r7, #23]
    break;
 800d56e:	e002      	b.n	800d576 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d570:	2303      	movs	r3, #3
 800d572:	75fb      	strb	r3, [r7, #23]
    break;
 800d574:	bf00      	nop
  }
  return usb_status;
 800d576:	7dfb      	ldrb	r3, [r7, #23]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	460b      	mov	r3, r1
 800d58a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d592:	78fa      	ldrb	r2, [r7, #3]
 800d594:	4611      	mov	r1, r2
 800d596:	4618      	mov	r0, r3
 800d598:	f7f4 fe7a 	bl	8002290 <HAL_PCD_EP_GetRxCount>
 800d59c:	4603      	mov	r3, r0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
	...

0800d5a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d5b4:	78fb      	ldrb	r3, [r7, #3]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d002      	beq.n	800d5c0 <HAL_PCDEx_LPM_Callback+0x18>
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d013      	beq.n	800d5e6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d5be:	e023      	b.n	800d608 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	699b      	ldr	r3, [r3, #24]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d007      	beq.n	800d5d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d5c8:	f000 f84a 	bl	800d660 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5cc:	4b10      	ldr	r3, [pc, #64]	; (800d610 <HAL_PCDEx_LPM_Callback+0x68>)
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	4a0f      	ldr	r2, [pc, #60]	; (800d610 <HAL_PCDEx_LPM_Callback+0x68>)
 800d5d2:	f023 0306 	bic.w	r3, r3, #6
 800d5d6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fe fa90 	bl	800bb04 <USBD_LL_Resume>
    break;
 800d5e4:	e010      	b.n	800d608 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe fa6d 	bl	800bacc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	699b      	ldr	r3, [r3, #24]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d005      	beq.n	800d606 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5fa:	4b05      	ldr	r3, [pc, #20]	; (800d610 <HAL_PCDEx_LPM_Callback+0x68>)
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	4a04      	ldr	r2, [pc, #16]	; (800d610 <HAL_PCDEx_LPM_Callback+0x68>)
 800d600:	f043 0306 	orr.w	r3, r3, #6
 800d604:	6113      	str	r3, [r2, #16]
    break;
 800d606:	bf00      	nop
}
 800d608:	bf00      	nop
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	e000ed00 	.word	0xe000ed00

0800d614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d61c:	4b03      	ldr	r3, [pc, #12]	; (800d62c <USBD_static_malloc+0x18>)
}
 800d61e:	4618      	mov	r0, r3
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	20000ea0 	.word	0x20000ea0

0800d630 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d638:	4b03      	ldr	r3, [pc, #12]	; (800d648 <USBD_static_malloc_MSC+0x18>)
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	20000ec8 	.word	0x20000ec8

0800d64c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]

}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d664:	f7f3 f83c 	bl	80006e0 <SystemClock_Config>
}
 800d668:	bf00      	nop
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <std>:
 800d66c:	2300      	movs	r3, #0
 800d66e:	b510      	push	{r4, lr}
 800d670:	4604      	mov	r4, r0
 800d672:	e9c0 3300 	strd	r3, r3, [r0]
 800d676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d67a:	6083      	str	r3, [r0, #8]
 800d67c:	8181      	strh	r1, [r0, #12]
 800d67e:	6643      	str	r3, [r0, #100]	; 0x64
 800d680:	81c2      	strh	r2, [r0, #14]
 800d682:	6183      	str	r3, [r0, #24]
 800d684:	4619      	mov	r1, r3
 800d686:	2208      	movs	r2, #8
 800d688:	305c      	adds	r0, #92	; 0x5c
 800d68a:	f000 f906 	bl	800d89a <memset>
 800d68e:	4b0d      	ldr	r3, [pc, #52]	; (800d6c4 <std+0x58>)
 800d690:	6263      	str	r3, [r4, #36]	; 0x24
 800d692:	4b0d      	ldr	r3, [pc, #52]	; (800d6c8 <std+0x5c>)
 800d694:	62a3      	str	r3, [r4, #40]	; 0x28
 800d696:	4b0d      	ldr	r3, [pc, #52]	; (800d6cc <std+0x60>)
 800d698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d69a:	4b0d      	ldr	r3, [pc, #52]	; (800d6d0 <std+0x64>)
 800d69c:	6323      	str	r3, [r4, #48]	; 0x30
 800d69e:	4b0d      	ldr	r3, [pc, #52]	; (800d6d4 <std+0x68>)
 800d6a0:	6224      	str	r4, [r4, #32]
 800d6a2:	429c      	cmp	r4, r3
 800d6a4:	d006      	beq.n	800d6b4 <std+0x48>
 800d6a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d6aa:	4294      	cmp	r4, r2
 800d6ac:	d002      	beq.n	800d6b4 <std+0x48>
 800d6ae:	33d0      	adds	r3, #208	; 0xd0
 800d6b0:	429c      	cmp	r4, r3
 800d6b2:	d105      	bne.n	800d6c0 <std+0x54>
 800d6b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6bc:	f000 b966 	b.w	800d98c <__retarget_lock_init_recursive>
 800d6c0:	bd10      	pop	{r4, pc}
 800d6c2:	bf00      	nop
 800d6c4:	0800d815 	.word	0x0800d815
 800d6c8:	0800d837 	.word	0x0800d837
 800d6cc:	0800d86f 	.word	0x0800d86f
 800d6d0:	0800d893 	.word	0x0800d893
 800d6d4:	20001f40 	.word	0x20001f40

0800d6d8 <stdio_exit_handler>:
 800d6d8:	4a02      	ldr	r2, [pc, #8]	; (800d6e4 <stdio_exit_handler+0xc>)
 800d6da:	4903      	ldr	r1, [pc, #12]	; (800d6e8 <stdio_exit_handler+0x10>)
 800d6dc:	4803      	ldr	r0, [pc, #12]	; (800d6ec <stdio_exit_handler+0x14>)
 800d6de:	f000 b869 	b.w	800d7b4 <_fwalk_sglue>
 800d6e2:	bf00      	nop
 800d6e4:	20000210 	.word	0x20000210
 800d6e8:	0800e255 	.word	0x0800e255
 800d6ec:	2000021c 	.word	0x2000021c

0800d6f0 <cleanup_stdio>:
 800d6f0:	6841      	ldr	r1, [r0, #4]
 800d6f2:	4b0c      	ldr	r3, [pc, #48]	; (800d724 <cleanup_stdio+0x34>)
 800d6f4:	4299      	cmp	r1, r3
 800d6f6:	b510      	push	{r4, lr}
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	d001      	beq.n	800d700 <cleanup_stdio+0x10>
 800d6fc:	f000 fdaa 	bl	800e254 <_fflush_r>
 800d700:	68a1      	ldr	r1, [r4, #8]
 800d702:	4b09      	ldr	r3, [pc, #36]	; (800d728 <cleanup_stdio+0x38>)
 800d704:	4299      	cmp	r1, r3
 800d706:	d002      	beq.n	800d70e <cleanup_stdio+0x1e>
 800d708:	4620      	mov	r0, r4
 800d70a:	f000 fda3 	bl	800e254 <_fflush_r>
 800d70e:	68e1      	ldr	r1, [r4, #12]
 800d710:	4b06      	ldr	r3, [pc, #24]	; (800d72c <cleanup_stdio+0x3c>)
 800d712:	4299      	cmp	r1, r3
 800d714:	d004      	beq.n	800d720 <cleanup_stdio+0x30>
 800d716:	4620      	mov	r0, r4
 800d718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d71c:	f000 bd9a 	b.w	800e254 <_fflush_r>
 800d720:	bd10      	pop	{r4, pc}
 800d722:	bf00      	nop
 800d724:	20001f40 	.word	0x20001f40
 800d728:	20001fa8 	.word	0x20001fa8
 800d72c:	20002010 	.word	0x20002010

0800d730 <global_stdio_init.part.0>:
 800d730:	b510      	push	{r4, lr}
 800d732:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <global_stdio_init.part.0+0x30>)
 800d734:	4c0b      	ldr	r4, [pc, #44]	; (800d764 <global_stdio_init.part.0+0x34>)
 800d736:	4a0c      	ldr	r2, [pc, #48]	; (800d768 <global_stdio_init.part.0+0x38>)
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	4620      	mov	r0, r4
 800d73c:	2200      	movs	r2, #0
 800d73e:	2104      	movs	r1, #4
 800d740:	f7ff ff94 	bl	800d66c <std>
 800d744:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d748:	2201      	movs	r2, #1
 800d74a:	2109      	movs	r1, #9
 800d74c:	f7ff ff8e 	bl	800d66c <std>
 800d750:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d754:	2202      	movs	r2, #2
 800d756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d75a:	2112      	movs	r1, #18
 800d75c:	f7ff bf86 	b.w	800d66c <std>
 800d760:	20002078 	.word	0x20002078
 800d764:	20001f40 	.word	0x20001f40
 800d768:	0800d6d9 	.word	0x0800d6d9

0800d76c <__sfp_lock_acquire>:
 800d76c:	4801      	ldr	r0, [pc, #4]	; (800d774 <__sfp_lock_acquire+0x8>)
 800d76e:	f000 b90e 	b.w	800d98e <__retarget_lock_acquire_recursive>
 800d772:	bf00      	nop
 800d774:	20002081 	.word	0x20002081

0800d778 <__sfp_lock_release>:
 800d778:	4801      	ldr	r0, [pc, #4]	; (800d780 <__sfp_lock_release+0x8>)
 800d77a:	f000 b909 	b.w	800d990 <__retarget_lock_release_recursive>
 800d77e:	bf00      	nop
 800d780:	20002081 	.word	0x20002081

0800d784 <__sinit>:
 800d784:	b510      	push	{r4, lr}
 800d786:	4604      	mov	r4, r0
 800d788:	f7ff fff0 	bl	800d76c <__sfp_lock_acquire>
 800d78c:	6a23      	ldr	r3, [r4, #32]
 800d78e:	b11b      	cbz	r3, 800d798 <__sinit+0x14>
 800d790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d794:	f7ff bff0 	b.w	800d778 <__sfp_lock_release>
 800d798:	4b04      	ldr	r3, [pc, #16]	; (800d7ac <__sinit+0x28>)
 800d79a:	6223      	str	r3, [r4, #32]
 800d79c:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <__sinit+0x2c>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1f5      	bne.n	800d790 <__sinit+0xc>
 800d7a4:	f7ff ffc4 	bl	800d730 <global_stdio_init.part.0>
 800d7a8:	e7f2      	b.n	800d790 <__sinit+0xc>
 800d7aa:	bf00      	nop
 800d7ac:	0800d6f1 	.word	0x0800d6f1
 800d7b0:	20002078 	.word	0x20002078

0800d7b4 <_fwalk_sglue>:
 800d7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7b8:	4607      	mov	r7, r0
 800d7ba:	4688      	mov	r8, r1
 800d7bc:	4614      	mov	r4, r2
 800d7be:	2600      	movs	r6, #0
 800d7c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7c4:	f1b9 0901 	subs.w	r9, r9, #1
 800d7c8:	d505      	bpl.n	800d7d6 <_fwalk_sglue+0x22>
 800d7ca:	6824      	ldr	r4, [r4, #0]
 800d7cc:	2c00      	cmp	r4, #0
 800d7ce:	d1f7      	bne.n	800d7c0 <_fwalk_sglue+0xc>
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7d6:	89ab      	ldrh	r3, [r5, #12]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d907      	bls.n	800d7ec <_fwalk_sglue+0x38>
 800d7dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	d003      	beq.n	800d7ec <_fwalk_sglue+0x38>
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	47c0      	blx	r8
 800d7ea:	4306      	orrs	r6, r0
 800d7ec:	3568      	adds	r5, #104	; 0x68
 800d7ee:	e7e9      	b.n	800d7c4 <_fwalk_sglue+0x10>

0800d7f0 <iprintf>:
 800d7f0:	b40f      	push	{r0, r1, r2, r3}
 800d7f2:	b507      	push	{r0, r1, r2, lr}
 800d7f4:	4906      	ldr	r1, [pc, #24]	; (800d810 <iprintf+0x20>)
 800d7f6:	ab04      	add	r3, sp, #16
 800d7f8:	6808      	ldr	r0, [r1, #0]
 800d7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7fe:	6881      	ldr	r1, [r0, #8]
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	f000 f9f7 	bl	800dbf4 <_vfiprintf_r>
 800d806:	b003      	add	sp, #12
 800d808:	f85d eb04 	ldr.w	lr, [sp], #4
 800d80c:	b004      	add	sp, #16
 800d80e:	4770      	bx	lr
 800d810:	20000268 	.word	0x20000268

0800d814 <__sread>:
 800d814:	b510      	push	{r4, lr}
 800d816:	460c      	mov	r4, r1
 800d818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d81c:	f000 f868 	bl	800d8f0 <_read_r>
 800d820:	2800      	cmp	r0, #0
 800d822:	bfab      	itete	ge
 800d824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d826:	89a3      	ldrhlt	r3, [r4, #12]
 800d828:	181b      	addge	r3, r3, r0
 800d82a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d82e:	bfac      	ite	ge
 800d830:	6563      	strge	r3, [r4, #84]	; 0x54
 800d832:	81a3      	strhlt	r3, [r4, #12]
 800d834:	bd10      	pop	{r4, pc}

0800d836 <__swrite>:
 800d836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d83a:	461f      	mov	r7, r3
 800d83c:	898b      	ldrh	r3, [r1, #12]
 800d83e:	05db      	lsls	r3, r3, #23
 800d840:	4605      	mov	r5, r0
 800d842:	460c      	mov	r4, r1
 800d844:	4616      	mov	r6, r2
 800d846:	d505      	bpl.n	800d854 <__swrite+0x1e>
 800d848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d84c:	2302      	movs	r3, #2
 800d84e:	2200      	movs	r2, #0
 800d850:	f000 f83c 	bl	800d8cc <_lseek_r>
 800d854:	89a3      	ldrh	r3, [r4, #12]
 800d856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d85a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d85e:	81a3      	strh	r3, [r4, #12]
 800d860:	4632      	mov	r2, r6
 800d862:	463b      	mov	r3, r7
 800d864:	4628      	mov	r0, r5
 800d866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d86a:	f000 b853 	b.w	800d914 <_write_r>

0800d86e <__sseek>:
 800d86e:	b510      	push	{r4, lr}
 800d870:	460c      	mov	r4, r1
 800d872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d876:	f000 f829 	bl	800d8cc <_lseek_r>
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	bf15      	itete	ne
 800d880:	6560      	strne	r0, [r4, #84]	; 0x54
 800d882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d88a:	81a3      	strheq	r3, [r4, #12]
 800d88c:	bf18      	it	ne
 800d88e:	81a3      	strhne	r3, [r4, #12]
 800d890:	bd10      	pop	{r4, pc}

0800d892 <__sclose>:
 800d892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d896:	f000 b809 	b.w	800d8ac <_close_r>

0800d89a <memset>:
 800d89a:	4402      	add	r2, r0
 800d89c:	4603      	mov	r3, r0
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d100      	bne.n	800d8a4 <memset+0xa>
 800d8a2:	4770      	bx	lr
 800d8a4:	f803 1b01 	strb.w	r1, [r3], #1
 800d8a8:	e7f9      	b.n	800d89e <memset+0x4>
	...

0800d8ac <_close_r>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	4d06      	ldr	r5, [pc, #24]	; (800d8c8 <_close_r+0x1c>)
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	4608      	mov	r0, r1
 800d8b6:	602b      	str	r3, [r5, #0]
 800d8b8:	f7f3 fa29 	bl	8000d0e <_close>
 800d8bc:	1c43      	adds	r3, r0, #1
 800d8be:	d102      	bne.n	800d8c6 <_close_r+0x1a>
 800d8c0:	682b      	ldr	r3, [r5, #0]
 800d8c2:	b103      	cbz	r3, 800d8c6 <_close_r+0x1a>
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	bd38      	pop	{r3, r4, r5, pc}
 800d8c8:	2000207c 	.word	0x2000207c

0800d8cc <_lseek_r>:
 800d8cc:	b538      	push	{r3, r4, r5, lr}
 800d8ce:	4d07      	ldr	r5, [pc, #28]	; (800d8ec <_lseek_r+0x20>)
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	4608      	mov	r0, r1
 800d8d4:	4611      	mov	r1, r2
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	602a      	str	r2, [r5, #0]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	f7f3 fa3e 	bl	8000d5c <_lseek>
 800d8e0:	1c43      	adds	r3, r0, #1
 800d8e2:	d102      	bne.n	800d8ea <_lseek_r+0x1e>
 800d8e4:	682b      	ldr	r3, [r5, #0]
 800d8e6:	b103      	cbz	r3, 800d8ea <_lseek_r+0x1e>
 800d8e8:	6023      	str	r3, [r4, #0]
 800d8ea:	bd38      	pop	{r3, r4, r5, pc}
 800d8ec:	2000207c 	.word	0x2000207c

0800d8f0 <_read_r>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	4d07      	ldr	r5, [pc, #28]	; (800d910 <_read_r+0x20>)
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	4608      	mov	r0, r1
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	602a      	str	r2, [r5, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	f7f3 f9cc 	bl	8000c9c <_read>
 800d904:	1c43      	adds	r3, r0, #1
 800d906:	d102      	bne.n	800d90e <_read_r+0x1e>
 800d908:	682b      	ldr	r3, [r5, #0]
 800d90a:	b103      	cbz	r3, 800d90e <_read_r+0x1e>
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
 800d910:	2000207c 	.word	0x2000207c

0800d914 <_write_r>:
 800d914:	b538      	push	{r3, r4, r5, lr}
 800d916:	4d07      	ldr	r5, [pc, #28]	; (800d934 <_write_r+0x20>)
 800d918:	4604      	mov	r4, r0
 800d91a:	4608      	mov	r0, r1
 800d91c:	4611      	mov	r1, r2
 800d91e:	2200      	movs	r2, #0
 800d920:	602a      	str	r2, [r5, #0]
 800d922:	461a      	mov	r2, r3
 800d924:	f7f3 f9d7 	bl	8000cd6 <_write>
 800d928:	1c43      	adds	r3, r0, #1
 800d92a:	d102      	bne.n	800d932 <_write_r+0x1e>
 800d92c:	682b      	ldr	r3, [r5, #0]
 800d92e:	b103      	cbz	r3, 800d932 <_write_r+0x1e>
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	bd38      	pop	{r3, r4, r5, pc}
 800d934:	2000207c 	.word	0x2000207c

0800d938 <__errno>:
 800d938:	4b01      	ldr	r3, [pc, #4]	; (800d940 <__errno+0x8>)
 800d93a:	6818      	ldr	r0, [r3, #0]
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	20000268 	.word	0x20000268

0800d944 <__libc_init_array>:
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	4d0d      	ldr	r5, [pc, #52]	; (800d97c <__libc_init_array+0x38>)
 800d948:	4c0d      	ldr	r4, [pc, #52]	; (800d980 <__libc_init_array+0x3c>)
 800d94a:	1b64      	subs	r4, r4, r5
 800d94c:	10a4      	asrs	r4, r4, #2
 800d94e:	2600      	movs	r6, #0
 800d950:	42a6      	cmp	r6, r4
 800d952:	d109      	bne.n	800d968 <__libc_init_array+0x24>
 800d954:	4d0b      	ldr	r5, [pc, #44]	; (800d984 <__libc_init_array+0x40>)
 800d956:	4c0c      	ldr	r4, [pc, #48]	; (800d988 <__libc_init_array+0x44>)
 800d958:	f000 fdce 	bl	800e4f8 <_init>
 800d95c:	1b64      	subs	r4, r4, r5
 800d95e:	10a4      	asrs	r4, r4, #2
 800d960:	2600      	movs	r6, #0
 800d962:	42a6      	cmp	r6, r4
 800d964:	d105      	bne.n	800d972 <__libc_init_array+0x2e>
 800d966:	bd70      	pop	{r4, r5, r6, pc}
 800d968:	f855 3b04 	ldr.w	r3, [r5], #4
 800d96c:	4798      	blx	r3
 800d96e:	3601      	adds	r6, #1
 800d970:	e7ee      	b.n	800d950 <__libc_init_array+0xc>
 800d972:	f855 3b04 	ldr.w	r3, [r5], #4
 800d976:	4798      	blx	r3
 800d978:	3601      	adds	r6, #1
 800d97a:	e7f2      	b.n	800d962 <__libc_init_array+0x1e>
 800d97c:	0800e6e0 	.word	0x0800e6e0
 800d980:	0800e6e0 	.word	0x0800e6e0
 800d984:	0800e6e0 	.word	0x0800e6e0
 800d988:	0800e6e4 	.word	0x0800e6e4

0800d98c <__retarget_lock_init_recursive>:
 800d98c:	4770      	bx	lr

0800d98e <__retarget_lock_acquire_recursive>:
 800d98e:	4770      	bx	lr

0800d990 <__retarget_lock_release_recursive>:
 800d990:	4770      	bx	lr

0800d992 <memcpy>:
 800d992:	440a      	add	r2, r1
 800d994:	4291      	cmp	r1, r2
 800d996:	f100 33ff 	add.w	r3, r0, #4294967295
 800d99a:	d100      	bne.n	800d99e <memcpy+0xc>
 800d99c:	4770      	bx	lr
 800d99e:	b510      	push	{r4, lr}
 800d9a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9a8:	4291      	cmp	r1, r2
 800d9aa:	d1f9      	bne.n	800d9a0 <memcpy+0xe>
 800d9ac:	bd10      	pop	{r4, pc}
	...

0800d9b0 <_free_r>:
 800d9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9b2:	2900      	cmp	r1, #0
 800d9b4:	d044      	beq.n	800da40 <_free_r+0x90>
 800d9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9ba:	9001      	str	r0, [sp, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f1a1 0404 	sub.w	r4, r1, #4
 800d9c2:	bfb8      	it	lt
 800d9c4:	18e4      	addlt	r4, r4, r3
 800d9c6:	f000 f8df 	bl	800db88 <__malloc_lock>
 800d9ca:	4a1e      	ldr	r2, [pc, #120]	; (800da44 <_free_r+0x94>)
 800d9cc:	9801      	ldr	r0, [sp, #4]
 800d9ce:	6813      	ldr	r3, [r2, #0]
 800d9d0:	b933      	cbnz	r3, 800d9e0 <_free_r+0x30>
 800d9d2:	6063      	str	r3, [r4, #4]
 800d9d4:	6014      	str	r4, [r2, #0]
 800d9d6:	b003      	add	sp, #12
 800d9d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9dc:	f000 b8da 	b.w	800db94 <__malloc_unlock>
 800d9e0:	42a3      	cmp	r3, r4
 800d9e2:	d908      	bls.n	800d9f6 <_free_r+0x46>
 800d9e4:	6825      	ldr	r5, [r4, #0]
 800d9e6:	1961      	adds	r1, r4, r5
 800d9e8:	428b      	cmp	r3, r1
 800d9ea:	bf01      	itttt	eq
 800d9ec:	6819      	ldreq	r1, [r3, #0]
 800d9ee:	685b      	ldreq	r3, [r3, #4]
 800d9f0:	1949      	addeq	r1, r1, r5
 800d9f2:	6021      	streq	r1, [r4, #0]
 800d9f4:	e7ed      	b.n	800d9d2 <_free_r+0x22>
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	b10b      	cbz	r3, 800da00 <_free_r+0x50>
 800d9fc:	42a3      	cmp	r3, r4
 800d9fe:	d9fa      	bls.n	800d9f6 <_free_r+0x46>
 800da00:	6811      	ldr	r1, [r2, #0]
 800da02:	1855      	adds	r5, r2, r1
 800da04:	42a5      	cmp	r5, r4
 800da06:	d10b      	bne.n	800da20 <_free_r+0x70>
 800da08:	6824      	ldr	r4, [r4, #0]
 800da0a:	4421      	add	r1, r4
 800da0c:	1854      	adds	r4, r2, r1
 800da0e:	42a3      	cmp	r3, r4
 800da10:	6011      	str	r1, [r2, #0]
 800da12:	d1e0      	bne.n	800d9d6 <_free_r+0x26>
 800da14:	681c      	ldr	r4, [r3, #0]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	6053      	str	r3, [r2, #4]
 800da1a:	440c      	add	r4, r1
 800da1c:	6014      	str	r4, [r2, #0]
 800da1e:	e7da      	b.n	800d9d6 <_free_r+0x26>
 800da20:	d902      	bls.n	800da28 <_free_r+0x78>
 800da22:	230c      	movs	r3, #12
 800da24:	6003      	str	r3, [r0, #0]
 800da26:	e7d6      	b.n	800d9d6 <_free_r+0x26>
 800da28:	6825      	ldr	r5, [r4, #0]
 800da2a:	1961      	adds	r1, r4, r5
 800da2c:	428b      	cmp	r3, r1
 800da2e:	bf04      	itt	eq
 800da30:	6819      	ldreq	r1, [r3, #0]
 800da32:	685b      	ldreq	r3, [r3, #4]
 800da34:	6063      	str	r3, [r4, #4]
 800da36:	bf04      	itt	eq
 800da38:	1949      	addeq	r1, r1, r5
 800da3a:	6021      	streq	r1, [r4, #0]
 800da3c:	6054      	str	r4, [r2, #4]
 800da3e:	e7ca      	b.n	800d9d6 <_free_r+0x26>
 800da40:	b003      	add	sp, #12
 800da42:	bd30      	pop	{r4, r5, pc}
 800da44:	20002084 	.word	0x20002084

0800da48 <sbrk_aligned>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	4e0e      	ldr	r6, [pc, #56]	; (800da84 <sbrk_aligned+0x3c>)
 800da4c:	460c      	mov	r4, r1
 800da4e:	6831      	ldr	r1, [r6, #0]
 800da50:	4605      	mov	r5, r0
 800da52:	b911      	cbnz	r1, 800da5a <sbrk_aligned+0x12>
 800da54:	f000 fcbc 	bl	800e3d0 <_sbrk_r>
 800da58:	6030      	str	r0, [r6, #0]
 800da5a:	4621      	mov	r1, r4
 800da5c:	4628      	mov	r0, r5
 800da5e:	f000 fcb7 	bl	800e3d0 <_sbrk_r>
 800da62:	1c43      	adds	r3, r0, #1
 800da64:	d00a      	beq.n	800da7c <sbrk_aligned+0x34>
 800da66:	1cc4      	adds	r4, r0, #3
 800da68:	f024 0403 	bic.w	r4, r4, #3
 800da6c:	42a0      	cmp	r0, r4
 800da6e:	d007      	beq.n	800da80 <sbrk_aligned+0x38>
 800da70:	1a21      	subs	r1, r4, r0
 800da72:	4628      	mov	r0, r5
 800da74:	f000 fcac 	bl	800e3d0 <_sbrk_r>
 800da78:	3001      	adds	r0, #1
 800da7a:	d101      	bne.n	800da80 <sbrk_aligned+0x38>
 800da7c:	f04f 34ff 	mov.w	r4, #4294967295
 800da80:	4620      	mov	r0, r4
 800da82:	bd70      	pop	{r4, r5, r6, pc}
 800da84:	20002088 	.word	0x20002088

0800da88 <_malloc_r>:
 800da88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da8c:	1ccd      	adds	r5, r1, #3
 800da8e:	f025 0503 	bic.w	r5, r5, #3
 800da92:	3508      	adds	r5, #8
 800da94:	2d0c      	cmp	r5, #12
 800da96:	bf38      	it	cc
 800da98:	250c      	movcc	r5, #12
 800da9a:	2d00      	cmp	r5, #0
 800da9c:	4607      	mov	r7, r0
 800da9e:	db01      	blt.n	800daa4 <_malloc_r+0x1c>
 800daa0:	42a9      	cmp	r1, r5
 800daa2:	d905      	bls.n	800dab0 <_malloc_r+0x28>
 800daa4:	230c      	movs	r3, #12
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	2600      	movs	r6, #0
 800daaa:	4630      	mov	r0, r6
 800daac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dab0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800db84 <_malloc_r+0xfc>
 800dab4:	f000 f868 	bl	800db88 <__malloc_lock>
 800dab8:	f8d8 3000 	ldr.w	r3, [r8]
 800dabc:	461c      	mov	r4, r3
 800dabe:	bb5c      	cbnz	r4, 800db18 <_malloc_r+0x90>
 800dac0:	4629      	mov	r1, r5
 800dac2:	4638      	mov	r0, r7
 800dac4:	f7ff ffc0 	bl	800da48 <sbrk_aligned>
 800dac8:	1c43      	adds	r3, r0, #1
 800daca:	4604      	mov	r4, r0
 800dacc:	d155      	bne.n	800db7a <_malloc_r+0xf2>
 800dace:	f8d8 4000 	ldr.w	r4, [r8]
 800dad2:	4626      	mov	r6, r4
 800dad4:	2e00      	cmp	r6, #0
 800dad6:	d145      	bne.n	800db64 <_malloc_r+0xdc>
 800dad8:	2c00      	cmp	r4, #0
 800dada:	d048      	beq.n	800db6e <_malloc_r+0xe6>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	4631      	mov	r1, r6
 800dae0:	4638      	mov	r0, r7
 800dae2:	eb04 0903 	add.w	r9, r4, r3
 800dae6:	f000 fc73 	bl	800e3d0 <_sbrk_r>
 800daea:	4581      	cmp	r9, r0
 800daec:	d13f      	bne.n	800db6e <_malloc_r+0xe6>
 800daee:	6821      	ldr	r1, [r4, #0]
 800daf0:	1a6d      	subs	r5, r5, r1
 800daf2:	4629      	mov	r1, r5
 800daf4:	4638      	mov	r0, r7
 800daf6:	f7ff ffa7 	bl	800da48 <sbrk_aligned>
 800dafa:	3001      	adds	r0, #1
 800dafc:	d037      	beq.n	800db6e <_malloc_r+0xe6>
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	442b      	add	r3, r5
 800db02:	6023      	str	r3, [r4, #0]
 800db04:	f8d8 3000 	ldr.w	r3, [r8]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d038      	beq.n	800db7e <_malloc_r+0xf6>
 800db0c:	685a      	ldr	r2, [r3, #4]
 800db0e:	42a2      	cmp	r2, r4
 800db10:	d12b      	bne.n	800db6a <_malloc_r+0xe2>
 800db12:	2200      	movs	r2, #0
 800db14:	605a      	str	r2, [r3, #4]
 800db16:	e00f      	b.n	800db38 <_malloc_r+0xb0>
 800db18:	6822      	ldr	r2, [r4, #0]
 800db1a:	1b52      	subs	r2, r2, r5
 800db1c:	d41f      	bmi.n	800db5e <_malloc_r+0xd6>
 800db1e:	2a0b      	cmp	r2, #11
 800db20:	d917      	bls.n	800db52 <_malloc_r+0xca>
 800db22:	1961      	adds	r1, r4, r5
 800db24:	42a3      	cmp	r3, r4
 800db26:	6025      	str	r5, [r4, #0]
 800db28:	bf18      	it	ne
 800db2a:	6059      	strne	r1, [r3, #4]
 800db2c:	6863      	ldr	r3, [r4, #4]
 800db2e:	bf08      	it	eq
 800db30:	f8c8 1000 	streq.w	r1, [r8]
 800db34:	5162      	str	r2, [r4, r5]
 800db36:	604b      	str	r3, [r1, #4]
 800db38:	4638      	mov	r0, r7
 800db3a:	f104 060b 	add.w	r6, r4, #11
 800db3e:	f000 f829 	bl	800db94 <__malloc_unlock>
 800db42:	f026 0607 	bic.w	r6, r6, #7
 800db46:	1d23      	adds	r3, r4, #4
 800db48:	1af2      	subs	r2, r6, r3
 800db4a:	d0ae      	beq.n	800daaa <_malloc_r+0x22>
 800db4c:	1b9b      	subs	r3, r3, r6
 800db4e:	50a3      	str	r3, [r4, r2]
 800db50:	e7ab      	b.n	800daaa <_malloc_r+0x22>
 800db52:	42a3      	cmp	r3, r4
 800db54:	6862      	ldr	r2, [r4, #4]
 800db56:	d1dd      	bne.n	800db14 <_malloc_r+0x8c>
 800db58:	f8c8 2000 	str.w	r2, [r8]
 800db5c:	e7ec      	b.n	800db38 <_malloc_r+0xb0>
 800db5e:	4623      	mov	r3, r4
 800db60:	6864      	ldr	r4, [r4, #4]
 800db62:	e7ac      	b.n	800dabe <_malloc_r+0x36>
 800db64:	4634      	mov	r4, r6
 800db66:	6876      	ldr	r6, [r6, #4]
 800db68:	e7b4      	b.n	800dad4 <_malloc_r+0x4c>
 800db6a:	4613      	mov	r3, r2
 800db6c:	e7cc      	b.n	800db08 <_malloc_r+0x80>
 800db6e:	230c      	movs	r3, #12
 800db70:	603b      	str	r3, [r7, #0]
 800db72:	4638      	mov	r0, r7
 800db74:	f000 f80e 	bl	800db94 <__malloc_unlock>
 800db78:	e797      	b.n	800daaa <_malloc_r+0x22>
 800db7a:	6025      	str	r5, [r4, #0]
 800db7c:	e7dc      	b.n	800db38 <_malloc_r+0xb0>
 800db7e:	605b      	str	r3, [r3, #4]
 800db80:	deff      	udf	#255	; 0xff
 800db82:	bf00      	nop
 800db84:	20002084 	.word	0x20002084

0800db88 <__malloc_lock>:
 800db88:	4801      	ldr	r0, [pc, #4]	; (800db90 <__malloc_lock+0x8>)
 800db8a:	f7ff bf00 	b.w	800d98e <__retarget_lock_acquire_recursive>
 800db8e:	bf00      	nop
 800db90:	20002080 	.word	0x20002080

0800db94 <__malloc_unlock>:
 800db94:	4801      	ldr	r0, [pc, #4]	; (800db9c <__malloc_unlock+0x8>)
 800db96:	f7ff befb 	b.w	800d990 <__retarget_lock_release_recursive>
 800db9a:	bf00      	nop
 800db9c:	20002080 	.word	0x20002080

0800dba0 <__sfputc_r>:
 800dba0:	6893      	ldr	r3, [r2, #8]
 800dba2:	3b01      	subs	r3, #1
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	b410      	push	{r4}
 800dba8:	6093      	str	r3, [r2, #8]
 800dbaa:	da08      	bge.n	800dbbe <__sfputc_r+0x1e>
 800dbac:	6994      	ldr	r4, [r2, #24]
 800dbae:	42a3      	cmp	r3, r4
 800dbb0:	db01      	blt.n	800dbb6 <__sfputc_r+0x16>
 800dbb2:	290a      	cmp	r1, #10
 800dbb4:	d103      	bne.n	800dbbe <__sfputc_r+0x1e>
 800dbb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbba:	f000 bb73 	b.w	800e2a4 <__swbuf_r>
 800dbbe:	6813      	ldr	r3, [r2, #0]
 800dbc0:	1c58      	adds	r0, r3, #1
 800dbc2:	6010      	str	r0, [r2, #0]
 800dbc4:	7019      	strb	r1, [r3, #0]
 800dbc6:	4608      	mov	r0, r1
 800dbc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <__sfputs_r>:
 800dbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd0:	4606      	mov	r6, r0
 800dbd2:	460f      	mov	r7, r1
 800dbd4:	4614      	mov	r4, r2
 800dbd6:	18d5      	adds	r5, r2, r3
 800dbd8:	42ac      	cmp	r4, r5
 800dbda:	d101      	bne.n	800dbe0 <__sfputs_r+0x12>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	e007      	b.n	800dbf0 <__sfputs_r+0x22>
 800dbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe4:	463a      	mov	r2, r7
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	f7ff ffda 	bl	800dba0 <__sfputc_r>
 800dbec:	1c43      	adds	r3, r0, #1
 800dbee:	d1f3      	bne.n	800dbd8 <__sfputs_r+0xa>
 800dbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbf4 <_vfiprintf_r>:
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	b09d      	sub	sp, #116	; 0x74
 800dbfc:	4614      	mov	r4, r2
 800dbfe:	4698      	mov	r8, r3
 800dc00:	4606      	mov	r6, r0
 800dc02:	b118      	cbz	r0, 800dc0c <_vfiprintf_r+0x18>
 800dc04:	6a03      	ldr	r3, [r0, #32]
 800dc06:	b90b      	cbnz	r3, 800dc0c <_vfiprintf_r+0x18>
 800dc08:	f7ff fdbc 	bl	800d784 <__sinit>
 800dc0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc0e:	07d9      	lsls	r1, r3, #31
 800dc10:	d405      	bmi.n	800dc1e <_vfiprintf_r+0x2a>
 800dc12:	89ab      	ldrh	r3, [r5, #12]
 800dc14:	059a      	lsls	r2, r3, #22
 800dc16:	d402      	bmi.n	800dc1e <_vfiprintf_r+0x2a>
 800dc18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc1a:	f7ff feb8 	bl	800d98e <__retarget_lock_acquire_recursive>
 800dc1e:	89ab      	ldrh	r3, [r5, #12]
 800dc20:	071b      	lsls	r3, r3, #28
 800dc22:	d501      	bpl.n	800dc28 <_vfiprintf_r+0x34>
 800dc24:	692b      	ldr	r3, [r5, #16]
 800dc26:	b99b      	cbnz	r3, 800dc50 <_vfiprintf_r+0x5c>
 800dc28:	4629      	mov	r1, r5
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f000 fb78 	bl	800e320 <__swsetup_r>
 800dc30:	b170      	cbz	r0, 800dc50 <_vfiprintf_r+0x5c>
 800dc32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc34:	07dc      	lsls	r4, r3, #31
 800dc36:	d504      	bpl.n	800dc42 <_vfiprintf_r+0x4e>
 800dc38:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3c:	b01d      	add	sp, #116	; 0x74
 800dc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc42:	89ab      	ldrh	r3, [r5, #12]
 800dc44:	0598      	lsls	r0, r3, #22
 800dc46:	d4f7      	bmi.n	800dc38 <_vfiprintf_r+0x44>
 800dc48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc4a:	f7ff fea1 	bl	800d990 <__retarget_lock_release_recursive>
 800dc4e:	e7f3      	b.n	800dc38 <_vfiprintf_r+0x44>
 800dc50:	2300      	movs	r3, #0
 800dc52:	9309      	str	r3, [sp, #36]	; 0x24
 800dc54:	2320      	movs	r3, #32
 800dc56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc5e:	2330      	movs	r3, #48	; 0x30
 800dc60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800de14 <_vfiprintf_r+0x220>
 800dc64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc68:	f04f 0901 	mov.w	r9, #1
 800dc6c:	4623      	mov	r3, r4
 800dc6e:	469a      	mov	sl, r3
 800dc70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc74:	b10a      	cbz	r2, 800dc7a <_vfiprintf_r+0x86>
 800dc76:	2a25      	cmp	r2, #37	; 0x25
 800dc78:	d1f9      	bne.n	800dc6e <_vfiprintf_r+0x7a>
 800dc7a:	ebba 0b04 	subs.w	fp, sl, r4
 800dc7e:	d00b      	beq.n	800dc98 <_vfiprintf_r+0xa4>
 800dc80:	465b      	mov	r3, fp
 800dc82:	4622      	mov	r2, r4
 800dc84:	4629      	mov	r1, r5
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7ff ffa1 	bl	800dbce <__sfputs_r>
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	f000 80a9 	beq.w	800dde4 <_vfiprintf_r+0x1f0>
 800dc92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc94:	445a      	add	r2, fp
 800dc96:	9209      	str	r2, [sp, #36]	; 0x24
 800dc98:	f89a 3000 	ldrb.w	r3, [sl]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f000 80a1 	beq.w	800dde4 <_vfiprintf_r+0x1f0>
 800dca2:	2300      	movs	r3, #0
 800dca4:	f04f 32ff 	mov.w	r2, #4294967295
 800dca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcac:	f10a 0a01 	add.w	sl, sl, #1
 800dcb0:	9304      	str	r3, [sp, #16]
 800dcb2:	9307      	str	r3, [sp, #28]
 800dcb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcb8:	931a      	str	r3, [sp, #104]	; 0x68
 800dcba:	4654      	mov	r4, sl
 800dcbc:	2205      	movs	r2, #5
 800dcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc2:	4854      	ldr	r0, [pc, #336]	; (800de14 <_vfiprintf_r+0x220>)
 800dcc4:	f7f2 fa8c 	bl	80001e0 <memchr>
 800dcc8:	9a04      	ldr	r2, [sp, #16]
 800dcca:	b9d8      	cbnz	r0, 800dd04 <_vfiprintf_r+0x110>
 800dccc:	06d1      	lsls	r1, r2, #27
 800dcce:	bf44      	itt	mi
 800dcd0:	2320      	movmi	r3, #32
 800dcd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcd6:	0713      	lsls	r3, r2, #28
 800dcd8:	bf44      	itt	mi
 800dcda:	232b      	movmi	r3, #43	; 0x2b
 800dcdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dce0:	f89a 3000 	ldrb.w	r3, [sl]
 800dce4:	2b2a      	cmp	r3, #42	; 0x2a
 800dce6:	d015      	beq.n	800dd14 <_vfiprintf_r+0x120>
 800dce8:	9a07      	ldr	r2, [sp, #28]
 800dcea:	4654      	mov	r4, sl
 800dcec:	2000      	movs	r0, #0
 800dcee:	f04f 0c0a 	mov.w	ip, #10
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcf8:	3b30      	subs	r3, #48	; 0x30
 800dcfa:	2b09      	cmp	r3, #9
 800dcfc:	d94d      	bls.n	800dd9a <_vfiprintf_r+0x1a6>
 800dcfe:	b1b0      	cbz	r0, 800dd2e <_vfiprintf_r+0x13a>
 800dd00:	9207      	str	r2, [sp, #28]
 800dd02:	e014      	b.n	800dd2e <_vfiprintf_r+0x13a>
 800dd04:	eba0 0308 	sub.w	r3, r0, r8
 800dd08:	fa09 f303 	lsl.w	r3, r9, r3
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	9304      	str	r3, [sp, #16]
 800dd10:	46a2      	mov	sl, r4
 800dd12:	e7d2      	b.n	800dcba <_vfiprintf_r+0xc6>
 800dd14:	9b03      	ldr	r3, [sp, #12]
 800dd16:	1d19      	adds	r1, r3, #4
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	9103      	str	r1, [sp, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	bfbb      	ittet	lt
 800dd20:	425b      	neglt	r3, r3
 800dd22:	f042 0202 	orrlt.w	r2, r2, #2
 800dd26:	9307      	strge	r3, [sp, #28]
 800dd28:	9307      	strlt	r3, [sp, #28]
 800dd2a:	bfb8      	it	lt
 800dd2c:	9204      	strlt	r2, [sp, #16]
 800dd2e:	7823      	ldrb	r3, [r4, #0]
 800dd30:	2b2e      	cmp	r3, #46	; 0x2e
 800dd32:	d10c      	bne.n	800dd4e <_vfiprintf_r+0x15a>
 800dd34:	7863      	ldrb	r3, [r4, #1]
 800dd36:	2b2a      	cmp	r3, #42	; 0x2a
 800dd38:	d134      	bne.n	800dda4 <_vfiprintf_r+0x1b0>
 800dd3a:	9b03      	ldr	r3, [sp, #12]
 800dd3c:	1d1a      	adds	r2, r3, #4
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	9203      	str	r2, [sp, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	bfb8      	it	lt
 800dd46:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd4a:	3402      	adds	r4, #2
 800dd4c:	9305      	str	r3, [sp, #20]
 800dd4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800de24 <_vfiprintf_r+0x230>
 800dd52:	7821      	ldrb	r1, [r4, #0]
 800dd54:	2203      	movs	r2, #3
 800dd56:	4650      	mov	r0, sl
 800dd58:	f7f2 fa42 	bl	80001e0 <memchr>
 800dd5c:	b138      	cbz	r0, 800dd6e <_vfiprintf_r+0x17a>
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	eba0 000a 	sub.w	r0, r0, sl
 800dd64:	2240      	movs	r2, #64	; 0x40
 800dd66:	4082      	lsls	r2, r0
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	3401      	adds	r4, #1
 800dd6c:	9304      	str	r3, [sp, #16]
 800dd6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd72:	4829      	ldr	r0, [pc, #164]	; (800de18 <_vfiprintf_r+0x224>)
 800dd74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd78:	2206      	movs	r2, #6
 800dd7a:	f7f2 fa31 	bl	80001e0 <memchr>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d03f      	beq.n	800de02 <_vfiprintf_r+0x20e>
 800dd82:	4b26      	ldr	r3, [pc, #152]	; (800de1c <_vfiprintf_r+0x228>)
 800dd84:	bb1b      	cbnz	r3, 800ddce <_vfiprintf_r+0x1da>
 800dd86:	9b03      	ldr	r3, [sp, #12]
 800dd88:	3307      	adds	r3, #7
 800dd8a:	f023 0307 	bic.w	r3, r3, #7
 800dd8e:	3308      	adds	r3, #8
 800dd90:	9303      	str	r3, [sp, #12]
 800dd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd94:	443b      	add	r3, r7
 800dd96:	9309      	str	r3, [sp, #36]	; 0x24
 800dd98:	e768      	b.n	800dc6c <_vfiprintf_r+0x78>
 800dd9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd9e:	460c      	mov	r4, r1
 800dda0:	2001      	movs	r0, #1
 800dda2:	e7a6      	b.n	800dcf2 <_vfiprintf_r+0xfe>
 800dda4:	2300      	movs	r3, #0
 800dda6:	3401      	adds	r4, #1
 800dda8:	9305      	str	r3, [sp, #20]
 800ddaa:	4619      	mov	r1, r3
 800ddac:	f04f 0c0a 	mov.w	ip, #10
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddb6:	3a30      	subs	r2, #48	; 0x30
 800ddb8:	2a09      	cmp	r2, #9
 800ddba:	d903      	bls.n	800ddc4 <_vfiprintf_r+0x1d0>
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d0c6      	beq.n	800dd4e <_vfiprintf_r+0x15a>
 800ddc0:	9105      	str	r1, [sp, #20]
 800ddc2:	e7c4      	b.n	800dd4e <_vfiprintf_r+0x15a>
 800ddc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddc8:	4604      	mov	r4, r0
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e7f0      	b.n	800ddb0 <_vfiprintf_r+0x1bc>
 800ddce:	ab03      	add	r3, sp, #12
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	462a      	mov	r2, r5
 800ddd4:	4b12      	ldr	r3, [pc, #72]	; (800de20 <_vfiprintf_r+0x22c>)
 800ddd6:	a904      	add	r1, sp, #16
 800ddd8:	4630      	mov	r0, r6
 800ddda:	f3af 8000 	nop.w
 800ddde:	4607      	mov	r7, r0
 800dde0:	1c78      	adds	r0, r7, #1
 800dde2:	d1d6      	bne.n	800dd92 <_vfiprintf_r+0x19e>
 800dde4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde6:	07d9      	lsls	r1, r3, #31
 800dde8:	d405      	bmi.n	800ddf6 <_vfiprintf_r+0x202>
 800ddea:	89ab      	ldrh	r3, [r5, #12]
 800ddec:	059a      	lsls	r2, r3, #22
 800ddee:	d402      	bmi.n	800ddf6 <_vfiprintf_r+0x202>
 800ddf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddf2:	f7ff fdcd 	bl	800d990 <__retarget_lock_release_recursive>
 800ddf6:	89ab      	ldrh	r3, [r5, #12]
 800ddf8:	065b      	lsls	r3, r3, #25
 800ddfa:	f53f af1d 	bmi.w	800dc38 <_vfiprintf_r+0x44>
 800ddfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de00:	e71c      	b.n	800dc3c <_vfiprintf_r+0x48>
 800de02:	ab03      	add	r3, sp, #12
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	462a      	mov	r2, r5
 800de08:	4b05      	ldr	r3, [pc, #20]	; (800de20 <_vfiprintf_r+0x22c>)
 800de0a:	a904      	add	r1, sp, #16
 800de0c:	4630      	mov	r0, r6
 800de0e:	f000 f879 	bl	800df04 <_printf_i>
 800de12:	e7e4      	b.n	800ddde <_vfiprintf_r+0x1ea>
 800de14:	0800e6a4 	.word	0x0800e6a4
 800de18:	0800e6ae 	.word	0x0800e6ae
 800de1c:	00000000 	.word	0x00000000
 800de20:	0800dbcf 	.word	0x0800dbcf
 800de24:	0800e6aa 	.word	0x0800e6aa

0800de28 <_printf_common>:
 800de28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de2c:	4616      	mov	r6, r2
 800de2e:	4699      	mov	r9, r3
 800de30:	688a      	ldr	r2, [r1, #8]
 800de32:	690b      	ldr	r3, [r1, #16]
 800de34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de38:	4293      	cmp	r3, r2
 800de3a:	bfb8      	it	lt
 800de3c:	4613      	movlt	r3, r2
 800de3e:	6033      	str	r3, [r6, #0]
 800de40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de44:	4607      	mov	r7, r0
 800de46:	460c      	mov	r4, r1
 800de48:	b10a      	cbz	r2, 800de4e <_printf_common+0x26>
 800de4a:	3301      	adds	r3, #1
 800de4c:	6033      	str	r3, [r6, #0]
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	0699      	lsls	r1, r3, #26
 800de52:	bf42      	ittt	mi
 800de54:	6833      	ldrmi	r3, [r6, #0]
 800de56:	3302      	addmi	r3, #2
 800de58:	6033      	strmi	r3, [r6, #0]
 800de5a:	6825      	ldr	r5, [r4, #0]
 800de5c:	f015 0506 	ands.w	r5, r5, #6
 800de60:	d106      	bne.n	800de70 <_printf_common+0x48>
 800de62:	f104 0a19 	add.w	sl, r4, #25
 800de66:	68e3      	ldr	r3, [r4, #12]
 800de68:	6832      	ldr	r2, [r6, #0]
 800de6a:	1a9b      	subs	r3, r3, r2
 800de6c:	42ab      	cmp	r3, r5
 800de6e:	dc26      	bgt.n	800debe <_printf_common+0x96>
 800de70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de74:	1e13      	subs	r3, r2, #0
 800de76:	6822      	ldr	r2, [r4, #0]
 800de78:	bf18      	it	ne
 800de7a:	2301      	movne	r3, #1
 800de7c:	0692      	lsls	r2, r2, #26
 800de7e:	d42b      	bmi.n	800ded8 <_printf_common+0xb0>
 800de80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de84:	4649      	mov	r1, r9
 800de86:	4638      	mov	r0, r7
 800de88:	47c0      	blx	r8
 800de8a:	3001      	adds	r0, #1
 800de8c:	d01e      	beq.n	800decc <_printf_common+0xa4>
 800de8e:	6823      	ldr	r3, [r4, #0]
 800de90:	6922      	ldr	r2, [r4, #16]
 800de92:	f003 0306 	and.w	r3, r3, #6
 800de96:	2b04      	cmp	r3, #4
 800de98:	bf02      	ittt	eq
 800de9a:	68e5      	ldreq	r5, [r4, #12]
 800de9c:	6833      	ldreq	r3, [r6, #0]
 800de9e:	1aed      	subeq	r5, r5, r3
 800dea0:	68a3      	ldr	r3, [r4, #8]
 800dea2:	bf0c      	ite	eq
 800dea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dea8:	2500      	movne	r5, #0
 800deaa:	4293      	cmp	r3, r2
 800deac:	bfc4      	itt	gt
 800deae:	1a9b      	subgt	r3, r3, r2
 800deb0:	18ed      	addgt	r5, r5, r3
 800deb2:	2600      	movs	r6, #0
 800deb4:	341a      	adds	r4, #26
 800deb6:	42b5      	cmp	r5, r6
 800deb8:	d11a      	bne.n	800def0 <_printf_common+0xc8>
 800deba:	2000      	movs	r0, #0
 800debc:	e008      	b.n	800ded0 <_printf_common+0xa8>
 800debe:	2301      	movs	r3, #1
 800dec0:	4652      	mov	r2, sl
 800dec2:	4649      	mov	r1, r9
 800dec4:	4638      	mov	r0, r7
 800dec6:	47c0      	blx	r8
 800dec8:	3001      	adds	r0, #1
 800deca:	d103      	bne.n	800ded4 <_printf_common+0xac>
 800decc:	f04f 30ff 	mov.w	r0, #4294967295
 800ded0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded4:	3501      	adds	r5, #1
 800ded6:	e7c6      	b.n	800de66 <_printf_common+0x3e>
 800ded8:	18e1      	adds	r1, r4, r3
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	2030      	movs	r0, #48	; 0x30
 800dede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dee2:	4422      	add	r2, r4
 800dee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800deec:	3302      	adds	r3, #2
 800deee:	e7c7      	b.n	800de80 <_printf_common+0x58>
 800def0:	2301      	movs	r3, #1
 800def2:	4622      	mov	r2, r4
 800def4:	4649      	mov	r1, r9
 800def6:	4638      	mov	r0, r7
 800def8:	47c0      	blx	r8
 800defa:	3001      	adds	r0, #1
 800defc:	d0e6      	beq.n	800decc <_printf_common+0xa4>
 800defe:	3601      	adds	r6, #1
 800df00:	e7d9      	b.n	800deb6 <_printf_common+0x8e>
	...

0800df04 <_printf_i>:
 800df04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df08:	7e0f      	ldrb	r7, [r1, #24]
 800df0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df0c:	2f78      	cmp	r7, #120	; 0x78
 800df0e:	4691      	mov	r9, r2
 800df10:	4680      	mov	r8, r0
 800df12:	460c      	mov	r4, r1
 800df14:	469a      	mov	sl, r3
 800df16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800df1a:	d807      	bhi.n	800df2c <_printf_i+0x28>
 800df1c:	2f62      	cmp	r7, #98	; 0x62
 800df1e:	d80a      	bhi.n	800df36 <_printf_i+0x32>
 800df20:	2f00      	cmp	r7, #0
 800df22:	f000 80d4 	beq.w	800e0ce <_printf_i+0x1ca>
 800df26:	2f58      	cmp	r7, #88	; 0x58
 800df28:	f000 80c0 	beq.w	800e0ac <_printf_i+0x1a8>
 800df2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df34:	e03a      	b.n	800dfac <_printf_i+0xa8>
 800df36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df3a:	2b15      	cmp	r3, #21
 800df3c:	d8f6      	bhi.n	800df2c <_printf_i+0x28>
 800df3e:	a101      	add	r1, pc, #4	; (adr r1, 800df44 <_printf_i+0x40>)
 800df40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df44:	0800df9d 	.word	0x0800df9d
 800df48:	0800dfb1 	.word	0x0800dfb1
 800df4c:	0800df2d 	.word	0x0800df2d
 800df50:	0800df2d 	.word	0x0800df2d
 800df54:	0800df2d 	.word	0x0800df2d
 800df58:	0800df2d 	.word	0x0800df2d
 800df5c:	0800dfb1 	.word	0x0800dfb1
 800df60:	0800df2d 	.word	0x0800df2d
 800df64:	0800df2d 	.word	0x0800df2d
 800df68:	0800df2d 	.word	0x0800df2d
 800df6c:	0800df2d 	.word	0x0800df2d
 800df70:	0800e0b5 	.word	0x0800e0b5
 800df74:	0800dfdd 	.word	0x0800dfdd
 800df78:	0800e06f 	.word	0x0800e06f
 800df7c:	0800df2d 	.word	0x0800df2d
 800df80:	0800df2d 	.word	0x0800df2d
 800df84:	0800e0d7 	.word	0x0800e0d7
 800df88:	0800df2d 	.word	0x0800df2d
 800df8c:	0800dfdd 	.word	0x0800dfdd
 800df90:	0800df2d 	.word	0x0800df2d
 800df94:	0800df2d 	.word	0x0800df2d
 800df98:	0800e077 	.word	0x0800e077
 800df9c:	682b      	ldr	r3, [r5, #0]
 800df9e:	1d1a      	adds	r2, r3, #4
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	602a      	str	r2, [r5, #0]
 800dfa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfac:	2301      	movs	r3, #1
 800dfae:	e09f      	b.n	800e0f0 <_printf_i+0x1ec>
 800dfb0:	6820      	ldr	r0, [r4, #0]
 800dfb2:	682b      	ldr	r3, [r5, #0]
 800dfb4:	0607      	lsls	r7, r0, #24
 800dfb6:	f103 0104 	add.w	r1, r3, #4
 800dfba:	6029      	str	r1, [r5, #0]
 800dfbc:	d501      	bpl.n	800dfc2 <_printf_i+0xbe>
 800dfbe:	681e      	ldr	r6, [r3, #0]
 800dfc0:	e003      	b.n	800dfca <_printf_i+0xc6>
 800dfc2:	0646      	lsls	r6, r0, #25
 800dfc4:	d5fb      	bpl.n	800dfbe <_printf_i+0xba>
 800dfc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dfca:	2e00      	cmp	r6, #0
 800dfcc:	da03      	bge.n	800dfd6 <_printf_i+0xd2>
 800dfce:	232d      	movs	r3, #45	; 0x2d
 800dfd0:	4276      	negs	r6, r6
 800dfd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfd6:	485a      	ldr	r0, [pc, #360]	; (800e140 <_printf_i+0x23c>)
 800dfd8:	230a      	movs	r3, #10
 800dfda:	e012      	b.n	800e002 <_printf_i+0xfe>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	6820      	ldr	r0, [r4, #0]
 800dfe0:	1d19      	adds	r1, r3, #4
 800dfe2:	6029      	str	r1, [r5, #0]
 800dfe4:	0605      	lsls	r5, r0, #24
 800dfe6:	d501      	bpl.n	800dfec <_printf_i+0xe8>
 800dfe8:	681e      	ldr	r6, [r3, #0]
 800dfea:	e002      	b.n	800dff2 <_printf_i+0xee>
 800dfec:	0641      	lsls	r1, r0, #25
 800dfee:	d5fb      	bpl.n	800dfe8 <_printf_i+0xe4>
 800dff0:	881e      	ldrh	r6, [r3, #0]
 800dff2:	4853      	ldr	r0, [pc, #332]	; (800e140 <_printf_i+0x23c>)
 800dff4:	2f6f      	cmp	r7, #111	; 0x6f
 800dff6:	bf0c      	ite	eq
 800dff8:	2308      	moveq	r3, #8
 800dffa:	230a      	movne	r3, #10
 800dffc:	2100      	movs	r1, #0
 800dffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e002:	6865      	ldr	r5, [r4, #4]
 800e004:	60a5      	str	r5, [r4, #8]
 800e006:	2d00      	cmp	r5, #0
 800e008:	bfa2      	ittt	ge
 800e00a:	6821      	ldrge	r1, [r4, #0]
 800e00c:	f021 0104 	bicge.w	r1, r1, #4
 800e010:	6021      	strge	r1, [r4, #0]
 800e012:	b90e      	cbnz	r6, 800e018 <_printf_i+0x114>
 800e014:	2d00      	cmp	r5, #0
 800e016:	d04b      	beq.n	800e0b0 <_printf_i+0x1ac>
 800e018:	4615      	mov	r5, r2
 800e01a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e01e:	fb03 6711 	mls	r7, r3, r1, r6
 800e022:	5dc7      	ldrb	r7, [r0, r7]
 800e024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e028:	4637      	mov	r7, r6
 800e02a:	42bb      	cmp	r3, r7
 800e02c:	460e      	mov	r6, r1
 800e02e:	d9f4      	bls.n	800e01a <_printf_i+0x116>
 800e030:	2b08      	cmp	r3, #8
 800e032:	d10b      	bne.n	800e04c <_printf_i+0x148>
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	07de      	lsls	r6, r3, #31
 800e038:	d508      	bpl.n	800e04c <_printf_i+0x148>
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	6861      	ldr	r1, [r4, #4]
 800e03e:	4299      	cmp	r1, r3
 800e040:	bfde      	ittt	le
 800e042:	2330      	movle	r3, #48	; 0x30
 800e044:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e04c:	1b52      	subs	r2, r2, r5
 800e04e:	6122      	str	r2, [r4, #16]
 800e050:	f8cd a000 	str.w	sl, [sp]
 800e054:	464b      	mov	r3, r9
 800e056:	aa03      	add	r2, sp, #12
 800e058:	4621      	mov	r1, r4
 800e05a:	4640      	mov	r0, r8
 800e05c:	f7ff fee4 	bl	800de28 <_printf_common>
 800e060:	3001      	adds	r0, #1
 800e062:	d14a      	bne.n	800e0fa <_printf_i+0x1f6>
 800e064:	f04f 30ff 	mov.w	r0, #4294967295
 800e068:	b004      	add	sp, #16
 800e06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	f043 0320 	orr.w	r3, r3, #32
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	4833      	ldr	r0, [pc, #204]	; (800e144 <_printf_i+0x240>)
 800e078:	2778      	movs	r7, #120	; 0x78
 800e07a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e07e:	6823      	ldr	r3, [r4, #0]
 800e080:	6829      	ldr	r1, [r5, #0]
 800e082:	061f      	lsls	r7, r3, #24
 800e084:	f851 6b04 	ldr.w	r6, [r1], #4
 800e088:	d402      	bmi.n	800e090 <_printf_i+0x18c>
 800e08a:	065f      	lsls	r7, r3, #25
 800e08c:	bf48      	it	mi
 800e08e:	b2b6      	uxthmi	r6, r6
 800e090:	07df      	lsls	r7, r3, #31
 800e092:	bf48      	it	mi
 800e094:	f043 0320 	orrmi.w	r3, r3, #32
 800e098:	6029      	str	r1, [r5, #0]
 800e09a:	bf48      	it	mi
 800e09c:	6023      	strmi	r3, [r4, #0]
 800e09e:	b91e      	cbnz	r6, 800e0a8 <_printf_i+0x1a4>
 800e0a0:	6823      	ldr	r3, [r4, #0]
 800e0a2:	f023 0320 	bic.w	r3, r3, #32
 800e0a6:	6023      	str	r3, [r4, #0]
 800e0a8:	2310      	movs	r3, #16
 800e0aa:	e7a7      	b.n	800dffc <_printf_i+0xf8>
 800e0ac:	4824      	ldr	r0, [pc, #144]	; (800e140 <_printf_i+0x23c>)
 800e0ae:	e7e4      	b.n	800e07a <_printf_i+0x176>
 800e0b0:	4615      	mov	r5, r2
 800e0b2:	e7bd      	b.n	800e030 <_printf_i+0x12c>
 800e0b4:	682b      	ldr	r3, [r5, #0]
 800e0b6:	6826      	ldr	r6, [r4, #0]
 800e0b8:	6961      	ldr	r1, [r4, #20]
 800e0ba:	1d18      	adds	r0, r3, #4
 800e0bc:	6028      	str	r0, [r5, #0]
 800e0be:	0635      	lsls	r5, r6, #24
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	d501      	bpl.n	800e0c8 <_printf_i+0x1c4>
 800e0c4:	6019      	str	r1, [r3, #0]
 800e0c6:	e002      	b.n	800e0ce <_printf_i+0x1ca>
 800e0c8:	0670      	lsls	r0, r6, #25
 800e0ca:	d5fb      	bpl.n	800e0c4 <_printf_i+0x1c0>
 800e0cc:	8019      	strh	r1, [r3, #0]
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	6123      	str	r3, [r4, #16]
 800e0d2:	4615      	mov	r5, r2
 800e0d4:	e7bc      	b.n	800e050 <_printf_i+0x14c>
 800e0d6:	682b      	ldr	r3, [r5, #0]
 800e0d8:	1d1a      	adds	r2, r3, #4
 800e0da:	602a      	str	r2, [r5, #0]
 800e0dc:	681d      	ldr	r5, [r3, #0]
 800e0de:	6862      	ldr	r2, [r4, #4]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f7f2 f87c 	bl	80001e0 <memchr>
 800e0e8:	b108      	cbz	r0, 800e0ee <_printf_i+0x1ea>
 800e0ea:	1b40      	subs	r0, r0, r5
 800e0ec:	6060      	str	r0, [r4, #4]
 800e0ee:	6863      	ldr	r3, [r4, #4]
 800e0f0:	6123      	str	r3, [r4, #16]
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0f8:	e7aa      	b.n	800e050 <_printf_i+0x14c>
 800e0fa:	6923      	ldr	r3, [r4, #16]
 800e0fc:	462a      	mov	r2, r5
 800e0fe:	4649      	mov	r1, r9
 800e100:	4640      	mov	r0, r8
 800e102:	47d0      	blx	sl
 800e104:	3001      	adds	r0, #1
 800e106:	d0ad      	beq.n	800e064 <_printf_i+0x160>
 800e108:	6823      	ldr	r3, [r4, #0]
 800e10a:	079b      	lsls	r3, r3, #30
 800e10c:	d413      	bmi.n	800e136 <_printf_i+0x232>
 800e10e:	68e0      	ldr	r0, [r4, #12]
 800e110:	9b03      	ldr	r3, [sp, #12]
 800e112:	4298      	cmp	r0, r3
 800e114:	bfb8      	it	lt
 800e116:	4618      	movlt	r0, r3
 800e118:	e7a6      	b.n	800e068 <_printf_i+0x164>
 800e11a:	2301      	movs	r3, #1
 800e11c:	4632      	mov	r2, r6
 800e11e:	4649      	mov	r1, r9
 800e120:	4640      	mov	r0, r8
 800e122:	47d0      	blx	sl
 800e124:	3001      	adds	r0, #1
 800e126:	d09d      	beq.n	800e064 <_printf_i+0x160>
 800e128:	3501      	adds	r5, #1
 800e12a:	68e3      	ldr	r3, [r4, #12]
 800e12c:	9903      	ldr	r1, [sp, #12]
 800e12e:	1a5b      	subs	r3, r3, r1
 800e130:	42ab      	cmp	r3, r5
 800e132:	dcf2      	bgt.n	800e11a <_printf_i+0x216>
 800e134:	e7eb      	b.n	800e10e <_printf_i+0x20a>
 800e136:	2500      	movs	r5, #0
 800e138:	f104 0619 	add.w	r6, r4, #25
 800e13c:	e7f5      	b.n	800e12a <_printf_i+0x226>
 800e13e:	bf00      	nop
 800e140:	0800e6b5 	.word	0x0800e6b5
 800e144:	0800e6c6 	.word	0x0800e6c6

0800e148 <__sflush_r>:
 800e148:	898a      	ldrh	r2, [r1, #12]
 800e14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e14e:	4605      	mov	r5, r0
 800e150:	0710      	lsls	r0, r2, #28
 800e152:	460c      	mov	r4, r1
 800e154:	d458      	bmi.n	800e208 <__sflush_r+0xc0>
 800e156:	684b      	ldr	r3, [r1, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	dc05      	bgt.n	800e168 <__sflush_r+0x20>
 800e15c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e15e:	2b00      	cmp	r3, #0
 800e160:	dc02      	bgt.n	800e168 <__sflush_r+0x20>
 800e162:	2000      	movs	r0, #0
 800e164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e16a:	2e00      	cmp	r6, #0
 800e16c:	d0f9      	beq.n	800e162 <__sflush_r+0x1a>
 800e16e:	2300      	movs	r3, #0
 800e170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e174:	682f      	ldr	r7, [r5, #0]
 800e176:	6a21      	ldr	r1, [r4, #32]
 800e178:	602b      	str	r3, [r5, #0]
 800e17a:	d032      	beq.n	800e1e2 <__sflush_r+0x9a>
 800e17c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e17e:	89a3      	ldrh	r3, [r4, #12]
 800e180:	075a      	lsls	r2, r3, #29
 800e182:	d505      	bpl.n	800e190 <__sflush_r+0x48>
 800e184:	6863      	ldr	r3, [r4, #4]
 800e186:	1ac0      	subs	r0, r0, r3
 800e188:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e18a:	b10b      	cbz	r3, 800e190 <__sflush_r+0x48>
 800e18c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e18e:	1ac0      	subs	r0, r0, r3
 800e190:	2300      	movs	r3, #0
 800e192:	4602      	mov	r2, r0
 800e194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e196:	6a21      	ldr	r1, [r4, #32]
 800e198:	4628      	mov	r0, r5
 800e19a:	47b0      	blx	r6
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	89a3      	ldrh	r3, [r4, #12]
 800e1a0:	d106      	bne.n	800e1b0 <__sflush_r+0x68>
 800e1a2:	6829      	ldr	r1, [r5, #0]
 800e1a4:	291d      	cmp	r1, #29
 800e1a6:	d82b      	bhi.n	800e200 <__sflush_r+0xb8>
 800e1a8:	4a29      	ldr	r2, [pc, #164]	; (800e250 <__sflush_r+0x108>)
 800e1aa:	410a      	asrs	r2, r1
 800e1ac:	07d6      	lsls	r6, r2, #31
 800e1ae:	d427      	bmi.n	800e200 <__sflush_r+0xb8>
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	6062      	str	r2, [r4, #4]
 800e1b4:	04d9      	lsls	r1, r3, #19
 800e1b6:	6922      	ldr	r2, [r4, #16]
 800e1b8:	6022      	str	r2, [r4, #0]
 800e1ba:	d504      	bpl.n	800e1c6 <__sflush_r+0x7e>
 800e1bc:	1c42      	adds	r2, r0, #1
 800e1be:	d101      	bne.n	800e1c4 <__sflush_r+0x7c>
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	b903      	cbnz	r3, 800e1c6 <__sflush_r+0x7e>
 800e1c4:	6560      	str	r0, [r4, #84]	; 0x54
 800e1c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1c8:	602f      	str	r7, [r5, #0]
 800e1ca:	2900      	cmp	r1, #0
 800e1cc:	d0c9      	beq.n	800e162 <__sflush_r+0x1a>
 800e1ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1d2:	4299      	cmp	r1, r3
 800e1d4:	d002      	beq.n	800e1dc <__sflush_r+0x94>
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	f7ff fbea 	bl	800d9b0 <_free_r>
 800e1dc:	2000      	movs	r0, #0
 800e1de:	6360      	str	r0, [r4, #52]	; 0x34
 800e1e0:	e7c0      	b.n	800e164 <__sflush_r+0x1c>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	47b0      	blx	r6
 800e1e8:	1c41      	adds	r1, r0, #1
 800e1ea:	d1c8      	bne.n	800e17e <__sflush_r+0x36>
 800e1ec:	682b      	ldr	r3, [r5, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d0c5      	beq.n	800e17e <__sflush_r+0x36>
 800e1f2:	2b1d      	cmp	r3, #29
 800e1f4:	d001      	beq.n	800e1fa <__sflush_r+0xb2>
 800e1f6:	2b16      	cmp	r3, #22
 800e1f8:	d101      	bne.n	800e1fe <__sflush_r+0xb6>
 800e1fa:	602f      	str	r7, [r5, #0]
 800e1fc:	e7b1      	b.n	800e162 <__sflush_r+0x1a>
 800e1fe:	89a3      	ldrh	r3, [r4, #12]
 800e200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e204:	81a3      	strh	r3, [r4, #12]
 800e206:	e7ad      	b.n	800e164 <__sflush_r+0x1c>
 800e208:	690f      	ldr	r7, [r1, #16]
 800e20a:	2f00      	cmp	r7, #0
 800e20c:	d0a9      	beq.n	800e162 <__sflush_r+0x1a>
 800e20e:	0793      	lsls	r3, r2, #30
 800e210:	680e      	ldr	r6, [r1, #0]
 800e212:	bf08      	it	eq
 800e214:	694b      	ldreq	r3, [r1, #20]
 800e216:	600f      	str	r7, [r1, #0]
 800e218:	bf18      	it	ne
 800e21a:	2300      	movne	r3, #0
 800e21c:	eba6 0807 	sub.w	r8, r6, r7
 800e220:	608b      	str	r3, [r1, #8]
 800e222:	f1b8 0f00 	cmp.w	r8, #0
 800e226:	dd9c      	ble.n	800e162 <__sflush_r+0x1a>
 800e228:	6a21      	ldr	r1, [r4, #32]
 800e22a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e22c:	4643      	mov	r3, r8
 800e22e:	463a      	mov	r2, r7
 800e230:	4628      	mov	r0, r5
 800e232:	47b0      	blx	r6
 800e234:	2800      	cmp	r0, #0
 800e236:	dc06      	bgt.n	800e246 <__sflush_r+0xfe>
 800e238:	89a3      	ldrh	r3, [r4, #12]
 800e23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e23e:	81a3      	strh	r3, [r4, #12]
 800e240:	f04f 30ff 	mov.w	r0, #4294967295
 800e244:	e78e      	b.n	800e164 <__sflush_r+0x1c>
 800e246:	4407      	add	r7, r0
 800e248:	eba8 0800 	sub.w	r8, r8, r0
 800e24c:	e7e9      	b.n	800e222 <__sflush_r+0xda>
 800e24e:	bf00      	nop
 800e250:	dfbffffe 	.word	0xdfbffffe

0800e254 <_fflush_r>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	690b      	ldr	r3, [r1, #16]
 800e258:	4605      	mov	r5, r0
 800e25a:	460c      	mov	r4, r1
 800e25c:	b913      	cbnz	r3, 800e264 <_fflush_r+0x10>
 800e25e:	2500      	movs	r5, #0
 800e260:	4628      	mov	r0, r5
 800e262:	bd38      	pop	{r3, r4, r5, pc}
 800e264:	b118      	cbz	r0, 800e26e <_fflush_r+0x1a>
 800e266:	6a03      	ldr	r3, [r0, #32]
 800e268:	b90b      	cbnz	r3, 800e26e <_fflush_r+0x1a>
 800e26a:	f7ff fa8b 	bl	800d784 <__sinit>
 800e26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d0f3      	beq.n	800e25e <_fflush_r+0xa>
 800e276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e278:	07d0      	lsls	r0, r2, #31
 800e27a:	d404      	bmi.n	800e286 <_fflush_r+0x32>
 800e27c:	0599      	lsls	r1, r3, #22
 800e27e:	d402      	bmi.n	800e286 <_fflush_r+0x32>
 800e280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e282:	f7ff fb84 	bl	800d98e <__retarget_lock_acquire_recursive>
 800e286:	4628      	mov	r0, r5
 800e288:	4621      	mov	r1, r4
 800e28a:	f7ff ff5d 	bl	800e148 <__sflush_r>
 800e28e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e290:	07da      	lsls	r2, r3, #31
 800e292:	4605      	mov	r5, r0
 800e294:	d4e4      	bmi.n	800e260 <_fflush_r+0xc>
 800e296:	89a3      	ldrh	r3, [r4, #12]
 800e298:	059b      	lsls	r3, r3, #22
 800e29a:	d4e1      	bmi.n	800e260 <_fflush_r+0xc>
 800e29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e29e:	f7ff fb77 	bl	800d990 <__retarget_lock_release_recursive>
 800e2a2:	e7dd      	b.n	800e260 <_fflush_r+0xc>

0800e2a4 <__swbuf_r>:
 800e2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a6:	460e      	mov	r6, r1
 800e2a8:	4614      	mov	r4, r2
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	b118      	cbz	r0, 800e2b6 <__swbuf_r+0x12>
 800e2ae:	6a03      	ldr	r3, [r0, #32]
 800e2b0:	b90b      	cbnz	r3, 800e2b6 <__swbuf_r+0x12>
 800e2b2:	f7ff fa67 	bl	800d784 <__sinit>
 800e2b6:	69a3      	ldr	r3, [r4, #24]
 800e2b8:	60a3      	str	r3, [r4, #8]
 800e2ba:	89a3      	ldrh	r3, [r4, #12]
 800e2bc:	071a      	lsls	r2, r3, #28
 800e2be:	d525      	bpl.n	800e30c <__swbuf_r+0x68>
 800e2c0:	6923      	ldr	r3, [r4, #16]
 800e2c2:	b31b      	cbz	r3, 800e30c <__swbuf_r+0x68>
 800e2c4:	6823      	ldr	r3, [r4, #0]
 800e2c6:	6922      	ldr	r2, [r4, #16]
 800e2c8:	1a98      	subs	r0, r3, r2
 800e2ca:	6963      	ldr	r3, [r4, #20]
 800e2cc:	b2f6      	uxtb	r6, r6
 800e2ce:	4283      	cmp	r3, r0
 800e2d0:	4637      	mov	r7, r6
 800e2d2:	dc04      	bgt.n	800e2de <__swbuf_r+0x3a>
 800e2d4:	4621      	mov	r1, r4
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f7ff ffbc 	bl	800e254 <_fflush_r>
 800e2dc:	b9e0      	cbnz	r0, 800e318 <__swbuf_r+0x74>
 800e2de:	68a3      	ldr	r3, [r4, #8]
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	60a3      	str	r3, [r4, #8]
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	1c5a      	adds	r2, r3, #1
 800e2e8:	6022      	str	r2, [r4, #0]
 800e2ea:	701e      	strb	r6, [r3, #0]
 800e2ec:	6962      	ldr	r2, [r4, #20]
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d004      	beq.n	800e2fe <__swbuf_r+0x5a>
 800e2f4:	89a3      	ldrh	r3, [r4, #12]
 800e2f6:	07db      	lsls	r3, r3, #31
 800e2f8:	d506      	bpl.n	800e308 <__swbuf_r+0x64>
 800e2fa:	2e0a      	cmp	r6, #10
 800e2fc:	d104      	bne.n	800e308 <__swbuf_r+0x64>
 800e2fe:	4621      	mov	r1, r4
 800e300:	4628      	mov	r0, r5
 800e302:	f7ff ffa7 	bl	800e254 <_fflush_r>
 800e306:	b938      	cbnz	r0, 800e318 <__swbuf_r+0x74>
 800e308:	4638      	mov	r0, r7
 800e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e30c:	4621      	mov	r1, r4
 800e30e:	4628      	mov	r0, r5
 800e310:	f000 f806 	bl	800e320 <__swsetup_r>
 800e314:	2800      	cmp	r0, #0
 800e316:	d0d5      	beq.n	800e2c4 <__swbuf_r+0x20>
 800e318:	f04f 37ff 	mov.w	r7, #4294967295
 800e31c:	e7f4      	b.n	800e308 <__swbuf_r+0x64>
	...

0800e320 <__swsetup_r>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	4b2a      	ldr	r3, [pc, #168]	; (800e3cc <__swsetup_r+0xac>)
 800e324:	4605      	mov	r5, r0
 800e326:	6818      	ldr	r0, [r3, #0]
 800e328:	460c      	mov	r4, r1
 800e32a:	b118      	cbz	r0, 800e334 <__swsetup_r+0x14>
 800e32c:	6a03      	ldr	r3, [r0, #32]
 800e32e:	b90b      	cbnz	r3, 800e334 <__swsetup_r+0x14>
 800e330:	f7ff fa28 	bl	800d784 <__sinit>
 800e334:	89a3      	ldrh	r3, [r4, #12]
 800e336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e33a:	0718      	lsls	r0, r3, #28
 800e33c:	d422      	bmi.n	800e384 <__swsetup_r+0x64>
 800e33e:	06d9      	lsls	r1, r3, #27
 800e340:	d407      	bmi.n	800e352 <__swsetup_r+0x32>
 800e342:	2309      	movs	r3, #9
 800e344:	602b      	str	r3, [r5, #0]
 800e346:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e34a:	81a3      	strh	r3, [r4, #12]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	e034      	b.n	800e3bc <__swsetup_r+0x9c>
 800e352:	0758      	lsls	r0, r3, #29
 800e354:	d512      	bpl.n	800e37c <__swsetup_r+0x5c>
 800e356:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e358:	b141      	cbz	r1, 800e36c <__swsetup_r+0x4c>
 800e35a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e35e:	4299      	cmp	r1, r3
 800e360:	d002      	beq.n	800e368 <__swsetup_r+0x48>
 800e362:	4628      	mov	r0, r5
 800e364:	f7ff fb24 	bl	800d9b0 <_free_r>
 800e368:	2300      	movs	r3, #0
 800e36a:	6363      	str	r3, [r4, #52]	; 0x34
 800e36c:	89a3      	ldrh	r3, [r4, #12]
 800e36e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e372:	81a3      	strh	r3, [r4, #12]
 800e374:	2300      	movs	r3, #0
 800e376:	6063      	str	r3, [r4, #4]
 800e378:	6923      	ldr	r3, [r4, #16]
 800e37a:	6023      	str	r3, [r4, #0]
 800e37c:	89a3      	ldrh	r3, [r4, #12]
 800e37e:	f043 0308 	orr.w	r3, r3, #8
 800e382:	81a3      	strh	r3, [r4, #12]
 800e384:	6923      	ldr	r3, [r4, #16]
 800e386:	b94b      	cbnz	r3, 800e39c <__swsetup_r+0x7c>
 800e388:	89a3      	ldrh	r3, [r4, #12]
 800e38a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e38e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e392:	d003      	beq.n	800e39c <__swsetup_r+0x7c>
 800e394:	4621      	mov	r1, r4
 800e396:	4628      	mov	r0, r5
 800e398:	f000 f850 	bl	800e43c <__smakebuf_r>
 800e39c:	89a0      	ldrh	r0, [r4, #12]
 800e39e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3a2:	f010 0301 	ands.w	r3, r0, #1
 800e3a6:	d00a      	beq.n	800e3be <__swsetup_r+0x9e>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60a3      	str	r3, [r4, #8]
 800e3ac:	6963      	ldr	r3, [r4, #20]
 800e3ae:	425b      	negs	r3, r3
 800e3b0:	61a3      	str	r3, [r4, #24]
 800e3b2:	6923      	ldr	r3, [r4, #16]
 800e3b4:	b943      	cbnz	r3, 800e3c8 <__swsetup_r+0xa8>
 800e3b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3ba:	d1c4      	bne.n	800e346 <__swsetup_r+0x26>
 800e3bc:	bd38      	pop	{r3, r4, r5, pc}
 800e3be:	0781      	lsls	r1, r0, #30
 800e3c0:	bf58      	it	pl
 800e3c2:	6963      	ldrpl	r3, [r4, #20]
 800e3c4:	60a3      	str	r3, [r4, #8]
 800e3c6:	e7f4      	b.n	800e3b2 <__swsetup_r+0x92>
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	e7f7      	b.n	800e3bc <__swsetup_r+0x9c>
 800e3cc:	20000268 	.word	0x20000268

0800e3d0 <_sbrk_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4d06      	ldr	r5, [pc, #24]	; (800e3ec <_sbrk_r+0x1c>)
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	4608      	mov	r0, r1
 800e3da:	602b      	str	r3, [r5, #0]
 800e3dc:	f7f2 fccc 	bl	8000d78 <_sbrk>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d102      	bne.n	800e3ea <_sbrk_r+0x1a>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	b103      	cbz	r3, 800e3ea <_sbrk_r+0x1a>
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	2000207c 	.word	0x2000207c

0800e3f0 <__swhatbuf_r>:
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f8:	2900      	cmp	r1, #0
 800e3fa:	b096      	sub	sp, #88	; 0x58
 800e3fc:	4615      	mov	r5, r2
 800e3fe:	461e      	mov	r6, r3
 800e400:	da0d      	bge.n	800e41e <__swhatbuf_r+0x2e>
 800e402:	89a3      	ldrh	r3, [r4, #12]
 800e404:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e408:	f04f 0100 	mov.w	r1, #0
 800e40c:	bf0c      	ite	eq
 800e40e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e412:	2340      	movne	r3, #64	; 0x40
 800e414:	2000      	movs	r0, #0
 800e416:	6031      	str	r1, [r6, #0]
 800e418:	602b      	str	r3, [r5, #0]
 800e41a:	b016      	add	sp, #88	; 0x58
 800e41c:	bd70      	pop	{r4, r5, r6, pc}
 800e41e:	466a      	mov	r2, sp
 800e420:	f000 f848 	bl	800e4b4 <_fstat_r>
 800e424:	2800      	cmp	r0, #0
 800e426:	dbec      	blt.n	800e402 <__swhatbuf_r+0x12>
 800e428:	9901      	ldr	r1, [sp, #4]
 800e42a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e42e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e432:	4259      	negs	r1, r3
 800e434:	4159      	adcs	r1, r3
 800e436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e43a:	e7eb      	b.n	800e414 <__swhatbuf_r+0x24>

0800e43c <__smakebuf_r>:
 800e43c:	898b      	ldrh	r3, [r1, #12]
 800e43e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e440:	079d      	lsls	r5, r3, #30
 800e442:	4606      	mov	r6, r0
 800e444:	460c      	mov	r4, r1
 800e446:	d507      	bpl.n	800e458 <__smakebuf_r+0x1c>
 800e448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	6123      	str	r3, [r4, #16]
 800e450:	2301      	movs	r3, #1
 800e452:	6163      	str	r3, [r4, #20]
 800e454:	b002      	add	sp, #8
 800e456:	bd70      	pop	{r4, r5, r6, pc}
 800e458:	ab01      	add	r3, sp, #4
 800e45a:	466a      	mov	r2, sp
 800e45c:	f7ff ffc8 	bl	800e3f0 <__swhatbuf_r>
 800e460:	9900      	ldr	r1, [sp, #0]
 800e462:	4605      	mov	r5, r0
 800e464:	4630      	mov	r0, r6
 800e466:	f7ff fb0f 	bl	800da88 <_malloc_r>
 800e46a:	b948      	cbnz	r0, 800e480 <__smakebuf_r+0x44>
 800e46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e470:	059a      	lsls	r2, r3, #22
 800e472:	d4ef      	bmi.n	800e454 <__smakebuf_r+0x18>
 800e474:	f023 0303 	bic.w	r3, r3, #3
 800e478:	f043 0302 	orr.w	r3, r3, #2
 800e47c:	81a3      	strh	r3, [r4, #12]
 800e47e:	e7e3      	b.n	800e448 <__smakebuf_r+0xc>
 800e480:	89a3      	ldrh	r3, [r4, #12]
 800e482:	6020      	str	r0, [r4, #0]
 800e484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	9b00      	ldr	r3, [sp, #0]
 800e48c:	6163      	str	r3, [r4, #20]
 800e48e:	9b01      	ldr	r3, [sp, #4]
 800e490:	6120      	str	r0, [r4, #16]
 800e492:	b15b      	cbz	r3, 800e4ac <__smakebuf_r+0x70>
 800e494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e498:	4630      	mov	r0, r6
 800e49a:	f000 f81d 	bl	800e4d8 <_isatty_r>
 800e49e:	b128      	cbz	r0, 800e4ac <__smakebuf_r+0x70>
 800e4a0:	89a3      	ldrh	r3, [r4, #12]
 800e4a2:	f023 0303 	bic.w	r3, r3, #3
 800e4a6:	f043 0301 	orr.w	r3, r3, #1
 800e4aa:	81a3      	strh	r3, [r4, #12]
 800e4ac:	89a3      	ldrh	r3, [r4, #12]
 800e4ae:	431d      	orrs	r5, r3
 800e4b0:	81a5      	strh	r5, [r4, #12]
 800e4b2:	e7cf      	b.n	800e454 <__smakebuf_r+0x18>

0800e4b4 <_fstat_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	4d07      	ldr	r5, [pc, #28]	; (800e4d4 <_fstat_r+0x20>)
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	4611      	mov	r1, r2
 800e4c0:	602b      	str	r3, [r5, #0]
 800e4c2:	f7f2 fc30 	bl	8000d26 <_fstat>
 800e4c6:	1c43      	adds	r3, r0, #1
 800e4c8:	d102      	bne.n	800e4d0 <_fstat_r+0x1c>
 800e4ca:	682b      	ldr	r3, [r5, #0]
 800e4cc:	b103      	cbz	r3, 800e4d0 <_fstat_r+0x1c>
 800e4ce:	6023      	str	r3, [r4, #0]
 800e4d0:	bd38      	pop	{r3, r4, r5, pc}
 800e4d2:	bf00      	nop
 800e4d4:	2000207c 	.word	0x2000207c

0800e4d8 <_isatty_r>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	4d06      	ldr	r5, [pc, #24]	; (800e4f4 <_isatty_r+0x1c>)
 800e4dc:	2300      	movs	r3, #0
 800e4de:	4604      	mov	r4, r0
 800e4e0:	4608      	mov	r0, r1
 800e4e2:	602b      	str	r3, [r5, #0]
 800e4e4:	f7f2 fc2f 	bl	8000d46 <_isatty>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d102      	bne.n	800e4f2 <_isatty_r+0x1a>
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	b103      	cbz	r3, 800e4f2 <_isatty_r+0x1a>
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	bd38      	pop	{r3, r4, r5, pc}
 800e4f4:	2000207c 	.word	0x2000207c

0800e4f8 <_init>:
 800e4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fa:	bf00      	nop
 800e4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4fe:	bc08      	pop	{r3}
 800e500:	469e      	mov	lr, r3
 800e502:	4770      	bx	lr

0800e504 <_fini>:
 800e504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e506:	bf00      	nop
 800e508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e50a:	bc08      	pop	{r3}
 800e50c:	469e      	mov	lr, r3
 800e50e:	4770      	bx	lr
